
zephyr.elf:     file format elf32-littlearm


Disassembly of section text:

00000000 <_vector_table>:

	return 0;
}

void *z_get_fd_obj(int fd, const struct fd_op_vtable *vtable, int err)
{
   0:	20004ee0 	.word	0x20004ee0
   4:	000097e5 	.word	0x000097e5
	struct fd_entry *fd_entry;

	if (_check_fd(fd) < 0) {
   8:	0001043f 	.word	0x0001043f
   c:	00009639 	.word	0x00009639
		return NULL;
	}

	fd_entry = &fdtable[fd];

	if (vtable != NULL && fd_entry->vtable != vtable) {
  10:	00009639 	.word	0x00009639
  14:	00009639 	.word	0x00009639
  18:	00009639 	.word	0x00009639
  1c:	00009639 	.word	0x00009639
		errno = err;
		return NULL;
	}

	return fd_entry->obj;
  20:	00009639 	.word	0x00009639
}
  24:	00009639 	.word	0x00009639

#ifdef __cplusplus
extern "C" {
#endif

K_SYSCALL_DECLARE0(K_SYSCALL_Z_ERRNO, z_errno, int *)
  28:	00009639 	.word	0x00009639
		return NULL;
  2c:	00009121 	.word	0x00009121
		return NULL;
  30:	00009639 	.word	0x00009639
  34:	00009639 	.word	0x00009639
		post_ops_done = 1;
		sys_pm_notify_power_state_exit(pm_state);
		_sys_pm_power_state_exit_post_ops(pm_state);
	}

	return pm_state;
  38:	000090c9 	.word	0x000090c9
}
  3c:	00008c55 	.word	0x00008c55

00000040 <_irq_vector_table>:
		   sys_pm_policy_next_state(ticks) : forced_pm_state;
  40:	000097a5 0000b7f1 000097a5 000097a5     ................
		_sys_pm_power_state_exit_post_ops(pm_state);
  50:	000097a5 000097a5 000097a5 000097a5     ................
  60:	000097a5 000097a5 000108d7 000097a5     ................
  70:	000097a5 000097a5 000097a5 000097a5     ................
  80:	000097a5 000097a5 000097a5 000097a5     ................
  90:	0000be55 000097a5 000097a5 000097a5     U...............
  a0:	000097a5 000097a5 000097a5 000097a5     ................
  b0:	000097a5 000097a5 000097a5 000097a5     ................
  c0:	000097a5 000097a5 000097a5 000097a5     ................
  d0:	000097a5 000097a5 000097a5 000097a5     ................
  e0:	000097a5 000097a5 000097a5 000097a5     ................
  f0:	000097a5 000097a5 000097a5 000097a5     ................

Disassembly of section _TEXT_SECTION_NAME_2:

00000100 <__aeabi_ldivmod>:
     100:	b97b      	cbnz	r3, 122 <__aeabi_ldivmod+0x22>
     102:	b972      	cbnz	r2, 122 <__aeabi_ldivmod+0x22>
     104:	2900      	cmp	r1, #0
     106:	bfbe      	ittt	lt
     108:	2000      	movlt	r0, #0
     10a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
     10e:	e006      	blt.n	11e <__aeabi_ldivmod+0x1e>
     110:	bf08      	it	eq
     112:	2800      	cmpeq	r0, #0
     114:	bf1c      	itt	ne
     116:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
     11a:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     11e:	f000 b857 	b.w	1d0 <__aeabi_idiv0>
     122:	f1ad 0c08 	sub.w	ip, sp, #8
     126:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     12a:	2900      	cmp	r1, #0
     12c:	db09      	blt.n	142 <CONFIG_IDLE_STACK_SIZE+0x2>
     12e:	2b00      	cmp	r3, #0
     130:	db1a      	blt.n	168 <CONFIG_IDLE_STACK_SIZE+0x28>
     132:	f000 f84f 	bl	1d4 <__udivmoddi4>
     136:	f8dd e004 	ldr.w	lr, [sp, #4]
     13a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     13e:	b004      	add	sp, #16
     140:	4770      	bx	lr
     142:	4240      	negs	r0, r0
     144:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     148:	2b00      	cmp	r3, #0
     14a:	db1b      	blt.n	184 <CONFIG_IDLE_STACK_SIZE+0x44>
     14c:	f000 f842 	bl	1d4 <__udivmoddi4>
     150:	f8dd e004 	ldr.w	lr, [sp, #4]
     154:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     158:	b004      	add	sp, #16
     15a:	4240      	negs	r0, r0
     15c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     160:	4252      	negs	r2, r2
     162:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     166:	4770      	bx	lr
     168:	4252      	negs	r2, r2
     16a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     16e:	f000 f831 	bl	1d4 <__udivmoddi4>
     172:	f8dd e004 	ldr.w	lr, [sp, #4]
     176:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     17a:	b004      	add	sp, #16
     17c:	4240      	negs	r0, r0
     17e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     182:	4770      	bx	lr
     184:	4252      	negs	r2, r2
     186:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     18a:	f000 f823 	bl	1d4 <__udivmoddi4>
     18e:	f8dd e004 	ldr.w	lr, [sp, #4]
     192:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     196:	b004      	add	sp, #16
     198:	4252      	negs	r2, r2
     19a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     19e:	4770      	bx	lr

000001a0 <__aeabi_uldivmod>:
     1a0:	b953      	cbnz	r3, 1b8 <__aeabi_uldivmod+0x18>
     1a2:	b94a      	cbnz	r2, 1b8 <__aeabi_uldivmod+0x18>
     1a4:	2900      	cmp	r1, #0
     1a6:	bf08      	it	eq
     1a8:	2800      	cmpeq	r0, #0
     1aa:	bf1c      	itt	ne
     1ac:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     1b0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     1b4:	f000 b80c 	b.w	1d0 <__aeabi_idiv0>
     1b8:	f1ad 0c08 	sub.w	ip, sp, #8
     1bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     1c0:	f000 f808 	bl	1d4 <__udivmoddi4>
     1c4:	f8dd e004 	ldr.w	lr, [sp, #4]
     1c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     1cc:	b004      	add	sp, #16
     1ce:	4770      	bx	lr

000001d0 <__aeabi_idiv0>:
     1d0:	4770      	bx	lr
     1d2:	bf00      	nop

000001d4 <__udivmoddi4>:
     1d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     1d8:	9f09      	ldr	r7, [sp, #36]	; 0x24
     1da:	4615      	mov	r5, r2
     1dc:	4604      	mov	r4, r0
     1de:	468e      	mov	lr, r1
     1e0:	461e      	mov	r6, r3
     1e2:	2b00      	cmp	r3, #0
     1e4:	f040 80cc 	bne.w	380 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x80>
     1e8:	428a      	cmp	r2, r1
     1ea:	fab2 fc82 	clz	ip, r2
     1ee:	d94c      	bls.n	28a <__udivmoddi4+0xb6>
     1f0:	f1bc 0f00 	cmp.w	ip, #0
     1f4:	d00b      	beq.n	20e <__udivmoddi4+0x3a>
     1f6:	f1cc 0820 	rsb	r8, ip, #32
     1fa:	fa01 fe0c 	lsl.w	lr, r1, ip
     1fe:	fa20 f808 	lsr.w	r8, r0, r8
     202:	fa02 f50c 	lsl.w	r5, r2, ip
     206:	ea48 0e0e 	orr.w	lr, r8, lr
     20a:	fa00 f40c 	lsl.w	r4, r0, ip
     20e:	ea4f 4915 	mov.w	r9, r5, lsr #16
     212:	fa1f f885 	uxth.w	r8, r5
     216:	fbbe faf9 	udiv	sl, lr, r9
     21a:	0c21      	lsrs	r1, r4, #16
     21c:	fb09 e31a 	mls	r3, r9, sl, lr
     220:	fb0a fb08 	mul.w	fp, sl, r8
     224:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
     228:	459b      	cmp	fp, r3
     22a:	d92a      	bls.n	282 <__udivmoddi4+0xae>
     22c:	18eb      	adds	r3, r5, r3
     22e:	f10a 30ff 	add.w	r0, sl, #4294967295	; 0xffffffff
     232:	d204      	bcs.n	23e <__udivmoddi4+0x6a>
     234:	459b      	cmp	fp, r3
     236:	d902      	bls.n	23e <__udivmoddi4+0x6a>
     238:	f1aa 0002 	sub.w	r0, sl, #2
     23c:	442b      	add	r3, r5
     23e:	eba3 030b 	sub.w	r3, r3, fp
     242:	b2a4      	uxth	r4, r4
     244:	fbb3 f2f9 	udiv	r2, r3, r9
     248:	fb09 3312 	mls	r3, r9, r2, r3
     24c:	fb02 f808 	mul.w	r8, r2, r8
     250:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     254:	45a0      	cmp	r8, r4
     256:	d916      	bls.n	286 <__udivmoddi4+0xb2>
     258:	192c      	adds	r4, r5, r4
     25a:	f102 33ff 	add.w	r3, r2, #4294967295	; 0xffffffff
     25e:	d203      	bcs.n	268 <__udivmoddi4+0x94>
     260:	45a0      	cmp	r8, r4
     262:	d901      	bls.n	268 <__udivmoddi4+0x94>
     264:	1e93      	subs	r3, r2, #2
     266:	442c      	add	r4, r5
     268:	eba4 0408 	sub.w	r4, r4, r8
     26c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     270:	b127      	cbz	r7, 27c <__udivmoddi4+0xa8>
     272:	fa24 f40c 	lsr.w	r4, r4, ip
     276:	2300      	movs	r3, #0
     278:	603c      	str	r4, [r7, #0]
     27a:	607b      	str	r3, [r7, #4]
     27c:	4631      	mov	r1, r6
     27e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     282:	4650      	mov	r0, sl
     284:	e7db      	b.n	23e <__udivmoddi4+0x6a>
     286:	4613      	mov	r3, r2
     288:	e7ee      	b.n	268 <__udivmoddi4+0x94>
     28a:	b902      	cbnz	r2, 28e <__udivmoddi4+0xba>
     28c:	deff      	udf	#255	; 0xff
     28e:	f1bc 0f00 	cmp.w	ip, #0
     292:	d12e      	bne.n	2f2 <__udivmoddi4+0x11e>
     294:	1a8b      	subs	r3, r1, r2
     296:	2601      	movs	r6, #1
     298:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     29c:	b2aa      	uxth	r2, r5
     29e:	fbb3 f8fe 	udiv	r8, r3, lr
     2a2:	0c21      	lsrs	r1, r4, #16
     2a4:	fb0e 3318 	mls	r3, lr, r8, r3
     2a8:	fb08 f902 	mul.w	r9, r8, r2
     2ac:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
     2b0:	4599      	cmp	r9, r3
     2b2:	d961      	bls.n	378 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x78>
     2b4:	18eb      	adds	r3, r5, r3
     2b6:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
     2ba:	d204      	bcs.n	2c6 <__udivmoddi4+0xf2>
     2bc:	4599      	cmp	r9, r3
     2be:	d902      	bls.n	2c6 <__udivmoddi4+0xf2>
     2c0:	f1a8 0002 	sub.w	r0, r8, #2
     2c4:	442b      	add	r3, r5
     2c6:	eba3 0309 	sub.w	r3, r3, r9
     2ca:	b2a4      	uxth	r4, r4
     2cc:	fbb3 f1fe 	udiv	r1, r3, lr
     2d0:	fb0e 3311 	mls	r3, lr, r1, r3
     2d4:	434a      	muls	r2, r1
     2d6:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     2da:	42a2      	cmp	r2, r4
     2dc:	d94e      	bls.n	37c <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x7c>
     2de:	192c      	adds	r4, r5, r4
     2e0:	f101 33ff 	add.w	r3, r1, #4294967295	; 0xffffffff
     2e4:	d203      	bcs.n	2ee <__udivmoddi4+0x11a>
     2e6:	42a2      	cmp	r2, r4
     2e8:	d901      	bls.n	2ee <__udivmoddi4+0x11a>
     2ea:	1e8b      	subs	r3, r1, #2
     2ec:	442c      	add	r4, r5
     2ee:	1aa4      	subs	r4, r4, r2
     2f0:	e7bc      	b.n	26c <__udivmoddi4+0x98>
     2f2:	f1cc 0e20 	rsb	lr, ip, #32
     2f6:	fa02 f50c 	lsl.w	r5, r2, ip
     2fa:	fa21 f90e 	lsr.w	r9, r1, lr
     2fe:	fa01 f30c 	lsl.w	r3, r1, ip
     302:	fa20 fe0e 	lsr.w	lr, r0, lr
     306:	ea4e 0303 	orr.w	r3, lr, r3
     30a:	ea4f 4815 	mov.w	r8, r5, lsr #16
     30e:	fa00 f40c 	lsl.w	r4, r0, ip
     312:	fbb9 f1f8 	udiv	r1, r9, r8
     316:	fa1f fe85 	uxth.w	lr, r5
     31a:	fb08 9211 	mls	r2, r8, r1, r9
     31e:	0c18      	lsrs	r0, r3, #16
     320:	fb01 f60e 	mul.w	r6, r1, lr
     324:	ea40 4202 	orr.w	r2, r0, r2, lsl #16
     328:	4296      	cmp	r6, r2
     32a:	d921      	bls.n	370 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x70>
     32c:	18aa      	adds	r2, r5, r2
     32e:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
     332:	d203      	bcs.n	33c <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x3c>
     334:	4296      	cmp	r6, r2
     336:	d901      	bls.n	33c <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x3c>
     338:	1e88      	subs	r0, r1, #2
     33a:	442a      	add	r2, r5
     33c:	1b92      	subs	r2, r2, r6
     33e:	b29b      	uxth	r3, r3
     340:	fbb2 f9f8 	udiv	r9, r2, r8
     344:	fb08 2219 	mls	r2, r8, r9, r2
     348:	fb09 fe0e 	mul.w	lr, r9, lr
     34c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
     350:	459e      	cmp	lr, r3
     352:	d90f      	bls.n	374 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x74>
     354:	18eb      	adds	r3, r5, r3
     356:	f109 36ff 	add.w	r6, r9, #4294967295	; 0xffffffff
     35a:	d204      	bcs.n	366 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x66>
     35c:	459e      	cmp	lr, r3
     35e:	d902      	bls.n	366 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x66>
     360:	f1a9 0602 	sub.w	r6, r9, #2
     364:	442b      	add	r3, r5
     366:	eba3 030e 	sub.w	r3, r3, lr
     36a:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
     36e:	e793      	b.n	298 <__udivmoddi4+0xc4>
     370:	4608      	mov	r0, r1
     372:	e7e3      	b.n	33c <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x3c>
     374:	464e      	mov	r6, r9
     376:	e7f6      	b.n	366 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x66>
     378:	4640      	mov	r0, r8
     37a:	e7a4      	b.n	2c6 <__udivmoddi4+0xf2>
     37c:	460b      	mov	r3, r1
     37e:	e7b6      	b.n	2ee <__udivmoddi4+0x11a>
     380:	428b      	cmp	r3, r1
     382:	d905      	bls.n	390 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x90>
     384:	b10f      	cbz	r7, 38a <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x8a>
     386:	e9c7 0100 	strd	r0, r1, [r7]
     38a:	2600      	movs	r6, #0
     38c:	4630      	mov	r0, r6
     38e:	e775      	b.n	27c <__udivmoddi4+0xa8>
     390:	fab3 fc83 	clz	ip, r3
     394:	f1bc 0f00 	cmp.w	ip, #0
     398:	d10f      	bne.n	3ba <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xba>
     39a:	428b      	cmp	r3, r1
     39c:	d301      	bcc.n	3a2 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xa2>
     39e:	4282      	cmp	r2, r0
     3a0:	d809      	bhi.n	3b6 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xb6>
     3a2:	1a84      	subs	r4, r0, r2
     3a4:	eb61 0e03 	sbc.w	lr, r1, r3
     3a8:	2001      	movs	r0, #1
     3aa:	2f00      	cmp	r7, #0
     3ac:	d06a      	beq.n	484 <CONFIG_FLASH_SIZE+0x84>
     3ae:	e9c7 4e00 	strd	r4, lr, [r7]
     3b2:	2600      	movs	r6, #0
     3b4:	e762      	b.n	27c <__udivmoddi4+0xa8>
     3b6:	4660      	mov	r0, ip
     3b8:	e7f7      	b.n	3aa <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xaa>
     3ba:	f1cc 0e20 	rsb	lr, ip, #32
     3be:	fa03 f30c 	lsl.w	r3, r3, ip
     3c2:	fa22 f50e 	lsr.w	r5, r2, lr
     3c6:	fa21 f40e 	lsr.w	r4, r1, lr
     3ca:	431d      	orrs	r5, r3
     3cc:	fa01 f30c 	lsl.w	r3, r1, ip
     3d0:	fa20 f10e 	lsr.w	r1, r0, lr
     3d4:	430b      	orrs	r3, r1
     3d6:	ea4f 4a15 	mov.w	sl, r5, lsr #16
     3da:	fa00 f60c 	lsl.w	r6, r0, ip
     3de:	fbb4 f9fa 	udiv	r9, r4, sl
     3e2:	fa1f f885 	uxth.w	r8, r5
     3e6:	fb0a 4019 	mls	r0, sl, r9, r4
     3ea:	0c1c      	lsrs	r4, r3, #16
     3ec:	fb09 f108 	mul.w	r1, r9, r8
     3f0:	ea44 4400 	orr.w	r4, r4, r0, lsl #16
     3f4:	42a1      	cmp	r1, r4
     3f6:	fa02 f20c 	lsl.w	r2, r2, ip
     3fa:	d93f      	bls.n	47c <CONFIG_FLASH_SIZE+0x7c>
     3fc:	192c      	adds	r4, r5, r4
     3fe:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
     402:	d204      	bcs.n	40e <CONFIG_FLASH_SIZE+0xe>
     404:	42a1      	cmp	r1, r4
     406:	d902      	bls.n	40e <CONFIG_FLASH_SIZE+0xe>
     408:	f1a9 0002 	sub.w	r0, r9, #2
     40c:	442c      	add	r4, r5
     40e:	1a64      	subs	r4, r4, r1
     410:	b29b      	uxth	r3, r3
     412:	fbb4 f9fa 	udiv	r9, r4, sl
     416:	fb0a 4419 	mls	r4, sl, r9, r4
     41a:	fb09 f808 	mul.w	r8, r9, r8
     41e:	ea43 4104 	orr.w	r1, r3, r4, lsl #16
     422:	4588      	cmp	r8, r1
     424:	d92c      	bls.n	480 <CONFIG_FLASH_SIZE+0x80>
     426:	1869      	adds	r1, r5, r1
     428:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
     42c:	d204      	bcs.n	438 <CONFIG_FLASH_SIZE+0x38>
     42e:	4588      	cmp	r8, r1
     430:	d902      	bls.n	438 <CONFIG_FLASH_SIZE+0x38>
     432:	f1a9 0302 	sub.w	r3, r9, #2
     436:	4429      	add	r1, r5
     438:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     43c:	eba1 0108 	sub.w	r1, r1, r8
     440:	fba0 8902 	umull	r8, r9, r0, r2
     444:	4549      	cmp	r1, r9
     446:	46c2      	mov	sl, r8
     448:	464c      	mov	r4, r9
     44a:	d302      	bcc.n	452 <CONFIG_FLASH_SIZE+0x52>
     44c:	d106      	bne.n	45c <CONFIG_FLASH_SIZE+0x5c>
     44e:	4546      	cmp	r6, r8
     450:	d204      	bcs.n	45c <CONFIG_FLASH_SIZE+0x5c>
     452:	ebb8 0a02 	subs.w	sl, r8, r2
     456:	eb69 0405 	sbc.w	r4, r9, r5
     45a:	3801      	subs	r0, #1
     45c:	b197      	cbz	r7, 484 <CONFIG_FLASH_SIZE+0x84>
     45e:	ebb6 030a 	subs.w	r3, r6, sl
     462:	eb61 0604 	sbc.w	r6, r1, r4
     466:	fa06 fe0e 	lsl.w	lr, r6, lr
     46a:	fa23 f30c 	lsr.w	r3, r3, ip
     46e:	ea4e 0303 	orr.w	r3, lr, r3
     472:	fa26 f60c 	lsr.w	r6, r6, ip
     476:	e9c7 3600 	strd	r3, r6, [r7]
     47a:	e79a      	b.n	3b2 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xb2>
     47c:	4648      	mov	r0, r9
     47e:	e7c6      	b.n	40e <CONFIG_FLASH_SIZE+0xe>
     480:	464b      	mov	r3, r9
     482:	e7d9      	b.n	438 <CONFIG_FLASH_SIZE+0x38>
     484:	463e      	mov	r6, r7
     486:	e6f9      	b.n	27c <__udivmoddi4+0xa8>

00000488 <esb_thread_function>:
		}
	}
}

void esb_thread_function(void* arg0, void* arg1, void* arg2)
{
     488:	b530      	push	{r4, r5, lr}
     48a:	b083      	sub	sp, #12
	LOG_INF("%s (%p)", k_thread_name_get(k_current_get()), k_current_get());
     48c:	f04f 0400 	mov.w	r4, #0
     490:	2303      	movs	r3, #3
     492:	f363 0402 	bfi	r4, r3, #0, #3
     496:	f36f 04c5 	bfc	r4, #3, #3
     49a:	4b2d      	ldr	r3, [pc, #180]	; (550 <esb_thread_function+0xc8>)
     49c:	4a2d      	ldr	r2, [pc, #180]	; (554 <esb_thread_function+0xcc>)
     49e:	1a9b      	subs	r3, r3, r2
     4a0:	f3c3 03c9 	ubfx	r3, r3, #3, #10
     4a4:	f363 148f 	bfi	r4, r3, #6, #10

K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield)

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_WAKEUP, k_wakeup, k_tid_t, thread)

K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t)
     4a8:	f00e f85c 	bl	e564 <z_impl_k_current_get>

K_SYSCALL_DECLARE0(K_SYSCALL_K_THREAD_CUSTOM_DATA_GET, k_thread_custom_data_get, void *)

K_SYSCALL_DECLARE2_VOID(K_SYSCALL_K_THREAD_NAME_SET, k_thread_name_set, k_tid_t, thread_id, const char *, value)

K_SYSCALL_DECLARE1(K_SYSCALL_K_THREAD_NAME_GET, k_thread_name_get, const char *, k_tid_t, thread_id)
     4ac:	f010 fb20 	bl	10af0 <z_impl_k_thread_name_get>
     4b0:	4605      	mov	r5, r0
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t)
     4b2:	f00e f857 	bl	e564 <z_impl_k_current_get>
     4b6:	4623      	mov	r3, r4
     4b8:	4602      	mov	r2, r0
     4ba:	4629      	mov	r1, r5
     4bc:	4826      	ldr	r0, [pc, #152]	; (558 <esb_thread_function+0xd0>)
     4be:	f004 fdab 	bl	5018 <log_2>

K_SYSCALL_DECLARE2(K_SYSCALL_K_QUEUE_ALLOC_APPEND, k_queue_alloc_append, s32_t, struct k_queue *, queue, void *, data)

K_SYSCALL_DECLARE2(K_SYSCALL_K_QUEUE_ALLOC_PREPEND, k_queue_alloc_prepend, s32_t, struct k_queue *, queue, void *, data)

K_SYSCALL_DECLARE2(K_SYSCALL_K_QUEUE_GET, k_queue_get, void *, struct k_queue *, queue, s32_t, timeout)
     4c2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
     4c6:	4825      	ldr	r0, [pc, #148]	; (55c <esb_thread_function+0xd4>)
     4c8:	f00c fdb2 	bl	d030 <z_impl_k_queue_get>
	static int __unused err = 0;
	static struct nrf_esb_payload payload = NRF_ESB_CREATE_PAYLOAD(0);

	while (1)
	{
		struct message_t* message = k_fifo_get(&serial2wireless_fifo, K_FOREVER);
     4cc:	9001      	str	r0, [sp, #4]
		memcpy(payload.data, message->data, message->length);
     4ce:	4c24      	ldr	r4, [pc, #144]	; (560 <esb_thread_function+0xd8>)
     4d0:	6842      	ldr	r2, [r0, #4]
     4d2:	f100 0108 	add.w	r1, r0, #8
     4d6:	1d60      	adds	r0, r4, #5
     4d8:	f010 f82a 	bl	10530 <memcpy>
		payload.length = message->length;
     4dc:	9b01      	ldr	r3, [sp, #4]
     4de:	685b      	ldr	r3, [r3, #4]
     4e0:	7023      	strb	r3, [r4, #0]
		k_mem_slab_free(&package_buffer_slab, (void**)&message);
     4e2:	a901      	add	r1, sp, #4
     4e4:	481f      	ldr	r0, [pc, #124]	; (564 <esb_thread_function+0xdc>)
     4e6:	f00c f971 	bl	c7cc <k_mem_slab_free>

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_UNLOCK, k_mutex_unlock, struct k_mutex *, mutex)

K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit)

K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout)
     4ea:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
     4ee:	481e      	ldr	r0, [pc, #120]	; (568 <esb_thread_function+0xe0>)
     4f0:	f00e f8a8 	bl	e644 <z_impl_k_sem_take>

		k_sem_take(&transmission_lock, K_FOREVER);

		err = nrf_esb_stop_rx();
     4f4:	f00b feae 	bl	c254 <nrf_esb_stop_rx>
     4f8:	4b1c      	ldr	r3, [pc, #112]	; (56c <esb_thread_function+0xe4>)
     4fa:	6018      	str	r0, [r3, #0]
		__ASSERT(err == 0, "nrf_esb_stop_rx (%d)", err);
     4fc:	b9b8      	cbnz	r0, 52e <esb_thread_function+0xa6>

		err = nrf_esb_write_payload(&payload);
     4fe:	4818      	ldr	r0, [pc, #96]	; (560 <esb_thread_function+0xd8>)
     500:	f00b fda4 	bl	c04c <nrf_esb_write_payload>
     504:	4b19      	ldr	r3, [pc, #100]	; (56c <esb_thread_function+0xe4>)
     506:	6018      	str	r0, [r3, #0]
		__ASSERT(err == 0, "nrf_esb_write_payload (%d)", err);
     508:	2800      	cmp	r0, #0
     50a:	d0da      	beq.n	4c2 <esb_thread_function+0x3a>
     50c:	4c18      	ldr	r4, [pc, #96]	; (570 <esb_thread_function+0xe8>)
     50e:	236f      	movs	r3, #111	; 0x6f
     510:	4622      	mov	r2, r4
     512:	4918      	ldr	r1, [pc, #96]	; (574 <esb_thread_function+0xec>)
     514:	4818      	ldr	r0, [pc, #96]	; (578 <esb_thread_function+0xf0>)
     516:	f00f f9b2 	bl	f87e <printk>
     51a:	4b14      	ldr	r3, [pc, #80]	; (56c <esb_thread_function+0xe4>)
     51c:	6819      	ldr	r1, [r3, #0]
     51e:	4817      	ldr	r0, [pc, #92]	; (57c <esb_thread_function+0xf4>)
     520:	f00f f9ad 	bl	f87e <printk>
     524:	216f      	movs	r1, #111	; 0x6f
     526:	4620      	mov	r0, r4
     528:	f00f fa2f 	bl	f98a <assert_post_action>
	{
     52c:	e7c9      	b.n	4c2 <esb_thread_function+0x3a>
		__ASSERT(err == 0, "nrf_esb_stop_rx (%d)", err);
     52e:	4c10      	ldr	r4, [pc, #64]	; (570 <esb_thread_function+0xe8>)
     530:	236c      	movs	r3, #108	; 0x6c
     532:	4622      	mov	r2, r4
     534:	490f      	ldr	r1, [pc, #60]	; (574 <esb_thread_function+0xec>)
     536:	4810      	ldr	r0, [pc, #64]	; (578 <esb_thread_function+0xf0>)
     538:	f00f f9a1 	bl	f87e <printk>
     53c:	4b0b      	ldr	r3, [pc, #44]	; (56c <esb_thread_function+0xe4>)
     53e:	6819      	ldr	r1, [r3, #0]
     540:	480f      	ldr	r0, [pc, #60]	; (580 <esb_thread_function+0xf8>)
     542:	f00f f99c 	bl	f87e <printk>
     546:	216c      	movs	r1, #108	; 0x6c
     548:	4620      	mov	r0, r4
     54a:	f00f fa1e 	bl	f98a <assert_post_action>
     54e:	e7d6      	b.n	4fe <esb_thread_function+0x76>
     550:	00010dfc 	.word	0x00010dfc
     554:	00010dd4 	.word	0x00010dd4
     558:	00010f3c 	.word	0x00010f3c
     55c:	200074a4 	.word	0x200074a4
     560:	20007060 	.word	0x20007060
     564:	200073e8 	.word	0x200073e8
     568:	2000743c 	.word	0x2000743c
     56c:	20000078 	.word	0x20000078
     570:	00010f44 	.word	0x00010f44
     574:	00010f80 	.word	0x00010f80
     578:	00010f8c 	.word	0x00010f8c
     57c:	00010fc4 	.word	0x00010fc4
     580:	00010fac 	.word	0x00010fac

00000584 <esb_event_callback>:
{
     584:	b530      	push	{r4, r5, lr}
     586:	b083      	sub	sp, #12
     588:	4604      	mov	r4, r0

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem)
     58a:	484b      	ldr	r0, [pc, #300]	; (6b8 <esb_event_callback+0x134>)
     58c:	f00e f826 	bl	e5dc <z_impl_k_sem_give>
	switch (event->evt_id)
     590:	7823      	ldrb	r3, [r4, #0]
     592:	2b01      	cmp	r3, #1
     594:	d01f      	beq.n	5d6 <esb_event_callback+0x52>
     596:	b25a      	sxtb	r2, r3
     598:	b11a      	cbz	r2, 5a2 <esb_event_callback+0x1e>
     59a:	2b02      	cmp	r3, #2
     59c:	d04b      	beq.n	636 <esb_event_callback+0xb2>
}
     59e:	b003      	add	sp, #12
     5a0:	bd30      	pop	{r4, r5, pc}
			err = nrf_esb_start_rx();
     5a2:	f00b fe11 	bl	c1c8 <nrf_esb_start_rx>
     5a6:	4b45      	ldr	r3, [pc, #276]	; (6bc <esb_event_callback+0x138>)
     5a8:	6018      	str	r0, [r3, #0]
			__ASSERT(err == 0, "nrf_esb_start_rx (%d)", err);
     5aa:	b918      	cbnz	r0, 5b4 <esb_event_callback+0x30>
     5ac:	4844      	ldr	r0, [pc, #272]	; (6c0 <esb_event_callback+0x13c>)
     5ae:	f00e f815 	bl	e5dc <z_impl_k_sem_give>
     5b2:	e7f4      	b.n	59e <esb_event_callback+0x1a>
     5b4:	4c43      	ldr	r4, [pc, #268]	; (6c4 <esb_event_callback+0x140>)
     5b6:	2331      	movs	r3, #49	; 0x31
     5b8:	4622      	mov	r2, r4
     5ba:	4943      	ldr	r1, [pc, #268]	; (6c8 <esb_event_callback+0x144>)
     5bc:	4843      	ldr	r0, [pc, #268]	; (6cc <esb_event_callback+0x148>)
     5be:	f00f f95e 	bl	f87e <printk>
     5c2:	4b3e      	ldr	r3, [pc, #248]	; (6bc <esb_event_callback+0x138>)
     5c4:	6819      	ldr	r1, [r3, #0]
     5c6:	4842      	ldr	r0, [pc, #264]	; (6d0 <esb_event_callback+0x14c>)
     5c8:	f00f f959 	bl	f87e <printk>
     5cc:	2131      	movs	r1, #49	; 0x31
     5ce:	4620      	mov	r0, r4
     5d0:	f00f f9db 	bl	f98a <assert_post_action>
     5d4:	e7ea      	b.n	5ac <esb_event_callback+0x28>
			err = nrf_esb_pop_tx();
     5d6:	f00b fe67 	bl	c2a8 <nrf_esb_pop_tx>
     5da:	4b38      	ldr	r3, [pc, #224]	; (6bc <esb_event_callback+0x138>)
     5dc:	6018      	str	r0, [r3, #0]
			__ASSERT(err == 0, "nrf_esb_pop_tx (%d)", err);
     5de:	b940      	cbnz	r0, 5f2 <esb_event_callback+0x6e>
			err = nrf_esb_start_rx();
     5e0:	f00b fdf2 	bl	c1c8 <nrf_esb_start_rx>
     5e4:	4b35      	ldr	r3, [pc, #212]	; (6bc <esb_event_callback+0x138>)
     5e6:	6018      	str	r0, [r3, #0]
			__ASSERT(err == 0, "nrf_esb_start_rx (%d)", err);
     5e8:	b9a0      	cbnz	r0, 614 <esb_event_callback+0x90>
     5ea:	4835      	ldr	r0, [pc, #212]	; (6c0 <esb_event_callback+0x13c>)
     5ec:	f00d fff6 	bl	e5dc <z_impl_k_sem_give>
     5f0:	e7d5      	b.n	59e <esb_event_callback+0x1a>
			__ASSERT(err == 0, "nrf_esb_pop_tx (%d)", err);
     5f2:	4c34      	ldr	r4, [pc, #208]	; (6c4 <esb_event_callback+0x140>)
     5f4:	233a      	movs	r3, #58	; 0x3a
     5f6:	4622      	mov	r2, r4
     5f8:	4933      	ldr	r1, [pc, #204]	; (6c8 <esb_event_callback+0x144>)
     5fa:	4834      	ldr	r0, [pc, #208]	; (6cc <esb_event_callback+0x148>)
     5fc:	f00f f93f 	bl	f87e <printk>
     600:	4b2e      	ldr	r3, [pc, #184]	; (6bc <esb_event_callback+0x138>)
     602:	6819      	ldr	r1, [r3, #0]
     604:	4833      	ldr	r0, [pc, #204]	; (6d4 <esb_event_callback+0x150>)
     606:	f00f f93a 	bl	f87e <printk>
     60a:	213a      	movs	r1, #58	; 0x3a
     60c:	4620      	mov	r0, r4
     60e:	f00f f9bc 	bl	f98a <assert_post_action>
     612:	e7e5      	b.n	5e0 <esb_event_callback+0x5c>
			__ASSERT(err == 0, "nrf_esb_start_rx (%d)", err);
     614:	4c2b      	ldr	r4, [pc, #172]	; (6c4 <esb_event_callback+0x140>)
     616:	233c      	movs	r3, #60	; 0x3c
     618:	4622      	mov	r2, r4
     61a:	492b      	ldr	r1, [pc, #172]	; (6c8 <esb_event_callback+0x144>)
     61c:	482b      	ldr	r0, [pc, #172]	; (6cc <esb_event_callback+0x148>)
     61e:	f00f f92e 	bl	f87e <printk>
     622:	4b26      	ldr	r3, [pc, #152]	; (6bc <esb_event_callback+0x138>)
     624:	6819      	ldr	r1, [r3, #0]
     626:	482a      	ldr	r0, [pc, #168]	; (6d0 <esb_event_callback+0x14c>)
     628:	f00f f929 	bl	f87e <printk>
     62c:	213c      	movs	r1, #60	; 0x3c
     62e:	4620      	mov	r0, r4
     630:	f00f f9ab 	bl	f98a <assert_post_action>
     634:	e7d9      	b.n	5ea <esb_event_callback+0x66>
			err = nrf_esb_read_rx_payload(&payload);
     636:	4828      	ldr	r0, [pc, #160]	; (6d8 <esb_event_callback+0x154>)
     638:	f00b fd82 	bl	c140 <nrf_esb_read_rx_payload>
     63c:	4b1f      	ldr	r3, [pc, #124]	; (6bc <esb_event_callback+0x138>)
     63e:	6018      	str	r0, [r3, #0]
			__ASSERT(err == 0, "nrf_esb_read_rx_payload (%d)", err);
     640:	b9c8      	cbnz	r0, 676 <esb_event_callback+0xf2>
			if (err)
     642:	4b1e      	ldr	r3, [pc, #120]	; (6bc <esb_event_callback+0x138>)
     644:	681b      	ldr	r3, [r3, #0]
     646:	2b00      	cmp	r3, #0
     648:	d1a9      	bne.n	59e <esb_event_callback+0x1a>
			int err = k_mem_slab_alloc(&package_buffer_slab, (void**)&message, K_NO_WAIT);
     64a:	2200      	movs	r2, #0
     64c:	a901      	add	r1, sp, #4
     64e:	4823      	ldr	r0, [pc, #140]	; (6dc <esb_event_callback+0x158>)
     650:	f00c f834 	bl	c6bc <k_mem_slab_alloc>
			__ASSERT(err == 0, "k_mem_slab_alloc (%d)", err);
     654:	4604      	mov	r4, r0
     656:	b9f8      	cbnz	r0, 698 <esb_event_callback+0x114>
			memcpy(message->data, payload.data, payload.length);
     658:	4c1f      	ldr	r4, [pc, #124]	; (6d8 <esb_event_callback+0x154>)
     65a:	4621      	mov	r1, r4
     65c:	f811 2b05 	ldrb.w	r2, [r1], #5
     660:	9801      	ldr	r0, [sp, #4]
     662:	3008      	adds	r0, #8
     664:	f00f ff64 	bl	10530 <memcpy>
			message->length = payload.length;
     668:	9901      	ldr	r1, [sp, #4]
     66a:	7823      	ldrb	r3, [r4, #0]
     66c:	604b      	str	r3, [r1, #4]
			k_fifo_put(&wireless2serial_fifo, message);
     66e:	481c      	ldr	r0, [pc, #112]	; (6e0 <esb_event_callback+0x15c>)
     670:	f010 f9e3 	bl	10a3a <k_queue_append>
}
     674:	e793      	b.n	59e <esb_event_callback+0x1a>
			__ASSERT(err == 0, "nrf_esb_read_rx_payload (%d)", err);
     676:	4c13      	ldr	r4, [pc, #76]	; (6c4 <esb_event_callback+0x140>)
     678:	2347      	movs	r3, #71	; 0x47
     67a:	4622      	mov	r2, r4
     67c:	4912      	ldr	r1, [pc, #72]	; (6c8 <esb_event_callback+0x144>)
     67e:	4813      	ldr	r0, [pc, #76]	; (6cc <esb_event_callback+0x148>)
     680:	f00f f8fd 	bl	f87e <printk>
     684:	4b0d      	ldr	r3, [pc, #52]	; (6bc <esb_event_callback+0x138>)
     686:	6819      	ldr	r1, [r3, #0]
     688:	4816      	ldr	r0, [pc, #88]	; (6e4 <esb_event_callback+0x160>)
     68a:	f00f f8f8 	bl	f87e <printk>
     68e:	2147      	movs	r1, #71	; 0x47
     690:	4620      	mov	r0, r4
     692:	f00f f97a 	bl	f98a <assert_post_action>
     696:	e7d4      	b.n	642 <esb_event_callback+0xbe>
			__ASSERT(err == 0, "k_mem_slab_alloc (%d)", err);
     698:	4d0a      	ldr	r5, [pc, #40]	; (6c4 <esb_event_callback+0x140>)
     69a:	2350      	movs	r3, #80	; 0x50
     69c:	462a      	mov	r2, r5
     69e:	490a      	ldr	r1, [pc, #40]	; (6c8 <esb_event_callback+0x144>)
     6a0:	480a      	ldr	r0, [pc, #40]	; (6cc <esb_event_callback+0x148>)
     6a2:	f00f f8ec 	bl	f87e <printk>
     6a6:	4621      	mov	r1, r4
     6a8:	480f      	ldr	r0, [pc, #60]	; (6e8 <esb_event_callback+0x164>)
     6aa:	f00f f8e8 	bl	f87e <printk>
     6ae:	2150      	movs	r1, #80	; 0x50
     6b0:	4628      	mov	r0, r5
     6b2:	f00f f96a 	bl	f98a <assert_post_action>
     6b6:	e7cf      	b.n	658 <esb_event_callback+0xd4>
     6b8:	2000746c 	.word	0x2000746c
     6bc:	20000074 	.word	0x20000074
     6c0:	2000743c 	.word	0x2000743c
     6c4:	00010f44 	.word	0x00010f44
     6c8:	00010f80 	.word	0x00010f80
     6cc:	00010f8c 	.word	0x00010f8c
     6d0:	00010e5c 	.word	0x00010e5c
     6d4:	00010e74 	.word	0x00010e74
     6d8:	20000080 	.word	0x20000080
     6dc:	200073e8 	.word	0x200073e8
     6e0:	200074b8 	.word	0x200074b8
     6e4:	00010e8c 	.word	0x00010e8c
     6e8:	00010eac 	.word	0x00010eac

000006ec <esb_init>:
	}
}

void esb_init(void)
{
     6ec:	b530      	push	{r4, r5, lr}
     6ee:	b08b      	sub	sp, #44	; 0x2c
	u8_t base_addr_0[4] = {0xE7, 0xE7, 0xE7, 0xE7};
     6f0:	4c4a      	ldr	r4, [pc, #296]	; (81c <CONFIG_ISR_STACK_SIZE+0x1c>)
     6f2:	6823      	ldr	r3, [r4, #0]
     6f4:	9309      	str	r3, [sp, #36]	; 0x24
	u8_t base_addr_1[4] = {0xC2, 0xC2, 0xC2, 0xC2};
     6f6:	6863      	ldr	r3, [r4, #4]
     6f8:	9308      	str	r3, [sp, #32]
	u8_t addr_prefix[8] = {0xE7, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8};
     6fa:	ab06      	add	r3, sp, #24
     6fc:	f104 0208 	add.w	r2, r4, #8
     700:	e892 0003 	ldmia.w	r2, {r0, r1}
     704:	e883 0003 	stmia.w	r3, {r0, r1}

	struct nrf_esb_config config = NRF_ESB_DEFAULT_CONFIG;
     708:	466d      	mov	r5, sp
     70a:	3410      	adds	r4, #16
     70c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
     70e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
     710:	e894 0003 	ldmia.w	r4, {r0, r1}
     714:	e885 0003 	stmia.w	r5, {r0, r1}
	config.event_handler = esb_event_callback;
     718:	4b41      	ldr	r3, [pc, #260]	; (820 <CONFIG_ISR_STACK_SIZE+0x20>)
     71a:	9301      	str	r3, [sp, #4]

	static int __unused err = 0;

	err = nrf_esb_init(&config);
     71c:	4668      	mov	r0, sp
     71e:	f00b fc27 	bl	bf70 <nrf_esb_init>
     722:	4b40      	ldr	r3, [pc, #256]	; (824 <CONFIG_ISR_STACK_SIZE+0x24>)
     724:	6018      	str	r0, [r3, #0]
	__ASSERT(err == 0, "nrf_esb_init (%d)", err);
     726:	bb18      	cbnz	r0, 770 <esb_init+0x84>

	err = nrf_esb_set_base_address_0(base_addr_0);
     728:	a809      	add	r0, sp, #36	; 0x24
     72a:	f00b fde9 	bl	c300 <nrf_esb_set_base_address_0>
     72e:	4b3d      	ldr	r3, [pc, #244]	; (824 <CONFIG_ISR_STACK_SIZE+0x24>)
     730:	6018      	str	r0, [r3, #0]
	__ASSERT(err == 0, "nrf_esb_set_base_address_0 (%d)", err);
     732:	2800      	cmp	r0, #0
     734:	d12d      	bne.n	792 <esb_init+0xa6>

	err = nrf_esb_set_base_address_1(base_addr_1);
     736:	a808      	add	r0, sp, #32
     738:	f00b fdfc 	bl	c334 <nrf_esb_set_base_address_1>
     73c:	4b39      	ldr	r3, [pc, #228]	; (824 <CONFIG_ISR_STACK_SIZE+0x24>)
     73e:	6018      	str	r0, [r3, #0]
	__ASSERT(err == 0, "nrf_esb_set_base_address_1 (%d)", err);
     740:	2800      	cmp	r0, #0
     742:	d137      	bne.n	7b4 <esb_init+0xc8>

	err = nrf_esb_set_prefixes(addr_prefix, ARRAY_SIZE(addr_prefix));
     744:	2108      	movs	r1, #8
     746:	a806      	add	r0, sp, #24
     748:	f00b fe0e 	bl	c368 <nrf_esb_set_prefixes>
     74c:	4b35      	ldr	r3, [pc, #212]	; (824 <CONFIG_ISR_STACK_SIZE+0x24>)
     74e:	6018      	str	r0, [r3, #0]
	__ASSERT(err == 0, "nrf_esb_set_prefixes (%d)", err);
     750:	2800      	cmp	r0, #0
     752:	d140      	bne.n	7d6 <esb_init+0xea>

	err = nrf_esb_start_rx();
     754:	f00b fd38 	bl	c1c8 <nrf_esb_start_rx>
     758:	4b32      	ldr	r3, [pc, #200]	; (824 <CONFIG_ISR_STACK_SIZE+0x24>)
     75a:	6018      	str	r0, [r3, #0]
	__ASSERT(err == 0, "nrf_esb_start_rx (%d)", err);
     75c:	2800      	cmp	r0, #0
     75e:	d14b      	bne.n	7f8 <esb_init+0x10c>
     760:	4831      	ldr	r0, [pc, #196]	; (828 <CONFIG_ISR_STACK_SIZE+0x28>)
     762:	f00d ff3b 	bl	e5dc <z_impl_k_sem_give>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_START, k_thread_start, k_tid_t, thread)
     766:	4831      	ldr	r0, [pc, #196]	; (82c <CONFIG_ISR_STACK_SIZE+0x2c>)
     768:	f00e f890 	bl	e88c <z_impl_k_thread_start>

	k_sem_give(&transmission_lock);

	k_thread_start(esb_thread);
}
     76c:	b00b      	add	sp, #44	; 0x2c
     76e:	bd30      	pop	{r4, r5, pc}
	__ASSERT(err == 0, "nrf_esb_init (%d)", err);
     770:	4c2f      	ldr	r4, [pc, #188]	; (830 <CONFIG_ISR_STACK_SIZE+0x30>)
     772:	237f      	movs	r3, #127	; 0x7f
     774:	4622      	mov	r2, r4
     776:	492f      	ldr	r1, [pc, #188]	; (834 <CONFIG_ISR_STACK_SIZE+0x34>)
     778:	482f      	ldr	r0, [pc, #188]	; (838 <CONFIG_ISR_STACK_SIZE+0x38>)
     77a:	f00f f880 	bl	f87e <printk>
     77e:	4b29      	ldr	r3, [pc, #164]	; (824 <CONFIG_ISR_STACK_SIZE+0x24>)
     780:	6819      	ldr	r1, [r3, #0]
     782:	482e      	ldr	r0, [pc, #184]	; (83c <CONFIG_ISR_STACK_SIZE+0x3c>)
     784:	f00f f87b 	bl	f87e <printk>
     788:	217f      	movs	r1, #127	; 0x7f
     78a:	4620      	mov	r0, r4
     78c:	f00f f8fd 	bl	f98a <assert_post_action>
     790:	e7ca      	b.n	728 <esb_init+0x3c>
	__ASSERT(err == 0, "nrf_esb_set_base_address_0 (%d)", err);
     792:	4c27      	ldr	r4, [pc, #156]	; (830 <CONFIG_ISR_STACK_SIZE+0x30>)
     794:	2382      	movs	r3, #130	; 0x82
     796:	4622      	mov	r2, r4
     798:	4926      	ldr	r1, [pc, #152]	; (834 <CONFIG_ISR_STACK_SIZE+0x34>)
     79a:	4827      	ldr	r0, [pc, #156]	; (838 <CONFIG_ISR_STACK_SIZE+0x38>)
     79c:	f00f f86f 	bl	f87e <printk>
     7a0:	4b20      	ldr	r3, [pc, #128]	; (824 <CONFIG_ISR_STACK_SIZE+0x24>)
     7a2:	6819      	ldr	r1, [r3, #0]
     7a4:	4826      	ldr	r0, [pc, #152]	; (840 <CONFIG_ISR_STACK_SIZE+0x40>)
     7a6:	f00f f86a 	bl	f87e <printk>
     7aa:	2182      	movs	r1, #130	; 0x82
     7ac:	4620      	mov	r0, r4
     7ae:	f00f f8ec 	bl	f98a <assert_post_action>
     7b2:	e7c0      	b.n	736 <esb_init+0x4a>
	__ASSERT(err == 0, "nrf_esb_set_base_address_1 (%d)", err);
     7b4:	4c1e      	ldr	r4, [pc, #120]	; (830 <CONFIG_ISR_STACK_SIZE+0x30>)
     7b6:	2385      	movs	r3, #133	; 0x85
     7b8:	4622      	mov	r2, r4
     7ba:	491e      	ldr	r1, [pc, #120]	; (834 <CONFIG_ISR_STACK_SIZE+0x34>)
     7bc:	481e      	ldr	r0, [pc, #120]	; (838 <CONFIG_ISR_STACK_SIZE+0x38>)
     7be:	f00f f85e 	bl	f87e <printk>
     7c2:	4b18      	ldr	r3, [pc, #96]	; (824 <CONFIG_ISR_STACK_SIZE+0x24>)
     7c4:	6819      	ldr	r1, [r3, #0]
     7c6:	481f      	ldr	r0, [pc, #124]	; (844 <CONFIG_ISR_STACK_SIZE+0x44>)
     7c8:	f00f f859 	bl	f87e <printk>
     7cc:	2185      	movs	r1, #133	; 0x85
     7ce:	4620      	mov	r0, r4
     7d0:	f00f f8db 	bl	f98a <assert_post_action>
     7d4:	e7b6      	b.n	744 <esb_init+0x58>
	__ASSERT(err == 0, "nrf_esb_set_prefixes (%d)", err);
     7d6:	4c16      	ldr	r4, [pc, #88]	; (830 <CONFIG_ISR_STACK_SIZE+0x30>)
     7d8:	2388      	movs	r3, #136	; 0x88
     7da:	4622      	mov	r2, r4
     7dc:	4915      	ldr	r1, [pc, #84]	; (834 <CONFIG_ISR_STACK_SIZE+0x34>)
     7de:	4816      	ldr	r0, [pc, #88]	; (838 <CONFIG_ISR_STACK_SIZE+0x38>)
     7e0:	f00f f84d 	bl	f87e <printk>
     7e4:	4b0f      	ldr	r3, [pc, #60]	; (824 <CONFIG_ISR_STACK_SIZE+0x24>)
     7e6:	6819      	ldr	r1, [r3, #0]
     7e8:	4817      	ldr	r0, [pc, #92]	; (848 <CONFIG_ISR_STACK_SIZE+0x48>)
     7ea:	f00f f848 	bl	f87e <printk>
     7ee:	2188      	movs	r1, #136	; 0x88
     7f0:	4620      	mov	r0, r4
     7f2:	f00f f8ca 	bl	f98a <assert_post_action>
     7f6:	e7ad      	b.n	754 <esb_init+0x68>
	__ASSERT(err == 0, "nrf_esb_start_rx (%d)", err);
     7f8:	4c0d      	ldr	r4, [pc, #52]	; (830 <CONFIG_ISR_STACK_SIZE+0x30>)
     7fa:	238b      	movs	r3, #139	; 0x8b
     7fc:	4622      	mov	r2, r4
     7fe:	490d      	ldr	r1, [pc, #52]	; (834 <CONFIG_ISR_STACK_SIZE+0x34>)
     800:	480d      	ldr	r0, [pc, #52]	; (838 <CONFIG_ISR_STACK_SIZE+0x38>)
     802:	f00f f83c 	bl	f87e <printk>
     806:	4b07      	ldr	r3, [pc, #28]	; (824 <CONFIG_ISR_STACK_SIZE+0x24>)
     808:	6819      	ldr	r1, [r3, #0]
     80a:	4810      	ldr	r0, [pc, #64]	; (84c <CONFIG_ISR_STACK_SIZE+0x4c>)
     80c:	f00f f837 	bl	f87e <printk>
     810:	218b      	movs	r1, #139	; 0x8b
     812:	4620      	mov	r0, r4
     814:	f00f f8b9 	bl	f98a <assert_post_action>
     818:	e7a2      	b.n	760 <esb_init+0x74>
     81a:	bf00      	nop
     81c:	00010e34 	.word	0x00010e34
     820:	00000585 	.word	0x00000585
     824:	2000007c 	.word	0x2000007c
     828:	2000743c 	.word	0x2000743c
     82c:	20000008 	.word	0x20000008
     830:	00010f44 	.word	0x00010f44
     834:	00010f80 	.word	0x00010f80
     838:	00010f8c 	.word	0x00010f8c
     83c:	00010ec4 	.word	0x00010ec4
     840:	00010ed8 	.word	0x00010ed8
     844:	00010efc 	.word	0x00010efc
     848:	00010f20 	.word	0x00010f20
     84c:	00010e5c 	.word	0x00010e5c

00000850 <heartbeat_function>:
LOG_MODULE_DECLARE(usb_adapter, LOG_LEVEL_DBG);

K_TIMER_DEFINE(heartbeat_delay, NULL, NULL);

void heartbeat_function(void* arg_0, void* arg_1, void* arg_)
{
     850:	b570      	push	{r4, r5, r6, lr}
	LOG_INF("%s (%p)", k_thread_name_get(k_current_get()), k_current_get());
     852:	f04f 0400 	mov.w	r4, #0
     856:	2303      	movs	r3, #3
     858:	f363 0402 	bfi	r4, r3, #0, #3
     85c:	f36f 04c5 	bfc	r4, #3, #3
     860:	4b48      	ldr	r3, [pc, #288]	; (984 <heartbeat_function+0x134>)
     862:	4a49      	ldr	r2, [pc, #292]	; (988 <heartbeat_function+0x138>)
     864:	1a9b      	subs	r3, r3, r2
     866:	f3c3 03c9 	ubfx	r3, r3, #3, #10
     86a:	f363 148f 	bfi	r4, r3, #6, #10
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t)
     86e:	f00d fe79 	bl	e564 <z_impl_k_current_get>
K_SYSCALL_DECLARE1(K_SYSCALL_K_THREAD_NAME_GET, k_thread_name_get, const char *, k_tid_t, thread_id)
     872:	f010 f93d 	bl	10af0 <z_impl_k_thread_name_get>
     876:	4605      	mov	r5, r0
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t)
     878:	f00d fe74 	bl	e564 <z_impl_k_current_get>
     87c:	4623      	mov	r3, r4
     87e:	4602      	mov	r2, r0
     880:	4629      	mov	r1, r5
     882:	4842      	ldr	r0, [pc, #264]	; (98c <heartbeat_function+0x13c>)
     884:	f004 fbc8 	bl	5018 <log_2>

#ifdef __cplusplus
extern "C" {
#endif

K_SYSCALL_DECLARE1(K_SYSCALL_DEVICE_GET_BINDING, device_get_binding, struct device *, const char *, name)
     888:	4841      	ldr	r0, [pc, #260]	; (990 <heartbeat_function+0x140>)
     88a:	f00b fdaf 	bl	c3ec <z_impl_device_get_binding>

	int err __unused = 0;
	int phase = 0;

	struct device* controller = device_get_binding(LED0_GPIO_CONTROLLER);
	__ASSERT_NO_MSG(controller != NULL);
     88e:	4605      	mov	r5, r0
     890:	b1c8      	cbz	r0, 8c6 <heartbeat_function+0x76>
			  int flags);

static inline int z_impl_gpio_config(struct device *port, int access_op,
				    u32_t pin, int flags)
{
	const struct gpio_driver_api *api =
     892:	686b      	ldr	r3, [r5, #4]
		(const struct gpio_driver_api *)port->driver_api;

	return api->config(port, access_op, pin, flags);
     894:	681c      	ldr	r4, [r3, #0]
     896:	2301      	movs	r3, #1
     898:	220d      	movs	r2, #13
     89a:	2100      	movs	r1, #0
     89c:	4628      	mov	r0, r5
     89e:	47a0      	blx	r4

	err = gpio_pin_configure(controller, LED0_GPIO_PIN, GPIO_DIR_OUT);
	__ASSERT(err == 0, "gpio_pin_configure (%d)", err);
     8a0:	4606      	mov	r6, r0
     8a2:	b9e0      	cbnz	r0, 8de <heartbeat_function+0x8e>
			 u32_t value);

static inline int z_impl_gpio_write(struct device *port, int access_op,
				   u32_t pin, u32_t value)
{
	const struct gpio_driver_api *api =
     8a4:	686b      	ldr	r3, [r5, #4]
		(const struct gpio_driver_api *)port->driver_api;

	return api->write(port, access_op, pin, value);
     8a6:	685c      	ldr	r4, [r3, #4]
     8a8:	2301      	movs	r3, #1
     8aa:	220d      	movs	r2, #13
     8ac:	2100      	movs	r1, #0
     8ae:	4628      	mov	r0, r5
     8b0:	47a0      	blx	r4

	err = gpio_pin_write(controller, LED0_GPIO_PIN, 1);
	__ASSERT(err == 0, "gpio_pin_write (%d)", err);
     8b2:	4606      	mov	r6, r0
     8b4:	bb18      	cbnz	r0, 8fe <heartbeat_function+0xae>
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_TIMER_START, k_timer_start, struct k_timer *, timer, s32_t, duration, s32_t, period)
     8b6:	f44f 72af 	mov.w	r2, #350	; 0x15e
     8ba:	2100      	movs	r1, #0
     8bc:	4835      	ldr	r0, [pc, #212]	; (994 <heartbeat_function+0x144>)
     8be:	f00e fc59 	bl	f174 <z_impl_k_timer_start>
	int phase = 0;
     8c2:	2400      	movs	r4, #0
     8c4:	e03d      	b.n	942 <heartbeat_function+0xf2>
	__ASSERT_NO_MSG(controller != NULL);
     8c6:	4c34      	ldr	r4, [pc, #208]	; (998 <heartbeat_function+0x148>)
     8c8:	2315      	movs	r3, #21
     8ca:	4622      	mov	r2, r4
     8cc:	4933      	ldr	r1, [pc, #204]	; (99c <heartbeat_function+0x14c>)
     8ce:	4834      	ldr	r0, [pc, #208]	; (9a0 <heartbeat_function+0x150>)
     8d0:	f00e ffd5 	bl	f87e <printk>
     8d4:	2115      	movs	r1, #21
     8d6:	4620      	mov	r0, r4
     8d8:	f00f f857 	bl	f98a <assert_post_action>
     8dc:	e7d9      	b.n	892 <heartbeat_function+0x42>
	__ASSERT(err == 0, "gpio_pin_configure (%d)", err);
     8de:	4c2e      	ldr	r4, [pc, #184]	; (998 <heartbeat_function+0x148>)
     8e0:	2318      	movs	r3, #24
     8e2:	4622      	mov	r2, r4
     8e4:	492f      	ldr	r1, [pc, #188]	; (9a4 <heartbeat_function+0x154>)
     8e6:	482e      	ldr	r0, [pc, #184]	; (9a0 <heartbeat_function+0x150>)
     8e8:	f00e ffc9 	bl	f87e <printk>
     8ec:	4631      	mov	r1, r6
     8ee:	482e      	ldr	r0, [pc, #184]	; (9a8 <heartbeat_function+0x158>)
     8f0:	f00e ffc5 	bl	f87e <printk>
     8f4:	2118      	movs	r1, #24
     8f6:	4620      	mov	r0, r4
     8f8:	f00f f847 	bl	f98a <assert_post_action>
     8fc:	e7d2      	b.n	8a4 <heartbeat_function+0x54>
	__ASSERT(err == 0, "gpio_pin_write (%d)", err);
     8fe:	4c26      	ldr	r4, [pc, #152]	; (998 <heartbeat_function+0x148>)
     900:	231b      	movs	r3, #27
     902:	4622      	mov	r2, r4
     904:	4927      	ldr	r1, [pc, #156]	; (9a4 <heartbeat_function+0x154>)
     906:	4826      	ldr	r0, [pc, #152]	; (9a0 <heartbeat_function+0x150>)
     908:	f00e ffb9 	bl	f87e <printk>
     90c:	4631      	mov	r1, r6
     90e:	4827      	ldr	r0, [pc, #156]	; (9ac <heartbeat_function+0x15c>)
     910:	f00e ffb5 	bl	f87e <printk>
     914:	211b      	movs	r1, #27
     916:	4620      	mov	r0, r4
     918:	f00f f837 	bl	f98a <assert_post_action>
     91c:	e7cb      	b.n	8b6 <heartbeat_function+0x66>
	const struct gpio_driver_api *api =
     91e:	686b      	ldr	r3, [r5, #4]
	return api->write(port, access_op, pin, value);
     920:	685e      	ldr	r6, [r3, #4]
     922:	2300      	movs	r3, #0
     924:	220d      	movs	r2, #13
     926:	4619      	mov	r1, r3
     928:	4628      	mov	r0, r5
     92a:	47b0      	blx	r6
K_SYSCALL_DECLARE1(K_SYSCALL_K_SLEEP, k_sleep, s32_t, s32_t, duration)
     92c:	2032      	movs	r0, #50	; 0x32
     92e:	f00d fcdf 	bl	e2f0 <z_impl_k_sleep>
	const struct gpio_driver_api *api =
     932:	686b      	ldr	r3, [r5, #4]
	return api->write(port, access_op, pin, value);
     934:	685e      	ldr	r6, [r3, #4]
     936:	2301      	movs	r3, #1
     938:	220d      	movs	r2, #13
     93a:	2100      	movs	r1, #0
     93c:	4628      	mov	r0, r5
     93e:	47b0      	blx	r6
				gpio_pin_write(controller, LED0_GPIO_PIN, 1);
				break;
			}
		}

		phase++;
     940:	3401      	adds	r4, #1
K_SYSCALL_DECLARE1(K_SYSCALL_K_TIMER_STATUS_SYNC, k_timer_status_sync, u32_t, struct k_timer *, timer)
     942:	4814      	ldr	r0, [pc, #80]	; (994 <heartbeat_function+0x144>)
     944:	f00e fc66 	bl	f214 <z_impl_k_timer_status_sync>
		switch (phase % 5)
     948:	4a19      	ldr	r2, [pc, #100]	; (9b0 <heartbeat_function+0x160>)
     94a:	fb82 3204 	smull	r3, r2, r2, r4
     94e:	17e3      	asrs	r3, r4, #31
     950:	ebc3 0362 	rsb	r3, r3, r2, asr #1
     954:	eb03 0383 	add.w	r3, r3, r3, lsl #2
     958:	1ae3      	subs	r3, r4, r3
     95a:	d0e0      	beq.n	91e <heartbeat_function+0xce>
     95c:	2b01      	cmp	r3, #1
     95e:	d1ef      	bne.n	940 <heartbeat_function+0xf0>
	const struct gpio_driver_api *api =
     960:	686b      	ldr	r3, [r5, #4]
	return api->write(port, access_op, pin, value);
     962:	685e      	ldr	r6, [r3, #4]
     964:	2300      	movs	r3, #0
     966:	220d      	movs	r2, #13
     968:	4619      	mov	r1, r3
     96a:	4628      	mov	r0, r5
     96c:	47b0      	blx	r6
K_SYSCALL_DECLARE1(K_SYSCALL_K_SLEEP, k_sleep, s32_t, s32_t, duration)
     96e:	2032      	movs	r0, #50	; 0x32
     970:	f00d fcbe 	bl	e2f0 <z_impl_k_sleep>
	const struct gpio_driver_api *api =
     974:	686b      	ldr	r3, [r5, #4]
	return api->write(port, access_op, pin, value);
     976:	685e      	ldr	r6, [r3, #4]
     978:	2301      	movs	r3, #1
     97a:	220d      	movs	r2, #13
     97c:	2100      	movs	r1, #0
     97e:	4628      	mov	r0, r5
     980:	47b0      	blx	r6
     982:	e7dd      	b.n	940 <heartbeat_function+0xf0>
     984:	00010dfc 	.word	0x00010dfc
     988:	00010dd4 	.word	0x00010dd4
     98c:	00010f3c 	.word	0x00010f3c
     990:	00010ff0 	.word	0x00010ff0
     994:	200073bc 	.word	0x200073bc
     998:	00010ff8 	.word	0x00010ff8
     99c:	00011038 	.word	0x00011038
     9a0:	00010f8c 	.word	0x00010f8c
     9a4:	00010f80 	.word	0x00010f80
     9a8:	00011054 	.word	0x00011054
     9ac:	00011070 	.word	0x00011070
     9b0:	66666667 	.word	0x66666667

000009b4 <led_init>:
static const u32_t led1_gpio_pin = LED1_GPIO_PIN;
static const u32_t led2_gpio_pin = LED2_GPIO_PIN;
static const u32_t led3_gpio_pin = LED3_GPIO_PIN;

static void led_init(struct device* controller, u32_t* pin)
{
     9b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     9b6:	4604      	mov	r4, r0
     9b8:	460d      	mov	r5, r1
	const struct gpio_driver_api *api =
     9ba:	6843      	ldr	r3, [r0, #4]
	return api->config(port, access_op, pin, flags);
     9bc:	681e      	ldr	r6, [r3, #0]
     9be:	2301      	movs	r3, #1
     9c0:	680a      	ldr	r2, [r1, #0]
     9c2:	2100      	movs	r1, #0
     9c4:	47b0      	blx	r6
	int err __unused = 0;

	err = gpio_pin_configure(controller, *pin, GPIO_DIR_OUT);
	__ASSERT(err == 0, "gpio_pin_configure (%d)", err);
     9c6:	b948      	cbnz	r0, 9dc <led_init+0x28>
	const struct gpio_driver_api *api =
     9c8:	6863      	ldr	r3, [r4, #4]
	return api->write(port, access_op, pin, value);
     9ca:	685e      	ldr	r6, [r3, #4]
     9cc:	2301      	movs	r3, #1
     9ce:	682a      	ldr	r2, [r5, #0]
     9d0:	2100      	movs	r1, #0
     9d2:	4620      	mov	r0, r4
     9d4:	47b0      	blx	r6

	err = gpio_pin_write(controller, *pin, led_off);
	__ASSERT(err == 0, "gpio_pin_write (%d)", err);
     9d6:	4604      	mov	r4, r0
     9d8:	b988      	cbnz	r0, 9fe <led_init+0x4a>
}
     9da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     9dc:	4606      	mov	r6, r0
	__ASSERT(err == 0, "gpio_pin_configure (%d)", err);
     9de:	4f10      	ldr	r7, [pc, #64]	; (a20 <led_init+0x6c>)
     9e0:	231b      	movs	r3, #27
     9e2:	463a      	mov	r2, r7
     9e4:	490f      	ldr	r1, [pc, #60]	; (a24 <led_init+0x70>)
     9e6:	4810      	ldr	r0, [pc, #64]	; (a28 <led_init+0x74>)
     9e8:	f00e ff49 	bl	f87e <printk>
     9ec:	4631      	mov	r1, r6
     9ee:	480f      	ldr	r0, [pc, #60]	; (a2c <led_init+0x78>)
     9f0:	f00e ff45 	bl	f87e <printk>
     9f4:	211b      	movs	r1, #27
     9f6:	4638      	mov	r0, r7
     9f8:	f00e ffc7 	bl	f98a <assert_post_action>
     9fc:	e7e4      	b.n	9c8 <led_init+0x14>
	__ASSERT(err == 0, "gpio_pin_write (%d)", err);
     9fe:	4d08      	ldr	r5, [pc, #32]	; (a20 <led_init+0x6c>)
     a00:	231e      	movs	r3, #30
     a02:	462a      	mov	r2, r5
     a04:	4907      	ldr	r1, [pc, #28]	; (a24 <led_init+0x70>)
     a06:	4808      	ldr	r0, [pc, #32]	; (a28 <led_init+0x74>)
     a08:	f00e ff39 	bl	f87e <printk>
     a0c:	4621      	mov	r1, r4
     a0e:	4808      	ldr	r0, [pc, #32]	; (a30 <led_init+0x7c>)
     a10:	f00e ff35 	bl	f87e <printk>
     a14:	211e      	movs	r1, #30
     a16:	4628      	mov	r0, r5
     a18:	f00e ffb7 	bl	f98a <assert_post_action>
}
     a1c:	e7dd      	b.n	9da <led_init+0x26>
     a1e:	bf00      	nop
     a20:	000110a8 	.word	0x000110a8
     a24:	00010f80 	.word	0x00010f80
     a28:	00010f8c 	.word	0x00010f8c
     a2c:	00011054 	.word	0x00011054
     a30:	00011070 	.word	0x00011070

00000a34 <led_hold>:

void led_hold(char* device_name, u32_t* pin, struct k_sem* alert)
{
     a34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     a38:	4605      	mov	r5, r0
     a3a:	460e      	mov	r6, r1
     a3c:	4617      	mov	r7, r2
	LOG_INF("%s (%p)", k_thread_name_get(k_current_get()), k_current_get());
     a3e:	f04f 0400 	mov.w	r4, #0
     a42:	2303      	movs	r3, #3
     a44:	f363 0402 	bfi	r4, r3, #0, #3
     a48:	f36f 04c5 	bfc	r4, #3, #3
     a4c:	4b1a      	ldr	r3, [pc, #104]	; (ab8 <led_hold+0x84>)
     a4e:	4a1b      	ldr	r2, [pc, #108]	; (abc <led_hold+0x88>)
     a50:	1a9b      	subs	r3, r3, r2
     a52:	f3c3 03c9 	ubfx	r3, r3, #3, #10
     a56:	f363 148f 	bfi	r4, r3, #6, #10
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t)
     a5a:	f00d fd83 	bl	e564 <z_impl_k_current_get>
K_SYSCALL_DECLARE1(K_SYSCALL_K_THREAD_NAME_GET, k_thread_name_get, const char *, k_tid_t, thread_id)
     a5e:	f010 f847 	bl	10af0 <z_impl_k_thread_name_get>
     a62:	4680      	mov	r8, r0
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t)
     a64:	f00d fd7e 	bl	e564 <z_impl_k_current_get>
     a68:	4623      	mov	r3, r4
     a6a:	4602      	mov	r2, r0
     a6c:	4641      	mov	r1, r8
     a6e:	4814      	ldr	r0, [pc, #80]	; (ac0 <led_hold+0x8c>)
     a70:	f004 fad2 	bl	5018 <log_2>
     a74:	4628      	mov	r0, r5
     a76:	f00b fcb9 	bl	c3ec <z_impl_device_get_binding>

	struct device* controller = device_get_binding(device_name);
	__ASSERT_NO_MSG(controller != NULL);
     a7a:	4604      	mov	r4, r0
     a7c:	b180      	cbz	r0, aa0 <led_hold+0x6c>

	led_init(controller, pin);
     a7e:	4631      	mov	r1, r6
     a80:	4620      	mov	r0, r4
     a82:	f7ff ff97 	bl	9b4 <led_init>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout)
     a86:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
     a8a:	4638      	mov	r0, r7
     a8c:	f00d fdda 	bl	e644 <z_impl_k_sem_take>
	const struct gpio_driver_api *api =
     a90:	6863      	ldr	r3, [r4, #4]
	return api->write(port, access_op, pin, value);
     a92:	685d      	ldr	r5, [r3, #4]
     a94:	2300      	movs	r3, #0
     a96:	6832      	ldr	r2, [r6, #0]
     a98:	4619      	mov	r1, r3
     a9a:	4620      	mov	r0, r4
     a9c:	47a8      	blx	r5
     a9e:	e7f2      	b.n	a86 <led_hold+0x52>
	__ASSERT_NO_MSG(controller != NULL);
     aa0:	4d08      	ldr	r5, [pc, #32]	; (ac4 <led_hold+0x90>)
     aa2:	2326      	movs	r3, #38	; 0x26
     aa4:	462a      	mov	r2, r5
     aa6:	4908      	ldr	r1, [pc, #32]	; (ac8 <led_hold+0x94>)
     aa8:	4808      	ldr	r0, [pc, #32]	; (acc <led_hold+0x98>)
     aaa:	f00e fee8 	bl	f87e <printk>
     aae:	2126      	movs	r1, #38	; 0x26
     ab0:	4628      	mov	r0, r5
     ab2:	f00e ff6a 	bl	f98a <assert_post_action>
     ab6:	e7e2      	b.n	a7e <led_hold+0x4a>
     ab8:	00010dfc 	.word	0x00010dfc
     abc:	00010dd4 	.word	0x00010dd4
     ac0:	00010f3c 	.word	0x00010f3c
     ac4:	000110a8 	.word	0x000110a8
     ac8:	00011038 	.word	0x00011038
     acc:	00010f8c 	.word	0x00010f8c

00000ad0 <led_flash>:
		gpio_pin_write(controller, *pin, led_on);
	}
}

void led_flash(char* device_name, u32_t* pin, struct k_sem* alert)
{
     ad0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     ad4:	4606      	mov	r6, r0
     ad6:	460d      	mov	r5, r1
     ad8:	4617      	mov	r7, r2
	LOG_INF("%s (%p)", k_thread_name_get(k_current_get()), k_current_get());
     ada:	f04f 0400 	mov.w	r4, #0
     ade:	2303      	movs	r3, #3
     ae0:	f363 0402 	bfi	r4, r3, #0, #3
     ae4:	f36f 04c5 	bfc	r4, #3, #3
     ae8:	4b1f      	ldr	r3, [pc, #124]	; (b68 <led_flash+0x98>)
     aea:	4a20      	ldr	r2, [pc, #128]	; (b6c <led_flash+0x9c>)
     aec:	1a9b      	subs	r3, r3, r2
     aee:	f3c3 03c9 	ubfx	r3, r3, #3, #10
     af2:	f363 148f 	bfi	r4, r3, #6, #10
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t)
     af6:	f00d fd35 	bl	e564 <z_impl_k_current_get>
K_SYSCALL_DECLARE1(K_SYSCALL_K_THREAD_NAME_GET, k_thread_name_get, const char *, k_tid_t, thread_id)
     afa:	f00f fff9 	bl	10af0 <z_impl_k_thread_name_get>
     afe:	4680      	mov	r8, r0
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t)
     b00:	f00d fd30 	bl	e564 <z_impl_k_current_get>
     b04:	4623      	mov	r3, r4
     b06:	4602      	mov	r2, r0
     b08:	4641      	mov	r1, r8
     b0a:	4819      	ldr	r0, [pc, #100]	; (b70 <led_flash+0xa0>)
     b0c:	f004 fa84 	bl	5018 <log_2>
     b10:	4630      	mov	r0, r6
     b12:	f00b fc6b 	bl	c3ec <z_impl_device_get_binding>

	struct device* controller = device_get_binding(device_name);
	__ASSERT_NO_MSG(controller != NULL);
     b16:	4604      	mov	r4, r0
     b18:	b1d0      	cbz	r0, b50 <led_flash+0x80>

	led_init(controller, pin);
     b1a:	4629      	mov	r1, r5
     b1c:	4620      	mov	r0, r4
     b1e:	f7ff ff49 	bl	9b4 <led_init>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout)
     b22:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
     b26:	4638      	mov	r0, r7
     b28:	f00d fd8c 	bl	e644 <z_impl_k_sem_take>
	const struct gpio_driver_api *api =
     b2c:	6863      	ldr	r3, [r4, #4]
	return api->write(port, access_op, pin, value);
     b2e:	685e      	ldr	r6, [r3, #4]
     b30:	2300      	movs	r3, #0
     b32:	682a      	ldr	r2, [r5, #0]
     b34:	4619      	mov	r1, r3
     b36:	4620      	mov	r0, r4
     b38:	47b0      	blx	r6
K_SYSCALL_DECLARE1(K_SYSCALL_K_SLEEP, k_sleep, s32_t, s32_t, duration)
     b3a:	2032      	movs	r0, #50	; 0x32
     b3c:	f00d fbd8 	bl	e2f0 <z_impl_k_sleep>
	const struct gpio_driver_api *api =
     b40:	6863      	ldr	r3, [r4, #4]
	return api->write(port, access_op, pin, value);
     b42:	685e      	ldr	r6, [r3, #4]
     b44:	2301      	movs	r3, #1
     b46:	682a      	ldr	r2, [r5, #0]
     b48:	2100      	movs	r1, #0
     b4a:	4620      	mov	r0, r4
     b4c:	47b0      	blx	r6
     b4e:	e7e8      	b.n	b22 <led_flash+0x52>
	__ASSERT_NO_MSG(controller != NULL);
     b50:	4e08      	ldr	r6, [pc, #32]	; (b74 <led_flash+0xa4>)
     b52:	2336      	movs	r3, #54	; 0x36
     b54:	4632      	mov	r2, r6
     b56:	4908      	ldr	r1, [pc, #32]	; (b78 <led_flash+0xa8>)
     b58:	4808      	ldr	r0, [pc, #32]	; (b7c <led_flash+0xac>)
     b5a:	f00e fe90 	bl	f87e <printk>
     b5e:	2136      	movs	r1, #54	; 0x36
     b60:	4630      	mov	r0, r6
     b62:	f00e ff12 	bl	f98a <assert_post_action>
     b66:	e7d8      	b.n	b1a <led_flash+0x4a>
     b68:	00010dfc 	.word	0x00010dfc
     b6c:	00010dd4 	.word	0x00010dd4
     b70:	00010f3c 	.word	0x00010f3c
     b74:	000110a8 	.word	0x000110a8
     b78:	00011038 	.word	0x00011038
     b7c:	00010f8c 	.word	0x00010f8c

00000b80 <hf_clock_init>:
    return ((uint32_t )NRF_CLOCK + task);
}

__STATIC_INLINE void nrf_clock_task_trigger(nrf_clock_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)NRF_CLOCK + task)) = 0x1UL;
     b80:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     b84:	2201      	movs	r2, #1
     b86:	601a      	str	r2, [r3, #0]
#endif
}

__STATIC_INLINE bool nrf_clock_event_check(nrf_clock_event_t event)
{
    return (bool)*((volatile uint32_t *)((uint8_t *)NRF_CLOCK + event));
     b88:	4b02      	ldr	r3, [pc, #8]	; (b94 <hf_clock_init+0x14>)
     b8a:	681b      	ldr	r3, [r3, #0]

void hf_clock_init(void)
{
	nrf_clock_task_trigger(NRF_CLOCK_TASK_HFCLKSTART);

	while (nrf_clock_event_check(NRF_CLOCK_EVENT_HFCLKSTARTED) == false)
     b8c:	b90b      	cbnz	r3, b92 <hf_clock_init+0x12>
	{
		__NOP();
     b8e:	bf00      	nop
     b90:	e7fa      	b.n	b88 <hf_clock_init+0x8>
	}
}
     b92:	4770      	bx	lr
     b94:	40000100 	.word	0x40000100

00000b98 <main>:

void main(void)
{
     b98:	b508      	push	{r3, lr}
	LOG_INF("%s", __func__);
     b9a:	f04f 0200 	mov.w	r2, #0
     b9e:	2303      	movs	r3, #3
     ba0:	f363 0202 	bfi	r2, r3, #0, #3
     ba4:	f36f 02c5 	bfc	r2, #3, #3
     ba8:	4b08      	ldr	r3, [pc, #32]	; (bcc <main+0x34>)
     baa:	4909      	ldr	r1, [pc, #36]	; (bd0 <main+0x38>)
     bac:	1a5b      	subs	r3, r3, r1
     bae:	f3c3 03c9 	ubfx	r3, r3, #3, #10
     bb2:	f363 128f 	bfi	r2, r3, #6, #10
     bb6:	4907      	ldr	r1, [pc, #28]	; (bd4 <main+0x3c>)
     bb8:	4807      	ldr	r0, [pc, #28]	; (bd8 <main+0x40>)
     bba:	f004 f9c7 	bl	4f4c <log_1>

	hf_clock_init();
     bbe:	f7ff ffdf 	bl	b80 <hf_clock_init>
	esb_init();
     bc2:	f7ff fd93 	bl	6ec <esb_init>
	serial_init();
     bc6:	f000 f89f 	bl	d08 <serial_init>
}
     bca:	bd08      	pop	{r3, pc}
     bcc:	00010dfc 	.word	0x00010dfc
     bd0:	00010dd4 	.word	0x00010dd4
     bd4:	0001113c 	.word	0x0001113c
     bd8:	00011144 	.word	0x00011144

00000bdc <serial_irq_callback>:
	PRIORITY,
	0,
	K_FOREVER);

void serial_irq_callback(struct device* device)
{
     bdc:	b5f0      	push	{r4, r5, r6, r7, lr}
     bde:	b083      	sub	sp, #12
     be0:	4604      	mov	r4, r0
 */
__syscall int uart_irq_update(struct device *dev);

static inline int z_impl_uart_irq_update(struct device *dev)
{
	const struct uart_driver_api *api =
     be2:	6843      	ldr	r3, [r0, #4]
		(const struct uart_driver_api *)dev->driver_api;

	if (api->irq_update) {
     be4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
     be6:	b103      	cbz	r3, bea <serial_irq_callback+0xe>
		return api->irq_update(dev);
     be8:	4798      	blx	r3
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem)
     bea:	481f      	ldr	r0, [pc, #124]	; (c68 <serial_irq_callback+0x8c>)
     bec:	f00d fcf6 	bl	e5dc <z_impl_k_sem_give>
	const struct uart_driver_api *api =
     bf0:	6863      	ldr	r3, [r4, #4]
	if (api->irq_rx_ready) {
     bf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     bf4:	b113      	cbz	r3, bfc <serial_irq_callback+0x20>
		return api->irq_rx_ready(dev);
     bf6:	4620      	mov	r0, r4
     bf8:	4798      	blx	r3
	uart_irq_update(device);

	k_sem_give(&wired_activity_alert);

	if (uart_irq_rx_ready(device))
     bfa:	b9b8      	cbnz	r0, c2c <serial_irq_callback+0x50>
			memcpy(message->data, buffer, received);
			message->length = received;
			k_fifo_put(&serial2wireless_fifo, message);
		}
	}
}
     bfc:	b003      	add	sp, #12
     bfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return 0;
     c00:	2000      	movs	r0, #0
			u32_t received = uart_fifo_read(device, buffer, 32);
     c02:	4605      	mov	r5, r0
			if (received <= 0)
     c04:	2800      	cmp	r0, #0
     c06:	d0f9      	beq.n	bfc <serial_irq_callback+0x20>
			int err = k_mem_slab_alloc(&package_buffer_slab, (void**)&message, K_NO_WAIT);
     c08:	2200      	movs	r2, #0
     c0a:	a901      	add	r1, sp, #4
     c0c:	4817      	ldr	r0, [pc, #92]	; (c6c <serial_irq_callback+0x90>)
     c0e:	f00b fd55 	bl	c6bc <k_mem_slab_alloc>
			__ASSERT(err == 0, "k_mem_slab_alloc (%d)", err);
     c12:	4606      	mov	r6, r0
     c14:	b9c0      	cbnz	r0, c48 <serial_irq_callback+0x6c>
			memcpy(message->data, buffer, received);
     c16:	462a      	mov	r2, r5
     c18:	4915      	ldr	r1, [pc, #84]	; (c70 <serial_irq_callback+0x94>)
     c1a:	9801      	ldr	r0, [sp, #4]
     c1c:	3008      	adds	r0, #8
     c1e:	f00f fc87 	bl	10530 <memcpy>
			message->length = received;
     c22:	9901      	ldr	r1, [sp, #4]
     c24:	604d      	str	r5, [r1, #4]
			k_fifo_put(&serial2wireless_fifo, message);
     c26:	4813      	ldr	r0, [pc, #76]	; (c74 <serial_irq_callback+0x98>)
     c28:	f00f ff07 	bl	10a3a <k_queue_append>
 * @return Number of unallocated memory blocks.
 * @req K-MSLAB-002
 */
static inline u32_t k_mem_slab_num_free_get(struct k_mem_slab *slab)
{
	return slab->num_blocks - slab->num_used;
     c2c:	4b0f      	ldr	r3, [pc, #60]	; (c6c <serial_irq_callback+0x90>)
     c2e:	689a      	ldr	r2, [r3, #8]
     c30:	699b      	ldr	r3, [r3, #24]
			if (!k_mem_slab_num_free_get(&package_buffer_slab))
     c32:	429a      	cmp	r2, r3
     c34:	d0e2      	beq.n	bfc <serial_irq_callback+0x20>
	const struct uart_driver_api *api =
     c36:	6863      	ldr	r3, [r4, #4]
	if (api->fifo_read) {
     c38:	699b      	ldr	r3, [r3, #24]
     c3a:	2b00      	cmp	r3, #0
     c3c:	d0e0      	beq.n	c00 <serial_irq_callback+0x24>
		return api->fifo_read(dev, rx_data, size);
     c3e:	2220      	movs	r2, #32
     c40:	490b      	ldr	r1, [pc, #44]	; (c70 <serial_irq_callback+0x94>)
     c42:	4620      	mov	r0, r4
     c44:	4798      	blx	r3
     c46:	e7dc      	b.n	c02 <serial_irq_callback+0x26>
			__ASSERT(err == 0, "k_mem_slab_alloc (%d)", err);
     c48:	4f0b      	ldr	r7, [pc, #44]	; (c78 <serial_irq_callback+0x9c>)
     c4a:	2340      	movs	r3, #64	; 0x40
     c4c:	463a      	mov	r2, r7
     c4e:	490b      	ldr	r1, [pc, #44]	; (c7c <serial_irq_callback+0xa0>)
     c50:	480b      	ldr	r0, [pc, #44]	; (c80 <serial_irq_callback+0xa4>)
     c52:	f00e fe14 	bl	f87e <printk>
     c56:	4631      	mov	r1, r6
     c58:	480a      	ldr	r0, [pc, #40]	; (c84 <serial_irq_callback+0xa8>)
     c5a:	f00e fe10 	bl	f87e <printk>
     c5e:	2140      	movs	r1, #64	; 0x40
     c60:	4638      	mov	r0, r7
     c62:	f00e fe92 	bl	f98a <assert_post_action>
     c66:	e7d6      	b.n	c16 <serial_irq_callback+0x3a>
     c68:	2000745c 	.word	0x2000745c
     c6c:	200073e8 	.word	0x200073e8
     c70:	200002c4 	.word	0x200002c4
     c74:	200074a4 	.word	0x200074a4
     c78:	00011160 	.word	0x00011160
     c7c:	00010f80 	.word	0x00010f80
     c80:	00010f8c 	.word	0x00010f8c
     c84:	00010eac 	.word	0x00010eac

00000c88 <serial_thread_function>:

void serial_thread_function(void* arg0, void* arg1, void* arg2)
{
     c88:	b530      	push	{r4, r5, lr}
     c8a:	b083      	sub	sp, #12
	LOG_INF("%s (%p)", k_thread_name_get(k_current_get()), k_current_get());
     c8c:	f04f 0400 	mov.w	r4, #0
     c90:	2303      	movs	r3, #3
     c92:	f363 0402 	bfi	r4, r3, #0, #3
     c96:	f36f 04c5 	bfc	r4, #3, #3
     c9a:	4b15      	ldr	r3, [pc, #84]	; (cf0 <serial_thread_function+0x68>)
     c9c:	4a15      	ldr	r2, [pc, #84]	; (cf4 <serial_thread_function+0x6c>)
     c9e:	1a9b      	subs	r3, r3, r2
     ca0:	f3c3 03c9 	ubfx	r3, r3, #3, #10
     ca4:	f363 148f 	bfi	r4, r3, #6, #10
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t)
     ca8:	f00d fc5c 	bl	e564 <z_impl_k_current_get>
K_SYSCALL_DECLARE1(K_SYSCALL_K_THREAD_NAME_GET, k_thread_name_get, const char *, k_tid_t, thread_id)
     cac:	f00f ff20 	bl	10af0 <z_impl_k_thread_name_get>
     cb0:	4605      	mov	r5, r0
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t)
     cb2:	f00d fc57 	bl	e564 <z_impl_k_current_get>
     cb6:	4623      	mov	r3, r4
     cb8:	4602      	mov	r2, r0
     cba:	4629      	mov	r1, r5
     cbc:	480e      	ldr	r0, [pc, #56]	; (cf8 <serial_thread_function+0x70>)
     cbe:	f004 f9ab 	bl	5018 <log_2>
     cc2:	e003      	b.n	ccc <serial_thread_function+0x44>

	while (1)
	{
		struct message_t* message = k_fifo_get(&wireless2serial_fifo, K_FOREVER);
		uart_fifo_fill(serial_device, message->data, message->length);
		k_mem_slab_free(&package_buffer_slab, (void**)&message);
     cc4:	a901      	add	r1, sp, #4
     cc6:	480d      	ldr	r0, [pc, #52]	; (cfc <serial_thread_function+0x74>)
     cc8:	f00b fd80 	bl	c7cc <k_mem_slab_free>
K_SYSCALL_DECLARE2(K_SYSCALL_K_QUEUE_GET, k_queue_get, void *, struct k_queue *, queue, s32_t, timeout)
     ccc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
     cd0:	480b      	ldr	r0, [pc, #44]	; (d00 <serial_thread_function+0x78>)
     cd2:	f00c f9ad 	bl	d030 <z_impl_k_queue_get>
		struct message_t* message = k_fifo_get(&wireless2serial_fifo, K_FOREVER);
     cd6:	9001      	str	r0, [sp, #4]
		uart_fifo_fill(serial_device, message->data, message->length);
     cd8:	4b0a      	ldr	r3, [pc, #40]	; (d04 <serial_thread_function+0x7c>)
     cda:	681c      	ldr	r4, [r3, #0]
     cdc:	f100 0108 	add.w	r1, r0, #8
     ce0:	6842      	ldr	r2, [r0, #4]
	const struct uart_driver_api *api =
     ce2:	6863      	ldr	r3, [r4, #4]
	if (api->fifo_fill) {
     ce4:	695b      	ldr	r3, [r3, #20]
     ce6:	2b00      	cmp	r3, #0
     ce8:	d0ec      	beq.n	cc4 <serial_thread_function+0x3c>
		return api->fifo_fill(dev, tx_data, size);
     cea:	4620      	mov	r0, r4
     cec:	4798      	blx	r3
     cee:	e7e9      	b.n	cc4 <serial_thread_function+0x3c>
     cf0:	00010dfc 	.word	0x00010dfc
     cf4:	00010dd4 	.word	0x00010dd4
     cf8:	00010f3c 	.word	0x00010f3c
     cfc:	200073e8 	.word	0x200073e8
     d00:	200074b8 	.word	0x200074b8
     d04:	200002e4 	.word	0x200002e4

00000d08 <serial_init>:
	}
}

void serial_init(void)
{
     d08:	b508      	push	{r3, lr}
     d0a:	480b      	ldr	r0, [pc, #44]	; (d38 <serial_init+0x30>)
     d0c:	f00b fb6e 	bl	c3ec <z_impl_device_get_binding>
#ifdef CONFIG_SOC_NRF52840
	serial_device = device_get_binding(DT_NORDIC_NRF_USBD_VIRTUALCOM_LABEL);
     d10:	4b0a      	ldr	r3, [pc, #40]	; (d3c <serial_init+0x34>)
     d12:	6018      	str	r0, [r3, #0]
static inline void uart_irq_callback_user_data_set(
					struct device *dev,
					uart_irq_callback_user_data_t cb,
					void *user_data)
{
	const struct uart_driver_api *api =
     d14:	6843      	ldr	r3, [r0, #4]
		(const struct uart_driver_api *)dev->driver_api;

	if ((api != NULL) && (api->irq_callback_set != NULL)) {
     d16:	b123      	cbz	r3, d22 <serial_init+0x1a>
     d18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
     d1a:	b113      	cbz	r3, d22 <serial_init+0x1a>
		api->irq_callback_set(dev, cb, user_data);
     d1c:	4602      	mov	r2, r0
     d1e:	4908      	ldr	r1, [pc, #32]	; (d40 <serial_init+0x38>)
     d20:	4798      	blx	r3
#elif CONFIG_SOC_NRF52832
	serial_device = device_get_binding(UART_0_LABEL);
#endif

	uart_irq_callback_set(serial_device, serial_irq_callback);
	uart_irq_rx_enable(serial_device);
     d22:	4b06      	ldr	r3, [pc, #24]	; (d3c <serial_init+0x34>)
     d24:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api =
     d26:	6843      	ldr	r3, [r0, #4]
	if (api->irq_rx_enable) {
     d28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     d2a:	b103      	cbz	r3, d2e <serial_init+0x26>
		api->irq_rx_enable(dev);
     d2c:	4798      	blx	r3
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_START, k_thread_start, k_tid_t, thread)
     d2e:	4805      	ldr	r0, [pc, #20]	; (d44 <serial_init+0x3c>)
     d30:	f00d fdac 	bl	e88c <z_impl_k_thread_start>

	k_thread_start(serial_thread);
}
     d34:	bd08      	pop	{r3, pc}
     d36:	bf00      	nop
     d38:	00011154 	.word	0x00011154
     d3c:	200002e4 	.word	0x200002e4
     d40:	00000bdd 	.word	0x00000bdd
     d44:	20000258 	.word	0x20000258

00000d48 <bfree_recombine>:
}

/* Called with lock held */
static unsigned int bfree_recombine(struct sys_mem_pool_base *p, int level,
				    size_t *lsizes, int bn, unsigned int key)
{
     d48:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     d4c:	4604      	mov	r4, r0
     d4e:	460f      	mov	r7, r1
     d50:	4692      	mov	sl, r2
     d52:	461e      	mov	r6, r3
     d54:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
	while (level >= 0) {
     d58:	e03f      	b.n	dda <bfree_recombine+0x92>
		int i, lsz = lsizes[level];
		void *block = block_ptr(p, lsz, bn);

		__ASSERT(block_fits(p, block, lsz), "");
     d5a:	23a4      	movs	r3, #164	; 0xa4
     d5c:	4a4c      	ldr	r2, [pc, #304]	; (e90 <bfree_recombine+0x148>)
     d5e:	494d      	ldr	r1, [pc, #308]	; (e94 <bfree_recombine+0x14c>)
     d60:	484d      	ldr	r0, [pc, #308]	; (e98 <bfree_recombine+0x150>)
     d62:	f00e fd8c 	bl	f87e <printk>
     d66:	484d      	ldr	r0, [pc, #308]	; (e9c <bfree_recombine+0x154>)
     d68:	f00e fd89 	bl	f87e <printk>
     d6c:	21a4      	movs	r1, #164	; 0xa4
     d6e:	4848      	ldr	r0, [pc, #288]	; (e90 <bfree_recombine+0x148>)
     d70:	f00e fe0b 	bl	f98a <assert_post_action>
     d74:	e043      	b.n	dfe <bfree_recombine+0xb6>
		return 0;
     d76:	f04f 0b00 	mov.w	fp, #0
     d7a:	e069      	b.n	e50 <bfree_recombine+0x108>
		pool_irq_unlock(p, key);
		key = pool_irq_lock(p);

		/* Check if we can recombine its superblock, and repeat */
		if (level == 0 || partner_bits(p, level, bn) != 0xf) {
			return key;
     d7c:	4658      	mov	r0, fp
		level = level - 1;
		bn = bn / 4;
	}
	__ASSERT(0, "out of levels");
	return -1;
}
     d7e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				clear_free_bit(p, level, b);
     d82:	4642      	mov	r2, r8
     d84:	4639      	mov	r1, r7
     d86:	4620      	mov	r0, r4
     d88:	f00e fb20 	bl	f3cc <clear_free_bit>
				sys_dlist_remove(block_ptr(p, lsz, b));
     d8c:	4642      	mov	r2, r8
     d8e:	4629      	mov	r1, r5
     d90:	4620      	mov	r0, r4
     d92:	f00e fae5 	bl	f360 <block_ptr>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
     d96:	6842      	ldr	r2, [r0, #4]
     d98:	6803      	ldr	r3, [r0, #0]
     d9a:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
     d9c:	6842      	ldr	r2, [r0, #4]
     d9e:	605a      	str	r2, [r3, #4]
	node->next = NULL;
     da0:	2300      	movs	r3, #0
     da2:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
     da4:	6043      	str	r3, [r0, #4]
		for (i = 0; i < 4; i++) {
     da6:	f109 0901 	add.w	r9, r9, #1
     daa:	f1b9 0f03 	cmp.w	r9, #3
     dae:	dc0f      	bgt.n	dd0 <bfree_recombine+0x88>
			int b = (bn & ~3) + i;
     db0:	f026 0803 	bic.w	r8, r6, #3
     db4:	44c8      	add	r8, r9
			if (block_fits(p, block_ptr(p, lsz, b), lsz)) {
     db6:	4642      	mov	r2, r8
     db8:	4629      	mov	r1, r5
     dba:	4620      	mov	r0, r4
     dbc:	f00e fad0 	bl	f360 <block_ptr>
     dc0:	462a      	mov	r2, r5
     dc2:	4601      	mov	r1, r0
     dc4:	4620      	mov	r0, r4
     dc6:	f00e fb2b 	bl	f420 <block_fits>
     dca:	2800      	cmp	r0, #0
     dcc:	d0eb      	beq.n	da6 <bfree_recombine+0x5e>
     dce:	e7d8      	b.n	d82 <bfree_recombine+0x3a>
		level = level - 1;
     dd0:	3f01      	subs	r7, #1
		bn = bn / 4;
     dd2:	4633      	mov	r3, r6
     dd4:	2e00      	cmp	r6, #0
     dd6:	db47      	blt.n	e68 <bfree_recombine+0x120>
     dd8:	109e      	asrs	r6, r3, #2
	while (level >= 0) {
     dda:	2f00      	cmp	r7, #0
     ddc:	db46      	blt.n	e6c <bfree_recombine+0x124>
		int i, lsz = lsizes[level];
     dde:	46b9      	mov	r9, r7
     de0:	f85a 5027 	ldr.w	r5, [sl, r7, lsl #2]
		void *block = block_ptr(p, lsz, bn);
     de4:	4632      	mov	r2, r6
     de6:	4629      	mov	r1, r5
     de8:	4620      	mov	r0, r4
     dea:	f00e fab9 	bl	f360 <block_ptr>
     dee:	4680      	mov	r8, r0
		__ASSERT(block_fits(p, block, lsz), "");
     df0:	462a      	mov	r2, r5
     df2:	4601      	mov	r1, r0
     df4:	4620      	mov	r0, r4
     df6:	f00e fb13 	bl	f420 <block_fits>
     dfa:	2800      	cmp	r0, #0
     dfc:	d0ad      	beq.n	d5a <bfree_recombine+0x12>
		set_free_bit(p, level, bn);
     dfe:	4632      	mov	r2, r6
     e00:	4639      	mov	r1, r7
     e02:	4620      	mov	r0, r4
     e04:	f00e fad3 	bl	f3ae <set_free_bit>
		sys_dlist_append(&p->levels[level].free_list, block);
     e08:	68e3      	ldr	r3, [r4, #12]
     e0a:	eb09 0949 	add.w	r9, r9, r9, lsl #1
     e0e:	ea4f 0289 	mov.w	r2, r9, lsl #2
     e12:	4413      	add	r3, r2
     e14:	1d1a      	adds	r2, r3, #4
	node->next = list;
     e16:	f8c8 2000 	str.w	r2, [r8]
	node->prev = list->tail;
     e1a:	689a      	ldr	r2, [r3, #8]
     e1c:	f8c8 2004 	str.w	r2, [r8, #4]
	list->tail->next = node;
     e20:	f8c2 8000 	str.w	r8, [r2]
	list->tail = node;
     e24:	f8c3 8008 	str.w	r8, [r3, #8]
	if (p->flags & SYS_MEM_POOL_KERNEL) {
     e28:	7c23      	ldrb	r3, [r4, #16]
     e2a:	f013 0f01 	tst.w	r3, #1
     e2e:	d003      	beq.n	e38 <bfree_recombine+0xf0>
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
     e30:	f38b 8811 	msr	BASEPRI, fp
     e34:	f3bf 8f6f 	isb	sy
	if (p->flags & SYS_MEM_POOL_KERNEL) {
     e38:	7c23      	ldrb	r3, [r4, #16]
     e3a:	f013 0f01 	tst.w	r3, #1
     e3e:	d09a      	beq.n	d76 <bfree_recombine+0x2e>
	__asm__ volatile(
     e40:	f04f 0320 	mov.w	r3, #32
     e44:	f3ef 8b11 	mrs	fp, BASEPRI
     e48:	f383 8811 	msr	BASEPRI, r3
     e4c:	f3bf 8f6f 	isb	sy
		if (level == 0 || partner_bits(p, level, bn) != 0xf) {
     e50:	2f00      	cmp	r7, #0
     e52:	d093      	beq.n	d7c <bfree_recombine+0x34>
     e54:	4632      	mov	r2, r6
     e56:	4639      	mov	r1, r7
     e58:	4620      	mov	r0, r4
     e5a:	f00e fac7 	bl	f3ec <partner_bits>
     e5e:	280f      	cmp	r0, #15
     e60:	d18c      	bne.n	d7c <bfree_recombine+0x34>
		for (i = 0; i < 4; i++) {
     e62:	f04f 0900 	mov.w	r9, #0
     e66:	e7a0      	b.n	daa <bfree_recombine+0x62>
		bn = bn / 4;
     e68:	1cf3      	adds	r3, r6, #3
     e6a:	e7b5      	b.n	dd8 <bfree_recombine+0x90>
	__ASSERT(0, "out of levels");
     e6c:	4c08      	ldr	r4, [pc, #32]	; (e90 <bfree_recombine+0x148>)
     e6e:	23c0      	movs	r3, #192	; 0xc0
     e70:	4622      	mov	r2, r4
     e72:	490b      	ldr	r1, [pc, #44]	; (ea0 <bfree_recombine+0x158>)
     e74:	4808      	ldr	r0, [pc, #32]	; (e98 <bfree_recombine+0x150>)
     e76:	f00e fd02 	bl	f87e <printk>
     e7a:	480a      	ldr	r0, [pc, #40]	; (ea4 <bfree_recombine+0x15c>)
     e7c:	f00e fcff 	bl	f87e <printk>
     e80:	21c0      	movs	r1, #192	; 0xc0
     e82:	4620      	mov	r0, r4
     e84:	f00e fd81 	bl	f98a <assert_post_action>
	return -1;
     e88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     e8c:	e777      	b.n	d7e <bfree_recombine+0x36>
     e8e:	bf00      	nop
     e90:	000111b0 	.word	0x000111b0
     e94:	000111c4 	.word	0x000111c4
     e98:	00010f8c 	.word	0x00010f8c
     e9c:	000111e0 	.word	0x000111e0
     ea0:	00012ff0 	.word	0x00012ff0
     ea4:	000111e4 	.word	0x000111e4

00000ea8 <_printk_dec_ulong>:
 * @return N/A
 */
static void _printk_dec_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
     ea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     eac:	b083      	sub	sp, #12
     eae:	4682      	mov	sl, r0
     eb0:	9101      	str	r1, [sp, #4]
     eb2:	4615      	mov	r5, r2
     eb4:	469b      	mov	fp, r3
     eb6:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
	int found_largest_digit = 0;
	int remaining = 10; /* 10 digits max */
	int digits = 1;

	/* make sure we don't skip if value is zero */
	if (min_width <= 0) {
     eba:	f1b9 0f00 	cmp.w	r9, #0
     ebe:	dd2e      	ble.n	f1e <_printk_dec_ulong+0x76>
		min_width = 1;
     ec0:	f04f 0801 	mov.w	r8, #1
     ec4:	260a      	movs	r6, #10
     ec6:	2700      	movs	r7, #0
     ec8:	4c22      	ldr	r4, [pc, #136]	; (f54 <_printk_dec_ulong+0xac>)
     eca:	e012      	b.n	ef2 <_printk_dec_ulong+0x4a>
	}

	while (pos >= 9) {
		if (found_largest_digit != 0 || remainder > pos) {
			found_largest_digit = 1;
			out((int)((remainder / (pos + 1)) + 48), ctx);
     ecc:	1c60      	adds	r0, r4, #1
     ece:	fbb5 f0f0 	udiv	r0, r5, r0
     ed2:	9901      	ldr	r1, [sp, #4]
     ed4:	3030      	adds	r0, #48	; 0x30
     ed6:	47d0      	blx	sl
			digits++;
     ed8:	f108 0801 	add.w	r8, r8, #1
			found_largest_digit = 1;
     edc:	2701      	movs	r7, #1
		} else if (remaining <= min_width
				&& padding < PAD_SPACE_AFTER) {
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
			digits++;
		}
		remaining--;
     ede:	3e01      	subs	r6, #1
		remainder %= (pos + 1);
     ee0:	1c63      	adds	r3, r4, #1
     ee2:	fbb5 f2f3 	udiv	r2, r5, r3
     ee6:	fb03 5512 	mls	r5, r3, r2, r5
		pos /= 10;
     eea:	4b1b      	ldr	r3, [pc, #108]	; (f58 <_printk_dec_ulong+0xb0>)
     eec:	fba3 3404 	umull	r3, r4, r3, r4
     ef0:	08e4      	lsrs	r4, r4, #3
	while (pos >= 9) {
     ef2:	2c08      	cmp	r4, #8
     ef4:	d916      	bls.n	f24 <_printk_dec_ulong+0x7c>
		if (found_largest_digit != 0 || remainder > pos) {
     ef6:	2f00      	cmp	r7, #0
     ef8:	d1e8      	bne.n	ecc <_printk_dec_ulong+0x24>
     efa:	42ac      	cmp	r4, r5
     efc:	d3e6      	bcc.n	ecc <_printk_dec_ulong+0x24>
		} else if (remaining <= min_width
     efe:	454e      	cmp	r6, r9
     f00:	dced      	bgt.n	ede <_printk_dec_ulong+0x36>
				&& padding < PAD_SPACE_AFTER) {
     f02:	f1bb 0f02 	cmp.w	fp, #2
     f06:	d8ea      	bhi.n	ede <_printk_dec_ulong+0x36>
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
     f08:	f1bb 0f01 	cmp.w	fp, #1
     f0c:	d005      	beq.n	f1a <_printk_dec_ulong+0x72>
     f0e:	2020      	movs	r0, #32
     f10:	9901      	ldr	r1, [sp, #4]
     f12:	47d0      	blx	sl
			digits++;
     f14:	f108 0801 	add.w	r8, r8, #1
     f18:	e7e1      	b.n	ede <_printk_dec_ulong+0x36>
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
     f1a:	2030      	movs	r0, #48	; 0x30
     f1c:	e7f8      	b.n	f10 <_printk_dec_ulong+0x68>
		min_width = 1;
     f1e:	f04f 0901 	mov.w	r9, #1
     f22:	e7cd      	b.n	ec0 <_printk_dec_ulong+0x18>
	}
	out((int)(remainder + 48), ctx);
     f24:	9901      	ldr	r1, [sp, #4]
     f26:	f105 0030 	add.w	r0, r5, #48	; 0x30
     f2a:	47d0      	blx	sl

	if (padding == PAD_SPACE_AFTER) {
     f2c:	f1bb 0f03 	cmp.w	fp, #3
     f30:	d002      	beq.n	f38 <_printk_dec_ulong+0x90>
		remaining = min_width - digits;
		while (remaining-- > 0) {
			out(' ', ctx);
		}
	}
}
     f32:	b003      	add	sp, #12
     f34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		remaining = min_width - digits;
     f38:	eba9 0808 	sub.w	r8, r9, r8
		while (remaining-- > 0) {
     f3c:	e003      	b.n	f46 <_printk_dec_ulong+0x9e>
			out(' ', ctx);
     f3e:	9901      	ldr	r1, [sp, #4]
     f40:	2020      	movs	r0, #32
     f42:	47d0      	blx	sl
		while (remaining-- > 0) {
     f44:	46a0      	mov	r8, r4
     f46:	f108 34ff 	add.w	r4, r8, #4294967295	; 0xffffffff
     f4a:	f1b8 0f00 	cmp.w	r8, #0
     f4e:	dcf6      	bgt.n	f3e <_printk_dec_ulong+0x96>
     f50:	e7ef      	b.n	f32 <_printk_dec_ulong+0x8a>
     f52:	bf00      	nop
     f54:	3b9ac9ff 	.word	0x3b9ac9ff
     f58:	cccccccd 	.word	0xcccccccd

00000f5c <__printk_hook_install>:
	_char_out = fn;
     f5c:	4b01      	ldr	r3, [pc, #4]	; (f64 <__printk_hook_install+0x8>)
     f5e:	6018      	str	r0, [r3, #0]
}
     f60:	4770      	bx	lr
     f62:	bf00      	nop
     f64:	20007088 	.word	0x20007088

00000f68 <z_vprintk>:
{
     f68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     f6c:	b087      	sub	sp, #28
     f6e:	4607      	mov	r7, r0
     f70:	460e      	mov	r6, r1
     f72:	4614      	mov	r4, r2
     f74:	9305      	str	r3, [sp, #20]
	int long_ctr = 0;
     f76:	f04f 0900 	mov.w	r9, #0
	int min_width = -1;
     f7a:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
	enum pad_type padding = PAD_NONE;
     f7e:	46ca      	mov	sl, r9
	int might_format = 0; /* 1 if encountered a '%' */
     f80:	464d      	mov	r5, r9
	while (*fmt) {
     f82:	e002      	b.n	f8a <z_vprintk+0x22>
				out((int)*fmt, ctx);
     f84:	4631      	mov	r1, r6
     f86:	47b8      	blx	r7
		++fmt;
     f88:	3401      	adds	r4, #1
	while (*fmt) {
     f8a:	7820      	ldrb	r0, [r4, #0]
     f8c:	2800      	cmp	r0, #0
     f8e:	f000 81a7 	beq.w	12e0 <z_vprintk+0x378>
		if (!might_format) {
     f92:	b945      	cbnz	r5, fa6 <z_vprintk+0x3e>
			if (*fmt != '%') {
     f94:	2825      	cmp	r0, #37	; 0x25
     f96:	d1f5      	bne.n	f84 <z_vprintk+0x1c>
				long_ctr = 0;
     f98:	46a9      	mov	r9, r5
				min_width = -1;
     f9a:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
				padding = PAD_NONE;
     f9e:	f04f 0a00 	mov.w	sl, #0
				might_format = 1;
     fa2:	2501      	movs	r5, #1
     fa4:	e7f0      	b.n	f88 <z_vprintk+0x20>
			switch (*fmt) {
     fa6:	f1a0 0325 	sub.w	r3, r0, #37	; 0x25
     faa:	2b55      	cmp	r3, #85	; 0x55
     fac:	f200 818a 	bhi.w	12c4 <z_vprintk+0x35c>
     fb0:	a201      	add	r2, pc, #4	; (adr r2, fb8 <z_vprintk+0x50>)
     fb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     fb6:	bf00      	nop
     fb8:	000012bb 	.word	0x000012bb
     fbc:	000012c5 	.word	0x000012c5
     fc0:	000012c5 	.word	0x000012c5
     fc4:	000012c5 	.word	0x000012c5
     fc8:	000012c5 	.word	0x000012c5
     fcc:	000012c5 	.word	0x000012c5
     fd0:	000012c5 	.word	0x000012c5
     fd4:	000012c5 	.word	0x000012c5
     fd8:	000012d5 	.word	0x000012d5
     fdc:	000012c5 	.word	0x000012c5
     fe0:	000012c5 	.word	0x000012c5
     fe4:	00001111 	.word	0x00001111
     fe8:	0000111f 	.word	0x0000111f
     fec:	0000111f 	.word	0x0000111f
     ff0:	0000111f 	.word	0x0000111f
     ff4:	0000111f 	.word	0x0000111f
     ff8:	0000111f 	.word	0x0000111f
     ffc:	0000111f 	.word	0x0000111f
    1000:	0000111f 	.word	0x0000111f
    1004:	0000111f 	.word	0x0000111f
    1008:	0000111f 	.word	0x0000111f
    100c:	000012c5 	.word	0x000012c5
    1010:	000012c5 	.word	0x000012c5
    1014:	000012c5 	.word	0x000012c5
    1018:	000012c5 	.word	0x000012c5
    101c:	000012c5 	.word	0x000012c5
    1020:	000012c5 	.word	0x000012c5
    1024:	000012c5 	.word	0x000012c5
    1028:	000012c5 	.word	0x000012c5
    102c:	000012c5 	.word	0x000012c5
    1030:	000012c5 	.word	0x000012c5
    1034:	000012c5 	.word	0x000012c5
    1038:	000012c5 	.word	0x000012c5
    103c:	000012c5 	.word	0x000012c5
    1040:	000012c5 	.word	0x000012c5
    1044:	000012c5 	.word	0x000012c5
    1048:	000012c5 	.word	0x000012c5
    104c:	000012c5 	.word	0x000012c5
    1050:	000012c5 	.word	0x000012c5
    1054:	000012c5 	.word	0x000012c5
    1058:	000012c5 	.word	0x000012c5
    105c:	000012c5 	.word	0x000012c5
    1060:	000012c5 	.word	0x000012c5
    1064:	000012c5 	.word	0x000012c5
    1068:	000012c5 	.word	0x000012c5
    106c:	000012c5 	.word	0x000012c5
    1070:	000012c5 	.word	0x000012c5
    1074:	000012c5 	.word	0x000012c5
    1078:	000012c5 	.word	0x000012c5
    107c:	000012c5 	.word	0x000012c5
    1080:	000012c5 	.word	0x000012c5
    1084:	00001233 	.word	0x00001233
    1088:	000012c5 	.word	0x000012c5
    108c:	000012c5 	.word	0x000012c5
    1090:	000012c5 	.word	0x000012c5
    1094:	000012c5 	.word	0x000012c5
    1098:	000012c5 	.word	0x000012c5
    109c:	000012c5 	.word	0x000012c5
    10a0:	000012c5 	.word	0x000012c5
    10a4:	000012c5 	.word	0x000012c5
    10a8:	000012c5 	.word	0x000012c5
    10ac:	000012c5 	.word	0x000012c5
    10b0:	000012ab 	.word	0x000012ab
    10b4:	0000114d 	.word	0x0000114d
    10b8:	000012c5 	.word	0x000012c5
    10bc:	000012c5 	.word	0x000012c5
    10c0:	000012c5 	.word	0x000012c5
    10c4:	00000f89 	.word	0x00000f89
    10c8:	0000114d 	.word	0x0000114d
    10cc:	000012c5 	.word	0x000012c5
    10d0:	000012c5 	.word	0x000012c5
    10d4:	00001147 	.word	0x00001147
    10d8:	000012c5 	.word	0x000012c5
    10dc:	000012c5 	.word	0x000012c5
    10e0:	000012c5 	.word	0x000012c5
    10e4:	0000121f 	.word	0x0000121f
    10e8:	000012c5 	.word	0x000012c5
    10ec:	000012c5 	.word	0x000012c5
    10f0:	0000126b 	.word	0x0000126b
    10f4:	000012c5 	.word	0x000012c5
    10f8:	000011c7 	.word	0x000011c7
    10fc:	000012c5 	.word	0x000012c5
    1100:	000012c5 	.word	0x000012c5
    1104:	00001233 	.word	0x00001233
    1108:	000012c5 	.word	0x000012c5
    110c:	00000f89 	.word	0x00000f89
				if (min_width < 0 && padding == PAD_NONE) {
    1110:	f1b8 0f00 	cmp.w	r8, #0
    1114:	da03      	bge.n	111e <z_vprintk+0x1b6>
    1116:	f1ba 0f00 	cmp.w	sl, #0
    111a:	f000 80de 	beq.w	12da <z_vprintk+0x372>
				if (min_width < 0) {
    111e:	f1b8 0f00 	cmp.w	r8, #0
    1122:	db0d      	blt.n	1140 <z_vprintk+0x1d8>
					min_width = 10 * min_width + *fmt - '0';
    1124:	eb08 0888 	add.w	r8, r8, r8, lsl #2
    1128:	ea4f 0348 	mov.w	r3, r8, lsl #1
    112c:	4418      	add	r0, r3
    112e:	f1a0 0830 	sub.w	r8, r0, #48	; 0x30
				if (padding == PAD_NONE) {
    1132:	f1ba 0f00 	cmp.w	sl, #0
    1136:	f47f af27 	bne.w	f88 <z_vprintk+0x20>
					padding = PAD_SPACE_BEFORE;
    113a:	f04f 0a02 	mov.w	sl, #2
				goto still_might_format;
    113e:	e723      	b.n	f88 <z_vprintk+0x20>
					min_width = *fmt - '0';
    1140:	f1a0 0830 	sub.w	r8, r0, #48	; 0x30
    1144:	e7f5      	b.n	1132 <z_vprintk+0x1ca>
				long_ctr++;
    1146:	f109 0901 	add.w	r9, r9, #1
				goto still_might_format;
    114a:	e71d      	b.n	f88 <z_vprintk+0x20>
				if (long_ctr == 0) {
    114c:	f1b9 0f00 	cmp.w	r9, #0
    1150:	d10f      	bne.n	1172 <z_vprintk+0x20a>
					d = va_arg(ap, int);
    1152:	9b05      	ldr	r3, [sp, #20]
    1154:	1d1a      	adds	r2, r3, #4
    1156:	9205      	str	r2, [sp, #20]
    1158:	681d      	ldr	r5, [r3, #0]
				if (d < 0) {
    115a:	2d00      	cmp	r5, #0
    115c:	db2c      	blt.n	11b8 <z_vprintk+0x250>
				_printk_dec_ulong(out, ctx, d, padding,
    115e:	f8cd 8000 	str.w	r8, [sp]
    1162:	4653      	mov	r3, sl
    1164:	462a      	mov	r2, r5
    1166:	4631      	mov	r1, r6
    1168:	4638      	mov	r0, r7
    116a:	f7ff fe9d 	bl	ea8 <_printk_dec_ulong>
			might_format = 0;
    116e:	2500      	movs	r5, #0
				break;
    1170:	e70a      	b.n	f88 <z_vprintk+0x20>
				} else if (long_ctr == 1) {
    1172:	f1b9 0f01 	cmp.w	r9, #1
    1176:	d01a      	beq.n	11ae <z_vprintk+0x246>
					long long lld = va_arg(ap, long long);
    1178:	9b05      	ldr	r3, [sp, #20]
    117a:	3307      	adds	r3, #7
    117c:	f023 0307 	bic.w	r3, r3, #7
    1180:	f103 0208 	add.w	r2, r3, #8
    1184:	9205      	str	r2, [sp, #20]
    1186:	681d      	ldr	r5, [r3, #0]
    1188:	685b      	ldr	r3, [r3, #4]
					if (lld > INT32_MAX ||
    118a:	f115 4200 	adds.w	r2, r5, #2147483648	; 0x80000000
    118e:	9202      	str	r2, [sp, #8]
    1190:	f143 0300 	adc.w	r3, r3, #0
    1194:	9303      	str	r3, [sp, #12]
    1196:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    119a:	2b01      	cmp	r3, #1
    119c:	bf08      	it	eq
    119e:	2a00      	cmpeq	r2, #0
    11a0:	d3db      	bcc.n	115a <z_vprintk+0x1f2>
						print_err(out, ctx);
    11a2:	4631      	mov	r1, r6
    11a4:	4638      	mov	r0, r7
    11a6:	f00e fae6 	bl	f776 <print_err>
			might_format = 0;
    11aa:	2500      	movs	r5, #0
						break;
    11ac:	e6ec      	b.n	f88 <z_vprintk+0x20>
					long ld = va_arg(ap, long);
    11ae:	9b05      	ldr	r3, [sp, #20]
    11b0:	1d1a      	adds	r2, r3, #4
    11b2:	9205      	str	r2, [sp, #20]
    11b4:	681d      	ldr	r5, [r3, #0]
					d = (s32_t)ld;
    11b6:	e7d0      	b.n	115a <z_vprintk+0x1f2>
					out((int)'-', ctx);
    11b8:	4631      	mov	r1, r6
    11ba:	202d      	movs	r0, #45	; 0x2d
    11bc:	47b8      	blx	r7
					d = -d;
    11be:	426d      	negs	r5, r5
					min_width--;
    11c0:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    11c4:	e7cb      	b.n	115e <z_vprintk+0x1f6>
				if (long_ctr == 0) {
    11c6:	f1b9 0f00 	cmp.w	r9, #0
    11ca:	d10c      	bne.n	11e6 <z_vprintk+0x27e>
					u = va_arg(ap, unsigned int);
    11cc:	9b05      	ldr	r3, [sp, #20]
    11ce:	1d1a      	adds	r2, r3, #4
    11d0:	9205      	str	r2, [sp, #20]
    11d2:	681a      	ldr	r2, [r3, #0]
				_printk_dec_ulong(out, ctx, u, padding,
    11d4:	f8cd 8000 	str.w	r8, [sp]
    11d8:	4653      	mov	r3, sl
    11da:	4631      	mov	r1, r6
    11dc:	4638      	mov	r0, r7
    11de:	f7ff fe63 	bl	ea8 <_printk_dec_ulong>
			might_format = 0;
    11e2:	2500      	movs	r5, #0
				break;
    11e4:	e6d0      	b.n	f88 <z_vprintk+0x20>
				} else if (long_ctr == 1) {
    11e6:	f1b9 0f01 	cmp.w	r9, #1
    11ea:	d013      	beq.n	1214 <z_vprintk+0x2ac>
					unsigned long long llu =
    11ec:	9b05      	ldr	r3, [sp, #20]
    11ee:	3307      	adds	r3, #7
    11f0:	f023 0307 	bic.w	r3, r3, #7
    11f4:	f103 0208 	add.w	r2, r3, #8
    11f8:	9205      	str	r2, [sp, #20]
    11fa:	e9d3 2300 	ldrd	r2, r3, [r3]
					if (llu > INT32_MAX) {
    11fe:	2b00      	cmp	r3, #0
    1200:	bf08      	it	eq
    1202:	f1b2 4f00 	cmpeq.w	r2, #2147483648	; 0x80000000
    1206:	d3e5      	bcc.n	11d4 <z_vprintk+0x26c>
						print_err(out, ctx);
    1208:	4631      	mov	r1, r6
    120a:	4638      	mov	r0, r7
    120c:	f00e fab3 	bl	f776 <print_err>
			might_format = 0;
    1210:	2500      	movs	r5, #0
						break;
    1212:	e6b9      	b.n	f88 <z_vprintk+0x20>
					long lu = va_arg(ap, unsigned long);
    1214:	9b05      	ldr	r3, [sp, #20]
    1216:	1d1a      	adds	r2, r3, #4
    1218:	9205      	str	r2, [sp, #20]
    121a:	681a      	ldr	r2, [r3, #0]
					u = (u32_t)lu;
    121c:	e7da      	b.n	11d4 <z_vprintk+0x26c>
				  out('0', ctx);
    121e:	4631      	mov	r1, r6
    1220:	2030      	movs	r0, #48	; 0x30
    1222:	47b8      	blx	r7
				  out('x', ctx);
    1224:	4631      	mov	r1, r6
    1226:	2078      	movs	r0, #120	; 0x78
    1228:	47b8      	blx	r7
				  min_width = 8;
    122a:	f04f 0808 	mov.w	r8, #8
				  padding = PAD_ZERO_BEFORE;
    122e:	f04f 0a01 	mov.w	sl, #1
				if (long_ctr < 2) {
    1232:	f1b9 0f01 	cmp.w	r9, #1
    1236:	dd12      	ble.n	125e <z_vprintk+0x2f6>
					x = va_arg(ap, unsigned long long);
    1238:	9b05      	ldr	r3, [sp, #20]
    123a:	3307      	adds	r3, #7
    123c:	f023 0307 	bic.w	r3, r3, #7
    1240:	f103 0208 	add.w	r2, r3, #8
    1244:	9205      	str	r2, [sp, #20]
    1246:	681a      	ldr	r2, [r3, #0]
    1248:	685b      	ldr	r3, [r3, #4]
				_printk_hex_ulong(out, ctx, x, padding,
    124a:	f8cd 8004 	str.w	r8, [sp, #4]
    124e:	f8cd a000 	str.w	sl, [sp]
    1252:	4631      	mov	r1, r6
    1254:	4638      	mov	r0, r7
    1256:	f00e fa9a 	bl	f78e <_printk_hex_ulong>
			might_format = 0;
    125a:	2500      	movs	r5, #0
				break;
    125c:	e694      	b.n	f88 <z_vprintk+0x20>
					x = va_arg(ap, unsigned long);
    125e:	9b05      	ldr	r3, [sp, #20]
    1260:	1d1a      	adds	r2, r3, #4
    1262:	9205      	str	r2, [sp, #20]
    1264:	681a      	ldr	r2, [r3, #0]
    1266:	2300      	movs	r3, #0
    1268:	e7ef      	b.n	124a <z_vprintk+0x2e2>
				char *s = va_arg(ap, char *);
    126a:	9b05      	ldr	r3, [sp, #20]
    126c:	1d1a      	adds	r2, r3, #4
    126e:	9205      	str	r2, [sp, #20]
    1270:	f8d3 b000 	ldr.w	fp, [r3]
    1274:	465d      	mov	r5, fp
				while (*s)
    1276:	e002      	b.n	127e <z_vprintk+0x316>
					out((int)(*s++), ctx);
    1278:	3501      	adds	r5, #1
    127a:	4631      	mov	r1, r6
    127c:	47b8      	blx	r7
				while (*s)
    127e:	7828      	ldrb	r0, [r5, #0]
    1280:	2800      	cmp	r0, #0
    1282:	d1f9      	bne.n	1278 <z_vprintk+0x310>
				if (padding == PAD_SPACE_AFTER) {
    1284:	f1ba 0f03 	cmp.w	sl, #3
    1288:	d001      	beq.n	128e <z_vprintk+0x326>
			might_format = 0;
    128a:	2500      	movs	r5, #0
    128c:	e67c      	b.n	f88 <z_vprintk+0x20>
					int remaining = min_width - (s - start);
    128e:	eba5 030b 	sub.w	r3, r5, fp
    1292:	eba8 0303 	sub.w	r3, r8, r3
					while (remaining-- > 0) {
    1296:	e003      	b.n	12a0 <z_vprintk+0x338>
						out(' ', ctx);
    1298:	4631      	mov	r1, r6
    129a:	2020      	movs	r0, #32
    129c:	47b8      	blx	r7
					while (remaining-- > 0) {
    129e:	462b      	mov	r3, r5
    12a0:	1e5d      	subs	r5, r3, #1
    12a2:	2b00      	cmp	r3, #0
    12a4:	dcf8      	bgt.n	1298 <z_vprintk+0x330>
			might_format = 0;
    12a6:	2500      	movs	r5, #0
    12a8:	e66e      	b.n	f88 <z_vprintk+0x20>
				int c = va_arg(ap, int);
    12aa:	9b05      	ldr	r3, [sp, #20]
    12ac:	1d1a      	adds	r2, r3, #4
    12ae:	9205      	str	r2, [sp, #20]
				out(c, ctx);
    12b0:	4631      	mov	r1, r6
    12b2:	6818      	ldr	r0, [r3, #0]
    12b4:	47b8      	blx	r7
			might_format = 0;
    12b6:	2500      	movs	r5, #0
				break;
    12b8:	e666      	b.n	f88 <z_vprintk+0x20>
				out((int)'%', ctx);
    12ba:	4631      	mov	r1, r6
    12bc:	2025      	movs	r0, #37	; 0x25
    12be:	47b8      	blx	r7
			might_format = 0;
    12c0:	2500      	movs	r5, #0
				break;
    12c2:	e661      	b.n	f88 <z_vprintk+0x20>
				out((int)'%', ctx);
    12c4:	4631      	mov	r1, r6
    12c6:	2025      	movs	r0, #37	; 0x25
    12c8:	47b8      	blx	r7
				out((int)*fmt, ctx);
    12ca:	4631      	mov	r1, r6
    12cc:	7820      	ldrb	r0, [r4, #0]
    12ce:	47b8      	blx	r7
			might_format = 0;
    12d0:	2500      	movs	r5, #0
				break;
    12d2:	e659      	b.n	f88 <z_vprintk+0x20>
				padding = PAD_SPACE_AFTER;
    12d4:	f04f 0a03 	mov.w	sl, #3
    12d8:	e656      	b.n	f88 <z_vprintk+0x20>
					padding = PAD_ZERO_BEFORE;
    12da:	f04f 0a01 	mov.w	sl, #1
    12de:	e653      	b.n	f88 <z_vprintk+0x20>
}
    12e0:	b007      	add	sp, #28
    12e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    12e6:	bf00      	nop

000012e8 <vsnprintk>:

	return ctx.count;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
    12e8:	b510      	push	{r4, lr}
    12ea:	b084      	sub	sp, #16
    12ec:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
    12ee:	9001      	str	r0, [sp, #4]
    12f0:	9102      	str	r1, [sp, #8]
    12f2:	2100      	movs	r1, #0
    12f4:	9103      	str	r1, [sp, #12]

	z_vprintk((out_func_t)str_out, &ctx, fmt, ap);
    12f6:	a901      	add	r1, sp, #4
    12f8:	4805      	ldr	r0, [pc, #20]	; (1310 <vsnprintk+0x28>)
    12fa:	f7ff fe35 	bl	f68 <z_vprintk>

	if (ctx.count < ctx.max) {
    12fe:	9b03      	ldr	r3, [sp, #12]
    1300:	9a02      	ldr	r2, [sp, #8]
    1302:	4293      	cmp	r3, r2
    1304:	da01      	bge.n	130a <vsnprintk+0x22>
		str[ctx.count] = '\0';
    1306:	2200      	movs	r2, #0
    1308:	54e2      	strb	r2, [r4, r3]
	}

	return ctx.count;
}
    130a:	9803      	ldr	r0, [sp, #12]
    130c:	b004      	add	sp, #16
    130e:	bd10      	pop	{r4, pc}
    1310:	0000f84f 	.word	0x0000f84f

00001314 <ring_buf_put>:

	return 0;
}

u32_t ring_buf_put(struct ring_buf *buf, const u8_t *data, u32_t size)
{
    1314:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1318:	b082      	sub	sp, #8
    131a:	4680      	mov	r8, r0
    131c:	460e      	mov	r6, r1
    131e:	4615      	mov	r5, r2
	u8_t *dst;
	u32_t partial_size;
	u32_t total_size = 0U;
    1320:	2700      	movs	r7, #0
	int err;

	do {
		partial_size = ring_buf_put_claim(buf, &dst, size);
    1322:	462a      	mov	r2, r5
    1324:	a901      	add	r1, sp, #4
    1326:	4640      	mov	r0, r8
    1328:	f00e fab7 	bl	f89a <ring_buf_put_claim>
    132c:	4604      	mov	r4, r0
		memcpy(dst, data, partial_size);
    132e:	4602      	mov	r2, r0
    1330:	4631      	mov	r1, r6
    1332:	9801      	ldr	r0, [sp, #4]
    1334:	f00f f8fc 	bl	10530 <memcpy>
		total_size += partial_size;
    1338:	4427      	add	r7, r4
		size -= partial_size;
		data += partial_size;
    133a:	4426      	add	r6, r4
	} while (size && partial_size);
    133c:	1b2d      	subs	r5, r5, r4
    133e:	d001      	beq.n	1344 <ring_buf_put+0x30>
    1340:	2c00      	cmp	r4, #0
    1342:	d1ee      	bne.n	1322 <ring_buf_put+0xe>

	err = ring_buf_put_finish(buf, total_size);
    1344:	4639      	mov	r1, r7
    1346:	4640      	mov	r0, r8
    1348:	f00e fac7 	bl	f8da <ring_buf_put_finish>
	__ASSERT_NO_MSG(err == 0);
    134c:	b918      	cbnz	r0, 1356 <ring_buf_put+0x42>

	return total_size;
}
    134e:	4638      	mov	r0, r7
    1350:	b002      	add	sp, #8
    1352:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT_NO_MSG(err == 0);
    1356:	4c06      	ldr	r4, [pc, #24]	; (1370 <ring_buf_put+0x5c>)
    1358:	239e      	movs	r3, #158	; 0x9e
    135a:	4622      	mov	r2, r4
    135c:	4905      	ldr	r1, [pc, #20]	; (1374 <ring_buf_put+0x60>)
    135e:	4806      	ldr	r0, [pc, #24]	; (1378 <ring_buf_put+0x64>)
    1360:	f00e fa8d 	bl	f87e <printk>
    1364:	219e      	movs	r1, #158	; 0x9e
    1366:	4620      	mov	r0, r4
    1368:	f00e fb0f 	bl	f98a <assert_post_action>
	return total_size;
    136c:	e7ef      	b.n	134e <ring_buf_put+0x3a>
    136e:	bf00      	nop
    1370:	000111f4 	.word	0x000111f4
    1374:	00010f80 	.word	0x00010f80
    1378:	00010f8c 	.word	0x00010f8c

0000137c <ring_buf_get>:

	return 0;
}

u32_t ring_buf_get(struct ring_buf *buf, u8_t *data, u32_t size)
{
    137c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1380:	b082      	sub	sp, #8
    1382:	4680      	mov	r8, r0
    1384:	460e      	mov	r6, r1
    1386:	4615      	mov	r5, r2
	u8_t *src;
	u32_t partial_size;
	u32_t total_size = 0U;
    1388:	2700      	movs	r7, #0
	int err;

	do {
		partial_size = ring_buf_get_claim(buf, &src, size);
    138a:	462a      	mov	r2, r5
    138c:	a901      	add	r1, sp, #4
    138e:	4640      	mov	r0, r8
    1390:	f00e fabd 	bl	f90e <ring_buf_get_claim>
    1394:	4604      	mov	r4, r0
		memcpy(data, src, partial_size);
    1396:	4602      	mov	r2, r0
    1398:	9901      	ldr	r1, [sp, #4]
    139a:	4630      	mov	r0, r6
    139c:	f00f f8c8 	bl	10530 <memcpy>
		total_size += partial_size;
    13a0:	4427      	add	r7, r4
		size -= partial_size;
		data += partial_size;
    13a2:	4426      	add	r6, r4
	} while (size && partial_size);
    13a4:	1b2d      	subs	r5, r5, r4
    13a6:	d001      	beq.n	13ac <ring_buf_get+0x30>
    13a8:	2c00      	cmp	r4, #0
    13aa:	d1ee      	bne.n	138a <ring_buf_get+0xe>

	err = ring_buf_get_finish(buf, total_size);
    13ac:	4639      	mov	r1, r7
    13ae:	4640      	mov	r0, r8
    13b0:	f00e facf 	bl	f952 <ring_buf_get_finish>
	__ASSERT_NO_MSG(err == 0);
    13b4:	b918      	cbnz	r0, 13be <ring_buf_get+0x42>

	return total_size;
}
    13b6:	4638      	mov	r0, r7
    13b8:	b002      	add	sp, #8
    13ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT_NO_MSG(err == 0);
    13be:	4c06      	ldr	r4, [pc, #24]	; (13d8 <ring_buf_get+0x5c>)
    13c0:	23d8      	movs	r3, #216	; 0xd8
    13c2:	4622      	mov	r2, r4
    13c4:	4905      	ldr	r1, [pc, #20]	; (13dc <ring_buf_get+0x60>)
    13c6:	4806      	ldr	r0, [pc, #24]	; (13e0 <ring_buf_get+0x64>)
    13c8:	f00e fa59 	bl	f87e <printk>
    13cc:	21d8      	movs	r1, #216	; 0xd8
    13ce:	4620      	mov	r0, r4
    13d0:	f00e fadb 	bl	f98a <assert_post_action>
	return total_size;
    13d4:	e7ef      	b.n	13b6 <ring_buf_get+0x3a>
    13d6:	bf00      	nop
    13d8:	000111f4 	.word	0x000111f4
    13dc:	00010f80 	.word	0x00010f80
    13e0:	00010f8c 	.word	0x00010f8c

000013e4 <nordicsemi_nrf52_init>:
	nrf_power_gpregret_set((uint8_t)type);
	NVIC_SystemReset();
}

static int nordicsemi_nrf52_init(struct device *arg)
{
    13e4:	b510      	push	{r4, lr}
    13e6:	f04f 0320 	mov.w	r3, #32
    13ea:	f3ef 8411 	mrs	r4, BASEPRI
    13ee:	f383 8811 	msr	BASEPRI, r3
    13f2:	f3bf 8f6f 	isb	sy

	ARG_UNUSED(arg);

	key = irq_lock();

	SystemInit();
    13f6:	f000 f867 	bl	14c8 <SystemInit>

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    13fa:	2301      	movs	r3, #1
    13fc:	4a08      	ldr	r2, [pc, #32]	; (1420 <nordicsemi_nrf52_init+0x3c>)
    13fe:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
__STATIC_INLINE void nrf_power_dcdcen_set(bool enable)
{
    NRF_POWER->DCDCEN = (enable ?
    1402:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    1406:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
static ALWAYS_INLINE void z_clearfaults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    140a:	4b06      	ldr	r3, [pc, #24]	; (1424 <nordicsemi_nrf52_init+0x40>)
    140c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    1410:	629a      	str	r2, [r3, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    1412:	62da      	str	r2, [r3, #44]	; 0x2c
	__asm__ volatile(
    1414:	f384 8811 	msr	BASEPRI, r4
    1418:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    141c:	2000      	movs	r0, #0
    141e:	bd10      	pop	{r4, pc}
    1420:	4001e000 	.word	0x4001e000
    1424:	e000ed00 	.word	0xe000ed00

00001428 <errata_98>:
}


static bool errata_98(void)
{
    if (*(uint32_t *)0x10000130ul == 0x8ul){
    1428:	4b06      	ldr	r3, [pc, #24]	; (1444 <errata_98+0x1c>)
    142a:	681b      	ldr	r3, [r3, #0]
    142c:	2b08      	cmp	r3, #8
    142e:	d001      	beq.n	1434 <errata_98+0xc>
        if (*(uint32_t *)0x10000134ul == 0x0ul){
            return true;
        }
    }
    
    return false;
    1430:	2000      	movs	r0, #0
    1432:	4770      	bx	lr
        if (*(uint32_t *)0x10000134ul == 0x0ul){
    1434:	4b04      	ldr	r3, [pc, #16]	; (1448 <errata_98+0x20>)
    1436:	681b      	ldr	r3, [r3, #0]
    1438:	b10b      	cbz	r3, 143e <errata_98+0x16>
    return false;
    143a:	2000      	movs	r0, #0
    143c:	4770      	bx	lr
            return true;
    143e:	2001      	movs	r0, #1
}
    1440:	4770      	bx	lr
    1442:	bf00      	nop
    1444:	10000130 	.word	0x10000130
    1448:	10000134 	.word	0x10000134

0000144c <errata_103>:


static bool errata_103(void)
{
    if (*(uint32_t *)0x10000130ul == 0x8ul){
    144c:	4b06      	ldr	r3, [pc, #24]	; (1468 <errata_103+0x1c>)
    144e:	681b      	ldr	r3, [r3, #0]
    1450:	2b08      	cmp	r3, #8
    1452:	d001      	beq.n	1458 <errata_103+0xc>
        if (*(uint32_t *)0x10000134ul == 0x0ul){
            return true;
        }
    }
    
    return false;
    1454:	2000      	movs	r0, #0
    1456:	4770      	bx	lr
        if (*(uint32_t *)0x10000134ul == 0x0ul){
    1458:	4b04      	ldr	r3, [pc, #16]	; (146c <errata_103+0x20>)
    145a:	681b      	ldr	r3, [r3, #0]
    145c:	b10b      	cbz	r3, 1462 <errata_103+0x16>
    return false;
    145e:	2000      	movs	r0, #0
    1460:	4770      	bx	lr
            return true;
    1462:	2001      	movs	r0, #1
}
    1464:	4770      	bx	lr
    1466:	bf00      	nop
    1468:	10000130 	.word	0x10000130
    146c:	10000134 	.word	0x10000134

00001470 <errata_115>:


static bool errata_115(void)
{
    if (*(uint32_t *)0x10000130ul == 0x8ul){
    1470:	4b06      	ldr	r3, [pc, #24]	; (148c <errata_115+0x1c>)
    1472:	681b      	ldr	r3, [r3, #0]
    1474:	2b08      	cmp	r3, #8
    1476:	d001      	beq.n	147c <errata_115+0xc>
        if (*(uint32_t *)0x10000134ul == 0x0ul){
            return true;
        }
    }
    
    return false;
    1478:	2000      	movs	r0, #0
    147a:	4770      	bx	lr
        if (*(uint32_t *)0x10000134ul == 0x0ul){
    147c:	4b04      	ldr	r3, [pc, #16]	; (1490 <errata_115+0x20>)
    147e:	681b      	ldr	r3, [r3, #0]
    1480:	b10b      	cbz	r3, 1486 <errata_115+0x16>
    return false;
    1482:	2000      	movs	r0, #0
    1484:	4770      	bx	lr
            return true;
    1486:	2001      	movs	r0, #1
}
    1488:	4770      	bx	lr
    148a:	bf00      	nop
    148c:	10000130 	.word	0x10000130
    1490:	10000134 	.word	0x10000134

00001494 <errata_120>:


static bool errata_120(void)
{
    if (*(uint32_t *)0x10000130ul == 0x8ul){
    1494:	4b06      	ldr	r3, [pc, #24]	; (14b0 <errata_120+0x1c>)
    1496:	681b      	ldr	r3, [r3, #0]
    1498:	2b08      	cmp	r3, #8
    149a:	d001      	beq.n	14a0 <errata_120+0xc>
        if (*(uint32_t *)0x10000134ul == 0x0ul){
            return true;
        }
    }
    
    return false;
    149c:	2000      	movs	r0, #0
    149e:	4770      	bx	lr
        if (*(uint32_t *)0x10000134ul == 0x0ul){
    14a0:	4b04      	ldr	r3, [pc, #16]	; (14b4 <errata_120+0x20>)
    14a2:	681b      	ldr	r3, [r3, #0]
    14a4:	b10b      	cbz	r3, 14aa <errata_120+0x16>
    return false;
    14a6:	2000      	movs	r0, #0
    14a8:	4770      	bx	lr
            return true;
    14aa:	2001      	movs	r0, #1
}
    14ac:	4770      	bx	lr
    14ae:	bf00      	nop
    14b0:	10000130 	.word	0x10000130
    14b4:	10000134 	.word	0x10000134

000014b8 <SystemCoreClockUpdate>:
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    14b8:	4b01      	ldr	r3, [pc, #4]	; (14c0 <SystemCoreClockUpdate+0x8>)
    14ba:	4a02      	ldr	r2, [pc, #8]	; (14c4 <SystemCoreClockUpdate+0xc>)
    14bc:	601a      	str	r2, [r3, #0]
}
    14be:	4770      	bx	lr
    14c0:	2000708c 	.word	0x2000708c
    14c4:	03d09000 	.word	0x03d09000

000014c8 <SystemInit>:
{
    14c8:	b508      	push	{r3, lr}
    if (errata_36()){
    14ca:	f00e fa65 	bl	f998 <errata_36>
    14ce:	b140      	cbz	r0, 14e2 <SystemInit+0x1a>
        NRF_CLOCK->EVENTS_DONE = 0;
    14d0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    14d4:	2200      	movs	r2, #0
    14d6:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
        NRF_CLOCK->EVENTS_CTTO = 0;
    14da:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
        NRF_CLOCK->CTIV = 0;
    14de:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    if (errata_66()){
    14e2:	f00e fa5b 	bl	f99c <errata_66>
    14e6:	2800      	cmp	r0, #0
    14e8:	d046      	beq.n	1578 <SystemInit+0xb0>
        NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    14ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    14ee:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    14f2:	4b5b      	ldr	r3, [pc, #364]	; (1660 <SystemInit+0x198>)
    14f4:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
        NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    14f8:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    14fc:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
        NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    1500:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    1504:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
        NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    1508:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    150c:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
        NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    1510:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    1514:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
        NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    1518:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    151c:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
        NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    1520:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    1524:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
        NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    1528:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    152c:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
        NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    1530:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    1534:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
        NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    1538:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    153c:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
        NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    1540:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    1544:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
        NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    1548:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    154c:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
        NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    1550:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    1554:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
        NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    1558:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    155c:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
        NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    1560:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    1564:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
        NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    1568:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    156c:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
        NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    1570:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    1574:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    if (errata_98()){
    1578:	f7ff ff56 	bl	1428 <errata_98>
    157c:	b110      	cbz	r0, 1584 <SystemInit+0xbc>
        *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
    157e:	4b39      	ldr	r3, [pc, #228]	; (1664 <SystemInit+0x19c>)
    1580:	4a39      	ldr	r2, [pc, #228]	; (1668 <SystemInit+0x1a0>)
    1582:	601a      	str	r2, [r3, #0]
    if (errata_103()){
    1584:	f7ff ff62 	bl	144c <errata_103>
    1588:	b118      	cbz	r0, 1592 <SystemInit+0xca>
        NRF_CCM->MAXPACKETSIZE = 0xFBul;
    158a:	4b38      	ldr	r3, [pc, #224]	; (166c <SystemInit+0x1a4>)
    158c:	22fb      	movs	r2, #251	; 0xfb
    158e:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    if (errata_115()){
    1592:	f7ff ff6d 	bl	1470 <errata_115>
    1596:	b148      	cbz	r0, 15ac <SystemInit+0xe4>
        *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
    1598:	4935      	ldr	r1, [pc, #212]	; (1670 <SystemInit+0x1a8>)
    159a:	680b      	ldr	r3, [r1, #0]
    159c:	f023 030f 	bic.w	r3, r3, #15
    15a0:	4a34      	ldr	r2, [pc, #208]	; (1674 <SystemInit+0x1ac>)
    15a2:	6812      	ldr	r2, [r2, #0]
    15a4:	f002 020f 	and.w	r2, r2, #15
    15a8:	4313      	orrs	r3, r2
    15aa:	600b      	str	r3, [r1, #0]
    if (errata_120()){
    15ac:	f7ff ff72 	bl	1494 <errata_120>
    15b0:	b118      	cbz	r0, 15ba <SystemInit+0xf2>
        *(volatile uint32_t *)0x40029640ul = 0x200ul;
    15b2:	4b31      	ldr	r3, [pc, #196]	; (1678 <SystemInit+0x1b0>)
    15b4:	f44f 7200 	mov.w	r2, #512	; 0x200
    15b8:	601a      	str	r2, [r3, #0]
    if (errata_136()){
    15ba:	f00e f9f1 	bl	f9a0 <errata_136>
    15be:	b160      	cbz	r0, 15da <SystemInit+0x112>
        if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    15c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    15c4:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    15c8:	f013 0f01 	tst.w	r3, #1
    15cc:	d005      	beq.n	15da <SystemInit+0x112>
            NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    15ce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    15d2:	f06f 0201 	mvn.w	r2, #1
    15d6:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    15da:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    15de:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    15e2:	2b00      	cmp	r3, #0
    15e4:	db08      	blt.n	15f8 <SystemInit+0x130>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    15e6:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    15ea:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    15ee:	2b00      	cmp	r3, #0
    15f0:	db02      	blt.n	15f8 <SystemInit+0x130>
    SystemCoreClockUpdate();
    15f2:	f7ff ff61 	bl	14b8 <SystemCoreClockUpdate>
}
    15f6:	bd08      	pop	{r3, pc}
            NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen << NVMC_CONFIG_WEN_Pos;
    15f8:	4b20      	ldr	r3, [pc, #128]	; (167c <SystemInit+0x1b4>)
    15fa:	2201      	movs	r2, #1
    15fc:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    1600:	4b1e      	ldr	r3, [pc, #120]	; (167c <SystemInit+0x1b4>)
    1602:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    1606:	2b00      	cmp	r3, #0
    1608:	d0fa      	beq.n	1600 <SystemInit+0x138>
            NRF_UICR->PSELRESET[0] = 18;
    160a:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    160e:	2212      	movs	r2, #18
    1610:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    1614:	4b19      	ldr	r3, [pc, #100]	; (167c <SystemInit+0x1b4>)
    1616:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    161a:	2b00      	cmp	r3, #0
    161c:	d0fa      	beq.n	1614 <SystemInit+0x14c>
            NRF_UICR->PSELRESET[1] = 18;
    161e:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    1622:	2212      	movs	r2, #18
    1624:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    1628:	4b14      	ldr	r3, [pc, #80]	; (167c <SystemInit+0x1b4>)
    162a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    162e:	2b00      	cmp	r3, #0
    1630:	d0fa      	beq.n	1628 <SystemInit+0x160>
            NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren << NVMC_CONFIG_WEN_Pos;
    1632:	4b12      	ldr	r3, [pc, #72]	; (167c <SystemInit+0x1b4>)
    1634:	2200      	movs	r2, #0
    1636:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    163a:	4b10      	ldr	r3, [pc, #64]	; (167c <SystemInit+0x1b4>)
    163c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    1640:	2b00      	cmp	r3, #0
    1642:	d0fa      	beq.n	163a <SystemInit+0x172>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    1644:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    1648:	490d      	ldr	r1, [pc, #52]	; (1680 <SystemInit+0x1b8>)
    164a:	68ca      	ldr	r2, [r1, #12]
    164c:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    1650:	4b0c      	ldr	r3, [pc, #48]	; (1684 <SystemInit+0x1bc>)
    1652:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    1654:	60cb      	str	r3, [r1, #12]
    1656:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    165a:	bf00      	nop
    165c:	e7fd      	b.n	165a <SystemInit+0x192>
    165e:	bf00      	nop
    1660:	4000c000 	.word	0x4000c000
    1664:	4000568c 	.word	0x4000568c
    1668:	00038148 	.word	0x00038148
    166c:	4000f000 	.word	0x4000f000
    1670:	40000ee4 	.word	0x40000ee4
    1674:	10000258 	.word	0x10000258
    1678:	40029640 	.word	0x40029640
    167c:	4001e000 	.word	0x4001e000
    1680:	e000ed00 	.word	0xe000ed00
    1684:	05fa0004 	.word	0x05fa0004

00001688 <nrfx_systick_delay_ticks>:
    const uint32_t diff = NRF_SYSTICK_VAL_MASK & ((p_state->time) - nrf_systick_val_get());
    return (diff >= nrfx_systick_us_tick(us));
}

void nrfx_systick_delay_ticks(uint32_t ticks)
{
    1688:	b538      	push	{r3, r4, r5, lr}
    168a:	4604      	mov	r4, r0
    NRFX_ASSERT(ticks <= NRFX_SYSTICK_TICKS_MAX);
    168c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    1690:	d209      	bcs.n	16a6 <nrfx_systick_delay_ticks+0x1e>
    SysTick->LOAD = val;
}

__STATIC_INLINE uint32_t nrf_systick_val_get(void)
{
    return SysTick->VAL;
    1692:	4b0b      	ldr	r3, [pc, #44]	; (16c0 <nrfx_systick_delay_ticks+0x38>)
    1694:	689a      	ldr	r2, [r3, #8]
    1696:	4b0a      	ldr	r3, [pc, #40]	; (16c0 <nrfx_systick_delay_ticks+0x38>)
    1698:	689b      	ldr	r3, [r3, #8]

    const uint32_t start = nrf_systick_val_get();
    while ((NRF_SYSTICK_VAL_MASK & (start - nrf_systick_val_get())) < ticks)
    169a:	1ad3      	subs	r3, r2, r3
    169c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    16a0:	42a3      	cmp	r3, r4
    16a2:	d3f8      	bcc.n	1696 <nrfx_systick_delay_ticks+0xe>
    {
        /* Nothing to do */
    }
}
    16a4:	bd38      	pop	{r3, r4, r5, pc}
    NRFX_ASSERT(ticks <= NRFX_SYSTICK_TICKS_MAX);
    16a6:	4d07      	ldr	r5, [pc, #28]	; (16c4 <nrfx_systick_delay_ticks+0x3c>)
    16a8:	2387      	movs	r3, #135	; 0x87
    16aa:	462a      	mov	r2, r5
    16ac:	4906      	ldr	r1, [pc, #24]	; (16c8 <nrfx_systick_delay_ticks+0x40>)
    16ae:	4807      	ldr	r0, [pc, #28]	; (16cc <nrfx_systick_delay_ticks+0x44>)
    16b0:	f00e f8e5 	bl	f87e <printk>
    16b4:	2187      	movs	r1, #135	; 0x87
    16b6:	4628      	mov	r0, r5
    16b8:	f00e f967 	bl	f98a <assert_post_action>
    16bc:	e7e9      	b.n	1692 <nrfx_systick_delay_ticks+0xa>
    16be:	bf00      	nop
    16c0:	e000e010 	.word	0xe000e010
    16c4:	00011260 	.word	0x00011260
    16c8:	00011240 	.word	0x00011240
    16cc:	00010f8c 	.word	0x00010f8c

000016d0 <nrfx_systick_delay_us>:

void nrfx_systick_delay_us(uint32_t us)
{
    16d0:	b538      	push	{r3, r4, r5, lr}
    16d2:	4604      	mov	r4, r0
    NRFX_SYSTICK_ASSERT_TIMEOUT(us);
    16d4:	4b10      	ldr	r3, [pc, #64]	; (1718 <nrfx_systick_delay_us+0x48>)
    16d6:	681b      	ldr	r3, [r3, #0]
    16d8:	4a10      	ldr	r2, [pc, #64]	; (171c <nrfx_systick_delay_us+0x4c>)
    16da:	fba2 2303 	umull	r2, r3, r2, r3
    16de:	0c9b      	lsrs	r3, r3, #18
    16e0:	4a0f      	ldr	r2, [pc, #60]	; (1720 <nrfx_systick_delay_us+0x50>)
    16e2:	fbb2 f3f3 	udiv	r3, r2, r3
    16e6:	4283      	cmp	r3, r0
    16e8:	d30a      	bcc.n	1700 <nrfx_systick_delay_us+0x30>
    return us * ((SystemCoreClock) / NRFX_SYSTICK_US);
    16ea:	4b0b      	ldr	r3, [pc, #44]	; (1718 <nrfx_systick_delay_us+0x48>)
    16ec:	6818      	ldr	r0, [r3, #0]
    16ee:	4b0b      	ldr	r3, [pc, #44]	; (171c <nrfx_systick_delay_us+0x4c>)
    16f0:	fba3 3000 	umull	r3, r0, r3, r0
    16f4:	0c80      	lsrs	r0, r0, #18
    nrfx_systick_delay_ticks(nrfx_systick_us_tick(us));
    16f6:	fb00 f004 	mul.w	r0, r0, r4
    16fa:	f7ff ffc5 	bl	1688 <nrfx_systick_delay_ticks>
}
    16fe:	bd38      	pop	{r3, r4, r5, pc}
    NRFX_SYSTICK_ASSERT_TIMEOUT(us);
    1700:	4d08      	ldr	r5, [pc, #32]	; (1724 <nrfx_systick_delay_us+0x54>)
    1702:	2392      	movs	r3, #146	; 0x92
    1704:	462a      	mov	r2, r5
    1706:	4908      	ldr	r1, [pc, #32]	; (1728 <nrfx_systick_delay_us+0x58>)
    1708:	4808      	ldr	r0, [pc, #32]	; (172c <nrfx_systick_delay_us+0x5c>)
    170a:	f00e f8b8 	bl	f87e <printk>
    170e:	2192      	movs	r1, #146	; 0x92
    1710:	4628      	mov	r0, r5
    1712:	f00e f93a 	bl	f98a <assert_post_action>
    1716:	e7e8      	b.n	16ea <nrfx_systick_delay_us+0x1a>
    1718:	2000708c 	.word	0x2000708c
    171c:	431bde83 	.word	0x431bde83
    1720:	007fffff 	.word	0x007fffff
    1724:	00011260 	.word	0x00011260
    1728:	00011294 	.word	0x00011294
    172c:	00010f8c 	.word	0x00010f8c

00001730 <twi_process_error>:
} twim_control_block_t;

static twim_control_block_t m_cb[NRFX_TWIM_ENABLED_COUNT];

static nrfx_err_t twi_process_error(uint32_t errorsrc)
{
    1730:	4603      	mov	r3, r0
    nrfx_err_t ret = NRFX_ERROR_INTERNAL;

    if (errorsrc & NRF_TWIM_ERROR_ADDRESS_NACK)
    1732:	f010 0f02 	tst.w	r0, #2
    1736:	d104      	bne.n	1742 <twi_process_error+0x12>
    nrfx_err_t ret = NRFX_ERROR_INTERNAL;
    1738:	4804      	ldr	r0, [pc, #16]	; (174c <twi_process_error+0x1c>)
    {
        ret = NRFX_ERROR_DRV_TWI_ERR_ANACK;
    }

    if (errorsrc & NRF_TWIM_ERROR_DATA_NACK)
    173a:	f013 0f04 	tst.w	r3, #4
    173e:	d102      	bne.n	1746 <twi_process_error+0x16>
    {
        ret = NRFX_ERROR_DRV_TWI_ERR_DNACK;
    }

    return ret;
}
    1740:	4770      	bx	lr
        ret = NRFX_ERROR_DRV_TWI_ERR_ANACK;
    1742:	4803      	ldr	r0, [pc, #12]	; (1750 <twi_process_error+0x20>)
    1744:	e7f9      	b.n	173a <twi_process_error+0xa>
        ret = NRFX_ERROR_DRV_TWI_ERR_DNACK;
    1746:	4803      	ldr	r0, [pc, #12]	; (1754 <twi_process_error+0x24>)
    return ret;
    1748:	e7fa      	b.n	1740 <twi_process_error+0x10>
    174a:	bf00      	nop
    174c:	0bad0001 	.word	0x0bad0001
    1750:	0bae0001 	.word	0x0bae0001
    1754:	0bae0002 	.word	0x0bae0002

00001758 <twim_irq_handler>:
{
    return (uint32_t)nrf_twim_event_address_get(p_instance->p_twim, NRF_TWIM_EVENT_STOPPED);
}

static void twim_irq_handler(NRF_TWIM_Type * p_twim, twim_control_block_t * p_cb)
{
    1758:	b5f0      	push	{r4, r5, r6, r7, lr}
    175a:	b08d      	sub	sp, #52	; 0x34
    175c:	4604      	mov	r4, r0
    175e:	460d      	mov	r5, r1
            return;
        }
    }
#endif

    NRFX_ASSERT(p_cb->handler);
    1760:	680b      	ldr	r3, [r1, #0]
    1762:	2b00      	cmp	r3, #0
    1764:	d05c      	beq.n	1820 <twim_irq_handler+0xc8>
}

__STATIC_INLINE bool nrf_twim_event_check(NRF_TWIM_Type * p_reg,
                                          nrf_twim_event_t event)
{
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    1766:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124

    if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_ERROR))
    176a:	b153      	cbz	r3, 1782 <twim_irq_handler+0x2a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    176c:	2300      	movs	r3, #0
    176e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    1772:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    1776:	9301      	str	r3, [sp, #4]
    (void)dummy;
    1778:	9b01      	ldr	r3, [sp, #4]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    177a:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    {
        nrf_twim_event_clear(p_twim, NRF_TWIM_EVENT_ERROR);
        NRFX_LOG_DEBUG("TWIM: Event: %s.", EVT_TO_STR_TWIM(NRF_TWIM_EVENT_ERROR));
        if (!nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
    177e:	2b00      	cmp	r3, #0
    1780:	d05c      	beq.n	183c <twim_irq_handler+0xe4>
    1782:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
        }
    }

    nrfx_twim_evt_t event;

    if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
    1786:	2b00      	cmp	r3, #0
    1788:	d06a      	beq.n	1860 <twim_irq_handler+0x108>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    178a:	2300      	movs	r3, #0
    178c:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    1790:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    1794:	9302      	str	r3, [sp, #8]
    (void)dummy;
    1796:	9b02      	ldr	r3, [sp, #8]
    {
        NRFX_LOG_DEBUG("TWIM: Event: %s.", EVT_TO_STR_TWIM(NRF_TWIM_EVENT_STOPPED));
        nrf_twim_event_clear(p_twim, NRF_TWIM_EVENT_STOPPED);
        event.xfer_desc = p_cb->xfer_desc;
    1798:	ae07      	add	r6, sp, #28
    179a:	f105 070c 	add.w	r7, r5, #12
    179e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    17a0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    17a2:	683b      	ldr	r3, [r7, #0]
    17a4:	6033      	str	r3, [r6, #0]
        if (p_cb->error)
    17a6:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
    17aa:	b153      	cbz	r3, 17c2 <twim_irq_handler+0x6a>
        {

            event.xfer_desc.primary_length = (p_cb->xfer_desc.type == NRFX_TWIM_XFER_RX) ?
    17ac:	7b2b      	ldrb	r3, [r5, #12]
                nrf_twim_rxd_amount_get(p_twim) : nrf_twim_txd_amount_get(p_twim);
    17ae:	2b01      	cmp	r3, #1
    17b0:	d050      	beq.n	1854 <twim_irq_handler+0xfc>
    p_reg->SHORTS = mask;
}

__STATIC_INLINE size_t nrf_twim_txd_amount_get(NRF_TWIM_Type * p_reg)
{
    return p_reg->TXD.AMOUNT;
    17b2:	f8d4 254c 	ldr.w	r2, [r4, #1356]	; 0x54c
            event.xfer_desc.primary_length = (p_cb->xfer_desc.type == NRFX_TWIM_XFER_RX) ?
    17b6:	9208      	str	r2, [sp, #32]
            event.xfer_desc.secondary_length = (p_cb->xfer_desc.type == NRFX_TWIM_XFER_TXRX) ?
                nrf_twim_rxd_amount_get(p_twim) : nrf_twim_txd_amount_get(p_twim);
    17b8:	2b02      	cmp	r3, #2
    17ba:	d04e      	beq.n	185a <twim_irq_handler+0x102>
    17bc:	f8d4 354c 	ldr.w	r3, [r4, #1356]	; 0x54c
            event.xfer_desc.secondary_length = (p_cb->xfer_desc.type == NRFX_TWIM_XFER_TXRX) ?
    17c0:	9309      	str	r3, [sp, #36]	; 0x24
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    17c2:	2300      	movs	r3, #0
    17c4:	f8c4 3160 	str.w	r3, [r4, #352]	; 0x160
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    17c8:	f8d4 2160 	ldr.w	r2, [r4, #352]	; 0x160
    17cc:	9204      	str	r2, [sp, #16]
    (void)dummy;
    17ce:	9a04      	ldr	r2, [sp, #16]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    17d0:	f8c4 315c 	str.w	r3, [r4, #348]	; 0x15c
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    17d4:	f8d4 315c 	ldr.w	r3, [r4, #348]	; 0x15c
    17d8:	9303      	str	r3, [sp, #12]
    (void)dummy;
    17da:	9b03      	ldr	r3, [sp, #12]

        }
        nrf_twim_event_clear(p_twim, NRF_TWIM_EVENT_LASTTX);
        nrf_twim_event_clear(p_twim, NRF_TWIM_EVENT_LASTRX);
        if (!p_cb->repeated || p_cb->error)
    17dc:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
    17e0:	b113      	cbz	r3, 17e8 <twim_irq_handler+0x90>
    17e2:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
    17e6:	b133      	cbz	r3, 17f6 <twim_irq_handler+0x9e>
    p_reg->SHORTS = mask;
    17e8:	2300      	movs	r3, #0
    17ea:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        {
            nrf_twim_shorts_set(p_twim, 0);
            p_cb->int_mask = 0;
    17ee:	60ab      	str	r3, [r5, #8]
    p_reg->INTENCLR = mask;
    17f0:	4b37      	ldr	r3, [pc, #220]	; (18d0 <twim_irq_handler+0x178>)
    17f2:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    uint32_t error_source = p_reg->ERRORSRC;
    17f6:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
    17fa:	f8c4 34c4 	str.w	r3, [r4, #1220]	; 0x4c4
            return;
        }
    }

    uint32_t errorsrc = nrf_twim_errorsrc_get_and_clear(p_twim);
    if (errorsrc & NRF_TWIM_ERROR_ADDRESS_NACK)
    17fe:	f013 0f02 	tst.w	r3, #2
    1802:	d05a      	beq.n	18ba <twim_irq_handler+0x162>
    {
        event.type = NRFX_TWIM_EVT_ADDRESS_NACK;
    1804:	2301      	movs	r3, #1
    1806:	f88d 3018 	strb.w	r3, [sp, #24]
    {
        event.type = NRFX_TWIM_EVT_DONE;
        NRFX_LOG_DEBUG("Event: %s.", EVT_TO_STR(NRFX_TWIM_EVT_DONE));
    }

    if (!p_cb->repeated)
    180a:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
    180e:	b90b      	cbnz	r3, 1814 <twim_irq_handler+0xbc>
    {
        p_cb->busy = false;
    1810:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f
    }
    p_cb->handler(&event, p_cb->p_context);
    1814:	682b      	ldr	r3, [r5, #0]
    1816:	6869      	ldr	r1, [r5, #4]
    1818:	a806      	add	r0, sp, #24
    181a:	4798      	blx	r3
}
    181c:	b00d      	add	sp, #52	; 0x34
    181e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    NRFX_ASSERT(p_cb->handler);
    1820:	4e2c      	ldr	r6, [pc, #176]	; (18d4 <twim_irq_handler+0x17c>)
    1822:	f44f 730f 	mov.w	r3, #572	; 0x23c
    1826:	4632      	mov	r2, r6
    1828:	492b      	ldr	r1, [pc, #172]	; (18d8 <twim_irq_handler+0x180>)
    182a:	482c      	ldr	r0, [pc, #176]	; (18dc <twim_irq_handler+0x184>)
    182c:	f00e f827 	bl	f87e <printk>
    1830:	f44f 710f 	mov.w	r1, #572	; 0x23c
    1834:	4630      	mov	r0, r6
    1836:	f00e f8a8 	bl	f98a <assert_post_action>
    183a:	e794      	b.n	1766 <twim_irq_handler+0xe>
            nrf_twim_int_disable(p_twim, p_cb->int_mask);
    183c:	68ab      	ldr	r3, [r5, #8]
    p_reg->INTENCLR = mask;
    183e:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
    1842:	2302      	movs	r3, #2
    1844:	60ab      	str	r3, [r5, #8]
            nrf_twim_int_enable(p_twim, p_cb->int_mask);
    1846:	68ab      	ldr	r3, [r5, #8]
    p_reg->INTENSET = mask;
    1848:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    184c:	2301      	movs	r3, #1
    184e:	6223      	str	r3, [r4, #32]
    1850:	6163      	str	r3, [r4, #20]
            return;
    1852:	e7e3      	b.n	181c <twim_irq_handler+0xc4>
}

__STATIC_INLINE size_t nrf_twim_rxd_amount_get(NRF_TWIM_Type * p_reg)
{
    return p_reg->RXD.AMOUNT;
    1854:	f8d4 253c 	ldr.w	r2, [r4, #1340]	; 0x53c
    1858:	e7ad      	b.n	17b6 <twim_irq_handler+0x5e>
    185a:	f8d4 353c 	ldr.w	r3, [r4, #1340]	; 0x53c
    185e:	e7af      	b.n	17c0 <twim_irq_handler+0x68>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    1860:	2300      	movs	r3, #0
    1862:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    1866:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    186a:	9305      	str	r3, [sp, #20]
    (void)dummy;
    186c:	9b05      	ldr	r3, [sp, #20]
        if (p_cb->xfer_desc.type == NRFX_TWIM_XFER_TX)
    186e:	7b2b      	ldrb	r3, [r5, #12]
    1870:	b98b      	cbnz	r3, 1896 <twim_irq_handler+0x13e>
            event.xfer_desc = p_cb->xfer_desc;
    1872:	ae07      	add	r6, sp, #28
    1874:	f105 070c 	add.w	r7, r5, #12
    1878:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    187a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    187c:	683b      	ldr	r3, [r7, #0]
    187e:	6033      	str	r3, [r6, #0]
            if (!p_cb->repeated)
    1880:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
    1884:	2b00      	cmp	r3, #0
    1886:	d1b6      	bne.n	17f6 <twim_irq_handler+0x9e>
    p_reg->SHORTS = mask;
    1888:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
                p_cb->int_mask = 0;
    188c:	60ab      	str	r3, [r5, #8]
    p_reg->INTENCLR = mask;
    188e:	4b10      	ldr	r3, [pc, #64]	; (18d0 <twim_irq_handler+0x178>)
    1890:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    1894:	e7af      	b.n	17f6 <twim_irq_handler+0x9e>
    p_reg->SHORTS = mask;
    1896:	f44f 7300 	mov.w	r3, #512	; 0x200
    189a:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK | NRF_TWIM_INT_ERROR_MASK;
    189e:	f240 2302 	movw	r3, #514	; 0x202
    18a2:	60ab      	str	r3, [r5, #8]
    p_reg->INTENCLR = mask;
    18a4:	f103 73ce 	add.w	r3, r3, #27000832	; 0x19c0000
    18a8:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
            nrf_twim_int_enable(p_twim, p_cb->int_mask);
    18ac:	68ab      	ldr	r3, [r5, #8]
    p_reg->INTENSET = mask;
    18ae:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    18b2:	2301      	movs	r3, #1
    18b4:	60a3      	str	r3, [r4, #8]
    18b6:	6223      	str	r3, [r4, #32]
            return;
    18b8:	e7b0      	b.n	181c <twim_irq_handler+0xc4>
    else if (errorsrc & NRF_TWIM_ERROR_DATA_NACK)
    18ba:	f013 0f04 	tst.w	r3, #4
    18be:	d003      	beq.n	18c8 <twim_irq_handler+0x170>
        event.type = NRFX_TWIM_EVT_DATA_NACK;
    18c0:	2302      	movs	r3, #2
    18c2:	f88d 3018 	strb.w	r3, [sp, #24]
        NRFX_LOG_DEBUG("Event: %s.", EVT_TO_STR(NRFX_TWIM_EVT_DATA_NACK));
    18c6:	e7a0      	b.n	180a <twim_irq_handler+0xb2>
        event.type = NRFX_TWIM_EVT_DONE;
    18c8:	2300      	movs	r3, #0
    18ca:	f88d 3018 	strb.w	r3, [sp, #24]
    18ce:	e79c      	b.n	180a <twim_irq_handler+0xb2>
    18d0:	019c0202 	.word	0x019c0202
    18d4:	00011534 	.word	0x00011534
    18d8:	00011564 	.word	0x00011564
    18dc:	00010f8c 	.word	0x00010f8c

000018e0 <nrfx_twim_init>:
{
    18e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    18e4:	4607      	mov	r7, r0
    18e6:	4690      	mov	r8, r2
    18e8:	461e      	mov	r6, r3
    NRFX_ASSERT(p_config);
    18ea:	460c      	mov	r4, r1
    18ec:	b171      	cbz	r1, 190c <nrfx_twim_init+0x2c>
    NRFX_ASSERT(p_config->scl != p_config->sda);
    18ee:	6822      	ldr	r2, [r4, #0]
    18f0:	6863      	ldr	r3, [r4, #4]
    18f2:	429a      	cmp	r2, r3
    18f4:	d016      	beq.n	1924 <nrfx_twim_init+0x44>
    twim_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    18f6:	793d      	ldrb	r5, [r7, #4]
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    18f8:	4a48      	ldr	r2, [pc, #288]	; (1a1c <nrfx_twim_init+0x13c>)
    18fa:	2334      	movs	r3, #52	; 0x34
    18fc:	fb03 2305 	mla	r3, r3, r5, r2
    1900:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
    1904:	b1d3      	cbz	r3, 193c <nrfx_twim_init+0x5c>
        return err_code;
    1906:	4846      	ldr	r0, [pc, #280]	; (1a20 <nrfx_twim_init+0x140>)
}
    1908:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    NRFX_ASSERT(p_config);
    190c:	4d45      	ldr	r5, [pc, #276]	; (1a24 <nrfx_twim_init+0x144>)
    190e:	23a0      	movs	r3, #160	; 0xa0
    1910:	462a      	mov	r2, r5
    1912:	4945      	ldr	r1, [pc, #276]	; (1a28 <nrfx_twim_init+0x148>)
    1914:	4845      	ldr	r0, [pc, #276]	; (1a2c <nrfx_twim_init+0x14c>)
    1916:	f00d ffb2 	bl	f87e <printk>
    191a:	21a0      	movs	r1, #160	; 0xa0
    191c:	4628      	mov	r0, r5
    191e:	f00e f834 	bl	f98a <assert_post_action>
    1922:	e7e4      	b.n	18ee <nrfx_twim_init+0xe>
    NRFX_ASSERT(p_config->scl != p_config->sda);
    1924:	4d3f      	ldr	r5, [pc, #252]	; (1a24 <nrfx_twim_init+0x144>)
    1926:	23a1      	movs	r3, #161	; 0xa1
    1928:	462a      	mov	r2, r5
    192a:	4941      	ldr	r1, [pc, #260]	; (1a30 <nrfx_twim_init+0x150>)
    192c:	483f      	ldr	r0, [pc, #252]	; (1a2c <nrfx_twim_init+0x14c>)
    192e:	f00d ffa6 	bl	f87e <printk>
    1932:	21a1      	movs	r1, #161	; 0xa1
    1934:	4628      	mov	r0, r5
    1936:	f00e f828 	bl	f98a <assert_post_action>
    193a:	e7dc      	b.n	18f6 <nrfx_twim_init+0x16>
    p_cb->handler         = event_handler;
    193c:	4611      	mov	r1, r2
    193e:	2234      	movs	r2, #52	; 0x34
    1940:	fb02 f205 	mul.w	r2, r2, r5
    1944:	188b      	adds	r3, r1, r2
    1946:	f841 8002 	str.w	r8, [r1, r2]
    p_cb->p_context       = p_context;
    194a:	605e      	str	r6, [r3, #4]
    p_cb->int_mask        = 0;
    194c:	2200      	movs	r2, #0
    194e:	609a      	str	r2, [r3, #8]
    p_cb->repeated        = false;
    1950:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    p_cb->busy            = false;
    1954:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
    p_cb->hold_bus_uninit = p_config->hold_bus_uninit;
    1958:	7b62      	ldrb	r2, [r4, #13]
    195a:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
    TWIM_PIN_INIT(p_config->scl);
    195e:	6826      	ldr	r6, [r4, #0]
 *
 * @return Pointer to port register set.
 */
__STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
    1960:	2e2f      	cmp	r6, #47	; 0x2f
    1962:	d805      	bhi.n	1970 <nrfx_twim_init+0x90>
#if (GPIO_COUNT == 1)
    return NRF_P0;
#else
    if (*p_pin < P0_PIN_NUM)
    1964:	2e1f      	cmp	r6, #31
    1966:	d912      	bls.n	198e <nrfx_twim_init+0xae>
    {
        return NRF_P0;
    }
    else
    {
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
    1968:	f006 061f 	and.w	r6, r6, #31
        return NRF_P1;
    196c:	4b31      	ldr	r3, [pc, #196]	; (1a34 <nrfx_twim_init+0x154>)
    196e:	e010      	b.n	1992 <nrfx_twim_init+0xb2>
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
    1970:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 1a40 <nrfx_twim_init+0x160>
    1974:	f44f 73e2 	mov.w	r3, #452	; 0x1c4
    1978:	4642      	mov	r2, r8
    197a:	492f      	ldr	r1, [pc, #188]	; (1a38 <nrfx_twim_init+0x158>)
    197c:	482b      	ldr	r0, [pc, #172]	; (1a2c <nrfx_twim_init+0x14c>)
    197e:	f00d ff7e 	bl	f87e <printk>
    1982:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
    1986:	4640      	mov	r0, r8
    1988:	f00d ffff 	bl	f98a <assert_post_action>
    198c:	e7ea      	b.n	1964 <nrfx_twim_init+0x84>
        return NRF_P0;
    198e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    nrf_gpio_pin_drive_t drive,
    nrf_gpio_pin_sense_t sense)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);

    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    1992:	f506 76e0 	add.w	r6, r6, #448	; 0x1c0
    1996:	f240 620c 	movw	r2, #1548	; 0x60c
    199a:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
    TWIM_PIN_INIT(p_config->sda);
    199e:	6866      	ldr	r6, [r4, #4]
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
    19a0:	2e2f      	cmp	r6, #47	; 0x2f
    19a2:	d805      	bhi.n	19b0 <nrfx_twim_init+0xd0>
    if (*p_pin < P0_PIN_NUM)
    19a4:	2e1f      	cmp	r6, #31
    19a6:	d912      	bls.n	19ce <nrfx_twim_init+0xee>
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
    19a8:	f006 061f 	and.w	r6, r6, #31
        return NRF_P1;
    19ac:	4b21      	ldr	r3, [pc, #132]	; (1a34 <nrfx_twim_init+0x154>)
    19ae:	e010      	b.n	19d2 <nrfx_twim_init+0xf2>
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
    19b0:	f8df 808c 	ldr.w	r8, [pc, #140]	; 1a40 <nrfx_twim_init+0x160>
    19b4:	f44f 73e2 	mov.w	r3, #452	; 0x1c4
    19b8:	4642      	mov	r2, r8
    19ba:	491f      	ldr	r1, [pc, #124]	; (1a38 <nrfx_twim_init+0x158>)
    19bc:	481b      	ldr	r0, [pc, #108]	; (1a2c <nrfx_twim_init+0x14c>)
    19be:	f00d ff5e 	bl	f87e <printk>
    19c2:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
    19c6:	4640      	mov	r0, r8
    19c8:	f00d ffdf 	bl	f98a <assert_post_action>
    19cc:	e7ea      	b.n	19a4 <nrfx_twim_init+0xc4>
        return NRF_P0;
    19ce:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    19d2:	f506 76e0 	add.w	r6, r6, #448	; 0x1c0
    19d6:	f240 620c 	movw	r2, #1548	; 0x60c
    19da:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
    NRF_TWIM_Type * p_twim = p_instance->p_twim;
    19de:	683b      	ldr	r3, [r7, #0]
    nrf_twim_pins_set(p_twim, p_config->scl, p_config->sda);
    19e0:	6821      	ldr	r1, [r4, #0]
    19e2:	6862      	ldr	r2, [r4, #4]
    p_reg->PSEL.SCL = scl_pin;
    19e4:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    p_reg->PSEL.SDA = sda_pin;
    19e8:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c
        (nrf_twim_frequency_t)p_config->frequency);
    19ec:	68a2      	ldr	r2, [r4, #8]
    p_reg->FREQUENCY = frequency;
    19ee:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
    if (p_cb->handler)
    19f2:	2334      	movs	r3, #52	; 0x34
    19f4:	fb03 f305 	mul.w	r3, r3, r5
    19f8:	4a08      	ldr	r2, [pc, #32]	; (1a1c <nrfx_twim_init+0x13c>)
    19fa:	58d3      	ldr	r3, [r2, r3]
    19fc:	b123      	cbz	r3, 1a08 <nrfx_twim_init+0x128>
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_twim));
    19fe:	6838      	ldr	r0, [r7, #0]
    1a00:	f340 3007 	sbfx	r0, r0, #12, #8
    1a04:	f007 fd50 	bl	94a8 <z_arch_irq_enable>
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    1a08:	4b04      	ldr	r3, [pc, #16]	; (1a1c <nrfx_twim_init+0x13c>)
    1a0a:	2234      	movs	r2, #52	; 0x34
    1a0c:	fb02 3505 	mla	r5, r2, r5, r3
    1a10:	2301      	movs	r3, #1
    1a12:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
    return err_code;
    1a16:	4809      	ldr	r0, [pc, #36]	; (1a3c <nrfx_twim_init+0x15c>)
    1a18:	e776      	b.n	1908 <nrfx_twim_init+0x28>
    1a1a:	bf00      	nop
    1a1c:	200002e8 	.word	0x200002e8
    1a20:	0bad0005 	.word	0x0bad0005
    1a24:	00011534 	.word	0x00011534
    1a28:	00011338 	.word	0x00011338
    1a2c:	00010f8c 	.word	0x00010f8c
    1a30:	00011344 	.word	0x00011344
    1a34:	50000300 	.word	0x50000300
    1a38:	0001138c 	.word	0x0001138c
    1a3c:	0bad0000 	.word	0x0bad0000
    1a40:	00011364 	.word	0x00011364

00001a44 <nrfx_twim_enable>:
{
    1a44:	b570      	push	{r4, r5, r6, lr}
    1a46:	4605      	mov	r5, r0
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    1a48:	7904      	ldrb	r4, [r0, #4]
    NRFX_ASSERT(p_cb->state == NRFX_DRV_STATE_INITIALIZED);
    1a4a:	4a11      	ldr	r2, [pc, #68]	; (1a90 <nrfx_twim_enable+0x4c>)
    1a4c:	2334      	movs	r3, #52	; 0x34
    1a4e:	fb03 2304 	mla	r3, r3, r4, r2
    1a52:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
    1a56:	2b01      	cmp	r3, #1
    1a58:	d10b      	bne.n	1a72 <nrfx_twim_enable+0x2e>
    nrf_twim_enable(p_instance->p_twim);
    1a5a:	682b      	ldr	r3, [r5, #0]
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
    1a5c:	2206      	movs	r2, #6
    1a5e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    p_cb->state = NRFX_DRV_STATE_POWERED_ON;
    1a62:	4b0b      	ldr	r3, [pc, #44]	; (1a90 <nrfx_twim_enable+0x4c>)
    1a64:	2234      	movs	r2, #52	; 0x34
    1a66:	fb02 3404 	mla	r4, r2, r4, r3
    1a6a:	2302      	movs	r3, #2
    1a6c:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
}
    1a70:	bd70      	pop	{r4, r5, r6, pc}
    NRFX_ASSERT(p_cb->state == NRFX_DRV_STATE_INITIALIZED);
    1a72:	4e08      	ldr	r6, [pc, #32]	; (1a94 <nrfx_twim_enable+0x50>)
    1a74:	f44f 7384 	mov.w	r3, #264	; 0x108
    1a78:	4632      	mov	r2, r6
    1a7a:	4907      	ldr	r1, [pc, #28]	; (1a98 <nrfx_twim_enable+0x54>)
    1a7c:	4807      	ldr	r0, [pc, #28]	; (1a9c <nrfx_twim_enable+0x58>)
    1a7e:	f00d fefe 	bl	f87e <printk>
    1a82:	f44f 7184 	mov.w	r1, #264	; 0x108
    1a86:	4630      	mov	r0, r6
    1a88:	f00d ff7f 	bl	f98a <assert_post_action>
    1a8c:	e7e5      	b.n	1a5a <nrfx_twim_enable+0x16>
    1a8e:	bf00      	nop
    1a90:	200002e8 	.word	0x200002e8
    1a94:	00011534 	.word	0x00011534
    1a98:	0001130c 	.word	0x0001130c
    1a9c:	00010f8c 	.word	0x00010f8c

00001aa0 <nrfx_twim_disable>:
{
    1aa0:	b570      	push	{r4, r5, r6, lr}
    1aa2:	4605      	mov	r5, r0
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    1aa4:	7904      	ldrb	r4, [r0, #4]
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
    1aa6:	4a15      	ldr	r2, [pc, #84]	; (1afc <nrfx_twim_disable+0x5c>)
    1aa8:	2334      	movs	r3, #52	; 0x34
    1aaa:	fb03 2304 	mla	r3, r3, r4, r2
    1aae:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
    1ab2:	b1ab      	cbz	r3, 1ae0 <nrfx_twim_disable+0x40>
    NRF_TWIM_Type * p_twim = p_instance->p_twim;
    1ab4:	682b      	ldr	r3, [r5, #0]
    p_cb->int_mask = 0;
    1ab6:	4a11      	ldr	r2, [pc, #68]	; (1afc <nrfx_twim_disable+0x5c>)
    1ab8:	2134      	movs	r1, #52	; 0x34
    1aba:	fb01 2404 	mla	r4, r1, r4, r2
    1abe:	2100      	movs	r1, #0
    1ac0:	60a1      	str	r1, [r4, #8]
    p_reg->INTENCLR = mask;
    1ac2:	4a0f      	ldr	r2, [pc, #60]	; (1b00 <nrfx_twim_disable+0x60>)
    1ac4:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    p_reg->SHORTS &= ~(mask);
    1ac8:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    1acc:	f422 52bc 	bic.w	r2, r2, #6016	; 0x1780
    1ad0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
    1ad4:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    1ad8:	2301      	movs	r3, #1
    1ada:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
}
    1ade:	bd70      	pop	{r4, r5, r6, pc}
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
    1ae0:	4e08      	ldr	r6, [pc, #32]	; (1b04 <nrfx_twim_disable+0x64>)
    1ae2:	f240 1313 	movw	r3, #275	; 0x113
    1ae6:	4632      	mov	r2, r6
    1ae8:	4907      	ldr	r1, [pc, #28]	; (1b08 <nrfx_twim_disable+0x68>)
    1aea:	4808      	ldr	r0, [pc, #32]	; (1b0c <nrfx_twim_disable+0x6c>)
    1aec:	f00d fec7 	bl	f87e <printk>
    1af0:	f240 1113 	movw	r1, #275	; 0x113
    1af4:	4630      	mov	r0, r6
    1af6:	f00d ff48 	bl	f98a <assert_post_action>
    1afa:	e7db      	b.n	1ab4 <nrfx_twim_disable+0x14>
    1afc:	200002e8 	.word	0x200002e8
    1b00:	019c0202 	.word	0x019c0202
    1b04:	00011534 	.word	0x00011534
    1b08:	000112e0 	.word	0x000112e0
    1b0c:	00010f8c 	.word	0x00010f8c

00001b10 <nrfx_twim_xfer>:
{
    1b10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1b14:	b089      	sub	sp, #36	; 0x24
    1b16:	4604      	mov	r4, r0
    1b18:	460d      	mov	r5, r1
    1b1a:	4690      	mov	r8, r2
    NRFX_ASSERT(TWIM_LENGTH_VALIDATE(p_instance->drv_inst_idx,
    1b1c:	7903      	ldrb	r3, [r0, #4]
    1b1e:	b93b      	cbnz	r3, 1b30 <nrfx_twim_xfer+0x20>
    1b20:	684b      	ldr	r3, [r1, #4]
    1b22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    1b26:	d203      	bcs.n	1b30 <nrfx_twim_xfer+0x20>
    1b28:	688b      	ldr	r3, [r1, #8]
    1b2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    1b2e:	d30c      	bcc.n	1b4a <nrfx_twim_xfer+0x3a>
    1b30:	4ec0      	ldr	r6, [pc, #768]	; (1e34 <nrfx_twim_xfer+0x324>)
    1b32:	f240 13e7 	movw	r3, #487	; 0x1e7
    1b36:	4632      	mov	r2, r6
    1b38:	49bf      	ldr	r1, [pc, #764]	; (1e38 <nrfx_twim_xfer+0x328>)
    1b3a:	48c0      	ldr	r0, [pc, #768]	; (1e3c <nrfx_twim_xfer+0x32c>)
    1b3c:	f00d fe9f 	bl	f87e <printk>
    1b40:	f240 11e7 	movw	r1, #487	; 0x1e7
    1b44:	4630      	mov	r0, r6
    1b46:	f00d ff20 	bl	f98a <assert_post_action>
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    1b4a:	f894 a004 	ldrb.w	sl, [r4, #4]
    1b4e:	f8df 92f0 	ldr.w	r9, [pc, #752]	; 1e40 <nrfx_twim_xfer+0x330>
    1b52:	2634      	movs	r6, #52	; 0x34
    1b54:	fb06 f60a 	mul.w	r6, r6, sl
    1b58:	eb09 0706 	add.w	r7, r9, r6
    NRFX_ASSERT( !((p_cb->handler == NULL) && (p_xfer_desc->type == NRFX_TWIM_XFER_TXRX)));
    1b5c:	f859 3006 	ldr.w	r3, [r9, r6]
    1b60:	2b00      	cmp	r3, #0
    1b62:	d051      	beq.n	1c08 <nrfx_twim_xfer+0xf8>
    NRFX_ASSERT( !((p_cb->handler == NULL) && (p_xfer_desc->type == NRFX_TWIM_XFER_TXTX)));
    1b64:	2334      	movs	r3, #52	; 0x34
    1b66:	fb03 f30a 	mul.w	r3, r3, sl
    1b6a:	4ab5      	ldr	r2, [pc, #724]	; (1e40 <nrfx_twim_xfer+0x330>)
    1b6c:	58d3      	ldr	r3, [r2, r3]
    1b6e:	2b00      	cmp	r3, #0
    1b70:	d05c      	beq.n	1c2c <nrfx_twim_xfer+0x11c>
    err_code = twim_xfer(p_cb, (NRF_TWIM_Type *)p_instance->p_twim, p_xfer_desc, flags);
    1b72:	6824      	ldr	r4, [r4, #0]
    if (!nrfx_is_in_ram(p_xfer_desc->p_primary_buf))
    1b74:	68eb      	ldr	r3, [r5, #12]

#ifndef SUPPRESS_INLINE_IMPLEMENTATION

__STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
    1b76:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
    1b7a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    1b7e:	f040 8197 	bne.w	1eb0 <nrfx_twim_xfer+0x3a0>
    p_reg->INTENCLR = mask;
    1b82:	4bb0      	ldr	r3, [pc, #704]	; (1e44 <nrfx_twim_xfer+0x334>)
    1b84:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    if (p_cb->busy)
    1b88:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    1b8c:	2b00      	cmp	r3, #0
    1b8e:	d15f      	bne.n	1c50 <nrfx_twim_xfer+0x140>
                      (NRFX_TWIM_FLAG_REPEATED_XFER & flags)) ? false: true;
    1b90:	f018 0f14 	tst.w	r8, #20
    1b94:	bf0c      	ite	eq
    1b96:	2301      	moveq	r3, #1
    1b98:	2300      	movne	r3, #0
        p_cb->busy = ((NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER & flags) ||
    1b9a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    p_cb->xfer_desc = *p_xfer_desc;
    1b9e:	f107 0c0c 	add.w	ip, r7, #12
    1ba2:	46ae      	mov	lr, r5
    1ba4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    1ba8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    1bac:	f8de 3000 	ldr.w	r3, [lr]
    1bb0:	f8cc 3000 	str.w	r3, [ip]
    p_cb->repeated = (flags & NRFX_TWIM_FLAG_REPEATED_XFER) ? true : false;
    1bb4:	f3c8 1300 	ubfx	r3, r8, #4, #1
    1bb8:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    nrf_twim_address_set(p_twim, p_xfer_desc->address);
    1bbc:	786b      	ldrb	r3, [r5, #1]
    p_reg->ADDRESS = address;
    1bbe:	f8c4 3588 	str.w	r3, [r4, #1416]	; 0x588
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    1bc2:	2300      	movs	r3, #0
    1bc4:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    1bc8:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
    1bcc:	9205      	str	r2, [sp, #20]
    (void)dummy;
    1bce:	9a05      	ldr	r2, [sp, #20]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    1bd0:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    1bd4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    1bd8:	9306      	str	r3, [sp, #24]
    (void)dummy;
    1bda:	9b06      	ldr	r3, [sp, #24]
    if (NRFX_TWIM_FLAG_TX_POSTINC & flags)
    1bdc:	f018 0f01 	tst.w	r8, #1
    1be0:	d03b      	beq.n	1c5a <nrfx_twim_xfer+0x14a>
}

__STATIC_INLINE void nrf_twim_tx_list_enable(NRF_TWIM_Type * p_reg)
{
    p_reg->TXD.LIST = 1;
    1be2:	2301      	movs	r3, #1
    1be4:	f8c4 3550 	str.w	r3, [r4, #1360]	; 0x550
    if (NRFX_TWIM_FLAG_RX_POSTINC & flags)
    1be8:	f018 0f02 	tst.w	r8, #2
    1bec:	d039      	beq.n	1c62 <nrfx_twim_xfer+0x152>
    p_reg->TXD.LIST = 0;
}

__STATIC_INLINE void nrf_twim_rx_list_enable(NRF_TWIM_Type * p_reg)
{
    p_reg->RXD.LIST = 1;
    1bee:	2301      	movs	r3, #1
    1bf0:	f8c4 3540 	str.w	r3, [r4, #1344]	; 0x540
    switch (p_xfer_desc->type)
    1bf4:	782b      	ldrb	r3, [r5, #0]
    1bf6:	2b03      	cmp	r3, #3
    1bf8:	f200 8136 	bhi.w	1e68 <nrfx_twim_xfer+0x358>
    1bfc:	e8df f013 	tbh	[pc, r3, lsl #1]
    1c00:	010600ca 	.word	0x010600ca
    1c04:	003500aa 	.word	0x003500aa
    NRFX_ASSERT( !((p_cb->handler == NULL) && (p_xfer_desc->type == NRFX_TWIM_XFER_TXRX)));
    1c08:	782b      	ldrb	r3, [r5, #0]
    1c0a:	2b02      	cmp	r3, #2
    1c0c:	d1aa      	bne.n	1b64 <nrfx_twim_xfer+0x54>
    1c0e:	f8df b224 	ldr.w	fp, [pc, #548]	; 1e34 <nrfx_twim_xfer+0x324>
    1c12:	f240 13ed 	movw	r3, #493	; 0x1ed
    1c16:	465a      	mov	r2, fp
    1c18:	498b      	ldr	r1, [pc, #556]	; (1e48 <nrfx_twim_xfer+0x338>)
    1c1a:	4888      	ldr	r0, [pc, #544]	; (1e3c <nrfx_twim_xfer+0x32c>)
    1c1c:	f00d fe2f 	bl	f87e <printk>
    1c20:	f240 11ed 	movw	r1, #493	; 0x1ed
    1c24:	4658      	mov	r0, fp
    1c26:	f00d feb0 	bl	f98a <assert_post_action>
    1c2a:	e79b      	b.n	1b64 <nrfx_twim_xfer+0x54>
    NRFX_ASSERT( !((p_cb->handler == NULL) && (p_xfer_desc->type == NRFX_TWIM_XFER_TXTX)));
    1c2c:	782b      	ldrb	r3, [r5, #0]
    1c2e:	2b03      	cmp	r3, #3
    1c30:	d19f      	bne.n	1b72 <nrfx_twim_xfer+0x62>
    1c32:	f8df a200 	ldr.w	sl, [pc, #512]	; 1e34 <nrfx_twim_xfer+0x324>
    1c36:	f44f 73f7 	mov.w	r3, #494	; 0x1ee
    1c3a:	4652      	mov	r2, sl
    1c3c:	4983      	ldr	r1, [pc, #524]	; (1e4c <nrfx_twim_xfer+0x33c>)
    1c3e:	487f      	ldr	r0, [pc, #508]	; (1e3c <nrfx_twim_xfer+0x32c>)
    1c40:	f00d fe1d 	bl	f87e <printk>
    1c44:	f44f 71f7 	mov.w	r1, #494	; 0x1ee
    1c48:	4650      	mov	r0, sl
    1c4a:	f00d fe9e 	bl	f98a <assert_post_action>
    1c4e:	e790      	b.n	1b72 <nrfx_twim_xfer+0x62>
        nrf_twim_int_enable(p_twim, p_cb->int_mask);
    1c50:	68bb      	ldr	r3, [r7, #8]
    p_reg->INTENSET = mask;
    1c52:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
        return err_code;
    1c56:	487e      	ldr	r0, [pc, #504]	; (1e50 <nrfx_twim_xfer+0x340>)
    1c58:	e12b      	b.n	1eb2 <nrfx_twim_xfer+0x3a2>
    p_reg->TXD.LIST = 0;
    1c5a:	2300      	movs	r3, #0
    1c5c:	f8c4 3550 	str.w	r3, [r4, #1360]	; 0x550
    1c60:	e7c2      	b.n	1be8 <nrfx_twim_xfer+0xd8>
}

__STATIC_INLINE void nrf_twim_rx_list_disable(NRF_TWIM_Type * p_reg)
{
    p_reg->RXD.LIST = 0;
    1c62:	2300      	movs	r3, #0
    1c64:	f8c4 3540 	str.w	r3, [r4, #1344]	; 0x540
    1c68:	e7c4      	b.n	1bf4 <nrfx_twim_xfer+0xe4>
        NRFX_ASSERT(!(flags & NRFX_TWIM_FLAG_REPEATED_XFER));
    1c6a:	f018 0f10 	tst.w	r8, #16
    1c6e:	d144      	bne.n	1cfa <nrfx_twim_xfer+0x1ea>
        NRFX_ASSERT(!(flags & NRFX_TWIM_FLAG_HOLD_XFER));
    1c70:	f018 0f08 	tst.w	r8, #8
    1c74:	d150      	bne.n	1d18 <nrfx_twim_xfer+0x208>
        NRFX_ASSERT(!(flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER));
    1c76:	f018 0f04 	tst.w	r8, #4
    1c7a:	d15c      	bne.n	1d36 <nrfx_twim_xfer+0x226>
        if (!nrfx_is_in_ram(p_xfer_desc->p_secondary_buf))
    1c7c:	692b      	ldr	r3, [r5, #16]
    1c7e:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
    1c82:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    1c86:	f040 8117 	bne.w	1eb8 <nrfx_twim_xfer+0x3a8>
    p_reg->SHORTS = mask;
    1c8a:	f44f 7380 	mov.w	r3, #256	; 0x100
    1c8e:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
    1c92:	68ea      	ldr	r2, [r5, #12]
    1c94:	686b      	ldr	r3, [r5, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    1c96:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    1c9a:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    1c9e:	2300      	movs	r3, #0
    1ca0:	f8c4 3150 	str.w	r3, [r4, #336]	; 0x150
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    1ca4:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
    1ca8:	9202      	str	r2, [sp, #8]
    (void)dummy;
    1caa:	9a02      	ldr	r2, [sp, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    1cac:	f8c4 3160 	str.w	r3, [r4, #352]	; 0x160
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    1cb0:	f8d4 2160 	ldr.w	r2, [r4, #352]	; 0x160
    1cb4:	9203      	str	r2, [sp, #12]
    (void)dummy;
    1cb6:	9a03      	ldr	r2, [sp, #12]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    1cb8:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    1cbc:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    1cc0:	9304      	str	r3, [sp, #16]
    (void)dummy;
    1cc2:	9b04      	ldr	r3, [sp, #16]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    1cc4:	2301      	movs	r3, #1
    1cc6:	6223      	str	r3, [r4, #32]
    1cc8:	60a3      	str	r3, [r4, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    1cca:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
        while (!nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_TXSTARTED))
    1cce:	2b00      	cmp	r3, #0
    1cd0:	d0fb      	beq.n	1cca <nrfx_twim_xfer+0x1ba>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    1cd2:	2300      	movs	r3, #0
    1cd4:	f8c4 3150 	str.w	r3, [r4, #336]	; 0x150
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    1cd8:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
    1cdc:	9301      	str	r3, [sp, #4]
    (void)dummy;
    1cde:	9b01      	ldr	r3, [sp, #4]
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_secondary_buf, p_xfer_desc->secondary_length);
    1ce0:	692a      	ldr	r2, [r5, #16]
    1ce2:	68ab      	ldr	r3, [r5, #8]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    1ce4:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    1ce8:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
        p_cb->int_mask = NRF_TWIM_INT_SUSPENDED_MASK | NRF_TWIM_INT_ERROR_MASK;
    1cec:	4b59      	ldr	r3, [pc, #356]	; (1e54 <nrfx_twim_xfer+0x344>)
    1cee:	60bb      	str	r3, [r7, #8]
    nrf_twim_event_t evt_to_wait = NRF_TWIM_EVENT_STOPPED;
    1cf0:	f44f 7282 	mov.w	r2, #260	; 0x104
    nrf_twim_task_t  start_task = NRF_TWIM_TASK_STARTTX;
    1cf4:	2308      	movs	r3, #8
    nrfx_err_t err_code = NRFX_SUCCESS;
    1cf6:	4858      	ldr	r0, [pc, #352]	; (1e58 <nrfx_twim_xfer+0x348>)
    1cf8:	e068      	b.n	1dcc <nrfx_twim_xfer+0x2bc>
        NRFX_ASSERT(!(flags & NRFX_TWIM_FLAG_REPEATED_XFER));
    1cfa:	f8df a138 	ldr.w	sl, [pc, #312]	; 1e34 <nrfx_twim_xfer+0x324>
    1cfe:	f44f 73b4 	mov.w	r3, #360	; 0x168
    1d02:	4652      	mov	r2, sl
    1d04:	4955      	ldr	r1, [pc, #340]	; (1e5c <nrfx_twim_xfer+0x34c>)
    1d06:	484d      	ldr	r0, [pc, #308]	; (1e3c <nrfx_twim_xfer+0x32c>)
    1d08:	f00d fdb9 	bl	f87e <printk>
    1d0c:	f44f 71b4 	mov.w	r1, #360	; 0x168
    1d10:	4650      	mov	r0, sl
    1d12:	f00d fe3a 	bl	f98a <assert_post_action>
    1d16:	e7ab      	b.n	1c70 <nrfx_twim_xfer+0x160>
        NRFX_ASSERT(!(flags & NRFX_TWIM_FLAG_HOLD_XFER));
    1d18:	f8df a118 	ldr.w	sl, [pc, #280]	; 1e34 <nrfx_twim_xfer+0x324>
    1d1c:	f240 1369 	movw	r3, #361	; 0x169
    1d20:	4652      	mov	r2, sl
    1d22:	494f      	ldr	r1, [pc, #316]	; (1e60 <nrfx_twim_xfer+0x350>)
    1d24:	4845      	ldr	r0, [pc, #276]	; (1e3c <nrfx_twim_xfer+0x32c>)
    1d26:	f00d fdaa 	bl	f87e <printk>
    1d2a:	f240 1169 	movw	r1, #361	; 0x169
    1d2e:	4650      	mov	r0, sl
    1d30:	f00d fe2b 	bl	f98a <assert_post_action>
    1d34:	e79f      	b.n	1c76 <nrfx_twim_xfer+0x166>
        NRFX_ASSERT(!(flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER));
    1d36:	f8df a0fc 	ldr.w	sl, [pc, #252]	; 1e34 <nrfx_twim_xfer+0x324>
    1d3a:	f44f 73b5 	mov.w	r3, #362	; 0x16a
    1d3e:	4652      	mov	r2, sl
    1d40:	4948      	ldr	r1, [pc, #288]	; (1e64 <nrfx_twim_xfer+0x354>)
    1d42:	483e      	ldr	r0, [pc, #248]	; (1e3c <nrfx_twim_xfer+0x32c>)
    1d44:	f00d fd9b 	bl	f87e <printk>
    1d48:	f44f 71b5 	mov.w	r1, #362	; 0x16a
    1d4c:	4650      	mov	r0, sl
    1d4e:	f00d fe1c 	bl	f98a <assert_post_action>
    1d52:	e793      	b.n	1c7c <nrfx_twim_xfer+0x16c>
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
    1d54:	68ea      	ldr	r2, [r5, #12]
    1d56:	686b      	ldr	r3, [r5, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    1d58:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    1d5c:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
        if (!nrfx_is_in_ram(p_xfer_desc->p_secondary_buf))
    1d60:	692b      	ldr	r3, [r5, #16]
    1d62:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
    1d66:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
    1d6a:	f040 80a7 	bne.w	1ebc <nrfx_twim_xfer+0x3ac>
        nrf_twim_rx_buffer_set(p_twim, p_xfer_desc->p_secondary_buf, p_xfer_desc->secondary_length);
    1d6e:	68aa      	ldr	r2, [r5, #8]
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    1d70:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    1d74:	f8c4 2538 	str.w	r2, [r4, #1336]	; 0x538
    p_reg->SHORTS = mask;
    1d78:	f44f 5384 	mov.w	r3, #4224	; 0x1080
    1d7c:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK | NRF_TWIM_INT_ERROR_MASK;
    1d80:	f240 2302 	movw	r3, #514	; 0x202
    1d84:	60bb      	str	r3, [r7, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    1d86:	2301      	movs	r3, #1
    1d88:	6223      	str	r3, [r4, #32]
    nrf_twim_event_t evt_to_wait = NRF_TWIM_EVENT_STOPPED;
    1d8a:	f44f 7282 	mov.w	r2, #260	; 0x104
    nrf_twim_task_t  start_task = NRF_TWIM_TASK_STARTTX;
    1d8e:	2308      	movs	r3, #8
    nrfx_err_t err_code = NRFX_SUCCESS;
    1d90:	4831      	ldr	r0, [pc, #196]	; (1e58 <nrfx_twim_xfer+0x348>)
    1d92:	e01b      	b.n	1dcc <nrfx_twim_xfer+0x2bc>
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
    1d94:	68ea      	ldr	r2, [r5, #12]
    1d96:	686b      	ldr	r3, [r5, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    1d98:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    1d9c:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
        if (NRFX_TWIM_FLAG_TX_NO_STOP & flags)
    1da0:	f018 0f20 	tst.w	r8, #32
    1da4:	d028      	beq.n	1df8 <nrfx_twim_xfer+0x2e8>
    p_reg->SHORTS = mask;
    1da6:	f44f 7380 	mov.w	r3, #256	; 0x100
    1daa:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
            p_cb->int_mask = NRF_TWIM_INT_SUSPENDED_MASK | NRF_TWIM_INT_ERROR_MASK;
    1dae:	4b29      	ldr	r3, [pc, #164]	; (1e54 <nrfx_twim_xfer+0x344>)
    1db0:	60bb      	str	r3, [r7, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    1db2:	2300      	movs	r3, #0
    1db4:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    1db8:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    1dbc:	9300      	str	r3, [sp, #0]
    (void)dummy;
    1dbe:	9b00      	ldr	r3, [sp, #0]
            evt_to_wait = NRF_TWIM_EVENT_SUSPENDED;
    1dc0:	f44f 72a4 	mov.w	r2, #328	; 0x148
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    1dc4:	2301      	movs	r3, #1
    1dc6:	6223      	str	r3, [r4, #32]
    nrf_twim_task_t  start_task = NRF_TWIM_TASK_STARTTX;
    1dc8:	2308      	movs	r3, #8
    nrfx_err_t err_code = NRFX_SUCCESS;
    1dca:	4823      	ldr	r0, [pc, #140]	; (1e58 <nrfx_twim_xfer+0x348>)
    if (!(flags & NRFX_TWIM_FLAG_HOLD_XFER) && (p_xfer_desc->type != NRFX_TWIM_XFER_TXTX))
    1dcc:	f018 0f08 	tst.w	r8, #8
    1dd0:	d104      	bne.n	1ddc <nrfx_twim_xfer+0x2cc>
    1dd2:	7829      	ldrb	r1, [r5, #0]
    1dd4:	2903      	cmp	r1, #3
    1dd6:	d001      	beq.n	1ddc <nrfx_twim_xfer+0x2cc>
    1dd8:	2101      	movs	r1, #1
    1dda:	50e1      	str	r1, [r4, r3]
    if (p_cb->handler)
    1ddc:	f859 3006 	ldr.w	r3, [r9, r6]
    1de0:	2b00      	cmp	r3, #0
    1de2:	d046      	beq.n	1e72 <nrfx_twim_xfer+0x362>
        if (flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER)
    1de4:	f018 0f04 	tst.w	r8, #4
    1de8:	d002      	beq.n	1df0 <nrfx_twim_xfer+0x2e0>
            p_cb->int_mask = NRF_TWIM_INT_ERROR_MASK;
    1dea:	f44f 7300 	mov.w	r3, #512	; 0x200
    1dee:	60bb      	str	r3, [r7, #8]
        nrf_twim_int_enable(p_twim, p_cb->int_mask);
    1df0:	68bb      	ldr	r3, [r7, #8]
    p_reg->INTENSET = mask;
    1df2:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    1df6:	e05c      	b.n	1eb2 <nrfx_twim_xfer+0x3a2>
    p_reg->SHORTS = mask;
    1df8:	f44f 7300 	mov.w	r3, #512	; 0x200
    1dfc:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK | NRF_TWIM_INT_ERROR_MASK;
    1e00:	f240 2302 	movw	r3, #514	; 0x202
    1e04:	60bb      	str	r3, [r7, #8]
    nrf_twim_event_t evt_to_wait = NRF_TWIM_EVENT_STOPPED;
    1e06:	f44f 7282 	mov.w	r2, #260	; 0x104
    1e0a:	e7db      	b.n	1dc4 <nrfx_twim_xfer+0x2b4>
        nrf_twim_rx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
    1e0c:	68ea      	ldr	r2, [r5, #12]
    1e0e:	686b      	ldr	r3, [r5, #4]
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    1e10:	f8c4 2534 	str.w	r2, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    1e14:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    p_reg->SHORTS = mask;
    1e18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    1e1c:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK | NRF_TWIM_INT_ERROR_MASK;
    1e20:	f240 2302 	movw	r3, #514	; 0x202
    1e24:	60bb      	str	r3, [r7, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    1e26:	2301      	movs	r3, #1
    1e28:	6223      	str	r3, [r4, #32]
    nrf_twim_event_t evt_to_wait = NRF_TWIM_EVENT_STOPPED;
    1e2a:	f44f 7282 	mov.w	r2, #260	; 0x104
        start_task = NRF_TWIM_TASK_STARTRX;
    1e2e:	2300      	movs	r3, #0
    nrfx_err_t err_code = NRFX_SUCCESS;
    1e30:	4809      	ldr	r0, [pc, #36]	; (1e58 <nrfx_twim_xfer+0x348>)
    1e32:	e7cb      	b.n	1dcc <nrfx_twim_xfer+0x2bc>
    1e34:	00011534 	.word	0x00011534
    1e38:	000113a0 	.word	0x000113a0
    1e3c:	00010f8c 	.word	0x00010f8c
    1e40:	200002e8 	.word	0x200002e8
    1e44:	019c0202 	.word	0x019c0202
    1e48:	0001144c 	.word	0x0001144c
    1e4c:	0001149c 	.word	0x0001149c
    1e50:	0bad000b 	.word	0x0bad000b
    1e54:	00040200 	.word	0x00040200
    1e58:	0bad0000 	.word	0x0bad0000
    1e5c:	000114ec 	.word	0x000114ec
    1e60:	00011504 	.word	0x00011504
    1e64:	0001151c 	.word	0x0001151c
    nrf_twim_event_t evt_to_wait = NRF_TWIM_EVENT_STOPPED;
    1e68:	f44f 7282 	mov.w	r2, #260	; 0x104
    nrf_twim_task_t  start_task = NRF_TWIM_TASK_STARTTX;
    1e6c:	2308      	movs	r3, #8
        err_code = NRFX_ERROR_INVALID_PARAM;
    1e6e:	4814      	ldr	r0, [pc, #80]	; (1ec0 <nrfx_twim_xfer+0x3b0>)
    1e70:	e7ac      	b.n	1dcc <nrfx_twim_xfer+0x2bc>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    1e72:	58a3      	ldr	r3, [r4, r2]
        while (!nrf_twim_event_check(p_twim, evt_to_wait))
    1e74:	b983      	cbnz	r3, 1e98 <nrfx_twim_xfer+0x388>
    1e76:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_ERROR))
    1e7a:	2b00      	cmp	r3, #0
    1e7c:	d0f9      	beq.n	1e72 <nrfx_twim_xfer+0x362>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    1e7e:	2300      	movs	r3, #0
    1e80:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    1e84:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    1e88:	9307      	str	r3, [sp, #28]
    (void)dummy;
    1e8a:	9b07      	ldr	r3, [sp, #28]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    1e8c:	2301      	movs	r3, #1
    1e8e:	6223      	str	r3, [r4, #32]
    1e90:	6163      	str	r3, [r4, #20]
                evt_to_wait = NRF_TWIM_EVENT_STOPPED;
    1e92:	f44f 7282 	mov.w	r2, #260	; 0x104
    1e96:	e7ec      	b.n	1e72 <nrfx_twim_xfer+0x362>
    uint32_t error_source = p_reg->ERRORSRC;
    1e98:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
    1e9c:	f8c4 34c4 	str.w	r3, [r4, #1220]	; 0x4c4
        p_cb->busy = false;
    1ea0:	2200      	movs	r2, #0
    1ea2:	f887 202f 	strb.w	r2, [r7, #47]	; 0x2f
        if (errorsrc)
    1ea6:	b123      	cbz	r3, 1eb2 <nrfx_twim_xfer+0x3a2>
            err_code = twi_process_error(errorsrc);
    1ea8:	4618      	mov	r0, r3
    1eaa:	f7ff fc41 	bl	1730 <twi_process_error>
    1eae:	e000      	b.n	1eb2 <nrfx_twim_xfer+0x3a2>
        return err_code;
    1eb0:	4804      	ldr	r0, [pc, #16]	; (1ec4 <nrfx_twim_xfer+0x3b4>)
}
    1eb2:	b009      	add	sp, #36	; 0x24
    1eb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            return err_code;
    1eb8:	4802      	ldr	r0, [pc, #8]	; (1ec4 <nrfx_twim_xfer+0x3b4>)
    1eba:	e7fa      	b.n	1eb2 <nrfx_twim_xfer+0x3a2>
            return err_code;
    1ebc:	4801      	ldr	r0, [pc, #4]	; (1ec4 <nrfx_twim_xfer+0x3b4>)
    return err_code;
    1ebe:	e7f8      	b.n	1eb2 <nrfx_twim_xfer+0x3a2>
    1ec0:	0bad0004 	.word	0x0bad0004
    1ec4:	0bad000a 	.word	0x0bad000a

00001ec8 <nrfx_twim_0_irq_handler>:

#if NRFX_CHECK(NRFX_TWIM0_ENABLED)
void nrfx_twim_0_irq_handler(void)
{
    1ec8:	b508      	push	{r3, lr}
    twim_irq_handler(NRF_TWIM0, &m_cb[NRFX_TWIM0_INST_IDX]);
    1eca:	4902      	ldr	r1, [pc, #8]	; (1ed4 <nrfx_twim_0_irq_handler+0xc>)
    1ecc:	4802      	ldr	r0, [pc, #8]	; (1ed8 <nrfx_twim_0_irq_handler+0x10>)
    1ece:	f7ff fc43 	bl	1758 <twim_irq_handler>
}
    1ed2:	bd08      	pop	{r3, pc}
    1ed4:	200002e8 	.word	0x200002e8
    1ed8:	40003000 	.word	0x40003000

00001edc <ev_usbreset_handler>:
 * Interrupt runtimes that would be vectorized using @ref m_isr.
 * @{
 */

static void ev_usbreset_handler(void)
{
    1edc:	b500      	push	{lr}
    1ede:	b083      	sub	sp, #12
    m_bus_suspend = false;
    1ee0:	2300      	movs	r3, #0
    1ee2:	4a07      	ldr	r2, [pc, #28]	; (1f00 <ev_usbreset_handler+0x24>)
    1ee4:	7013      	strb	r3, [r2, #0]
    m_last_setup_dir = NRFX_USBD_EPOUT0;
    1ee6:	4a07      	ldr	r2, [pc, #28]	; (1f04 <ev_usbreset_handler+0x28>)
    1ee8:	7013      	strb	r3, [r2, #0]

    const nrfx_usbd_evt_t evt = {
    1eea:	9301      	str	r3, [sp, #4]
    1eec:	2301      	movs	r3, #1
    1eee:	f88d 3004 	strb.w	r3, [sp, #4]
            .type = NRFX_USBD_EVT_RESET
    };

    m_event_handler(&evt);
    1ef2:	4b05      	ldr	r3, [pc, #20]	; (1f08 <ev_usbreset_handler+0x2c>)
    1ef4:	681b      	ldr	r3, [r3, #0]
    1ef6:	a801      	add	r0, sp, #4
    1ef8:	4798      	blx	r3
}
    1efa:	b003      	add	sp, #12
    1efc:	f85d fb04 	ldr.w	pc, [sp], #4
    1f00:	200027c8 	.word	0x200027c8
    1f04:	200027cb 	.word	0x200027cb
    1f08:	2000051c 	.word	0x2000051c

00001f0c <nrfx_usbd_consumer>:
{
    1f0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1f10:	4607      	mov	r7, r0
    1f12:	460d      	mov	r5, r1
    1f14:	4616      	mov	r6, r2
    1f16:	461c      	mov	r4, r3
    NRFX_ASSERT(ep_size >= data_size);
    1f18:	429a      	cmp	r2, r3
    1f1a:	d312      	bcc.n	1f42 <nrfx_usbd_consumer+0x36>
    NRFX_ASSERT((p_transfer->p_data.rx == NULL) ||
    1f1c:	682b      	ldr	r3, [r5, #0]
    1f1e:	b123      	cbz	r3, 1f2a <nrfx_usbd_consumer+0x1e>
    1f20:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
    1f24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    1f28:	d11a      	bne.n	1f60 <nrfx_usbd_consumer+0x54>
    size_t size = p_transfer->size;
    1f2a:	686b      	ldr	r3, [r5, #4]
    if (size < data_size)
    1f2c:	429c      	cmp	r4, r3
    1f2e:	d926      	bls.n	1f7e <nrfx_usbd_consumer+0x72>
        p_next->size = 0;
    1f30:	2200      	movs	r2, #0
    1f32:	607a      	str	r2, [r7, #4]
        p_next->p_data = p_transfer->p_data;
    1f34:	682a      	ldr	r2, [r5, #0]
    1f36:	603a      	str	r2, [r7, #0]
    return (ep_size == data_size) && (size != 0);
    1f38:	42a6      	cmp	r6, r4
    1f3a:	d029      	beq.n	1f90 <nrfx_usbd_consumer+0x84>
    1f3c:	2000      	movs	r0, #0
}
    1f3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    NRFX_ASSERT(ep_size >= data_size);
    1f42:	f8df 8064 	ldr.w	r8, [pc, #100]	; 1fa8 <nrfx_usbd_consumer+0x9c>
    1f46:	f44f 73e9 	mov.w	r3, #466	; 0x1d2
    1f4a:	4642      	mov	r2, r8
    1f4c:	4913      	ldr	r1, [pc, #76]	; (1f9c <nrfx_usbd_consumer+0x90>)
    1f4e:	4814      	ldr	r0, [pc, #80]	; (1fa0 <nrfx_usbd_consumer+0x94>)
    1f50:	f00d fc95 	bl	f87e <printk>
    1f54:	f44f 71e9 	mov.w	r1, #466	; 0x1d2
    1f58:	4640      	mov	r0, r8
    1f5a:	f00d fd16 	bl	f98a <assert_post_action>
    1f5e:	e7dd      	b.n	1f1c <nrfx_usbd_consumer+0x10>
    NRFX_ASSERT((p_transfer->p_data.rx == NULL) ||
    1f60:	f8df 8044 	ldr.w	r8, [pc, #68]	; 1fa8 <nrfx_usbd_consumer+0x9c>
    1f64:	f44f 73ea 	mov.w	r3, #468	; 0x1d4
    1f68:	4642      	mov	r2, r8
    1f6a:	490e      	ldr	r1, [pc, #56]	; (1fa4 <nrfx_usbd_consumer+0x98>)
    1f6c:	480c      	ldr	r0, [pc, #48]	; (1fa0 <nrfx_usbd_consumer+0x94>)
    1f6e:	f00d fc86 	bl	f87e <printk>
    1f72:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
    1f76:	4640      	mov	r0, r8
    1f78:	f00d fd07 	bl	f98a <assert_post_action>
    1f7c:	e7d5      	b.n	1f2a <nrfx_usbd_consumer+0x1e>
        p_next->size = data_size;
    1f7e:	607c      	str	r4, [r7, #4]
        p_next->p_data = p_transfer->p_data;
    1f80:	682a      	ldr	r2, [r5, #0]
    1f82:	603a      	str	r2, [r7, #0]
        size -= data_size;
    1f84:	1b1b      	subs	r3, r3, r4
        p_transfer->size = size;
    1f86:	606b      	str	r3, [r5, #4]
        p_transfer->p_data.addr += data_size;
    1f88:	682a      	ldr	r2, [r5, #0]
    1f8a:	4422      	add	r2, r4
    1f8c:	602a      	str	r2, [r5, #0]
    1f8e:	e7d3      	b.n	1f38 <nrfx_usbd_consumer+0x2c>
    return (ep_size == data_size) && (size != 0);
    1f90:	b90b      	cbnz	r3, 1f96 <nrfx_usbd_consumer+0x8a>
    1f92:	2000      	movs	r0, #0
    1f94:	e7d3      	b.n	1f3e <nrfx_usbd_consumer+0x32>
    1f96:	2001      	movs	r0, #1
    1f98:	e7d1      	b.n	1f3e <nrfx_usbd_consumer+0x32>
    1f9a:	bf00      	nop
    1f9c:	00011664 	.word	0x00011664
    1fa0:	00010f8c 	.word	0x00010f8c
    1fa4:	0001167c 	.word	0x0001167c
    1fa8:	00011634 	.word	0x00011634

00001fac <nrfx_usbd_feeder_ram>:
{
    1fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1fae:	4606      	mov	r6, r0
    1fb0:	460c      	mov	r4, r1
    1fb2:	4615      	mov	r5, r2
    NRFX_ASSERT(nrfx_is_in_ram(p_transfer->p_data.tx));
    1fb4:	680b      	ldr	r3, [r1, #0]
    1fb6:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
    1fba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    1fbe:	d110      	bne.n	1fe2 <nrfx_usbd_feeder_ram+0x36>
    size_t tx_size = p_transfer->size;
    1fc0:	6863      	ldr	r3, [r4, #4]
    if (tx_size > ep_size)
    1fc2:	42ab      	cmp	r3, r5
    1fc4:	d800      	bhi.n	1fc8 <nrfx_usbd_feeder_ram+0x1c>
    size_t tx_size = p_transfer->size;
    1fc6:	461d      	mov	r5, r3
    p_next->p_data = p_transfer->p_data;
    1fc8:	6823      	ldr	r3, [r4, #0]
    1fca:	6033      	str	r3, [r6, #0]
    p_next->size = tx_size;
    1fcc:	6075      	str	r5, [r6, #4]
    p_transfer->size -= tx_size;
    1fce:	6860      	ldr	r0, [r4, #4]
    1fd0:	1b40      	subs	r0, r0, r5
    1fd2:	6060      	str	r0, [r4, #4]
    p_transfer->p_data.addr += tx_size;
    1fd4:	6823      	ldr	r3, [r4, #0]
    1fd6:	441d      	add	r5, r3
    1fd8:	6025      	str	r5, [r4, #0]
}
    1fda:	3000      	adds	r0, #0
    1fdc:	bf18      	it	ne
    1fde:	2001      	movne	r0, #1
    1fe0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    NRFX_ASSERT(nrfx_is_in_ram(p_transfer->p_data.tx));
    1fe2:	4f07      	ldr	r7, [pc, #28]	; (2000 <nrfx_usbd_feeder_ram+0x54>)
    1fe4:	f240 13f9 	movw	r3, #505	; 0x1f9
    1fe8:	463a      	mov	r2, r7
    1fea:	4906      	ldr	r1, [pc, #24]	; (2004 <nrfx_usbd_feeder_ram+0x58>)
    1fec:	4806      	ldr	r0, [pc, #24]	; (2008 <nrfx_usbd_feeder_ram+0x5c>)
    1fee:	f00d fc46 	bl	f87e <printk>
    1ff2:	f240 11f9 	movw	r1, #505	; 0x1f9
    1ff6:	4638      	mov	r0, r7
    1ff8:	f00d fcc7 	bl	f98a <assert_post_action>
    1ffc:	e7e0      	b.n	1fc0 <nrfx_usbd_feeder_ram+0x14>
    1ffe:	bf00      	nop
    2000:	00011634 	.word	0x00011634
    2004:	00011a70 	.word	0x00011a70
    2008:	00010f8c 	.word	0x00010f8c

0000200c <nrfx_usbd_feeder_ram_zlp>:
{
    200c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    200e:	4606      	mov	r6, r0
    2010:	460d      	mov	r5, r1
    2012:	4614      	mov	r4, r2
    NRFX_ASSERT(nrfx_is_in_ram(p_transfer->p_data.tx));
    2014:	680b      	ldr	r3, [r1, #0]
    2016:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
    201a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    201e:	d106      	bne.n	202e <nrfx_usbd_feeder_ram_zlp+0x22>
    size_t tx_size = p_transfer->size;
    2020:	686b      	ldr	r3, [r5, #4]
    if (tx_size > ep_size)
    2022:	42a3      	cmp	r3, r4
    2024:	d800      	bhi.n	2028 <nrfx_usbd_feeder_ram_zlp+0x1c>
    size_t tx_size = p_transfer->size;
    2026:	461c      	mov	r4, r3
    p_next->p_data.tx = (tx_size == 0) ? NULL : p_transfer->p_data.tx;
    2028:	b17c      	cbz	r4, 204a <nrfx_usbd_feeder_ram_zlp+0x3e>
    202a:	682b      	ldr	r3, [r5, #0]
    202c:	e00e      	b.n	204c <nrfx_usbd_feeder_ram_zlp+0x40>
    NRFX_ASSERT(nrfx_is_in_ram(p_transfer->p_data.tx));
    202e:	4f0d      	ldr	r7, [pc, #52]	; (2064 <nrfx_usbd_feeder_ram_zlp+0x58>)
    2030:	f240 231a 	movw	r3, #538	; 0x21a
    2034:	463a      	mov	r2, r7
    2036:	490c      	ldr	r1, [pc, #48]	; (2068 <nrfx_usbd_feeder_ram_zlp+0x5c>)
    2038:	480c      	ldr	r0, [pc, #48]	; (206c <nrfx_usbd_feeder_ram_zlp+0x60>)
    203a:	f00d fc20 	bl	f87e <printk>
    203e:	f240 211a 	movw	r1, #538	; 0x21a
    2042:	4638      	mov	r0, r7
    2044:	f00d fca1 	bl	f98a <assert_post_action>
    2048:	e7ea      	b.n	2020 <nrfx_usbd_feeder_ram_zlp+0x14>
    p_next->p_data.tx = (tx_size == 0) ? NULL : p_transfer->p_data.tx;
    204a:	2300      	movs	r3, #0
    204c:	6033      	str	r3, [r6, #0]
    p_next->size = tx_size;
    204e:	6074      	str	r4, [r6, #4]
    p_transfer->size -= tx_size;
    2050:	686b      	ldr	r3, [r5, #4]
    2052:	1b1b      	subs	r3, r3, r4
    2054:	606b      	str	r3, [r5, #4]
    p_transfer->p_data.addr += tx_size;
    2056:	682b      	ldr	r3, [r5, #0]
    2058:	4423      	add	r3, r4
    205a:	602b      	str	r3, [r5, #0]
}
    205c:	1c20      	adds	r0, r4, #0
    205e:	bf18      	it	ne
    2060:	2001      	movne	r0, #1
    2062:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2064:	00011634 	.word	0x00011634
    2068:	00011a70 	.word	0x00011a70
    206c:	00010f8c 	.word	0x00010f8c

00002070 <ev_usbevent_handler>:
    };
    m_event_handler(&evt);
}

static void ev_usbevent_handler(void)
{
    2070:	b510      	push	{r4, lr}
    2072:	b082      	sub	sp, #8
    __DSB();
}

uint32_t nrf_usbd_eventcause_get(void)
{
    return NRF_USBD->EVENTCAUSE;
    2074:	4b2c      	ldr	r3, [pc, #176]	; (2128 <ev_usbevent_handler+0xb8>)
    2076:	f8d3 4400 	ldr.w	r4, [r3, #1024]	; 0x400
}

void nrf_usbd_eventcause_clear(uint32_t flags)
{
    NRF_USBD->EVENTCAUSE = flags;
    207a:	f8c3 4400 	str.w	r4, [r3, #1024]	; 0x400
  __ASM volatile ("isb 0xF":::"memory");
    207e:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb 0xF":::"memory");
    2082:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2086:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb 0xF":::"memory");
    208a:	f3bf 8f4f 	dsb	sy
    if (event & NRF_USBD_EVENTCAUSE_ISOOUTCRC_MASK)
    {
        NRFX_LOG_DEBUG("USBD event: ISOOUTCRC");
        /* Currently no support */
    }
    if (event & NRF_USBD_EVENTCAUSE_SUSPEND_MASK)
    208e:	f414 7f80 	tst.w	r4, #256	; 0x100
    2092:	d00b      	beq.n	20ac <ev_usbevent_handler+0x3c>
    {
        NRFX_LOG_DEBUG("USBD event: SUSPEND");
        m_bus_suspend = true;
    2094:	4b25      	ldr	r3, [pc, #148]	; (212c <ev_usbevent_handler+0xbc>)
    2096:	2201      	movs	r2, #1
    2098:	701a      	strb	r2, [r3, #0]
        const nrfx_usbd_evt_t evt = {
    209a:	2300      	movs	r3, #0
    209c:	9301      	str	r3, [sp, #4]
    209e:	2302      	movs	r3, #2
    20a0:	f88d 3004 	strb.w	r3, [sp, #4]
                .type = NRFX_USBD_EVT_SUSPEND
        };
        m_event_handler(&evt);
    20a4:	4b22      	ldr	r3, [pc, #136]	; (2130 <ev_usbevent_handler+0xc0>)
    20a6:	681b      	ldr	r3, [r3, #0]
    20a8:	a801      	add	r0, sp, #4
    20aa:	4798      	blx	r3
    }
    if (event & NRF_USBD_EVENTCAUSE_RESUME_MASK)
    20ac:	f414 7f00 	tst.w	r4, #512	; 0x200
    20b0:	d00a      	beq.n	20c8 <ev_usbevent_handler+0x58>
    {
        NRFX_LOG_DEBUG("USBD event: RESUME");
        m_bus_suspend = false;
    20b2:	2300      	movs	r3, #0
    20b4:	4a1d      	ldr	r2, [pc, #116]	; (212c <ev_usbevent_handler+0xbc>)
    20b6:	7013      	strb	r3, [r2, #0]
        const nrfx_usbd_evt_t evt = {
    20b8:	9301      	str	r3, [sp, #4]
    20ba:	2303      	movs	r3, #3
    20bc:	f88d 3004 	strb.w	r3, [sp, #4]
                .type = NRFX_USBD_EVT_RESUME
        };
        m_event_handler(&evt);
    20c0:	4b1b      	ldr	r3, [pc, #108]	; (2130 <ev_usbevent_handler+0xc0>)
    20c2:	681b      	ldr	r3, [r3, #0]
    20c4:	a801      	add	r0, sp, #4
    20c6:	4798      	blx	r3
    }
    if (event & NRF_USBD_EVENTCAUSE_WUREQ_MASK)
    20c8:	f414 6f80 	tst.w	r4, #1024	; 0x400
    20cc:	d01b      	beq.n	2106 <ev_usbevent_handler+0x96>
    {
        NRFX_LOG_DEBUG("USBD event: WUREQ (%s)", m_bus_suspend ? "In Suspend" : "Active");
        if (m_bus_suspend)
    20ce:	4b17      	ldr	r3, [pc, #92]	; (212c <ev_usbevent_handler+0xbc>)
    20d0:	781b      	ldrb	r3, [r3, #0]
    20d2:	b1c3      	cbz	r3, 2106 <ev_usbevent_handler+0x96>
    NRF_USBD->LOWPOWER = USBD_LOWPOWER_LOWPOWER_ForceNormal << USBD_LOWPOWER_LOWPOWER_Pos;
}

bool nrf_usbd_lowpower_check(void)
{
    return (NRF_USBD->LOWPOWER != (USBD_LOWPOWER_LOWPOWER_ForceNormal << USBD_LOWPOWER_LOWPOWER_Pos));
    20d4:	4b14      	ldr	r3, [pc, #80]	; (2128 <ev_usbevent_handler+0xb8>)
    20d6:	f8d3 352c 	ldr.w	r3, [r3, #1324]	; 0x52c
        {
            NRFX_ASSERT(!nrf_usbd_lowpower_check());
    20da:	b9b3      	cbnz	r3, 210a <ev_usbevent_handler+0x9a>
            m_bus_suspend = false;
    20dc:	2300      	movs	r3, #0
    20de:	4a13      	ldr	r2, [pc, #76]	; (212c <ev_usbevent_handler+0xbc>)
    20e0:	7013      	strb	r3, [r2, #0]
    NRF_USBD->DPDMVALUE = ((uint32_t)val) << USBD_DPDMVALUE_STATE_Pos;
    20e2:	2201      	movs	r2, #1
    20e4:	4910      	ldr	r1, [pc, #64]	; (2128 <ev_usbevent_handler+0xb8>)
    20e6:	f8c1 2508 	str.w	r2, [r1, #1288]	; 0x508
    *(nrf_usbd_getRegPtr((uint32_t)task)) = 1UL;
    20ea:	3158      	adds	r1, #88	; 0x58
    20ec:	600a      	str	r2, [r1, #0]
  __ASM volatile ("isb 0xF":::"memory");
    20ee:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb 0xF":::"memory");
    20f2:	f3bf 8f4f 	dsb	sy

            nrf_usbd_dpdmvalue_set(NRF_USBD_DPDMVALUE_RESUME);
            nrf_usbd_task_trigger(NRF_USBD_TASK_DRIVEDPDM);

            const nrfx_usbd_evt_t evt = {
    20f6:	9301      	str	r3, [sp, #4]
    20f8:	2304      	movs	r3, #4
    20fa:	f88d 3004 	strb.w	r3, [sp, #4]
                    .type = NRFX_USBD_EVT_WUREQ
            };
            m_event_handler(&evt);
    20fe:	4b0c      	ldr	r3, [pc, #48]	; (2130 <ev_usbevent_handler+0xc0>)
    2100:	681b      	ldr	r3, [r3, #0]
    2102:	a801      	add	r0, sp, #4
    2104:	4798      	blx	r3
        }
    }
}
    2106:	b002      	add	sp, #8
    2108:	bd10      	pop	{r4, pc}
            NRFX_ASSERT(!nrf_usbd_lowpower_check());
    210a:	4c0a      	ldr	r4, [pc, #40]	; (2134 <ev_usbevent_handler+0xc4>)
    210c:	f240 43f5 	movw	r3, #1269	; 0x4f5
    2110:	4622      	mov	r2, r4
    2112:	4909      	ldr	r1, [pc, #36]	; (2138 <ev_usbevent_handler+0xc8>)
    2114:	4809      	ldr	r0, [pc, #36]	; (213c <ev_usbevent_handler+0xcc>)
    2116:	f00d fbb2 	bl	f87e <printk>
    211a:	f240 41f5 	movw	r1, #1269	; 0x4f5
    211e:	4620      	mov	r0, r4
    2120:	f00d fc33 	bl	f98a <assert_post_action>
    2124:	e7da      	b.n	20dc <ev_usbevent_handler+0x6c>
    2126:	bf00      	nop
    2128:	40027000 	.word	0x40027000
    212c:	200027c8 	.word	0x200027c8
    2130:	2000051c 	.word	0x2000051c
    2134:	00011634 	.word	0x00011634
    2138:	000115b4 	.word	0x000115b4
    213c:	00010f8c 	.word	0x00010f8c

00002140 <ev_dma_epin0_handler>:
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    2140:	2300      	movs	r3, #0
    2142:	4a15      	ldr	r2, [pc, #84]	; (2198 <ev_dma_epin0_handler+0x58>)
    2144:	6013      	str	r3, [r2, #0]
    m_dma_pending = false;
    2146:	4a15      	ldr	r2, [pc, #84]	; (219c <ev_dma_epin0_handler+0x5c>)
    2148:	7013      	strb	r3, [r2, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    214a:	4b15      	ldr	r3, [pc, #84]	; (21a0 <ev_dma_epin0_handler+0x60>)
    214c:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
    2150:	2b03      	cmp	r3, #3
    2152:	d004      	beq.n	215e <ev_dma_epin0_handler+0x1e>
    else if (p_state->handler.feeder == NULL)
    2154:	4b12      	ldr	r3, [pc, #72]	; (21a0 <ev_dma_epin0_handler+0x60>)
    2156:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    215a:	b173      	cbz	r3, 217a <ev_dma_epin0_handler+0x3a>
static void ev_dma_epin0_handler(void)  { nrf_usbd_ep0in_dma_handler(); }
    215c:	4770      	bx	lr
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    215e:	4b11      	ldr	r3, [pc, #68]	; (21a4 <ev_dma_epin0_handler+0x64>)
    2160:	f3bf 8f5b 	dmb	ish
    2164:	e853 2f00 	ldrex	r2, [r3]
    2168:	f022 0201 	bic.w	r2, r2, #1
    216c:	e843 2100 	strex	r1, r2, [r3]
    2170:	2900      	cmp	r1, #0
    2172:	d1f7      	bne.n	2164 <ev_dma_epin0_handler+0x24>
    2174:	f3bf 8f5b 	dmb	ish
    2178:	4770      	bx	lr
    217a:	4b0a      	ldr	r3, [pc, #40]	; (21a4 <ev_dma_epin0_handler+0x64>)
    217c:	f3bf 8f5b 	dmb	ish
    2180:	e853 2f00 	ldrex	r2, [r3]
    2184:	f022 0201 	bic.w	r2, r2, #1
    2188:	e843 2100 	strex	r1, r2, [r3]
    218c:	2900      	cmp	r1, #0
    218e:	d1f7      	bne.n	2180 <ev_dma_epin0_handler+0x40>
    2190:	f3bf 8f5b 	dmb	ish
    2194:	e7e2      	b.n	215c <ev_dma_epin0_handler+0x1c>
    2196:	bf00      	nop
    2198:	40027c1c 	.word	0x40027c1c
    219c:	200027c9 	.word	0x200027c9
    21a0:	200003fc 	.word	0x200003fc
    21a4:	20000388 	.word	0x20000388

000021a8 <ev_sof_handler>:
{
    21a8:	b500      	push	{lr}
    21aa:	b083      	sub	sp, #12
    nrfx_usbd_evt_t evt =  {
    21ac:	2300      	movs	r3, #0
    21ae:	f88d 3004 	strb.w	r3, [sp, #4]
    return NRF_USBD->FRAMECNTR;
    21b2:	4b11      	ldr	r3, [pc, #68]	; (21f8 <ev_sof_handler+0x50>)
    21b4:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
    21b8:	f8ad 2006 	strh.w	r2, [sp, #6]
    size_t size_isoout = NRF_USBD->SIZE.ISOOUT;
    21bc:	f8d3 34c0 	ldr.w	r3, [r3, #1216]	; 0x4c0
    if (size_isoout == 0)
    21c0:	b123      	cbz	r3, 21cc <ev_sof_handler+0x24>
    else if ((size_isoout & USBD_SIZE_ISOOUT_ZERO_Msk) == (USBD_SIZE_ISOOUT_ZERO_ZeroData << USBD_SIZE_ISOOUT_ZERO_Pos))
    21c2:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    21c6:	d003      	beq.n	21d0 <ev_sof_handler+0x28>
        size_isoout = 0;
    21c8:	2300      	movs	r3, #0
    21ca:	e001      	b.n	21d0 <ev_sof_handler+0x28>
        size_isoout = NRF_USBD_EPISOOUT_NO_DATA;
    21cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    if (nrf_usbd_episoout_size_get(NRFX_USBD_EPOUT8) != NRF_USBD_EPISOOUT_NO_DATA)
    21d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    21d4:	d10c      	bne.n	21f0 <ev_sof_handler+0x48>
    uint32_t iso_ready_mask = (1U << ep2bit(NRFX_USBD_EPIN8));
    21d6:	f44f 7180 	mov.w	r1, #256	; 0x100
    m_ep_ready |= iso_ready_mask;
    21da:	4a08      	ldr	r2, [pc, #32]	; (21fc <ev_sof_handler+0x54>)
    21dc:	6813      	ldr	r3, [r2, #0]
    21de:	430b      	orrs	r3, r1
    21e0:	6013      	str	r3, [r2, #0]
    m_event_handler(&evt);
    21e2:	4b07      	ldr	r3, [pc, #28]	; (2200 <ev_sof_handler+0x58>)
    21e4:	681b      	ldr	r3, [r3, #0]
    21e6:	a801      	add	r0, sp, #4
    21e8:	4798      	blx	r3
}
    21ea:	b003      	add	sp, #12
    21ec:	f85d fb04 	ldr.w	pc, [sp], #4
        iso_ready_mask |= (1U << ep2bit(NRFX_USBD_EPOUT8));
    21f0:	f04f 2101 	mov.w	r1, #16777472	; 0x1000100
    21f4:	e7f1      	b.n	21da <ev_sof_handler+0x32>
    21f6:	bf00      	nop
    21f8:	40027000 	.word	0x40027000
    21fc:	200003f8 	.word	0x200003f8
    2200:	2000051c 	.word	0x2000051c

00002204 <ev_dma_epin8_handler>:
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    2204:	2300      	movs	r3, #0
    2206:	4a1d      	ldr	r2, [pc, #116]	; (227c <ev_dma_epin8_handler+0x78>)
    2208:	6013      	str	r3, [r2, #0]
    m_dma_pending = false;
    220a:	4a1d      	ldr	r2, [pc, #116]	; (2280 <ev_dma_epin8_handler+0x7c>)
    220c:	7013      	strb	r3, [r2, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    220e:	4b1d      	ldr	r3, [pc, #116]	; (2284 <ev_dma_epin8_handler+0x80>)
    2210:	f893 311e 	ldrb.w	r3, [r3, #286]	; 0x11e
    2214:	2b03      	cmp	r3, #3
    2216:	d004      	beq.n	2222 <ev_dma_epin8_handler+0x1e>
    else if (p_state->handler.feeder == NULL)
    2218:	4b1a      	ldr	r3, [pc, #104]	; (2284 <ev_dma_epin8_handler+0x80>)
    221a:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
    221e:	b173      	cbz	r3, 223e <ev_dma_epin8_handler+0x3a>
    2220:	4770      	bx	lr
    2222:	4b19      	ldr	r3, [pc, #100]	; (2288 <ev_dma_epin8_handler+0x84>)
    2224:	f3bf 8f5b 	dmb	ish
    2228:	e853 2f00 	ldrex	r2, [r3]
    222c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    2230:	e843 2100 	strex	r1, r2, [r3]
    2234:	2900      	cmp	r1, #0
    2236:	d1f7      	bne.n	2228 <ev_dma_epin8_handler+0x24>
    2238:	f3bf 8f5b 	dmb	ish
    223c:	4770      	bx	lr
static void ev_dma_epin8_handler(void)  { nrf_usbd_epiniso_dma_handler(NRFX_USBD_EPIN8 ); }
    223e:	b500      	push	{lr}
    2240:	b083      	sub	sp, #12
    2242:	4b11      	ldr	r3, [pc, #68]	; (2288 <ev_dma_epin8_handler+0x84>)
    2244:	f3bf 8f5b 	dmb	ish
    2248:	e853 2f00 	ldrex	r2, [r3]
    224c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    2250:	e843 2100 	strex	r1, r2, [r3]
    2254:	2900      	cmp	r1, #0
    2256:	d1f7      	bne.n	2248 <ev_dma_epin8_handler+0x44>
    2258:	f3bf 8f5b 	dmb	ish
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    225c:	2306      	movs	r3, #6
    225e:	f88d 3004 	strb.w	r3, [sp, #4]
    2262:	2388      	movs	r3, #136	; 0x88
    2264:	f88d 3006 	strb.w	r3, [sp, #6]
    2268:	2300      	movs	r3, #0
    226a:	f88d 3007 	strb.w	r3, [sp, #7]
        m_event_handler(&evt);
    226e:	4b07      	ldr	r3, [pc, #28]	; (228c <ev_dma_epin8_handler+0x88>)
    2270:	681b      	ldr	r3, [r3, #0]
    2272:	a801      	add	r0, sp, #4
    2274:	4798      	blx	r3
static void ev_dma_epin8_handler(void)  { nrf_usbd_epiniso_dma_handler(NRFX_USBD_EPIN8 ); }
    2276:	b003      	add	sp, #12
    2278:	f85d fb04 	ldr.w	pc, [sp], #4
    227c:	40027c1c 	.word	0x40027c1c
    2280:	200027c9 	.word	0x200027c9
    2284:	200003fc 	.word	0x200003fc
    2288:	20000388 	.word	0x20000388
    228c:	2000051c 	.word	0x2000051c

00002290 <ev_dma_epout8_handler>:
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    2290:	2300      	movs	r3, #0
    2292:	4a16      	ldr	r2, [pc, #88]	; (22ec <ev_dma_epout8_handler+0x5c>)
    2294:	6013      	str	r3, [r2, #0]
    m_dma_pending = false;
    2296:	4a16      	ldr	r2, [pc, #88]	; (22f0 <ev_dma_epout8_handler+0x60>)
    2298:	7013      	strb	r3, [r2, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    229a:	4b16      	ldr	r3, [pc, #88]	; (22f4 <ev_dma_epout8_handler+0x64>)
    229c:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
    22a0:	2b03      	cmp	r3, #3
    22a2:	d003      	beq.n	22ac <ev_dma_epout8_handler+0x1c>
    else if (p_state->handler.consumer == NULL)
    22a4:	4b13      	ldr	r3, [pc, #76]	; (22f4 <ev_dma_epout8_handler+0x64>)
    22a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    22aa:	b103      	cbz	r3, 22ae <ev_dma_epout8_handler+0x1e>
    22ac:	4770      	bx	lr
static void ev_dma_epout8_handler(void) { nrf_usbd_epoutiso_dma_handler(NRFX_USBD_EPOUT8); }
    22ae:	b500      	push	{lr}
    22b0:	b083      	sub	sp, #12
    22b2:	4b11      	ldr	r3, [pc, #68]	; (22f8 <ev_dma_epout8_handler+0x68>)
    22b4:	f3bf 8f5b 	dmb	ish
    22b8:	e853 2f00 	ldrex	r2, [r3]
    22bc:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
    22c0:	e843 2100 	strex	r1, r2, [r3]
    22c4:	2900      	cmp	r1, #0
    22c6:	d1f7      	bne.n	22b8 <ev_dma_epout8_handler+0x28>
    22c8:	f3bf 8f5b 	dmb	ish
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    22cc:	2306      	movs	r3, #6
    22ce:	f88d 3004 	strb.w	r3, [sp, #4]
    22d2:	2308      	movs	r3, #8
    22d4:	f88d 3006 	strb.w	r3, [sp, #6]
    22d8:	2300      	movs	r3, #0
    22da:	f88d 3007 	strb.w	r3, [sp, #7]
        m_event_handler(&evt);
    22de:	4b07      	ldr	r3, [pc, #28]	; (22fc <ev_dma_epout8_handler+0x6c>)
    22e0:	681b      	ldr	r3, [r3, #0]
    22e2:	a801      	add	r0, sp, #4
    22e4:	4798      	blx	r3
static void ev_dma_epout8_handler(void) { nrf_usbd_epoutiso_dma_handler(NRFX_USBD_EPOUT8); }
    22e6:	b003      	add	sp, #12
    22e8:	f85d fb04 	ldr.w	pc, [sp], #4
    22ec:	40027c1c 	.word	0x40027c1c
    22f0:	200027c9 	.word	0x200027c9
    22f4:	200003fc 	.word	0x200003fc
    22f8:	20000388 	.word	0x20000388
    22fc:	2000051c 	.word	0x2000051c

00002300 <ev_dma_epin6_handler>:
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    2300:	2300      	movs	r3, #0
    2302:	4a15      	ldr	r2, [pc, #84]	; (2358 <ev_dma_epin6_handler+0x58>)
    2304:	6013      	str	r3, [r2, #0]
    m_dma_pending = false;
    2306:	4a15      	ldr	r2, [pc, #84]	; (235c <ev_dma_epin6_handler+0x5c>)
    2308:	7013      	strb	r3, [r2, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    230a:	4b15      	ldr	r3, [pc, #84]	; (2360 <ev_dma_epin6_handler+0x60>)
    230c:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
    2310:	2b03      	cmp	r3, #3
    2312:	d004      	beq.n	231e <ev_dma_epin6_handler+0x1e>
    else if (p_state->handler.feeder == NULL)
    2314:	4b12      	ldr	r3, [pc, #72]	; (2360 <ev_dma_epin6_handler+0x60>)
    2316:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
    231a:	b173      	cbz	r3, 233a <ev_dma_epin6_handler+0x3a>
static void ev_dma_epin6_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN6 ); }
    231c:	4770      	bx	lr
    231e:	4b11      	ldr	r3, [pc, #68]	; (2364 <ev_dma_epin6_handler+0x64>)
    2320:	f3bf 8f5b 	dmb	ish
    2324:	e853 2f00 	ldrex	r2, [r3]
    2328:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    232c:	e843 2100 	strex	r1, r2, [r3]
    2330:	2900      	cmp	r1, #0
    2332:	d1f7      	bne.n	2324 <ev_dma_epin6_handler+0x24>
    2334:	f3bf 8f5b 	dmb	ish
    2338:	4770      	bx	lr
    233a:	4b0a      	ldr	r3, [pc, #40]	; (2364 <ev_dma_epin6_handler+0x64>)
    233c:	f3bf 8f5b 	dmb	ish
    2340:	e853 2f00 	ldrex	r2, [r3]
    2344:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    2348:	e843 2100 	strex	r1, r2, [r3]
    234c:	2900      	cmp	r1, #0
    234e:	d1f7      	bne.n	2340 <ev_dma_epin6_handler+0x40>
    2350:	f3bf 8f5b 	dmb	ish
    2354:	e7e2      	b.n	231c <ev_dma_epin6_handler+0x1c>
    2356:	bf00      	nop
    2358:	40027c1c 	.word	0x40027c1c
    235c:	200027c9 	.word	0x200027c9
    2360:	200003fc 	.word	0x200003fc
    2364:	20000388 	.word	0x20000388

00002368 <ev_dma_epin5_handler>:
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    2368:	2300      	movs	r3, #0
    236a:	4a15      	ldr	r2, [pc, #84]	; (23c0 <ev_dma_epin5_handler+0x58>)
    236c:	6013      	str	r3, [r2, #0]
    m_dma_pending = false;
    236e:	4a15      	ldr	r2, [pc, #84]	; (23c4 <ev_dma_epin5_handler+0x5c>)
    2370:	7013      	strb	r3, [r2, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    2372:	4b15      	ldr	r3, [pc, #84]	; (23c8 <ev_dma_epin5_handler+0x60>)
    2374:	f893 30ee 	ldrb.w	r3, [r3, #238]	; 0xee
    2378:	2b03      	cmp	r3, #3
    237a:	d004      	beq.n	2386 <ev_dma_epin5_handler+0x1e>
    else if (p_state->handler.feeder == NULL)
    237c:	4b12      	ldr	r3, [pc, #72]	; (23c8 <ev_dma_epin5_handler+0x60>)
    237e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    2382:	b173      	cbz	r3, 23a2 <ev_dma_epin5_handler+0x3a>
static void ev_dma_epin5_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN5 ); }
    2384:	4770      	bx	lr
    2386:	4b11      	ldr	r3, [pc, #68]	; (23cc <ev_dma_epin5_handler+0x64>)
    2388:	f3bf 8f5b 	dmb	ish
    238c:	e853 2f00 	ldrex	r2, [r3]
    2390:	f022 0220 	bic.w	r2, r2, #32
    2394:	e843 2100 	strex	r1, r2, [r3]
    2398:	2900      	cmp	r1, #0
    239a:	d1f7      	bne.n	238c <ev_dma_epin5_handler+0x24>
    239c:	f3bf 8f5b 	dmb	ish
    23a0:	4770      	bx	lr
    23a2:	4b0a      	ldr	r3, [pc, #40]	; (23cc <ev_dma_epin5_handler+0x64>)
    23a4:	f3bf 8f5b 	dmb	ish
    23a8:	e853 2f00 	ldrex	r2, [r3]
    23ac:	f022 0220 	bic.w	r2, r2, #32
    23b0:	e843 2100 	strex	r1, r2, [r3]
    23b4:	2900      	cmp	r1, #0
    23b6:	d1f7      	bne.n	23a8 <ev_dma_epin5_handler+0x40>
    23b8:	f3bf 8f5b 	dmb	ish
    23bc:	e7e2      	b.n	2384 <ev_dma_epin5_handler+0x1c>
    23be:	bf00      	nop
    23c0:	40027c1c 	.word	0x40027c1c
    23c4:	200027c9 	.word	0x200027c9
    23c8:	200003fc 	.word	0x200003fc
    23cc:	20000388 	.word	0x20000388

000023d0 <ev_dma_epin4_handler>:
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    23d0:	2300      	movs	r3, #0
    23d2:	4a15      	ldr	r2, [pc, #84]	; (2428 <ev_dma_epin4_handler+0x58>)
    23d4:	6013      	str	r3, [r2, #0]
    m_dma_pending = false;
    23d6:	4a15      	ldr	r2, [pc, #84]	; (242c <ev_dma_epin4_handler+0x5c>)
    23d8:	7013      	strb	r3, [r2, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    23da:	4b15      	ldr	r3, [pc, #84]	; (2430 <ev_dma_epin4_handler+0x60>)
    23dc:	f893 30de 	ldrb.w	r3, [r3, #222]	; 0xde
    23e0:	2b03      	cmp	r3, #3
    23e2:	d004      	beq.n	23ee <ev_dma_epin4_handler+0x1e>
    else if (p_state->handler.feeder == NULL)
    23e4:	4b12      	ldr	r3, [pc, #72]	; (2430 <ev_dma_epin4_handler+0x60>)
    23e6:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
    23ea:	b173      	cbz	r3, 240a <ev_dma_epin4_handler+0x3a>
static void ev_dma_epin4_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN4 ); }
    23ec:	4770      	bx	lr
    23ee:	4b11      	ldr	r3, [pc, #68]	; (2434 <ev_dma_epin4_handler+0x64>)
    23f0:	f3bf 8f5b 	dmb	ish
    23f4:	e853 2f00 	ldrex	r2, [r3]
    23f8:	f022 0210 	bic.w	r2, r2, #16
    23fc:	e843 2100 	strex	r1, r2, [r3]
    2400:	2900      	cmp	r1, #0
    2402:	d1f7      	bne.n	23f4 <ev_dma_epin4_handler+0x24>
    2404:	f3bf 8f5b 	dmb	ish
    2408:	4770      	bx	lr
    240a:	4b0a      	ldr	r3, [pc, #40]	; (2434 <ev_dma_epin4_handler+0x64>)
    240c:	f3bf 8f5b 	dmb	ish
    2410:	e853 2f00 	ldrex	r2, [r3]
    2414:	f022 0210 	bic.w	r2, r2, #16
    2418:	e843 2100 	strex	r1, r2, [r3]
    241c:	2900      	cmp	r1, #0
    241e:	d1f7      	bne.n	2410 <ev_dma_epin4_handler+0x40>
    2420:	f3bf 8f5b 	dmb	ish
    2424:	e7e2      	b.n	23ec <ev_dma_epin4_handler+0x1c>
    2426:	bf00      	nop
    2428:	40027c1c 	.word	0x40027c1c
    242c:	200027c9 	.word	0x200027c9
    2430:	200003fc 	.word	0x200003fc
    2434:	20000388 	.word	0x20000388

00002438 <ev_dma_epin2_handler>:
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    2438:	2300      	movs	r3, #0
    243a:	4a15      	ldr	r2, [pc, #84]	; (2490 <ev_dma_epin2_handler+0x58>)
    243c:	6013      	str	r3, [r2, #0]
    m_dma_pending = false;
    243e:	4a15      	ldr	r2, [pc, #84]	; (2494 <ev_dma_epin2_handler+0x5c>)
    2440:	7013      	strb	r3, [r2, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    2442:	4b15      	ldr	r3, [pc, #84]	; (2498 <ev_dma_epin2_handler+0x60>)
    2444:	f893 30be 	ldrb.w	r3, [r3, #190]	; 0xbe
    2448:	2b03      	cmp	r3, #3
    244a:	d004      	beq.n	2456 <ev_dma_epin2_handler+0x1e>
    else if (p_state->handler.feeder == NULL)
    244c:	4b12      	ldr	r3, [pc, #72]	; (2498 <ev_dma_epin2_handler+0x60>)
    244e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
    2452:	b173      	cbz	r3, 2472 <ev_dma_epin2_handler+0x3a>
static void ev_dma_epin2_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN2 ); }
    2454:	4770      	bx	lr
    2456:	4b11      	ldr	r3, [pc, #68]	; (249c <ev_dma_epin2_handler+0x64>)
    2458:	f3bf 8f5b 	dmb	ish
    245c:	e853 2f00 	ldrex	r2, [r3]
    2460:	f022 0204 	bic.w	r2, r2, #4
    2464:	e843 2100 	strex	r1, r2, [r3]
    2468:	2900      	cmp	r1, #0
    246a:	d1f7      	bne.n	245c <ev_dma_epin2_handler+0x24>
    246c:	f3bf 8f5b 	dmb	ish
    2470:	4770      	bx	lr
    2472:	4b0a      	ldr	r3, [pc, #40]	; (249c <ev_dma_epin2_handler+0x64>)
    2474:	f3bf 8f5b 	dmb	ish
    2478:	e853 2f00 	ldrex	r2, [r3]
    247c:	f022 0204 	bic.w	r2, r2, #4
    2480:	e843 2100 	strex	r1, r2, [r3]
    2484:	2900      	cmp	r1, #0
    2486:	d1f7      	bne.n	2478 <ev_dma_epin2_handler+0x40>
    2488:	f3bf 8f5b 	dmb	ish
    248c:	e7e2      	b.n	2454 <ev_dma_epin2_handler+0x1c>
    248e:	bf00      	nop
    2490:	40027c1c 	.word	0x40027c1c
    2494:	200027c9 	.word	0x200027c9
    2498:	200003fc 	.word	0x200003fc
    249c:	20000388 	.word	0x20000388

000024a0 <ev_dma_epin1_handler>:
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    24a0:	2300      	movs	r3, #0
    24a2:	4a15      	ldr	r2, [pc, #84]	; (24f8 <ev_dma_epin1_handler+0x58>)
    24a4:	6013      	str	r3, [r2, #0]
    m_dma_pending = false;
    24a6:	4a15      	ldr	r2, [pc, #84]	; (24fc <ev_dma_epin1_handler+0x5c>)
    24a8:	7013      	strb	r3, [r2, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    24aa:	4b15      	ldr	r3, [pc, #84]	; (2500 <ev_dma_epin1_handler+0x60>)
    24ac:	f893 30ae 	ldrb.w	r3, [r3, #174]	; 0xae
    24b0:	2b03      	cmp	r3, #3
    24b2:	d004      	beq.n	24be <ev_dma_epin1_handler+0x1e>
    else if (p_state->handler.feeder == NULL)
    24b4:	4b12      	ldr	r3, [pc, #72]	; (2500 <ev_dma_epin1_handler+0x60>)
    24b6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
    24ba:	b173      	cbz	r3, 24da <ev_dma_epin1_handler+0x3a>
static void ev_dma_epin1_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN1 ); }
    24bc:	4770      	bx	lr
    24be:	4b11      	ldr	r3, [pc, #68]	; (2504 <ev_dma_epin1_handler+0x64>)
    24c0:	f3bf 8f5b 	dmb	ish
    24c4:	e853 2f00 	ldrex	r2, [r3]
    24c8:	f022 0202 	bic.w	r2, r2, #2
    24cc:	e843 2100 	strex	r1, r2, [r3]
    24d0:	2900      	cmp	r1, #0
    24d2:	d1f7      	bne.n	24c4 <ev_dma_epin1_handler+0x24>
    24d4:	f3bf 8f5b 	dmb	ish
    24d8:	4770      	bx	lr
    24da:	4b0a      	ldr	r3, [pc, #40]	; (2504 <ev_dma_epin1_handler+0x64>)
    24dc:	f3bf 8f5b 	dmb	ish
    24e0:	e853 2f00 	ldrex	r2, [r3]
    24e4:	f022 0202 	bic.w	r2, r2, #2
    24e8:	e843 2100 	strex	r1, r2, [r3]
    24ec:	2900      	cmp	r1, #0
    24ee:	d1f7      	bne.n	24e0 <ev_dma_epin1_handler+0x40>
    24f0:	f3bf 8f5b 	dmb	ish
    24f4:	e7e2      	b.n	24bc <ev_dma_epin1_handler+0x1c>
    24f6:	bf00      	nop
    24f8:	40027c1c 	.word	0x40027c1c
    24fc:	200027c9 	.word	0x200027c9
    2500:	200003fc 	.word	0x200003fc
    2504:	20000388 	.word	0x20000388

00002508 <ev_dma_epin3_handler>:
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    2508:	2300      	movs	r3, #0
    250a:	4a15      	ldr	r2, [pc, #84]	; (2560 <ev_dma_epin3_handler+0x58>)
    250c:	6013      	str	r3, [r2, #0]
    m_dma_pending = false;
    250e:	4a15      	ldr	r2, [pc, #84]	; (2564 <ev_dma_epin3_handler+0x5c>)
    2510:	7013      	strb	r3, [r2, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    2512:	4b15      	ldr	r3, [pc, #84]	; (2568 <ev_dma_epin3_handler+0x60>)
    2514:	f893 30ce 	ldrb.w	r3, [r3, #206]	; 0xce
    2518:	2b03      	cmp	r3, #3
    251a:	d004      	beq.n	2526 <ev_dma_epin3_handler+0x1e>
    else if (p_state->handler.feeder == NULL)
    251c:	4b12      	ldr	r3, [pc, #72]	; (2568 <ev_dma_epin3_handler+0x60>)
    251e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
    2522:	b173      	cbz	r3, 2542 <ev_dma_epin3_handler+0x3a>
static void ev_dma_epin3_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN3 ); }
    2524:	4770      	bx	lr
    2526:	4b11      	ldr	r3, [pc, #68]	; (256c <ev_dma_epin3_handler+0x64>)
    2528:	f3bf 8f5b 	dmb	ish
    252c:	e853 2f00 	ldrex	r2, [r3]
    2530:	f022 0208 	bic.w	r2, r2, #8
    2534:	e843 2100 	strex	r1, r2, [r3]
    2538:	2900      	cmp	r1, #0
    253a:	d1f7      	bne.n	252c <ev_dma_epin3_handler+0x24>
    253c:	f3bf 8f5b 	dmb	ish
    2540:	4770      	bx	lr
    2542:	4b0a      	ldr	r3, [pc, #40]	; (256c <ev_dma_epin3_handler+0x64>)
    2544:	f3bf 8f5b 	dmb	ish
    2548:	e853 2f00 	ldrex	r2, [r3]
    254c:	f022 0208 	bic.w	r2, r2, #8
    2550:	e843 2100 	strex	r1, r2, [r3]
    2554:	2900      	cmp	r1, #0
    2556:	d1f7      	bne.n	2548 <ev_dma_epin3_handler+0x40>
    2558:	f3bf 8f5b 	dmb	ish
    255c:	e7e2      	b.n	2524 <ev_dma_epin3_handler+0x1c>
    255e:	bf00      	nop
    2560:	40027c1c 	.word	0x40027c1c
    2564:	200027c9 	.word	0x200027c9
    2568:	200003fc 	.word	0x200003fc
    256c:	20000388 	.word	0x20000388

00002570 <ev_dma_epin7_handler>:
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    2570:	2300      	movs	r3, #0
    2572:	4a15      	ldr	r2, [pc, #84]	; (25c8 <ev_dma_epin7_handler+0x58>)
    2574:	6013      	str	r3, [r2, #0]
    m_dma_pending = false;
    2576:	4a15      	ldr	r2, [pc, #84]	; (25cc <ev_dma_epin7_handler+0x5c>)
    2578:	7013      	strb	r3, [r2, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    257a:	4b15      	ldr	r3, [pc, #84]	; (25d0 <ev_dma_epin7_handler+0x60>)
    257c:	f893 310e 	ldrb.w	r3, [r3, #270]	; 0x10e
    2580:	2b03      	cmp	r3, #3
    2582:	d004      	beq.n	258e <ev_dma_epin7_handler+0x1e>
    else if (p_state->handler.feeder == NULL)
    2584:	4b12      	ldr	r3, [pc, #72]	; (25d0 <ev_dma_epin7_handler+0x60>)
    2586:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    258a:	b173      	cbz	r3, 25aa <ev_dma_epin7_handler+0x3a>
static void ev_dma_epin7_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN7 ); }
    258c:	4770      	bx	lr
    258e:	4b11      	ldr	r3, [pc, #68]	; (25d4 <ev_dma_epin7_handler+0x64>)
    2590:	f3bf 8f5b 	dmb	ish
    2594:	e853 2f00 	ldrex	r2, [r3]
    2598:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    259c:	e843 2100 	strex	r1, r2, [r3]
    25a0:	2900      	cmp	r1, #0
    25a2:	d1f7      	bne.n	2594 <ev_dma_epin7_handler+0x24>
    25a4:	f3bf 8f5b 	dmb	ish
    25a8:	4770      	bx	lr
    25aa:	4b0a      	ldr	r3, [pc, #40]	; (25d4 <ev_dma_epin7_handler+0x64>)
    25ac:	f3bf 8f5b 	dmb	ish
    25b0:	e853 2f00 	ldrex	r2, [r3]
    25b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    25b8:	e843 2100 	strex	r1, r2, [r3]
    25bc:	2900      	cmp	r1, #0
    25be:	d1f7      	bne.n	25b0 <ev_dma_epin7_handler+0x40>
    25c0:	f3bf 8f5b 	dmb	ish
    25c4:	e7e2      	b.n	258c <ev_dma_epin7_handler+0x1c>
    25c6:	bf00      	nop
    25c8:	40027c1c 	.word	0x40027c1c
    25cc:	200027c9 	.word	0x200027c9
    25d0:	200003fc 	.word	0x200003fc
    25d4:	20000388 	.word	0x20000388

000025d8 <usbd_ep_data_handler>:
{
    25d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    25da:	b083      	sub	sp, #12
    25dc:	4605      	mov	r5, r0
    m_ep_ready |= (1U << bitpos);
    25de:	2401      	movs	r4, #1
    25e0:	408c      	lsls	r4, r1
    25e2:	4a98      	ldr	r2, [pc, #608]	; (2844 <usbd_ep_data_handler+0x26c>)
    25e4:	6813      	ldr	r3, [r2, #0]
    25e6:	4323      	orrs	r3, r4
    25e8:	6013      	str	r3, [r2, #0]
    if (NRF_USBD_EPIN_CHECK(ep))
    25ea:	f010 0f80 	tst.w	r0, #128	; 0x80
    25ee:	d111      	bne.n	2614 <usbd_ep_data_handler+0x3c>
        if (0 == (m_ep_dma_waiting & (1U << bitpos)))
    25f0:	4b95      	ldr	r3, [pc, #596]	; (2848 <usbd_ep_data_handler+0x270>)
    25f2:	681b      	ldr	r3, [r3, #0]
    25f4:	421c      	tst	r4, r3
    25f6:	d10b      	bne.n	2610 <usbd_ep_data_handler+0x38>
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_WAITING);
    25f8:	2306      	movs	r3, #6
    25fa:	f88d 3004 	strb.w	r3, [sp, #4]
    25fe:	f88d 0006 	strb.w	r0, [sp, #6]
    2602:	2301      	movs	r3, #1
    2604:	f88d 3007 	strb.w	r3, [sp, #7]
            m_event_handler(&evt);
    2608:	4b90      	ldr	r3, [pc, #576]	; (284c <usbd_ep_data_handler+0x274>)
    260a:	681b      	ldr	r3, [r3, #0]
    260c:	a801      	add	r0, sp, #4
    260e:	4798      	blx	r3
}
    2610:	b003      	add	sp, #12
    2612:	bdf0      	pop	{r4, r5, r6, r7, pc}
    NRFX_USBD_ASSERT_EP_VALID(ep);
    2614:	f000 060f 	and.w	r6, r0, #15
    2618:	2e08      	cmp	r6, #8
    261a:	d845      	bhi.n	26a8 <usbd_ep_data_handler+0xd0>
    return (NRF_USBD_EPIN_CHECK(ep) ? epin_endev : epout_endev)[NRF_USBD_EP_NR_GET(ep)];
    261c:	f015 0f80 	tst.w	r5, #128	; 0x80
    2620:	d150      	bne.n	26c4 <usbd_ep_data_handler+0xec>
    2622:	4b8b      	ldr	r3, [pc, #556]	; (2850 <usbd_ep_data_handler+0x278>)
    2624:	f833 3016 	ldrh.w	r3, [r3, r6, lsl #1]
    return (volatile const uint32_t*)(((uint8_t *)NRF_USBD) + (uint32_t)offset);
    2628:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    262c:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    return (bool)*nrf_usbd_getRegPtr_c((uint32_t)event);
    2630:	681a      	ldr	r2, [r3, #0]
    if (ret)
    2632:	b12a      	cbz	r2, 2640 <usbd_ep_data_handler+0x68>
    *(nrf_usbd_getRegPtr((uint32_t)event)) = 0UL;
    2634:	2100      	movs	r1, #0
    2636:	6019      	str	r1, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
    2638:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb 0xF":::"memory");
    263c:	f3bf 8f4f 	dsb	sy
        if (nrf_usbd_event_get_and_clear(nrfx_usbd_ep_to_endevent(ep)))
    2640:	b30a      	cbz	r2, 2686 <usbd_ep_data_handler+0xae>
            if (ep != NRFX_USBD_EPIN0)
    2642:	2d80      	cmp	r5, #128	; 0x80
    2644:	f000 80d2 	beq.w	27ec <usbd_ep_data_handler+0x214>
    NRFX_ASSERT(NRF_USBD_EPIN_CHECK(ep));
    2648:	f015 0f80 	tst.w	r5, #128	; 0x80
    264c:	d03c      	beq.n	26c8 <usbd_ep_data_handler+0xf0>
    NRFX_ASSERT(!NRF_USBD_EPISO_CHECK(ep));
    264e:	f015 0f08 	tst.w	r5, #8
    2652:	d147      	bne.n	26e4 <usbd_ep_data_handler+0x10c>
    NRFX_ASSERT(NRF_USBD_EP_NR_GET(ep) > 0);
    2654:	f015 0f0f 	tst.w	r5, #15
    2658:	d052      	beq.n	2700 <usbd_ep_data_handler+0x128>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    265a:	2300      	movs	r3, #0
    265c:	4a7d      	ldr	r2, [pc, #500]	; (2854 <usbd_ep_data_handler+0x27c>)
    265e:	6013      	str	r3, [r2, #0]
    m_dma_pending = false;
    2660:	4a7d      	ldr	r2, [pc, #500]	; (2858 <usbd_ep_data_handler+0x280>)
    2662:	7013      	strb	r3, [r2, #0]
    NRFX_USBD_ASSERT_EP_VALID(ep);
    2664:	f005 060f 	and.w	r6, r5, #15
    2668:	2e08      	cmp	r6, #8
    266a:	d857      	bhi.n	271c <usbd_ep_data_handler+0x144>
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    266c:	f015 0f80 	tst.w	r5, #128	; 0x80
    2670:	d162      	bne.n	2738 <usbd_ep_data_handler+0x160>
    2672:	4b7a      	ldr	r3, [pc, #488]	; (285c <usbd_ep_data_handler+0x284>)
    2674:	0136      	lsls	r6, r6, #4
    2676:	199a      	adds	r2, r3, r6
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    2678:	7b92      	ldrb	r2, [r2, #14]
    267a:	2a03      	cmp	r2, #3
    267c:	d05e      	beq.n	273c <usbd_ep_data_handler+0x164>
    else if (p_state->handler.feeder == NULL)
    267e:	599b      	ldr	r3, [r3, r6]
    2680:	2b00      	cmp	r3, #0
    2682:	f000 8087 	beq.w	2794 <usbd_ep_data_handler+0x1bc>
        if (0 == (m_ep_dma_waiting & (1U << bitpos)))
    2686:	4b70      	ldr	r3, [pc, #448]	; (2848 <usbd_ep_data_handler+0x270>)
    2688:	681b      	ldr	r3, [r3, #0]
    268a:	421c      	tst	r4, r3
    268c:	d1c0      	bne.n	2610 <usbd_ep_data_handler+0x38>
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    268e:	2306      	movs	r3, #6
    2690:	f88d 3004 	strb.w	r3, [sp, #4]
    2694:	f88d 5006 	strb.w	r5, [sp, #6]
    2698:	2300      	movs	r3, #0
    269a:	f88d 3007 	strb.w	r3, [sp, #7]
            m_event_handler(&evt);
    269e:	4b6b      	ldr	r3, [pc, #428]	; (284c <usbd_ep_data_handler+0x274>)
    26a0:	681b      	ldr	r3, [r3, #0]
    26a2:	a801      	add	r0, sp, #4
    26a4:	4798      	blx	r3
    26a6:	e7b3      	b.n	2610 <usbd_ep_data_handler+0x38>
    NRFX_USBD_ASSERT_EP_VALID(ep);
    26a8:	4f6d      	ldr	r7, [pc, #436]	; (2860 <usbd_ep_data_handler+0x288>)
    26aa:	f44f 73b9 	mov.w	r3, #370	; 0x172
    26ae:	463a      	mov	r2, r7
    26b0:	496c      	ldr	r1, [pc, #432]	; (2864 <usbd_ep_data_handler+0x28c>)
    26b2:	486d      	ldr	r0, [pc, #436]	; (2868 <usbd_ep_data_handler+0x290>)
    26b4:	f00d f8e3 	bl	f87e <printk>
    26b8:	f44f 71b9 	mov.w	r1, #370	; 0x172
    26bc:	4638      	mov	r0, r7
    26be:	f00d f964 	bl	f98a <assert_post_action>
    26c2:	e7ab      	b.n	261c <usbd_ep_data_handler+0x44>
    return (NRF_USBD_EPIN_CHECK(ep) ? epin_endev : epout_endev)[NRF_USBD_EP_NR_GET(ep)];
    26c4:	4b69      	ldr	r3, [pc, #420]	; (286c <usbd_ep_data_handler+0x294>)
    26c6:	e7ad      	b.n	2624 <usbd_ep_data_handler+0x4c>
    NRFX_ASSERT(NRF_USBD_EPIN_CHECK(ep));
    26c8:	4e65      	ldr	r6, [pc, #404]	; (2860 <usbd_ep_data_handler+0x288>)
    26ca:	f240 33b6 	movw	r3, #950	; 0x3b6
    26ce:	4632      	mov	r2, r6
    26d0:	4967      	ldr	r1, [pc, #412]	; (2870 <usbd_ep_data_handler+0x298>)
    26d2:	4865      	ldr	r0, [pc, #404]	; (2868 <usbd_ep_data_handler+0x290>)
    26d4:	f00d f8d3 	bl	f87e <printk>
    26d8:	f240 31b6 	movw	r1, #950	; 0x3b6
    26dc:	4630      	mov	r0, r6
    26de:	f00d f954 	bl	f98a <assert_post_action>
    26e2:	e7b4      	b.n	264e <usbd_ep_data_handler+0x76>
    NRFX_ASSERT(!NRF_USBD_EPISO_CHECK(ep));
    26e4:	4e5e      	ldr	r6, [pc, #376]	; (2860 <usbd_ep_data_handler+0x288>)
    26e6:	f240 33b7 	movw	r3, #951	; 0x3b7
    26ea:	4632      	mov	r2, r6
    26ec:	4961      	ldr	r1, [pc, #388]	; (2874 <usbd_ep_data_handler+0x29c>)
    26ee:	485e      	ldr	r0, [pc, #376]	; (2868 <usbd_ep_data_handler+0x290>)
    26f0:	f00d f8c5 	bl	f87e <printk>
    26f4:	f240 31b7 	movw	r1, #951	; 0x3b7
    26f8:	4630      	mov	r0, r6
    26fa:	f00d f946 	bl	f98a <assert_post_action>
    26fe:	e7a9      	b.n	2654 <usbd_ep_data_handler+0x7c>
    NRFX_ASSERT(NRF_USBD_EP_NR_GET(ep) > 0);
    2700:	4e57      	ldr	r6, [pc, #348]	; (2860 <usbd_ep_data_handler+0x288>)
    2702:	f44f 736e 	mov.w	r3, #952	; 0x3b8
    2706:	4632      	mov	r2, r6
    2708:	495b      	ldr	r1, [pc, #364]	; (2878 <usbd_ep_data_handler+0x2a0>)
    270a:	4857      	ldr	r0, [pc, #348]	; (2868 <usbd_ep_data_handler+0x290>)
    270c:	f00d f8b7 	bl	f87e <printk>
    2710:	f44f 716e 	mov.w	r1, #952	; 0x3b8
    2714:	4630      	mov	r0, r6
    2716:	f00d f938 	bl	f98a <assert_post_action>
    271a:	e79e      	b.n	265a <usbd_ep_data_handler+0x82>
    NRFX_USBD_ASSERT_EP_VALID(ep);
    271c:	4f50      	ldr	r7, [pc, #320]	; (2860 <usbd_ep_data_handler+0x288>)
    271e:	f240 23a2 	movw	r3, #674	; 0x2a2
    2722:	463a      	mov	r2, r7
    2724:	494f      	ldr	r1, [pc, #316]	; (2864 <usbd_ep_data_handler+0x28c>)
    2726:	4850      	ldr	r0, [pc, #320]	; (2868 <usbd_ep_data_handler+0x290>)
    2728:	f00d f8a9 	bl	f87e <printk>
    272c:	f240 21a2 	movw	r1, #674	; 0x2a2
    2730:	4638      	mov	r0, r7
    2732:	f00d f92a 	bl	f98a <assert_post_action>
    2736:	e799      	b.n	266c <usbd_ep_data_handler+0x94>
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    2738:	4b50      	ldr	r3, [pc, #320]	; (287c <usbd_ep_data_handler+0x2a4>)
    273a:	e79b      	b.n	2674 <usbd_ep_data_handler+0x9c>
    NRFX_USBD_ASSERT_EP_VALID(ep);
    273c:	f005 030f 	and.w	r3, r5, #15
    2740:	2b08      	cmp	r3, #8
    2742:	d817      	bhi.n	2774 <usbd_ep_data_handler+0x19c>
    return NRFX_USBD_EP_BITPOS(ep);
    2744:	b26b      	sxtb	r3, r5
    2746:	2b00      	cmp	r3, #0
    2748:	db22      	blt.n	2790 <usbd_ep_data_handler+0x1b8>
    274a:	2210      	movs	r2, #16
    274c:	f003 030f 	and.w	r3, r3, #15
    2750:	4413      	add	r3, r2
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    2752:	2201      	movs	r2, #1
    2754:	fa02 f303 	lsl.w	r3, r2, r3
    2758:	43db      	mvns	r3, r3
    275a:	4a3b      	ldr	r2, [pc, #236]	; (2848 <usbd_ep_data_handler+0x270>)
    275c:	f3bf 8f5b 	dmb	ish
    2760:	e852 1f00 	ldrex	r1, [r2]
    2764:	4019      	ands	r1, r3
    2766:	e842 1000 	strex	r0, r1, [r2]
    276a:	2800      	cmp	r0, #0
    276c:	d1f8      	bne.n	2760 <usbd_ep_data_handler+0x188>
    276e:	f3bf 8f5b 	dmb	ish
    2772:	e788      	b.n	2686 <usbd_ep_data_handler+0xae>
    NRFX_USBD_ASSERT_EP_VALID(ep);
    2774:	4e3a      	ldr	r6, [pc, #232]	; (2860 <usbd_ep_data_handler+0x288>)
    2776:	f240 23b5 	movw	r3, #693	; 0x2b5
    277a:	4632      	mov	r2, r6
    277c:	4939      	ldr	r1, [pc, #228]	; (2864 <usbd_ep_data_handler+0x28c>)
    277e:	483a      	ldr	r0, [pc, #232]	; (2868 <usbd_ep_data_handler+0x290>)
    2780:	f00d f87d 	bl	f87e <printk>
    2784:	f240 21b5 	movw	r1, #693	; 0x2b5
    2788:	4630      	mov	r0, r6
    278a:	f00d f8fe 	bl	f98a <assert_post_action>
    278e:	e7d9      	b.n	2744 <usbd_ep_data_handler+0x16c>
    return NRFX_USBD_EP_BITPOS(ep);
    2790:	2200      	movs	r2, #0
    2792:	e7db      	b.n	274c <usbd_ep_data_handler+0x174>
    NRFX_USBD_ASSERT_EP_VALID(ep);
    2794:	f005 030f 	and.w	r3, r5, #15
    2798:	2b08      	cmp	r3, #8
    279a:	d817      	bhi.n	27cc <usbd_ep_data_handler+0x1f4>
    return NRFX_USBD_EP_BITPOS(ep);
    279c:	b26b      	sxtb	r3, r5
    279e:	2b00      	cmp	r3, #0
    27a0:	db22      	blt.n	27e8 <usbd_ep_data_handler+0x210>
    27a2:	2210      	movs	r2, #16
    27a4:	f003 030f 	and.w	r3, r3, #15
    27a8:	4413      	add	r3, r2
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    27aa:	2201      	movs	r2, #1
    27ac:	fa02 f303 	lsl.w	r3, r2, r3
    27b0:	43db      	mvns	r3, r3
    27b2:	4a25      	ldr	r2, [pc, #148]	; (2848 <usbd_ep_data_handler+0x270>)
    27b4:	f3bf 8f5b 	dmb	ish
    27b8:	e852 1f00 	ldrex	r1, [r2]
    27bc:	4019      	ands	r1, r3
    27be:	e842 1000 	strex	r0, r1, [r2]
    27c2:	2800      	cmp	r0, #0
    27c4:	d1f8      	bne.n	27b8 <usbd_ep_data_handler+0x1e0>
    27c6:	f3bf 8f5b 	dmb	ish
    27ca:	e75c      	b.n	2686 <usbd_ep_data_handler+0xae>
    NRFX_USBD_ASSERT_EP_VALID(ep);
    27cc:	4e24      	ldr	r6, [pc, #144]	; (2860 <usbd_ep_data_handler+0x288>)
    27ce:	f240 23b5 	movw	r3, #693	; 0x2b5
    27d2:	4632      	mov	r2, r6
    27d4:	4923      	ldr	r1, [pc, #140]	; (2864 <usbd_ep_data_handler+0x28c>)
    27d6:	4824      	ldr	r0, [pc, #144]	; (2868 <usbd_ep_data_handler+0x290>)
    27d8:	f00d f851 	bl	f87e <printk>
    27dc:	f240 21b5 	movw	r1, #693	; 0x2b5
    27e0:	4630      	mov	r0, r6
    27e2:	f00d f8d2 	bl	f98a <assert_post_action>
    27e6:	e7d9      	b.n	279c <usbd_ep_data_handler+0x1c4>
    return NRFX_USBD_EP_BITPOS(ep);
    27e8:	2200      	movs	r2, #0
    27ea:	e7db      	b.n	27a4 <usbd_ep_data_handler+0x1cc>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    27ec:	2300      	movs	r3, #0
    27ee:	4a19      	ldr	r2, [pc, #100]	; (2854 <usbd_ep_data_handler+0x27c>)
    27f0:	6013      	str	r3, [r2, #0]
    m_dma_pending = false;
    27f2:	4a19      	ldr	r2, [pc, #100]	; (2858 <usbd_ep_data_handler+0x280>)
    27f4:	7013      	strb	r3, [r2, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    27f6:	4b19      	ldr	r3, [pc, #100]	; (285c <usbd_ep_data_handler+0x284>)
    27f8:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
    27fc:	2b03      	cmp	r3, #3
    27fe:	d013      	beq.n	2828 <usbd_ep_data_handler+0x250>
    else if (p_state->handler.feeder == NULL)
    2800:	4b16      	ldr	r3, [pc, #88]	; (285c <usbd_ep_data_handler+0x284>)
    2802:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    2806:	2b00      	cmp	r3, #0
    2808:	f47f af3d 	bne.w	2686 <usbd_ep_data_handler+0xae>
    280c:	4b0e      	ldr	r3, [pc, #56]	; (2848 <usbd_ep_data_handler+0x270>)
    280e:	f3bf 8f5b 	dmb	ish
    2812:	e853 2f00 	ldrex	r2, [r3]
    2816:	f022 0201 	bic.w	r2, r2, #1
    281a:	e843 2100 	strex	r1, r2, [r3]
    281e:	2900      	cmp	r1, #0
    2820:	d1f7      	bne.n	2812 <usbd_ep_data_handler+0x23a>
    2822:	f3bf 8f5b 	dmb	ish
    2826:	e72e      	b.n	2686 <usbd_ep_data_handler+0xae>
    2828:	4b07      	ldr	r3, [pc, #28]	; (2848 <usbd_ep_data_handler+0x270>)
    282a:	f3bf 8f5b 	dmb	ish
    282e:	e853 2f00 	ldrex	r2, [r3]
    2832:	f022 0201 	bic.w	r2, r2, #1
    2836:	e843 2100 	strex	r1, r2, [r3]
    283a:	2900      	cmp	r1, #0
    283c:	d1f7      	bne.n	282e <usbd_ep_data_handler+0x256>
    283e:	f3bf 8f5b 	dmb	ish
    2842:	e720      	b.n	2686 <usbd_ep_data_handler+0xae>
    2844:	200003f8 	.word	0x200003f8
    2848:	20000388 	.word	0x20000388
    284c:	2000051c 	.word	0x2000051c
    2850:	000115a0 	.word	0x000115a0
    2854:	40027c1c 	.word	0x40027c1c
    2858:	200027c9 	.word	0x200027c9
    285c:	200003fc 	.word	0x200003fc
    2860:	00011634 	.word	0x00011634
    2864:	00011c28 	.word	0x00011c28
    2868:	00010f8c 	.word	0x00010f8c
    286c:	00011580 	.word	0x00011580
    2870:	00011cec 	.word	0x00011cec
    2874:	00011d1c 	.word	0x00011d1c
    2878:	00011d48 	.word	0x00011d48
    287c:	2000048c 	.word	0x2000048c

00002880 <ev_setup_data_handler>:
{
    2880:	b538      	push	{r3, r4, r5, lr}
    usbd_ep_data_handler(m_last_setup_dir, ep2bit(m_last_setup_dir));
    2882:	4b10      	ldr	r3, [pc, #64]	; (28c4 <ev_setup_data_handler+0x44>)
    2884:	781c      	ldrb	r4, [r3, #0]
    NRFX_USBD_ASSERT_EP_VALID(ep);
    2886:	f004 030f 	and.w	r3, r4, #15
    288a:	2b08      	cmp	r3, #8
    288c:	d80a      	bhi.n	28a4 <ev_setup_data_handler+0x24>
    return NRFX_USBD_EP_BITPOS(ep);
    288e:	b263      	sxtb	r3, r4
    2890:	2b00      	cmp	r3, #0
    2892:	db15      	blt.n	28c0 <ev_setup_data_handler+0x40>
    2894:	2110      	movs	r1, #16
    2896:	f003 030f 	and.w	r3, r3, #15
    usbd_ep_data_handler(m_last_setup_dir, ep2bit(m_last_setup_dir));
    289a:	4419      	add	r1, r3
    289c:	4620      	mov	r0, r4
    289e:	f7ff fe9b 	bl	25d8 <usbd_ep_data_handler>
}
    28a2:	bd38      	pop	{r3, r4, r5, pc}
    NRFX_USBD_ASSERT_EP_VALID(ep);
    28a4:	4d08      	ldr	r5, [pc, #32]	; (28c8 <ev_setup_data_handler+0x48>)
    28a6:	f240 23b5 	movw	r3, #693	; 0x2b5
    28aa:	462a      	mov	r2, r5
    28ac:	4907      	ldr	r1, [pc, #28]	; (28cc <ev_setup_data_handler+0x4c>)
    28ae:	4808      	ldr	r0, [pc, #32]	; (28d0 <ev_setup_data_handler+0x50>)
    28b0:	f00c ffe5 	bl	f87e <printk>
    28b4:	f240 21b5 	movw	r1, #693	; 0x2b5
    28b8:	4628      	mov	r0, r5
    28ba:	f00d f866 	bl	f98a <assert_post_action>
    28be:	e7e6      	b.n	288e <ev_setup_data_handler+0xe>
    return NRFX_USBD_EP_BITPOS(ep);
    28c0:	2100      	movs	r1, #0
    28c2:	e7e8      	b.n	2896 <ev_setup_data_handler+0x16>
    28c4:	200027cb 	.word	0x200027cb
    28c8:	00011634 	.word	0x00011634
    28cc:	00011c28 	.word	0x00011c28
    28d0:	00010f8c 	.word	0x00010f8c

000028d4 <nrfx_usbd_isoinconfig_set>:
}

void nrf_usbd_isoinconfig_set(nrf_usbd_isoinconfig_t config)
{
    NRF_USBD->ISOINCONFIG = ((uint32_t)config) << USBD_ISOINCONFIG_RESPONSE_Pos;
    28d4:	4b01      	ldr	r3, [pc, #4]	; (28dc <nrfx_usbd_isoinconfig_set+0x8>)
    28d6:	f8c3 0530 	str.w	r0, [r3, #1328]	; 0x530
}
    28da:	4770      	bx	lr
    28dc:	40027000 	.word	0x40027000

000028e0 <nrfx_usbd_uninit>:

    return NRFX_SUCCESS;
}

void nrfx_usbd_uninit(void)
{
    28e0:	b510      	push	{r4, lr}
    NRFX_ASSERT(m_drv_state == NRFX_DRV_STATE_INITIALIZED);
    28e2:	4b0c      	ldr	r3, [pc, #48]	; (2914 <nrfx_usbd_uninit+0x34>)
    28e4:	781b      	ldrb	r3, [r3, #0]
    28e6:	2b01      	cmp	r3, #1
    28e8:	d105      	bne.n	28f6 <nrfx_usbd_uninit+0x16>

    m_event_handler = NULL;
    28ea:	2300      	movs	r3, #0
    28ec:	4a0a      	ldr	r2, [pc, #40]	; (2918 <nrfx_usbd_uninit+0x38>)
    28ee:	6013      	str	r3, [r2, #0]
    m_drv_state = NRFX_DRV_STATE_UNINITIALIZED;
    28f0:	4a08      	ldr	r2, [pc, #32]	; (2914 <nrfx_usbd_uninit+0x34>)
    28f2:	7013      	strb	r3, [r2, #0]
    return;
}
    28f4:	bd10      	pop	{r4, pc}
    NRFX_ASSERT(m_drv_state == NRFX_DRV_STATE_INITIALIZED);
    28f6:	4c09      	ldr	r4, [pc, #36]	; (291c <nrfx_usbd_uninit+0x3c>)
    28f8:	f240 63b6 	movw	r3, #1718	; 0x6b6
    28fc:	4622      	mov	r2, r4
    28fe:	4908      	ldr	r1, [pc, #32]	; (2920 <nrfx_usbd_uninit+0x40>)
    2900:	4808      	ldr	r0, [pc, #32]	; (2924 <nrfx_usbd_uninit+0x44>)
    2902:	f00c ffbc 	bl	f87e <printk>
    2906:	f240 61b6 	movw	r1, #1718	; 0x6b6
    290a:	4620      	mov	r0, r4
    290c:	f00d f83d 	bl	f98a <assert_post_action>
    2910:	e7eb      	b.n	28ea <nrfx_usbd_uninit+0xa>
    2912:	bf00      	nop
    2914:	200027ca 	.word	0x200027ca
    2918:	2000051c 	.word	0x2000051c
    291c:	00011634 	.word	0x00011634
    2920:	00011ba0 	.word	0x00011ba0
    2924:	00010f8c 	.word	0x00010f8c

00002928 <nrfx_usbd_enable>:

void nrfx_usbd_enable(void)
{
    2928:	b510      	push	{r4, lr}
    NRFX_ASSERT(m_drv_state == NRFX_DRV_STATE_INITIALIZED);
    292a:	4b71      	ldr	r3, [pc, #452]	; (2af0 <nrfx_usbd_enable+0x1c8>)
    292c:	781b      	ldrb	r3, [r3, #0]
    292e:	2b01      	cmp	r3, #1
    2930:	f040 80b3 	bne.w	2a9a <nrfx_usbd_enable+0x172>
    NRF_USBD->EVENTCAUSE = flags;
    2934:	4b6f      	ldr	r3, [pc, #444]	; (2af4 <nrfx_usbd_enable+0x1cc>)
    2936:	f44f 6200 	mov.w	r2, #2048	; 0x800
    293a:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  __ASM volatile ("isb 0xF":::"memory");
    293e:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb 0xF":::"memory");
    2942:	f3bf 8f4f 	dsb	sy
#define NRFX_USBD_ERRATA_ENABLE 1
#endif

static inline bool nrfx_usbd_errata_type_52840(void)
{
    return (*(uint32_t *)0x10000130UL == 0x8UL);
    2946:	4b6c      	ldr	r3, [pc, #432]	; (2af8 <nrfx_usbd_enable+0x1d0>)
    2948:	681b      	ldr	r3, [r3, #0]
    return nrfx_usbd_errata_type_52840();
}

static inline bool nrfx_usbd_errata_type_52840_eng_b(void)
{
    return (nrfx_usbd_errata_type_52840() && (*(uint32_t *)0x10000134UL >= 0x1UL));
    294a:	2b08      	cmp	r3, #8
    294c:	f000 80b3 	beq.w	2ab6 <nrfx_usbd_enable+0x18e>
    2950:	2300      	movs	r3, #0

    /* Prepare for READY event receiving */
    nrf_usbd_eventcause_clear(NRF_USBD_EVENTCAUSE_READY_MASK);

    if (nrfx_usbd_errata_187())
    2952:	b1c3      	cbz	r3, 2986 <nrfx_usbd_enable+0x5e>
	__asm__ volatile(
    2954:	f04f 0220 	mov.w	r2, #32
    2958:	f3ef 8311 	mrs	r3, BASEPRI
    295c:	f382 8811 	msr	BASEPRI, r2
    2960:	f3bf 8f6f 	isb	sy
    {
        NRFX_CRITICAL_SECTION_ENTER();
        if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
    2964:	4a65      	ldr	r2, [pc, #404]	; (2afc <nrfx_usbd_enable+0x1d4>)
    2966:	6812      	ldr	r2, [r2, #0]
    2968:	2a00      	cmp	r2, #0
    296a:	f040 80ab 	bne.w	2ac4 <nrfx_usbd_enable+0x19c>
        {
            *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    296e:	4a63      	ldr	r2, [pc, #396]	; (2afc <nrfx_usbd_enable+0x1d4>)
    2970:	f249 3175 	movw	r1, #37749	; 0x9375
    2974:	6011      	str	r1, [r2, #0]
            *((volatile uint32_t *)(0x4006ED14)) = 0x00000003;
    2976:	4862      	ldr	r0, [pc, #392]	; (2b00 <nrfx_usbd_enable+0x1d8>)
    2978:	2403      	movs	r4, #3
    297a:	6004      	str	r4, [r0, #0]
            *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    297c:	6011      	str	r1, [r2, #0]
	__asm__ volatile(
    297e:	f383 8811 	msr	BASEPRI, r3
    2982:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
    2986:	f04f 0220 	mov.w	r2, #32
    298a:	f3ef 8311 	mrs	r3, BASEPRI
    298e:	f382 8811 	msr	BASEPRI, r2
    2992:	f3bf 8f6f 	isb	sy
    }
    
    if (nrfx_usbd_errata_171())
    {
        NRFX_CRITICAL_SECTION_ENTER();
        if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
    2996:	4a59      	ldr	r2, [pc, #356]	; (2afc <nrfx_usbd_enable+0x1d4>)
    2998:	6812      	ldr	r2, [r2, #0]
    299a:	2a00      	cmp	r2, #0
    299c:	f040 8096 	bne.w	2acc <nrfx_usbd_enable+0x1a4>
        {
            *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    29a0:	4a56      	ldr	r2, [pc, #344]	; (2afc <nrfx_usbd_enable+0x1d4>)
    29a2:	f249 3175 	movw	r1, #37749	; 0x9375
    29a6:	6011      	str	r1, [r2, #0]
            *((volatile uint32_t *)(0x4006EC14)) = 0x000000C0;
    29a8:	4856      	ldr	r0, [pc, #344]	; (2b04 <nrfx_usbd_enable+0x1dc>)
    29aa:	24c0      	movs	r4, #192	; 0xc0
    29ac:	6004      	str	r4, [r0, #0]
            *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    29ae:	6011      	str	r1, [r2, #0]
	__asm__ volatile(
    29b0:	f383 8811 	msr	BASEPRI, r3
    29b4:	f3bf 8f6f 	isb	sy
    NRF_USBD->ENABLE = USBD_ENABLE_ENABLE_Enabled << USBD_ENABLE_ENABLE_Pos;
    29b8:	4b4e      	ldr	r3, [pc, #312]	; (2af4 <nrfx_usbd_enable+0x1cc>)
    29ba:	2201      	movs	r2, #1
    29bc:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("isb 0xF":::"memory");
    29c0:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb 0xF":::"memory");
    29c4:	f3bf 8f4f 	dsb	sy
    return NRF_USBD->EVENTCAUSE;
    29c8:	4b4a      	ldr	r3, [pc, #296]	; (2af4 <nrfx_usbd_enable+0x1cc>)
    29ca:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    }

    /* Enable the peripheral */
    nrf_usbd_enable();
    /* Waiting for peripheral to enable, this should take a few us */
    while (0 == (NRF_USBD_EVENTCAUSE_READY_MASK & nrf_usbd_eventcause_get()))
    29ce:	f413 6f00 	tst.w	r3, #2048	; 0x800
    29d2:	d0f9      	beq.n	29c8 <nrfx_usbd_enable+0xa0>
    NRF_USBD->EVENTCAUSE = flags;
    29d4:	4b47      	ldr	r3, [pc, #284]	; (2af4 <nrfx_usbd_enable+0x1cc>)
    29d6:	f44f 6200 	mov.w	r2, #2048	; 0x800
    29da:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  __ASM volatile ("isb 0xF":::"memory");
    29de:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb 0xF":::"memory");
    29e2:	f3bf 8f4f 	dsb	sy
	__asm__ volatile(
    29e6:	f04f 0220 	mov.w	r2, #32
    29ea:	f3ef 8311 	mrs	r3, BASEPRI
    29ee:	f382 8811 	msr	BASEPRI, r2
    29f2:	f3bf 8f6f 	isb	sy
    nrf_usbd_eventcause_clear(NRF_USBD_EVENTCAUSE_READY_MASK);
    
    if (nrfx_usbd_errata_171())
    {
        NRFX_CRITICAL_SECTION_ENTER();
        if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
    29f6:	4a41      	ldr	r2, [pc, #260]	; (2afc <nrfx_usbd_enable+0x1d4>)
    29f8:	6812      	ldr	r2, [r2, #0]
    29fa:	2a00      	cmp	r2, #0
    29fc:	d16a      	bne.n	2ad4 <nrfx_usbd_enable+0x1ac>
        {
            *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    29fe:	4a3f      	ldr	r2, [pc, #252]	; (2afc <nrfx_usbd_enable+0x1d4>)
    2a00:	f249 3175 	movw	r1, #37749	; 0x9375
    2a04:	6011      	str	r1, [r2, #0]
            *((volatile uint32_t *)(0x4006EC14)) = 0x00000000;
    2a06:	483f      	ldr	r0, [pc, #252]	; (2b04 <nrfx_usbd_enable+0x1dc>)
    2a08:	2400      	movs	r4, #0
    2a0a:	6004      	str	r4, [r0, #0]
            *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    2a0c:	6011      	str	r1, [r2, #0]
	__asm__ volatile(
    2a0e:	f383 8811 	msr	BASEPRI, r3
    2a12:	f3bf 8f6f 	isb	sy
        NRFX_CRITICAL_SECTION_EXIT();
    }

    if (nrfx_usbd_errata_166())
    {
        *((volatile uint32_t *)(NRF_USBD_BASE + 0x800)) = 0x7E3;
    2a16:	4b3c      	ldr	r3, [pc, #240]	; (2b08 <nrfx_usbd_enable+0x1e0>)
    2a18:	f240 72e3 	movw	r2, #2019	; 0x7e3
    2a1c:	601a      	str	r2, [r3, #0]
        *((volatile uint32_t *)(NRF_USBD_BASE + 0x804)) = 0x40;
    2a1e:	3304      	adds	r3, #4
    2a20:	2240      	movs	r2, #64	; 0x40
    2a22:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
    2a24:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb 0xF":::"memory");
    2a28:	f3bf 8f4f 	dsb	sy
    NRF_USBD->ISOSPLIT = split << USBD_ISOSPLIT_SPLIT_Pos;
    2a2c:	f6a3 0304 	subw	r3, r3, #2052	; 0x804
    2a30:	2280      	movs	r2, #128	; 0x80
    2a32:	f8c3 251c 	str.w	r2, [r3, #1308]	; 0x51c
    {
        nrfx_usbd_isoinconfig_set(NRF_USBD_ISOINCONFIG_ZERODATA);
    }
    else
    {
        nrfx_usbd_isoinconfig_set(NRF_USBD_ISOINCONFIG_NORESP);
    2a36:	2000      	movs	r0, #0
    2a38:	f7ff ff4c 	bl	28d4 <nrfx_usbd_isoinconfig_set>
    }

    m_ep_ready = (((1U << NRF_USBD_EPIN_CNT) - 1U) << NRFX_USBD_EPIN_BITPOS_0);
    2a3c:	4b33      	ldr	r3, [pc, #204]	; (2b0c <nrfx_usbd_enable+0x1e4>)
    2a3e:	f240 12ff 	movw	r2, #511	; 0x1ff
    2a42:	601a      	str	r2, [r3, #0]
    m_ep_dma_waiting = 0;
    2a44:	2300      	movs	r3, #0
    2a46:	4a32      	ldr	r2, [pc, #200]	; (2b10 <nrfx_usbd_enable+0x1e8>)
    2a48:	6013      	str	r3, [r2, #0]
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    2a4a:	4a32      	ldr	r2, [pc, #200]	; (2b14 <nrfx_usbd_enable+0x1ec>)
    2a4c:	6013      	str	r3, [r2, #0]
    m_dma_pending = false;
    2a4e:	4a32      	ldr	r2, [pc, #200]	; (2b18 <nrfx_usbd_enable+0x1f0>)
    2a50:	7013      	strb	r3, [r2, #0]
    usbd_dma_pending_clear();
    m_last_setup_dir = NRFX_USBD_EPOUT0;
    2a52:	4a32      	ldr	r2, [pc, #200]	; (2b1c <nrfx_usbd_enable+0x1f4>)
    2a54:	7013      	strb	r3, [r2, #0]

    m_drv_state = NRFX_DRV_STATE_POWERED_ON;
    2a56:	4b26      	ldr	r3, [pc, #152]	; (2af0 <nrfx_usbd_enable+0x1c8>)
    2a58:	2202      	movs	r2, #2
    2a5a:	701a      	strb	r2, [r3, #0]
    return (*(uint32_t *)0x10000130UL == 0x8UL);
    2a5c:	4b26      	ldr	r3, [pc, #152]	; (2af8 <nrfx_usbd_enable+0x1d0>)
    2a5e:	681b      	ldr	r3, [r3, #0]
    return (nrfx_usbd_errata_type_52840() && (*(uint32_t *)0x10000134UL >= 0x1UL));
    2a60:	2b08      	cmp	r3, #8
    2a62:	d03b      	beq.n	2adc <nrfx_usbd_enable+0x1b4>
    2a64:	2300      	movs	r3, #0

    if (nrfx_usbd_errata_187())
    2a66:	b1bb      	cbz	r3, 2a98 <nrfx_usbd_enable+0x170>
	__asm__ volatile(
    2a68:	f04f 0220 	mov.w	r2, #32
    2a6c:	f3ef 8311 	mrs	r3, BASEPRI
    2a70:	f382 8811 	msr	BASEPRI, r2
    2a74:	f3bf 8f6f 	isb	sy
    {
        NRFX_CRITICAL_SECTION_ENTER();
        if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
    2a78:	4a20      	ldr	r2, [pc, #128]	; (2afc <nrfx_usbd_enable+0x1d4>)
    2a7a:	6812      	ldr	r2, [r2, #0]
    2a7c:	2a00      	cmp	r2, #0
    2a7e:	d133      	bne.n	2ae8 <nrfx_usbd_enable+0x1c0>
        {
            *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    2a80:	4a1e      	ldr	r2, [pc, #120]	; (2afc <nrfx_usbd_enable+0x1d4>)
    2a82:	f249 3175 	movw	r1, #37749	; 0x9375
    2a86:	6011      	str	r1, [r2, #0]
            *((volatile uint32_t *)(0x4006ED14)) = 0x00000000;
    2a88:	481d      	ldr	r0, [pc, #116]	; (2b00 <nrfx_usbd_enable+0x1d8>)
    2a8a:	2400      	movs	r4, #0
    2a8c:	6004      	str	r4, [r0, #0]
            *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    2a8e:	6011      	str	r1, [r2, #0]
	__asm__ volatile(
    2a90:	f383 8811 	msr	BASEPRI, r3
    2a94:	f3bf 8f6f 	isb	sy
        {
            *((volatile uint32_t *)(0x4006ED14)) = 0x00000000;
        }
        NRFX_CRITICAL_SECTION_EXIT();
    }
}
    2a98:	bd10      	pop	{r4, pc}
    NRFX_ASSERT(m_drv_state == NRFX_DRV_STATE_INITIALIZED);
    2a9a:	4c21      	ldr	r4, [pc, #132]	; (2b20 <nrfx_usbd_enable+0x1f8>)
    2a9c:	f240 63bf 	movw	r3, #1727	; 0x6bf
    2aa0:	4622      	mov	r2, r4
    2aa2:	4920      	ldr	r1, [pc, #128]	; (2b24 <nrfx_usbd_enable+0x1fc>)
    2aa4:	4820      	ldr	r0, [pc, #128]	; (2b28 <nrfx_usbd_enable+0x200>)
    2aa6:	f00c feea 	bl	f87e <printk>
    2aaa:	f240 61bf 	movw	r1, #1727	; 0x6bf
    2aae:	4620      	mov	r0, r4
    2ab0:	f00c ff6b 	bl	f98a <assert_post_action>
    2ab4:	e73e      	b.n	2934 <nrfx_usbd_enable+0xc>
    2ab6:	4b1d      	ldr	r3, [pc, #116]	; (2b2c <nrfx_usbd_enable+0x204>)
    2ab8:	681b      	ldr	r3, [r3, #0]
    2aba:	2b00      	cmp	r3, #0
    2abc:	f43f af49 	beq.w	2952 <nrfx_usbd_enable+0x2a>
    2ac0:	2301      	movs	r3, #1
    2ac2:	e746      	b.n	2952 <nrfx_usbd_enable+0x2a>
            *((volatile uint32_t *)(0x4006ED14)) = 0x00000003;
    2ac4:	4a0e      	ldr	r2, [pc, #56]	; (2b00 <nrfx_usbd_enable+0x1d8>)
    2ac6:	2103      	movs	r1, #3
    2ac8:	6011      	str	r1, [r2, #0]
    2aca:	e758      	b.n	297e <nrfx_usbd_enable+0x56>
            *((volatile uint32_t *)(0x4006EC14)) = 0x000000C0;
    2acc:	4a0d      	ldr	r2, [pc, #52]	; (2b04 <nrfx_usbd_enable+0x1dc>)
    2ace:	21c0      	movs	r1, #192	; 0xc0
    2ad0:	6011      	str	r1, [r2, #0]
    2ad2:	e76d      	b.n	29b0 <nrfx_usbd_enable+0x88>
            *((volatile uint32_t *)(0x4006EC14)) = 0x00000000;
    2ad4:	4a0b      	ldr	r2, [pc, #44]	; (2b04 <nrfx_usbd_enable+0x1dc>)
    2ad6:	2100      	movs	r1, #0
    2ad8:	6011      	str	r1, [r2, #0]
    2ada:	e798      	b.n	2a0e <nrfx_usbd_enable+0xe6>
    2adc:	4b13      	ldr	r3, [pc, #76]	; (2b2c <nrfx_usbd_enable+0x204>)
    2ade:	681b      	ldr	r3, [r3, #0]
    2ae0:	2b00      	cmp	r3, #0
    2ae2:	d0c0      	beq.n	2a66 <nrfx_usbd_enable+0x13e>
    2ae4:	2301      	movs	r3, #1
    2ae6:	e7be      	b.n	2a66 <nrfx_usbd_enable+0x13e>
            *((volatile uint32_t *)(0x4006ED14)) = 0x00000000;
    2ae8:	4a05      	ldr	r2, [pc, #20]	; (2b00 <nrfx_usbd_enable+0x1d8>)
    2aea:	2100      	movs	r1, #0
    2aec:	6011      	str	r1, [r2, #0]
    2aee:	e7cf      	b.n	2a90 <nrfx_usbd_enable+0x168>
    2af0:	200027ca 	.word	0x200027ca
    2af4:	40027000 	.word	0x40027000
    2af8:	10000130 	.word	0x10000130
    2afc:	4006ec00 	.word	0x4006ec00
    2b00:	4006ed14 	.word	0x4006ed14
    2b04:	4006ec14 	.word	0x4006ec14
    2b08:	40027800 	.word	0x40027800
    2b0c:	200003f8 	.word	0x200003f8
    2b10:	20000388 	.word	0x20000388
    2b14:	40027c1c 	.word	0x40027c1c
    2b18:	200027c9 	.word	0x200027c9
    2b1c:	200027cb 	.word	0x200027cb
    2b20:	00011634 	.word	0x00011634
    2b24:	00011ba0 	.word	0x00011ba0
    2b28:	00010f8c 	.word	0x00010f8c
    2b2c:	10000134 	.word	0x10000134

00002b30 <nrfx_usbd_start>:
    usbd_dma_pending_clear();
    m_drv_state = NRFX_DRV_STATE_INITIALIZED;
}

void nrfx_usbd_start(bool enable_sof)
{
    2b30:	b538      	push	{r3, r4, r5, lr}
    2b32:	4604      	mov	r4, r0
    NRFX_ASSERT(m_drv_state == NRFX_DRV_STATE_POWERED_ON);
    2b34:	4b1a      	ldr	r3, [pc, #104]	; (2ba0 <nrfx_usbd_start+0x70>)
    2b36:	781b      	ldrb	r3, [r3, #0]
    2b38:	2b02      	cmp	r3, #2
    2b3a:	d10b      	bne.n	2b54 <nrfx_usbd_start+0x24>
    m_bus_suspend = false;
    2b3c:	4b19      	ldr	r3, [pc, #100]	; (2ba4 <nrfx_usbd_start+0x74>)
    2b3e:	2200      	movs	r2, #0
    2b40:	701a      	strb	r2, [r3, #0]
       NRF_USBD_INT_ENDEPOUT0_MASK    |
       NRF_USBD_INT_USBEVENT_MASK     |
       NRF_USBD_INT_EP0SETUP_MASK     |
       NRF_USBD_INT_DATAEP_MASK;

   if (enable_sof || nrfx_usbd_errata_104())
    2b42:	b9e4      	cbnz	r4, 2b7e <nrfx_usbd_start+0x4e>
    return (*(uint32_t *)0x10000130UL == 0x8UL);
    2b44:	4b18      	ldr	r3, [pc, #96]	; (2ba8 <nrfx_usbd_start+0x78>)
    2b46:	681b      	ldr	r3, [r3, #0]
    return (nrfx_usbd_errata_type_52840() && (*(uint32_t *)0x10000134UL >= 0x1UL));
    2b48:	2b08      	cmp	r3, #8
    2b4a:	d011      	beq.n	2b70 <nrfx_usbd_start+0x40>
    2b4c:	2300      	movs	r3, #0
    2b4e:	b32b      	cbz	r3, 2b9c <nrfx_usbd_start+0x6c>
    uint32_t ints_to_enable =
    2b50:	4b16      	ldr	r3, [pc, #88]	; (2bac <nrfx_usbd_start+0x7c>)
    2b52:	e015      	b.n	2b80 <nrfx_usbd_start+0x50>
    NRFX_ASSERT(m_drv_state == NRFX_DRV_STATE_POWERED_ON);
    2b54:	4d16      	ldr	r5, [pc, #88]	; (2bb0 <nrfx_usbd_start+0x80>)
    2b56:	f240 7339 	movw	r3, #1849	; 0x739
    2b5a:	462a      	mov	r2, r5
    2b5c:	4915      	ldr	r1, [pc, #84]	; (2bb4 <nrfx_usbd_start+0x84>)
    2b5e:	4816      	ldr	r0, [pc, #88]	; (2bb8 <nrfx_usbd_start+0x88>)
    2b60:	f00c fe8d 	bl	f87e <printk>
    2b64:	f240 7139 	movw	r1, #1849	; 0x739
    2b68:	4628      	mov	r0, r5
    2b6a:	f00c ff0e 	bl	f98a <assert_post_action>
    2b6e:	e7e5      	b.n	2b3c <nrfx_usbd_start+0xc>
    2b70:	4b12      	ldr	r3, [pc, #72]	; (2bbc <nrfx_usbd_start+0x8c>)
    2b72:	681b      	ldr	r3, [r3, #0]
    2b74:	b90b      	cbnz	r3, 2b7a <nrfx_usbd_start+0x4a>
    2b76:	4613      	mov	r3, r2
    2b78:	e7e9      	b.n	2b4e <nrfx_usbd_start+0x1e>
    2b7a:	2301      	movs	r3, #1
    2b7c:	e7e7      	b.n	2b4e <nrfx_usbd_start+0x1e>
   {
       ints_to_enable |= NRF_USBD_INT_SOF_MASK;
    2b7e:	4b10      	ldr	r3, [pc, #64]	; (2bc0 <nrfx_usbd_start+0x90>)
    NRF_USBD->INTENSET = mask;
    2b80:	4c10      	ldr	r4, [pc, #64]	; (2bc4 <nrfx_usbd_start+0x94>)
    2b82:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
   /* Enable all required interrupts */
   nrf_usbd_int_enable(ints_to_enable);

   /* Enable interrupt globally */
   NRFX_IRQ_PRIORITY_SET(USBD_IRQn, NRFX_USBD_CONFIG_IRQ_PRIORITY);
   NRFX_IRQ_ENABLE(USBD_IRQn);
    2b86:	2027      	movs	r0, #39	; 0x27
    2b88:	f006 fc8e 	bl	94a8 <z_arch_irq_enable>
    NRF_USBD->USBPULLUP = USBD_USBPULLUP_CONNECT_Enabled << USBD_USBPULLUP_CONNECT_Pos;
    2b8c:	2301      	movs	r3, #1
    2b8e:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
  __ASM volatile ("isb 0xF":::"memory");
    2b92:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb 0xF":::"memory");
    2b96:	f3bf 8f4f 	dsb	sy

   /* Enable pullups */
   nrf_usbd_pullup_enable();
}
    2b9a:	bd38      	pop	{r3, r4, r5, pc}
       ints_to_enable |= NRF_USBD_INT_SOF_MASK;
    2b9c:	4b08      	ldr	r3, [pc, #32]	; (2bc0 <nrfx_usbd_start+0x90>)
    2b9e:	e7ef      	b.n	2b80 <nrfx_usbd_start+0x50>
    2ba0:	200027ca 	.word	0x200027ca
    2ba4:	200027c8 	.word	0x200027c8
    2ba8:	10000130 	.word	0x10000130
    2bac:	01c01407 	.word	0x01c01407
    2bb0:	00011634 	.word	0x00011634
    2bb4:	00011aa8 	.word	0x00011aa8
    2bb8:	00010f8c 	.word	0x00010f8c
    2bbc:	10000134 	.word	0x10000134
    2bc0:	01e01407 	.word	0x01e01407
    2bc4:	40027000 	.word	0x40027000

00002bc8 <nrfx_usbd_is_enabled>:
    return (m_drv_state >= NRFX_DRV_STATE_INITIALIZED);
}

bool nrfx_usbd_is_enabled(void)
{
    return (m_drv_state >= NRFX_DRV_STATE_POWERED_ON);
    2bc8:	4b03      	ldr	r3, [pc, #12]	; (2bd8 <nrfx_usbd_is_enabled+0x10>)
    2bca:	7818      	ldrb	r0, [r3, #0]
}
    2bcc:	2801      	cmp	r0, #1
    2bce:	bf94      	ite	ls
    2bd0:	2000      	movls	r0, #0
    2bd2:	2001      	movhi	r0, #1
    2bd4:	4770      	bx	lr
    2bd6:	bf00      	nop
    2bd8:	200027ca 	.word	0x200027ca

00002bdc <nrfx_usbd_ep_max_packet_size_set>:
{
    m_bus_suspend = false;
}

void nrfx_usbd_ep_max_packet_size_set(nrfx_usbd_ep_t ep, uint16_t size)
{
    2bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2bde:	4604      	mov	r4, r0
    /* Only power of 2 size allowed */
    NRFX_ASSERT((size != 0) && (size & (size - 1)) == 0);
    2be0:	460d      	mov	r5, r1
    2be2:	b111      	cbz	r1, 2bea <nrfx_usbd_ep_max_packet_size_set+0xe>
    2be4:	1e4b      	subs	r3, r1, #1
    2be6:	4219      	tst	r1, r3
    2be8:	d00c      	beq.n	2c04 <nrfx_usbd_ep_max_packet_size_set+0x28>
    2bea:	4e24      	ldr	r6, [pc, #144]	; (2c7c <nrfx_usbd_ep_max_packet_size_set+0xa0>)
    2bec:	f240 73d1 	movw	r3, #2001	; 0x7d1
    2bf0:	4632      	mov	r2, r6
    2bf2:	4923      	ldr	r1, [pc, #140]	; (2c80 <nrfx_usbd_ep_max_packet_size_set+0xa4>)
    2bf4:	4823      	ldr	r0, [pc, #140]	; (2c84 <nrfx_usbd_ep_max_packet_size_set+0xa8>)
    2bf6:	f00c fe42 	bl	f87e <printk>
    2bfa:	f240 71d1 	movw	r1, #2001	; 0x7d1
    2bfe:	4630      	mov	r0, r6
    2c00:	f00c fec3 	bl	f98a <assert_post_action>
    /* Packet size cannot be higher than maximum buffer size */
    NRFX_ASSERT((NRF_USBD_EPISO_CHECK(ep) && (size <= usbd_ep_iso_capacity(ep))) ||
    2c04:	f014 0208 	ands.w	r2, r4, #8
    2c08:	d009      	beq.n	2c1e <nrfx_usbd_ep_max_packet_size_set+0x42>
        (((NRF_USBD->ISOSPLIT) & USBD_ISOSPLIT_SPLIT_Msk) >> USBD_ISOSPLIT_SPLIT_Pos);
    2c0a:	4b1f      	ldr	r3, [pc, #124]	; (2c88 <nrfx_usbd_ep_max_packet_size_set+0xac>)
    2c0c:	f8d3 351c 	ldr.w	r3, [r3, #1308]	; 0x51c
    return (nrf_usbd_isosplit_t)
    2c10:	b2db      	uxtb	r3, r3
    if (NRF_USBD_ISOSPLIT_HALF == split)
    2c12:	2b80      	cmp	r3, #128	; 0x80
    2c14:	d01f      	beq.n	2c56 <nrfx_usbd_ep_max_packet_size_set+0x7a>
    return NRFX_USBD_ISOSIZE;
    2c16:	f44f 6380 	mov.w	r3, #1024	; 0x400
    NRFX_ASSERT((NRF_USBD_EPISO_CHECK(ep) && (size <= usbd_ep_iso_capacity(ep))) ||
    2c1a:	429d      	cmp	r5, r3
    2c1c:	d90f      	bls.n	2c3e <nrfx_usbd_ep_max_packet_size_set+0x62>
    2c1e:	b90a      	cbnz	r2, 2c24 <nrfx_usbd_ep_max_packet_size_set+0x48>
    2c20:	2d40      	cmp	r5, #64	; 0x40
    2c22:	d90c      	bls.n	2c3e <nrfx_usbd_ep_max_packet_size_set+0x62>
    2c24:	4e15      	ldr	r6, [pc, #84]	; (2c7c <nrfx_usbd_ep_max_packet_size_set+0xa0>)
    2c26:	f240 73d4 	movw	r3, #2004	; 0x7d4
    2c2a:	4632      	mov	r2, r6
    2c2c:	4917      	ldr	r1, [pc, #92]	; (2c8c <nrfx_usbd_ep_max_packet_size_set+0xb0>)
    2c2e:	4815      	ldr	r0, [pc, #84]	; (2c84 <nrfx_usbd_ep_max_packet_size_set+0xa8>)
    2c30:	f00c fe25 	bl	f87e <printk>
    2c34:	f240 71d4 	movw	r1, #2004	; 0x7d4
    2c38:	4630      	mov	r0, r6
    2c3a:	f00c fea6 	bl	f98a <assert_post_action>
    NRFX_USBD_ASSERT_EP_VALID(ep);
    2c3e:	f004 060f 	and.w	r6, r4, #15
    2c42:	2e08      	cmp	r6, #8
    2c44:	d80a      	bhi.n	2c5c <nrfx_usbd_ep_max_packet_size_set+0x80>
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    2c46:	f014 0f80 	tst.w	r4, #128	; 0x80
    2c4a:	d115      	bne.n	2c78 <nrfx_usbd_ep_max_packet_size_set+0x9c>
    2c4c:	4b10      	ldr	r3, [pc, #64]	; (2c90 <nrfx_usbd_ep_max_packet_size_set+0xb4>)
    2c4e:	eb03 1306 	add.w	r3, r3, r6, lsl #4
                (!NRF_USBD_EPISO_CHECK(ep) && (size <= NRFX_USBD_EPSIZE)));

    usbd_ep_state_t * p_state = ep_state_access(ep);
    p_state->max_packet_size = size;
    2c52:	819d      	strh	r5, [r3, #12]
}
    2c54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return NRFX_USBD_ISOSIZE / 2;
    2c56:	f44f 7300 	mov.w	r3, #512	; 0x200
    2c5a:	e7de      	b.n	2c1a <nrfx_usbd_ep_max_packet_size_set+0x3e>
    NRFX_USBD_ASSERT_EP_VALID(ep);
    2c5c:	4f07      	ldr	r7, [pc, #28]	; (2c7c <nrfx_usbd_ep_max_packet_size_set+0xa0>)
    2c5e:	f240 23a2 	movw	r3, #674	; 0x2a2
    2c62:	463a      	mov	r2, r7
    2c64:	490b      	ldr	r1, [pc, #44]	; (2c94 <nrfx_usbd_ep_max_packet_size_set+0xb8>)
    2c66:	4807      	ldr	r0, [pc, #28]	; (2c84 <nrfx_usbd_ep_max_packet_size_set+0xa8>)
    2c68:	f00c fe09 	bl	f87e <printk>
    2c6c:	f240 21a2 	movw	r1, #674	; 0x2a2
    2c70:	4638      	mov	r0, r7
    2c72:	f00c fe8a 	bl	f98a <assert_post_action>
    2c76:	e7e6      	b.n	2c46 <nrfx_usbd_ep_max_packet_size_set+0x6a>
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    2c78:	4b07      	ldr	r3, [pc, #28]	; (2c98 <nrfx_usbd_ep_max_packet_size_set+0xbc>)
    2c7a:	e7e8      	b.n	2c4e <nrfx_usbd_ep_max_packet_size_set+0x72>
    2c7c:	00011634 	.word	0x00011634
    2c80:	000117e4 	.word	0x000117e4
    2c84:	00010f8c 	.word	0x00010f8c
    2c88:	40027000 	.word	0x40027000
    2c8c:	0001180c 	.word	0x0001180c
    2c90:	200003fc 	.word	0x200003fc
    2c94:	00011c28 	.word	0x00011c28
    2c98:	2000048c 	.word	0x2000048c

00002c9c <nrfx_usbd_init>:
{
    2c9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    NRFX_ASSERT(event_handler);
    2ca0:	4605      	mov	r5, r0
    2ca2:	b150      	cbz	r0, 2cba <nrfx_usbd_init+0x1e>
    if (m_drv_state != NRFX_DRV_STATE_UNINITIALIZED)
    2ca4:	4b3c      	ldr	r3, [pc, #240]	; (2d98 <nrfx_usbd_init+0xfc>)
    2ca6:	781c      	ldrb	r4, [r3, #0]
    2ca8:	2c00      	cmp	r4, #0
    2caa:	d172      	bne.n	2d92 <nrfx_usbd_init+0xf6>
    m_event_handler = event_handler;
    2cac:	4b3b      	ldr	r3, [pc, #236]	; (2d9c <nrfx_usbd_init+0x100>)
    2cae:	601d      	str	r5, [r3, #0]
    m_drv_state = NRFX_DRV_STATE_INITIALIZED;
    2cb0:	4b39      	ldr	r3, [pc, #228]	; (2d98 <nrfx_usbd_init+0xfc>)
    2cb2:	2201      	movs	r2, #1
    2cb4:	701a      	strb	r2, [r3, #0]
    for (n = 0; n < NRF_USBD_EPIN_CNT; ++n)
    2cb6:	4625      	mov	r5, r4
    2cb8:	e021      	b.n	2cfe <nrfx_usbd_init+0x62>
    NRFX_ASSERT(event_handler);
    2cba:	4c39      	ldr	r4, [pc, #228]	; (2da0 <nrfx_usbd_init+0x104>)
    2cbc:	f240 6391 	movw	r3, #1681	; 0x691
    2cc0:	4622      	mov	r2, r4
    2cc2:	4938      	ldr	r1, [pc, #224]	; (2da4 <nrfx_usbd_init+0x108>)
    2cc4:	4838      	ldr	r0, [pc, #224]	; (2da8 <nrfx_usbd_init+0x10c>)
    2cc6:	f00c fdda 	bl	f87e <printk>
    2cca:	f240 6191 	movw	r1, #1681	; 0x691
    2cce:	4620      	mov	r0, r4
    2cd0:	f00c fe5b 	bl	f98a <assert_post_action>
    2cd4:	e7e6      	b.n	2ca4 <nrfx_usbd_init+0x8>
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    2cd6:	2140      	movs	r1, #64	; 0x40
    2cd8:	4638      	mov	r0, r7
    2cda:	f7ff ff7f 	bl	2bdc <nrfx_usbd_ep_max_packet_size_set>
    NRFX_USBD_ASSERT_EP_VALID(ep);
    2cde:	f007 060f 	and.w	r6, r7, #15
    2ce2:	2e08      	cmp	r6, #8
    2ce4:	d815      	bhi.n	2d12 <nrfx_usbd_init+0x76>
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    2ce6:	f017 0f80 	tst.w	r7, #128	; 0x80
    2cea:	d121      	bne.n	2d30 <nrfx_usbd_init+0x94>
    2cec:	492f      	ldr	r1, [pc, #188]	; (2dac <nrfx_usbd_init+0x110>)
    2cee:	0136      	lsls	r6, r6, #4
    2cf0:	198a      	adds	r2, r1, r6
        p_state->status = NRFX_USBD_EP_OK;
    2cf2:	2300      	movs	r3, #0
    2cf4:	7393      	strb	r3, [r2, #14]
        p_state->handler.feeder = NULL;
    2cf6:	518b      	str	r3, [r1, r6]
        p_state->transfer_cnt = 0;
    2cf8:	6093      	str	r3, [r2, #8]
    for (n = 0; n < NRF_USBD_EPIN_CNT; ++n)
    2cfa:	3501      	adds	r5, #1
    2cfc:	b2ed      	uxtb	r5, r5
    2cfe:	2d08      	cmp	r5, #8
    2d00:	d82c      	bhi.n	2d5c <nrfx_usbd_init+0xc0>
        nrfx_usbd_ep_t ep = NRFX_USBD_EPIN(n);
    2d02:	f045 0780 	orr.w	r7, r5, #128	; 0x80
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    2d06:	f015 0f08 	tst.w	r5, #8
    2d0a:	d0e4      	beq.n	2cd6 <nrfx_usbd_init+0x3a>
    2d0c:	f44f 7100 	mov.w	r1, #512	; 0x200
    2d10:	e7e2      	b.n	2cd8 <nrfx_usbd_init+0x3c>
    NRFX_USBD_ASSERT_EP_VALID(ep);
    2d12:	f8df 808c 	ldr.w	r8, [pc, #140]	; 2da0 <nrfx_usbd_init+0x104>
    2d16:	f240 23a2 	movw	r3, #674	; 0x2a2
    2d1a:	4642      	mov	r2, r8
    2d1c:	4924      	ldr	r1, [pc, #144]	; (2db0 <nrfx_usbd_init+0x114>)
    2d1e:	4822      	ldr	r0, [pc, #136]	; (2da8 <nrfx_usbd_init+0x10c>)
    2d20:	f00c fdad 	bl	f87e <printk>
    2d24:	f240 21a2 	movw	r1, #674	; 0x2a2
    2d28:	4640      	mov	r0, r8
    2d2a:	f00c fe2e 	bl	f98a <assert_post_action>
    2d2e:	e7da      	b.n	2ce6 <nrfx_usbd_init+0x4a>
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    2d30:	4920      	ldr	r1, [pc, #128]	; (2db4 <nrfx_usbd_init+0x118>)
    2d32:	e7dc      	b.n	2cee <nrfx_usbd_init+0x52>
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    2d34:	2140      	movs	r1, #64	; 0x40
    2d36:	4620      	mov	r0, r4
    2d38:	f7ff ff50 	bl	2bdc <nrfx_usbd_ep_max_packet_size_set>
    NRFX_USBD_ASSERT_EP_VALID(ep);
    2d3c:	f004 050f 	and.w	r5, r4, #15
    2d40:	2d08      	cmp	r5, #8
    2d42:	d813      	bhi.n	2d6c <nrfx_usbd_init+0xd0>
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    2d44:	f014 0f80 	tst.w	r4, #128	; 0x80
    2d48:	d11e      	bne.n	2d88 <nrfx_usbd_init+0xec>
    2d4a:	4918      	ldr	r1, [pc, #96]	; (2dac <nrfx_usbd_init+0x110>)
    2d4c:	012d      	lsls	r5, r5, #4
    2d4e:	194a      	adds	r2, r1, r5
        p_state->status = NRFX_USBD_EP_OK;
    2d50:	2300      	movs	r3, #0
    2d52:	7393      	strb	r3, [r2, #14]
        p_state->handler.consumer = NULL;
    2d54:	514b      	str	r3, [r1, r5]
        p_state->transfer_cnt = 0;
    2d56:	6093      	str	r3, [r2, #8]
    for (n = 0; n < NRF_USBD_EPOUT_CNT; ++n)
    2d58:	3401      	adds	r4, #1
    2d5a:	b2e4      	uxtb	r4, r4
    2d5c:	2c08      	cmp	r4, #8
    2d5e:	d815      	bhi.n	2d8c <nrfx_usbd_init+0xf0>
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    2d60:	f014 0f08 	tst.w	r4, #8
    2d64:	d0e6      	beq.n	2d34 <nrfx_usbd_init+0x98>
    2d66:	f44f 7100 	mov.w	r1, #512	; 0x200
    2d6a:	e7e4      	b.n	2d36 <nrfx_usbd_init+0x9a>
    NRFX_USBD_ASSERT_EP_VALID(ep);
    2d6c:	4e0c      	ldr	r6, [pc, #48]	; (2da0 <nrfx_usbd_init+0x104>)
    2d6e:	f240 23a2 	movw	r3, #674	; 0x2a2
    2d72:	4632      	mov	r2, r6
    2d74:	490e      	ldr	r1, [pc, #56]	; (2db0 <nrfx_usbd_init+0x114>)
    2d76:	480c      	ldr	r0, [pc, #48]	; (2da8 <nrfx_usbd_init+0x10c>)
    2d78:	f00c fd81 	bl	f87e <printk>
    2d7c:	f240 21a2 	movw	r1, #674	; 0x2a2
    2d80:	4630      	mov	r0, r6
    2d82:	f00c fe02 	bl	f98a <assert_post_action>
    2d86:	e7dd      	b.n	2d44 <nrfx_usbd_init+0xa8>
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    2d88:	490a      	ldr	r1, [pc, #40]	; (2db4 <nrfx_usbd_init+0x118>)
    2d8a:	e7df      	b.n	2d4c <nrfx_usbd_init+0xb0>
    return NRFX_SUCCESS;
    2d8c:	480a      	ldr	r0, [pc, #40]	; (2db8 <nrfx_usbd_init+0x11c>)
}
    2d8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return NRFX_ERROR_INVALID_STATE;
    2d92:	480a      	ldr	r0, [pc, #40]	; (2dbc <nrfx_usbd_init+0x120>)
    2d94:	e7fb      	b.n	2d8e <nrfx_usbd_init+0xf2>
    2d96:	bf00      	nop
    2d98:	200027ca 	.word	0x200027ca
    2d9c:	2000051c 	.word	0x2000051c
    2da0:	00011634 	.word	0x00011634
    2da4:	00011a98 	.word	0x00011a98
    2da8:	00010f8c 	.word	0x00010f8c
    2dac:	200003fc 	.word	0x200003fc
    2db0:	00011c28 	.word	0x00011c28
    2db4:	2000048c 	.word	0x2000048c
    2db8:	0bad0000 	.word	0x0bad0000
    2dbc:	0bad0005 	.word	0x0bad0005

00002dc0 <nrfx_usbd_ep_transfer>:
}

nrfx_err_t nrfx_usbd_ep_transfer(
    nrfx_usbd_ep_t               ep,
    nrfx_usbd_transfer_t const * p_transfer)
{
    2dc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2dc4:	4605      	mov	r5, r0
    2dc6:	460e      	mov	r6, r1
    NRFX_USBD_ASSERT_EP_VALID(ep);
    2dc8:	f000 030f 	and.w	r3, r0, #15
    2dcc:	2b08      	cmp	r3, #8
    2dce:	d818      	bhi.n	2e02 <nrfx_usbd_ep_transfer+0x42>
    return NRFX_USBD_EP_BITPOS(ep);
    2dd0:	b26c      	sxtb	r4, r5
    2dd2:	2c00      	cmp	r4, #0
    2dd4:	db23      	blt.n	2e1e <nrfx_usbd_ep_transfer+0x5e>
    2dd6:	2310      	movs	r3, #16
    2dd8:	f004 040f 	and.w	r4, r4, #15
    2ddc:	441c      	add	r4, r3
    nrfx_err_t ret;
    const uint8_t ep_bitpos = ep2bit(ep);
    NRFX_ASSERT(NULL != p_transfer);
    2dde:	b306      	cbz	r6, 2e22 <nrfx_usbd_ep_transfer+0x62>
	__asm__ volatile(
    2de0:	f04f 0320 	mov.w	r3, #32
    2de4:	f3ef 8811 	mrs	r8, BASEPRI
    2de8:	f383 8811 	msr	BASEPRI, r3
    2dec:	f3bf 8f6f 	isb	sy

    NRFX_CRITICAL_SECTION_ENTER();
    /* Setup data transaction can go only in one direction at a time */
    if ((NRF_USBD_EP_NR_GET(ep) == 0) && (ep != m_last_setup_dir))
    2df0:	f015 070f 	ands.w	r7, r5, #15
    2df4:	d123      	bne.n	2e3e <nrfx_usbd_ep_transfer+0x7e>
    2df6:	4b55      	ldr	r3, [pc, #340]	; (2f4c <nrfx_usbd_ep_transfer+0x18c>)
    2df8:	781b      	ldrb	r3, [r3, #0]
    2dfa:	42ab      	cmp	r3, r5
    2dfc:	d01f      	beq.n	2e3e <nrfx_usbd_ep_transfer+0x7e>
    {
        ret = NRFX_ERROR_INVALID_ADDR;
    2dfe:	4854      	ldr	r0, [pc, #336]	; (2f50 <nrfx_usbd_ep_transfer+0x190>)
    2e00:	e02a      	b.n	2e58 <nrfx_usbd_ep_transfer+0x98>
    NRFX_USBD_ASSERT_EP_VALID(ep);
    2e02:	4c54      	ldr	r4, [pc, #336]	; (2f54 <nrfx_usbd_ep_transfer+0x194>)
    2e04:	f240 23b5 	movw	r3, #693	; 0x2b5
    2e08:	4622      	mov	r2, r4
    2e0a:	4953      	ldr	r1, [pc, #332]	; (2f58 <nrfx_usbd_ep_transfer+0x198>)
    2e0c:	4853      	ldr	r0, [pc, #332]	; (2f5c <nrfx_usbd_ep_transfer+0x19c>)
    2e0e:	f00c fd36 	bl	f87e <printk>
    2e12:	f240 21b5 	movw	r1, #693	; 0x2b5
    2e16:	4620      	mov	r0, r4
    2e18:	f00c fdb7 	bl	f98a <assert_post_action>
    2e1c:	e7d8      	b.n	2dd0 <nrfx_usbd_ep_transfer+0x10>
    return NRFX_USBD_EP_BITPOS(ep);
    2e1e:	2300      	movs	r3, #0
    2e20:	e7da      	b.n	2dd8 <nrfx_usbd_ep_transfer+0x18>
    NRFX_ASSERT(NULL != p_transfer);
    2e22:	4f4c      	ldr	r7, [pc, #304]	; (2f54 <nrfx_usbd_ep_transfer+0x194>)
    2e24:	f640 031e 	movw	r3, #2078	; 0x81e
    2e28:	463a      	mov	r2, r7
    2e2a:	494d      	ldr	r1, [pc, #308]	; (2f60 <nrfx_usbd_ep_transfer+0x1a0>)
    2e2c:	484b      	ldr	r0, [pc, #300]	; (2f5c <nrfx_usbd_ep_transfer+0x19c>)
    2e2e:	f00c fd26 	bl	f87e <printk>
    2e32:	f640 011e 	movw	r1, #2078	; 0x81e
    2e36:	4638      	mov	r0, r7
    2e38:	f00c fda7 	bl	f98a <assert_post_action>
    2e3c:	e7d0      	b.n	2de0 <nrfx_usbd_ep_transfer+0x20>
            (NRFX_USBD_ISO_DEBUG || (!NRF_USBD_EPISO_CHECK(ep))))
        {
            NRFX_LOG_DEBUG("Transfer failed: Invalid EPr\n");
        }
    }
    else if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK)) & (1U << ep_bitpos))
    2e3e:	4b49      	ldr	r3, [pc, #292]	; (2f64 <nrfx_usbd_ep_transfer+0x1a4>)
    2e40:	681b      	ldr	r3, [r3, #0]
    2e42:	43db      	mvns	r3, r3
    2e44:	b29b      	uxth	r3, r3
    2e46:	4a48      	ldr	r2, [pc, #288]	; (2f68 <nrfx_usbd_ep_transfer+0x1a8>)
    2e48:	6812      	ldr	r2, [r2, #0]
    2e4a:	4313      	orrs	r3, r2
    2e4c:	2201      	movs	r2, #1
    2e4e:	fa02 f404 	lsl.w	r4, r2, r4
    2e52:	4223      	tst	r3, r4
    2e54:	d006      	beq.n	2e64 <nrfx_usbd_ep_transfer+0xa4>
    {
        /* IN (Device -> Host) transfer has to be transmitted out to allow new transmission */
        ret = NRFX_ERROR_BUSY;
    2e56:	4845      	ldr	r0, [pc, #276]	; (2f6c <nrfx_usbd_ep_transfer+0x1ac>)
	__asm__ volatile(
    2e58:	f388 8811 	msr	BASEPRI, r8
    2e5c:	f3bf 8f6f 	isb	sy
        ret = NRFX_SUCCESS;
        usbd_int_rise();
    }
    NRFX_CRITICAL_SECTION_EXIT();
    return ret;
}
    2e60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    NRFX_USBD_ASSERT_EP_VALID(ep);
    2e64:	f005 090f 	and.w	r9, r5, #15
    2e68:	f1b9 0f08 	cmp.w	r9, #8
    2e6c:	d82c      	bhi.n	2ec8 <nrfx_usbd_ep_transfer+0x108>
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    2e6e:	f015 0f80 	tst.w	r5, #128	; 0x80
    2e72:	d138      	bne.n	2ee6 <nrfx_usbd_ep_transfer+0x126>
    2e74:	4b3e      	ldr	r3, [pc, #248]	; (2f70 <nrfx_usbd_ep_transfer+0x1b0>)
    2e76:	eb03 1909 	add.w	r9, r3, r9, lsl #4
        if (NRF_USBD_EPIN_CHECK(ep))
    2e7a:	f015 0f80 	tst.w	r5, #128	; 0x80
    2e7e:	d134      	bne.n	2eea <nrfx_usbd_ep_transfer+0x12a>
            p_context = m_ep_consumer_state + NRF_USBD_EP_NR_GET(ep);
    2e80:	eb07 0747 	add.w	r7, r7, r7, lsl #1
    2e84:	00bb      	lsls	r3, r7, #2
    2e86:	4d3b      	ldr	r5, [pc, #236]	; (2f74 <nrfx_usbd_ep_transfer+0x1b4>)
    2e88:	441d      	add	r5, r3
            NRFX_ASSERT((p_transfer->p_data.rx == NULL) || (nrfx_is_in_ram(p_transfer->p_data.rx)));
    2e8a:	6833      	ldr	r3, [r6, #0]
    2e8c:	b123      	cbz	r3, 2e98 <nrfx_usbd_ep_transfer+0xd8>
    2e8e:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
    2e92:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    2e96:	d14b      	bne.n	2f30 <nrfx_usbd_ep_transfer+0x170>
            p_state->handler.consumer = nrfx_usbd_consumer;
    2e98:	4b37      	ldr	r3, [pc, #220]	; (2f78 <nrfx_usbd_ep_transfer+0x1b8>)
    2e9a:	f8c9 3000 	str.w	r3, [r9]
        *p_context = *p_transfer;
    2e9e:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    2ea2:	e885 0007 	stmia.w	r5, {r0, r1, r2}
        p_state->p_context = p_context;
    2ea6:	f8c9 5004 	str.w	r5, [r9, #4]
        p_state->transfer_cnt = 0;
    2eaa:	2300      	movs	r3, #0
    2eac:	f8c9 3008 	str.w	r3, [r9, #8]
        p_state->status    =  NRFX_USBD_EP_OK;
    2eb0:	f889 300e 	strb.w	r3, [r9, #14]
        m_ep_dma_waiting   |= 1U << ep_bitpos;
    2eb4:	4a2c      	ldr	r2, [pc, #176]	; (2f68 <nrfx_usbd_ep_transfer+0x1a8>)
    2eb6:	6813      	ldr	r3, [r2, #0]
    2eb8:	431c      	orrs	r4, r3
    2eba:	6014      	str	r4, [r2, #0]
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2ebc:	4b2f      	ldr	r3, [pc, #188]	; (2f7c <nrfx_usbd_ep_transfer+0x1bc>)
    2ebe:	2280      	movs	r2, #128	; 0x80
    2ec0:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
        ret = NRFX_SUCCESS;
    2ec4:	482e      	ldr	r0, [pc, #184]	; (2f80 <nrfx_usbd_ep_transfer+0x1c0>)
    2ec6:	e7c7      	b.n	2e58 <nrfx_usbd_ep_transfer+0x98>
    NRFX_USBD_ASSERT_EP_VALID(ep);
    2ec8:	f8df a088 	ldr.w	sl, [pc, #136]	; 2f54 <nrfx_usbd_ep_transfer+0x194>
    2ecc:	f240 23a2 	movw	r3, #674	; 0x2a2
    2ed0:	4652      	mov	r2, sl
    2ed2:	4921      	ldr	r1, [pc, #132]	; (2f58 <nrfx_usbd_ep_transfer+0x198>)
    2ed4:	4821      	ldr	r0, [pc, #132]	; (2f5c <nrfx_usbd_ep_transfer+0x19c>)
    2ed6:	f00c fcd2 	bl	f87e <printk>
    2eda:	f240 21a2 	movw	r1, #674	; 0x2a2
    2ede:	4650      	mov	r0, sl
    2ee0:	f00c fd53 	bl	f98a <assert_post_action>
    2ee4:	e7c3      	b.n	2e6e <nrfx_usbd_ep_transfer+0xae>
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    2ee6:	4b27      	ldr	r3, [pc, #156]	; (2f84 <nrfx_usbd_ep_transfer+0x1c4>)
    2ee8:	e7c5      	b.n	2e76 <nrfx_usbd_ep_transfer+0xb6>
            p_context = m_ep_feeder_state + NRF_USBD_EP_NR_GET(ep);
    2eea:	eb07 0747 	add.w	r7, r7, r7, lsl #1
    2eee:	00bb      	lsls	r3, r7, #2
    2ef0:	4d25      	ldr	r5, [pc, #148]	; (2f88 <nrfx_usbd_ep_transfer+0x1c8>)
    2ef2:	441d      	add	r5, r3
            if (nrfx_is_in_ram(p_transfer->p_data.tx))
    2ef4:	6833      	ldr	r3, [r6, #0]
    2ef6:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
    2efa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    2efe:	d007      	beq.n	2f10 <nrfx_usbd_ep_transfer+0x150>
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
    2f00:	68b3      	ldr	r3, [r6, #8]
    2f02:	f013 0f01 	tst.w	r3, #1
    2f06:	d10f      	bne.n	2f28 <nrfx_usbd_ep_transfer+0x168>
                    p_state->handler.feeder = nrfx_usbd_feeder_flash;
    2f08:	4b20      	ldr	r3, [pc, #128]	; (2f8c <nrfx_usbd_ep_transfer+0x1cc>)
    2f0a:	f8c9 3000 	str.w	r3, [r9]
                            p_transfer->size);
    2f0e:	e7c6      	b.n	2e9e <nrfx_usbd_ep_transfer+0xde>
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
    2f10:	68b3      	ldr	r3, [r6, #8]
    2f12:	f013 0f01 	tst.w	r3, #1
    2f16:	d103      	bne.n	2f20 <nrfx_usbd_ep_transfer+0x160>
                    p_state->handler.feeder = nrfx_usbd_feeder_ram;
    2f18:	4b1d      	ldr	r3, [pc, #116]	; (2f90 <nrfx_usbd_ep_transfer+0x1d0>)
    2f1a:	f8c9 3000 	str.w	r3, [r9]
                            p_transfer->size);
    2f1e:	e7be      	b.n	2e9e <nrfx_usbd_ep_transfer+0xde>
                    p_state->handler.feeder = nrfx_usbd_feeder_ram_zlp;
    2f20:	4b1c      	ldr	r3, [pc, #112]	; (2f94 <nrfx_usbd_ep_transfer+0x1d4>)
    2f22:	f8c9 3000 	str.w	r3, [r9]
                    if (NRFX_USBD_ISO_DEBUG || (!NRF_USBD_EPISO_CHECK(ep)))
    2f26:	e7ba      	b.n	2e9e <nrfx_usbd_ep_transfer+0xde>
                    p_state->handler.feeder = nrfx_usbd_feeder_flash_zlp;
    2f28:	4b1b      	ldr	r3, [pc, #108]	; (2f98 <nrfx_usbd_ep_transfer+0x1d8>)
    2f2a:	f8c9 3000 	str.w	r3, [r9]
                    if (NRFX_USBD_ISO_DEBUG || (!NRF_USBD_EPISO_CHECK(ep)))
    2f2e:	e7b6      	b.n	2e9e <nrfx_usbd_ep_transfer+0xde>
            NRFX_ASSERT((p_transfer->p_data.rx == NULL) || (nrfx_is_in_ram(p_transfer->p_data.rx)));
    2f30:	4f08      	ldr	r7, [pc, #32]	; (2f54 <nrfx_usbd_ep_transfer+0x194>)
    2f32:	f640 0378 	movw	r3, #2168	; 0x878
    2f36:	463a      	mov	r2, r7
    2f38:	4918      	ldr	r1, [pc, #96]	; (2f9c <nrfx_usbd_ep_transfer+0x1dc>)
    2f3a:	4808      	ldr	r0, [pc, #32]	; (2f5c <nrfx_usbd_ep_transfer+0x19c>)
    2f3c:	f00c fc9f 	bl	f87e <printk>
    2f40:	f640 0178 	movw	r1, #2168	; 0x878
    2f44:	4638      	mov	r0, r7
    2f46:	f00c fd20 	bl	f98a <assert_post_action>
    2f4a:	e7a5      	b.n	2e98 <nrfx_usbd_ep_transfer+0xd8>
    2f4c:	200027cb 	.word	0x200027cb
    2f50:	0bad000a 	.word	0x0bad000a
    2f54:	00011634 	.word	0x00011634
    2f58:	00011c28 	.word	0x00011c28
    2f5c:	00010f8c 	.word	0x00010f8c
    2f60:	00011998 	.word	0x00011998
    2f64:	200003f8 	.word	0x200003f8
    2f68:	20000388 	.word	0x20000388
    2f6c:	0bad000b 	.word	0x0bad000b
    2f70:	200003fc 	.word	0x200003fc
    2f74:	2000031c 	.word	0x2000031c
    2f78:	00001f0d 	.word	0x00001f0d
    2f7c:	e000e100 	.word	0xe000e100
    2f80:	0bad0000 	.word	0x0bad0000
    2f84:	2000048c 	.word	0x2000048c
    2f88:	2000038c 	.word	0x2000038c
    2f8c:	00002fa9 	.word	0x00002fa9
    2f90:	00001fad 	.word	0x00001fad
    2f94:	0000200d 	.word	0x0000200d
    2f98:	00003041 	.word	0x00003041
    2f9c:	000119b4 	.word	0x000119b4

00002fa0 <nrfx_usbd_feeder_buffer_get>:
}

void * nrfx_usbd_feeder_buffer_get(void)
{
    return m_tx_buffer;
}
    2fa0:	4800      	ldr	r0, [pc, #0]	; (2fa4 <nrfx_usbd_feeder_buffer_get+0x4>)
    2fa2:	4770      	bx	lr
    2fa4:	20000524 	.word	0x20000524

00002fa8 <nrfx_usbd_feeder_flash>:
{
    2fa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2fac:	4606      	mov	r6, r0
    2fae:	460c      	mov	r4, r1
    2fb0:	4615      	mov	r5, r2
    NRFX_ASSERT(!nrfx_is_in_ram(p_transfer->p_data.tx));
    2fb2:	680b      	ldr	r3, [r1, #0]
    2fb4:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
    2fb8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    2fbc:	d01b      	beq.n	2ff6 <CONFIG_USB_DEVICE_VID+0x13>
    size_t tx_size  = p_transfer->size;
    2fbe:	f8d4 8004 	ldr.w	r8, [r4, #4]
    void * p_buffer = nrfx_usbd_feeder_buffer_get();
    2fc2:	f7ff ffed 	bl	2fa0 <nrfx_usbd_feeder_buffer_get>
    2fc6:	4607      	mov	r7, r0
    if (tx_size > ep_size)
    2fc8:	45a8      	cmp	r8, r5
    2fca:	d800      	bhi.n	2fce <nrfx_usbd_feeder_flash+0x26>
    size_t tx_size  = p_transfer->size;
    2fcc:	4645      	mov	r5, r8
    NRFX_ASSERT(tx_size <= NRFX_USBD_FEEDER_BUFFER_SIZE);
    2fce:	2d40      	cmp	r5, #64	; 0x40
    2fd0:	d81f      	bhi.n	3012 <CONFIG_USB_DEVICE_VID+0x2f>
    memcpy(p_buffer, (p_transfer->p_data.tx), tx_size);
    2fd2:	462a      	mov	r2, r5
    2fd4:	6821      	ldr	r1, [r4, #0]
    2fd6:	4638      	mov	r0, r7
    2fd8:	f00d faaa 	bl	10530 <memcpy>
    p_next->p_data.tx = p_buffer;
    2fdc:	6037      	str	r7, [r6, #0]
    p_next->size = tx_size;
    2fde:	6075      	str	r5, [r6, #4]
    p_transfer->size -= tx_size;
    2fe0:	6860      	ldr	r0, [r4, #4]
    2fe2:	1b40      	subs	r0, r0, r5
    2fe4:	6060      	str	r0, [r4, #4]
    p_transfer->p_data.addr += tx_size;
    2fe6:	6823      	ldr	r3, [r4, #0]
    2fe8:	441d      	add	r5, r3
    2fea:	6025      	str	r5, [r4, #0]
}
    2fec:	3000      	adds	r0, #0
    2fee:	bf18      	it	ne
    2ff0:	2001      	movne	r0, #1
    2ff2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    NRFX_ASSERT(!nrfx_is_in_ram(p_transfer->p_data.tx));
    2ff6:	4f0e      	ldr	r7, [pc, #56]	; (3030 <CONFIG_USB_DEVICE_VID+0x4d>)
    2ff8:	f44f 730e 	mov.w	r3, #568	; 0x238
    2ffc:	463a      	mov	r2, r7
    2ffe:	490d      	ldr	r1, [pc, #52]	; (3034 <CONFIG_USB_DEVICE_VID+0x51>)
    3000:	480d      	ldr	r0, [pc, #52]	; (3038 <CONFIG_USB_DEVICE_VID+0x55>)
    3002:	f00c fc3c 	bl	f87e <printk>
    3006:	f44f 710e 	mov.w	r1, #568	; 0x238
    300a:	4638      	mov	r0, r7
    300c:	f00c fcbd 	bl	f98a <assert_post_action>
    3010:	e7d5      	b.n	2fbe <nrfx_usbd_feeder_flash+0x16>
    NRFX_ASSERT(tx_size <= NRFX_USBD_FEEDER_BUFFER_SIZE);
    3012:	f8df 801c 	ldr.w	r8, [pc, #28]	; 3030 <CONFIG_USB_DEVICE_VID+0x4d>
    3016:	f240 2342 	movw	r3, #578	; 0x242
    301a:	4642      	mov	r2, r8
    301c:	4907      	ldr	r1, [pc, #28]	; (303c <CONFIG_USB_DEVICE_VID+0x59>)
    301e:	4806      	ldr	r0, [pc, #24]	; (3038 <CONFIG_USB_DEVICE_VID+0x55>)
    3020:	f00c fc2d 	bl	f87e <printk>
    3024:	f240 2142 	movw	r1, #578	; 0x242
    3028:	4640      	mov	r0, r8
    302a:	f00c fcae 	bl	f98a <assert_post_action>
    302e:	e7d0      	b.n	2fd2 <nrfx_usbd_feeder_flash+0x2a>
    3030:	00011634 	.word	0x00011634
    3034:	00011a38 	.word	0x00011a38
    3038:	00010f8c 	.word	0x00010f8c
    303c:	00011a60 	.word	0x00011a60

00003040 <nrfx_usbd_feeder_flash_zlp>:
{
    3040:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3044:	4606      	mov	r6, r0
    3046:	460d      	mov	r5, r1
    3048:	4614      	mov	r4, r2
    NRFX_ASSERT(!nrfx_is_in_ram(p_transfer->p_data.tx));
    304a:	680b      	ldr	r3, [r1, #0]
    304c:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
    3050:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    3054:	d017      	beq.n	3086 <nrfx_usbd_feeder_flash_zlp+0x46>
    size_t tx_size  = p_transfer->size;
    3056:	686f      	ldr	r7, [r5, #4]
    void * p_buffer = nrfx_usbd_feeder_buffer_get();
    3058:	f7ff ffa2 	bl	2fa0 <nrfx_usbd_feeder_buffer_get>
    305c:	4680      	mov	r8, r0
    if (tx_size > ep_size)
    305e:	42a7      	cmp	r7, r4
    3060:	d800      	bhi.n	3064 <nrfx_usbd_feeder_flash_zlp+0x24>
    size_t tx_size  = p_transfer->size;
    3062:	463c      	mov	r4, r7
    NRFX_ASSERT(tx_size <= NRFX_USBD_FEEDER_BUFFER_SIZE);
    3064:	2c40      	cmp	r4, #64	; 0x40
    3066:	d81c      	bhi.n	30a2 <nrfx_usbd_feeder_flash_zlp+0x62>
    if (tx_size != 0)
    3068:	bb4c      	cbnz	r4, 30be <nrfx_usbd_feeder_flash_zlp+0x7e>
        p_next->p_data.tx = NULL;
    306a:	2300      	movs	r3, #0
    306c:	6033      	str	r3, [r6, #0]
    p_next->size = tx_size;
    306e:	6074      	str	r4, [r6, #4]
    p_transfer->size -= tx_size;
    3070:	686b      	ldr	r3, [r5, #4]
    3072:	1b1b      	subs	r3, r3, r4
    3074:	606b      	str	r3, [r5, #4]
    p_transfer->p_data.addr += tx_size;
    3076:	682b      	ldr	r3, [r5, #0]
    3078:	4423      	add	r3, r4
    307a:	602b      	str	r3, [r5, #0]
}
    307c:	1c20      	adds	r0, r4, #0
    307e:	bf18      	it	ne
    3080:	2001      	movne	r0, #1
    3082:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    NRFX_ASSERT(!nrfx_is_in_ram(p_transfer->p_data.tx));
    3086:	4f12      	ldr	r7, [pc, #72]	; (30d0 <nrfx_usbd_feeder_flash_zlp+0x90>)
    3088:	f240 235b 	movw	r3, #603	; 0x25b
    308c:	463a      	mov	r2, r7
    308e:	4911      	ldr	r1, [pc, #68]	; (30d4 <nrfx_usbd_feeder_flash_zlp+0x94>)
    3090:	4811      	ldr	r0, [pc, #68]	; (30d8 <nrfx_usbd_feeder_flash_zlp+0x98>)
    3092:	f00c fbf4 	bl	f87e <printk>
    3096:	f240 215b 	movw	r1, #603	; 0x25b
    309a:	4638      	mov	r0, r7
    309c:	f00c fc75 	bl	f98a <assert_post_action>
    30a0:	e7d9      	b.n	3056 <nrfx_usbd_feeder_flash_zlp+0x16>
    NRFX_ASSERT(tx_size <= NRFX_USBD_FEEDER_BUFFER_SIZE);
    30a2:	4f0b      	ldr	r7, [pc, #44]	; (30d0 <nrfx_usbd_feeder_flash_zlp+0x90>)
    30a4:	f240 2365 	movw	r3, #613	; 0x265
    30a8:	463a      	mov	r2, r7
    30aa:	490c      	ldr	r1, [pc, #48]	; (30dc <nrfx_usbd_feeder_flash_zlp+0x9c>)
    30ac:	480a      	ldr	r0, [pc, #40]	; (30d8 <nrfx_usbd_feeder_flash_zlp+0x98>)
    30ae:	f00c fbe6 	bl	f87e <printk>
    30b2:	f240 2165 	movw	r1, #613	; 0x265
    30b6:	4638      	mov	r0, r7
    30b8:	f00c fc67 	bl	f98a <assert_post_action>
    30bc:	e7d4      	b.n	3068 <nrfx_usbd_feeder_flash_zlp+0x28>
        memcpy(p_buffer, (p_transfer->p_data.tx), tx_size);
    30be:	4622      	mov	r2, r4
    30c0:	6829      	ldr	r1, [r5, #0]
    30c2:	4640      	mov	r0, r8
    30c4:	f00d fa34 	bl	10530 <memcpy>
        p_next->p_data.tx = p_buffer;
    30c8:	f8c6 8000 	str.w	r8, [r6]
    30cc:	e7cf      	b.n	306e <nrfx_usbd_feeder_flash_zlp+0x2e>
    30ce:	bf00      	nop
    30d0:	00011634 	.word	0x00011634
    30d4:	00011a38 	.word	0x00011a38
    30d8:	00010f8c 	.word	0x00010f8c
    30dc:	00011a60 	.word	0x00011a60

000030e0 <nrfx_usbd_ep_status_get>:

nrfx_usbd_ep_status_t nrfx_usbd_ep_status_get(nrfx_usbd_ep_t ep, size_t * p_size)
{
    30e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    30e2:	4605      	mov	r5, r0
    30e4:	460e      	mov	r6, r1
    NRFX_USBD_ASSERT_EP_VALID(ep);
    30e6:	f000 040f 	and.w	r4, r0, #15
    30ea:	2c08      	cmp	r4, #8
    30ec:	d817      	bhi.n	311e <nrfx_usbd_ep_status_get+0x3e>
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    30ee:	f015 0f80 	tst.w	r5, #128	; 0x80
    30f2:	d122      	bne.n	313a <nrfx_usbd_ep_status_get+0x5a>
    30f4:	4b13      	ldr	r3, [pc, #76]	; (3144 <nrfx_usbd_ep_status_get+0x64>)
    30f6:	0124      	lsls	r4, r4, #4
    30f8:	191a      	adds	r2, r3, r4
	__asm__ volatile(
    30fa:	f04f 0020 	mov.w	r0, #32
    30fe:	f3ef 8111 	mrs	r1, BASEPRI
    3102:	f380 8811 	msr	BASEPRI, r0
    3106:	f3bf 8f6f 	isb	sy
    nrfx_usbd_ep_status_t ret;

    usbd_ep_state_t const * p_state = ep_state_access(ep);
    NRFX_CRITICAL_SECTION_ENTER();
    *p_size = p_state->transfer_cnt;
    310a:	6890      	ldr	r0, [r2, #8]
    310c:	6030      	str	r0, [r6, #0]
    ret = (p_state->handler.consumer == NULL) ? p_state->status : NRFX_USBD_EP_BUSY;
    310e:	591b      	ldr	r3, [r3, r4]
    3110:	b1ab      	cbz	r3, 313e <nrfx_usbd_ep_status_get+0x5e>
    3112:	2004      	movs	r0, #4
	__asm__ volatile(
    3114:	f381 8811 	msr	BASEPRI, r1
    3118:	f3bf 8f6f 	isb	sy
    NRFX_CRITICAL_SECTION_EXIT();
    return ret;
}
    311c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    NRFX_USBD_ASSERT_EP_VALID(ep);
    311e:	4f0a      	ldr	r7, [pc, #40]	; (3148 <nrfx_usbd_ep_status_get+0x68>)
    3120:	f240 23a2 	movw	r3, #674	; 0x2a2
    3124:	463a      	mov	r2, r7
    3126:	4909      	ldr	r1, [pc, #36]	; (314c <nrfx_usbd_ep_status_get+0x6c>)
    3128:	4809      	ldr	r0, [pc, #36]	; (3150 <nrfx_usbd_ep_status_get+0x70>)
    312a:	f00c fba8 	bl	f87e <printk>
    312e:	f240 21a2 	movw	r1, #674	; 0x2a2
    3132:	4638      	mov	r0, r7
    3134:	f00c fc29 	bl	f98a <assert_post_action>
    3138:	e7d9      	b.n	30ee <nrfx_usbd_ep_status_get+0xe>
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    313a:	4b06      	ldr	r3, [pc, #24]	; (3154 <nrfx_usbd_ep_status_get+0x74>)
    313c:	e7db      	b.n	30f6 <nrfx_usbd_ep_status_get+0x16>
    ret = (p_state->handler.consumer == NULL) ? p_state->status : NRFX_USBD_EP_BUSY;
    313e:	7b90      	ldrb	r0, [r2, #14]
    3140:	e7e8      	b.n	3114 <nrfx_usbd_ep_status_get+0x34>
    3142:	bf00      	nop
    3144:	200003fc 	.word	0x200003fc
    3148:	00011634 	.word	0x00011634
    314c:	00011c28 	.word	0x00011c28
    3150:	00010f8c 	.word	0x00010f8c
    3154:	2000048c 	.word	0x2000048c

00003158 <nrfx_usbd_epout_size_get>:

size_t nrfx_usbd_epout_size_get(nrfx_usbd_ep_t ep)
{
    3158:	b570      	push	{r4, r5, r6, lr}
    315a:	4604      	mov	r4, r0
    NRFX_USBD_ASSERT_EP_VALID(ep);
    315c:	f000 030f 	and.w	r3, r0, #15
    3160:	2b08      	cmp	r3, #8
    3162:	d80f      	bhi.n	3184 <nrfx_usbd_epout_size_get+0x2c>
    NRFX_ASSERT(NRF_USBD_EP_VALIDATE(ep));
    3164:	f004 050f 	and.w	r5, r4, #15
    3168:	2d08      	cmp	r5, #8
    316a:	d819      	bhi.n	31a0 <nrfx_usbd_epout_size_get+0x48>
    NRFX_ASSERT(NRF_USBD_EPOUT_CHECK(ep));
    316c:	f014 0f80 	tst.w	r4, #128	; 0x80
    3170:	d124      	bne.n	31bc <nrfx_usbd_epout_size_get+0x64>
    if (NRF_USBD_EPISO_CHECK(ep))
    3172:	f014 0f08 	tst.w	r4, #8
    3176:	d12f      	bne.n	31d8 <nrfx_usbd_epout_size_get+0x80>
    return NRF_USBD->SIZE.EPOUT[NRF_USBD_EP_NR_GET(ep)];
    3178:	f505 7594 	add.w	r5, r5, #296	; 0x128
    317c:	4b1a      	ldr	r3, [pc, #104]	; (31e8 <nrfx_usbd_epout_size_get+0x90>)
    317e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
    return nrf_usbd_epout_size_get(ep_to_hal(ep));
}
    3182:	bd70      	pop	{r4, r5, r6, pc}
    NRFX_USBD_ASSERT_EP_VALID(ep);
    3184:	4d19      	ldr	r5, [pc, #100]	; (31ec <nrfx_usbd_epout_size_get+0x94>)
    3186:	f240 2385 	movw	r3, #645	; 0x285
    318a:	462a      	mov	r2, r5
    318c:	4918      	ldr	r1, [pc, #96]	; (31f0 <nrfx_usbd_epout_size_get+0x98>)
    318e:	4819      	ldr	r0, [pc, #100]	; (31f4 <nrfx_usbd_epout_size_get+0x9c>)
    3190:	f00c fb75 	bl	f87e <printk>
    3194:	f240 2185 	movw	r1, #645	; 0x285
    3198:	4628      	mov	r0, r5
    319a:	f00c fbf6 	bl	f98a <assert_post_action>
    319e:	e7e1      	b.n	3164 <nrfx_usbd_epout_size_get+0xc>
    NRFX_ASSERT(NRF_USBD_EP_VALIDATE(ep));
    31a0:	4e15      	ldr	r6, [pc, #84]	; (31f8 <nrfx_usbd_epout_size_get+0xa0>)
    31a2:	f240 4356 	movw	r3, #1110	; 0x456
    31a6:	4632      	mov	r2, r6
    31a8:	4914      	ldr	r1, [pc, #80]	; (31fc <nrfx_usbd_epout_size_get+0xa4>)
    31aa:	4812      	ldr	r0, [pc, #72]	; (31f4 <nrfx_usbd_epout_size_get+0x9c>)
    31ac:	f00c fb67 	bl	f87e <printk>
    31b0:	f240 4156 	movw	r1, #1110	; 0x456
    31b4:	4630      	mov	r0, r6
    31b6:	f00c fbe8 	bl	f98a <assert_post_action>
    31ba:	e7d7      	b.n	316c <nrfx_usbd_epout_size_get+0x14>
    NRFX_ASSERT(NRF_USBD_EPOUT_CHECK(ep));
    31bc:	4e0e      	ldr	r6, [pc, #56]	; (31f8 <nrfx_usbd_epout_size_get+0xa0>)
    31be:	f240 4357 	movw	r3, #1111	; 0x457
    31c2:	4632      	mov	r2, r6
    31c4:	490e      	ldr	r1, [pc, #56]	; (3200 <nrfx_usbd_epout_size_get+0xa8>)
    31c6:	480b      	ldr	r0, [pc, #44]	; (31f4 <nrfx_usbd_epout_size_get+0x9c>)
    31c8:	f00c fb59 	bl	f87e <printk>
    31cc:	f240 4157 	movw	r1, #1111	; 0x457
    31d0:	4630      	mov	r0, r6
    31d2:	f00c fbda 	bl	f98a <assert_post_action>
    31d6:	e7cc      	b.n	3172 <nrfx_usbd_epout_size_get+0x1a>
        size_t size_isoout = NRF_USBD->SIZE.ISOOUT;
    31d8:	4b03      	ldr	r3, [pc, #12]	; (31e8 <nrfx_usbd_epout_size_get+0x90>)
    31da:	f8d3 04c0 	ldr.w	r0, [r3, #1216]	; 0x4c0
        if ((size_isoout & USBD_SIZE_ISOOUT_ZERO_Msk) == (USBD_SIZE_ISOOUT_ZERO_ZeroData << USBD_SIZE_ISOOUT_ZERO_Pos))
    31de:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    31e2:	d0ce      	beq.n	3182 <nrfx_usbd_epout_size_get+0x2a>
            size_isoout = 0;
    31e4:	2000      	movs	r0, #0
        return size_isoout;
    31e6:	e7cc      	b.n	3182 <nrfx_usbd_epout_size_get+0x2a>
    31e8:	40027000 	.word	0x40027000
    31ec:	00011634 	.word	0x00011634
    31f0:	00011c28 	.word	0x00011c28
    31f4:	00010f8c 	.word	0x00010f8c
    31f8:	000116f8 	.word	0x000116f8
    31fc:	00011720 	.word	0x00011720
    3200:	00011a08 	.word	0x00011a08

00003204 <usbd_dmareq_process>:
    if (!m_dma_pending)
    3204:	4bbd      	ldr	r3, [pc, #756]	; (34fc <usbd_dmareq_process+0x2f8>)
    3206:	781b      	ldrb	r3, [r3, #0]
    3208:	2b00      	cmp	r3, #0
    320a:	f040 81d0 	bne.w	35ae <usbd_dmareq_process+0x3aa>
{
    320e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    3212:	b085      	sub	sp, #20
        while (0 != (req = m_ep_dma_waiting & m_ep_ready))
    3214:	4bba      	ldr	r3, [pc, #744]	; (3500 <usbd_dmareq_process+0x2fc>)
    3216:	681b      	ldr	r3, [r3, #0]
    3218:	4aba      	ldr	r2, [pc, #744]	; (3504 <usbd_dmareq_process+0x300>)
    321a:	6810      	ldr	r0, [r2, #0]
    321c:	4003      	ands	r3, r0
    321e:	f000 815b 	beq.w	34d8 <usbd_dmareq_process+0x2d4>
            if (NRFX_USBD_CONFIG_DMASCHEDULER_ISO_BOOST && ((req & USBD_EPISO_BIT_MASK) != 0))
    3222:	f013 2001 	ands.w	r0, r3, #16777472	; 0x1000100
    3226:	d06f      	beq.n	3308 <usbd_dmareq_process+0x104>
                pos = usbd_dma_scheduler_algorithm(req & USBD_EPISO_BIT_MASK);
    3228:	f00c fbc0 	bl	f9ac <usbd_dma_scheduler_algorithm>
    322c:	4606      	mov	r6, r0
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    322e:	2e0f      	cmp	r6, #15
    3230:	d96f      	bls.n	3312 <usbd_dmareq_process+0x10e>
        NRF_USBD_EPOUT(bitpos - NRFX_USBD_EPOUT_BITPOS_0) : NRF_USBD_EPIN(bitpos));
    3232:	f1a6 0510 	sub.w	r5, r6, #16
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    3236:	b2ed      	uxtb	r5, r5
    NRFX_USBD_ASSERT_EP_VALID(ep);
    3238:	f005 040f 	and.w	r4, r5, #15
    323c:	2c08      	cmp	r4, #8
    323e:	d86c      	bhi.n	331a <usbd_dmareq_process+0x116>
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    3240:	f015 0f80 	tst.w	r5, #128	; 0x80
    3244:	d177      	bne.n	3336 <usbd_dmareq_process+0x132>
    3246:	4ab0      	ldr	r2, [pc, #704]	; (3508 <usbd_dmareq_process+0x304>)
    3248:	0123      	lsls	r3, r4, #4
    324a:	18d4      	adds	r4, r2, r3
            NRFX_ASSERT((p_state->handler.feeder) != NULL);
    324c:	58d3      	ldr	r3, [r2, r3]
    324e:	2b00      	cmp	r3, #0
    3250:	d073      	beq.n	333a <usbd_dmareq_process+0x136>
            if (NRF_USBD_EPIN_CHECK(ep))
    3252:	fa4f f985 	sxtb.w	r9, r5
    3256:	f1b9 0f00 	cmp.w	r9, #0
    325a:	db7c      	blt.n	3356 <usbd_dmareq_process+0x152>
                const size_t rx_size = nrfx_usbd_epout_size_get(ep);
    325c:	4628      	mov	r0, r5
    325e:	f7ff ff7b 	bl	3158 <nrfx_usbd_epout_size_get>
    3262:	4680      	mov	r8, r0
                continue_transfer = p_state->handler.consumer(
    3264:	6827      	ldr	r7, [r4, #0]
    3266:	4603      	mov	r3, r0
    3268:	89a2      	ldrh	r2, [r4, #12]
    326a:	6861      	ldr	r1, [r4, #4]
    326c:	a802      	add	r0, sp, #8
    326e:	47b8      	blx	r7
    3270:	4607      	mov	r7, r0
                if (transfer.p_data.rx == NULL)
    3272:	9b02      	ldr	r3, [sp, #8]
    3274:	2b00      	cmp	r3, #0
    3276:	d078      	beq.n	336a <usbd_dmareq_process+0x166>
                else if (transfer.size < rx_size)
    3278:	9b03      	ldr	r3, [sp, #12]
    327a:	4543      	cmp	r3, r8
    327c:	f0c0 8087 	bcc.w	338e <usbd_dmareq_process+0x18a>
                    NRFX_ASSERT(transfer.size == rx_size);
    3280:	4543      	cmp	r3, r8
    3282:	f040 80a1 	bne.w	33c8 <usbd_dmareq_process+0x1c4>
                if (!continue_transfer)
    3286:	b90f      	cbnz	r7, 328c <usbd_dmareq_process+0x88>
                    p_state->handler.consumer = NULL;
    3288:	2300      	movs	r3, #0
    328a:	6023      	str	r3, [r4, #0]
        *((volatile uint32_t *)0x40027C1C) = 0x00000082;
    328c:	4b9f      	ldr	r3, [pc, #636]	; (350c <usbd_dmareq_process+0x308>)
    328e:	2282      	movs	r2, #130	; 0x82
    3290:	601a      	str	r2, [r3, #0]
    m_dma_pending = true;
    3292:	2301      	movs	r3, #1
    3294:	4a99      	ldr	r2, [pc, #612]	; (34fc <usbd_dmareq_process+0x2f8>)
    3296:	7013      	strb	r3, [r2, #0]
            m_ep_ready &= ~(1U << pos);
    3298:	40b3      	lsls	r3, r6
    329a:	499a      	ldr	r1, [pc, #616]	; (3504 <usbd_dmareq_process+0x300>)
    329c:	680a      	ldr	r2, [r1, #0]
    329e:	ea22 0303 	bic.w	r3, r2, r3
    32a2:	600b      	str	r3, [r1, #0]
            p_state->transfer_cnt += transfer.size;
    32a4:	9a03      	ldr	r2, [sp, #12]
    32a6:	68a3      	ldr	r3, [r4, #8]
    32a8:	4413      	add	r3, r2
    32aa:	60a3      	str	r3, [r4, #8]
            nrf_usbd_ep_easydma_set(ep, transfer.p_data.addr, (uint32_t)transfer.size);
    32ac:	9b02      	ldr	r3, [sp, #8]
        (((NRF_USBD->ISOINCONFIG) & USBD_ISOINCONFIG_RESPONSE_Msk) >> USBD_ISOINCONFIG_RESPONSE_Pos);
}

void nrf_usbd_ep_easydma_set(uint8_t ep, uint32_t ptr, uint32_t maxcnt)
{
    if (NRF_USBD_EPIN_CHECK(ep))
    32ae:	f1b9 0f00 	cmp.w	r9, #0
    32b2:	f2c0 8098 	blt.w	33e6 <usbd_dmareq_process+0x1e2>
            NRF_USBD->EPIN[epnr].MAXCNT = maxcnt;
        }
    }
    else
    {
        if (NRF_USBD_EPISO_CHECK(ep))
    32b6:	f015 0f08 	tst.w	r5, #8
    32ba:	f000 80a9 	beq.w	3410 <usbd_dmareq_process+0x20c>
        {
            NRF_USBD->ISOOUT.PTR    = ptr;
    32be:	4994      	ldr	r1, [pc, #592]	; (3510 <usbd_dmareq_process+0x30c>)
    32c0:	f8c1 37a0 	str.w	r3, [r1, #1952]	; 0x7a0
            NRF_USBD->ISOOUT.MAXCNT = maxcnt;
    32c4:	f8c1 27a4 	str.w	r2, [r1, #1956]	; 0x7a4
    return (*(uint32_t *)0x10000130UL == 0x8UL);
    32c8:	4b92      	ldr	r3, [pc, #584]	; (3514 <usbd_dmareq_process+0x310>)
    32ca:	681b      	ldr	r3, [r3, #0]
    return (nrfx_usbd_errata_type_52840() && (*(uint32_t *)0x10000134UL >= 0x1UL));
    32cc:	2b08      	cmp	r3, #8
    32ce:	f000 80ab 	beq.w	3428 <usbd_dmareq_process+0x224>
    32d2:	2300      	movs	r3, #0
            if (nrfx_usbd_errata_104())
    32d4:	2b00      	cmp	r3, #0
    32d6:	f000 80cf 	beq.w	3478 <usbd_dmareq_process+0x274>
    NRFX_USBD_ASSERT_EP_VALID(ep);
    32da:	f005 040f 	and.w	r4, r5, #15
    32de:	2c08      	cmp	r4, #8
    32e0:	f200 8134 	bhi.w	354c <usbd_dmareq_process+0x348>
    return (nrf_usbd_task_t)(
    32e4:	f015 0f80 	tst.w	r5, #128	; 0x80
    32e8:	f040 813e 	bne.w	3568 <usbd_dmareq_process+0x364>
    32ec:	2328      	movs	r3, #40	; 0x28
    32ee:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    return (volatile uint32_t*)(((uint8_t *)NRF_USBD) + (uint32_t)offset);
    32f2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    32f6:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    *(nrf_usbd_getRegPtr((uint32_t)task)) = 1UL;
    32fa:	2201      	movs	r2, #1
    32fc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
    32fe:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb 0xF":::"memory");
    3302:	f3bf 8f4f 	dsb	sy
    3306:	e149      	b.n	359c <usbd_dmareq_process+0x398>
                pos = usbd_dma_scheduler_algorithm(req);
    3308:	4618      	mov	r0, r3
    330a:	f00c fb4f 	bl	f9ac <usbd_dma_scheduler_algorithm>
    330e:	4606      	mov	r6, r0
    3310:	e78d      	b.n	322e <usbd_dmareq_process+0x2a>
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    3312:	f066 057f 	orn	r5, r6, #127	; 0x7f
    3316:	b2ed      	uxtb	r5, r5
    3318:	e78e      	b.n	3238 <usbd_dmareq_process+0x34>
    NRFX_USBD_ASSERT_EP_VALID(ep);
    331a:	4f7f      	ldr	r7, [pc, #508]	; (3518 <usbd_dmareq_process+0x314>)
    331c:	f240 23a2 	movw	r3, #674	; 0x2a2
    3320:	463a      	mov	r2, r7
    3322:	497e      	ldr	r1, [pc, #504]	; (351c <usbd_dmareq_process+0x318>)
    3324:	487e      	ldr	r0, [pc, #504]	; (3520 <usbd_dmareq_process+0x31c>)
    3326:	f00c faaa 	bl	f87e <printk>
    332a:	f240 21a2 	movw	r1, #674	; 0x2a2
    332e:	4638      	mov	r0, r7
    3330:	f00c fb2b 	bl	f98a <assert_post_action>
    3334:	e784      	b.n	3240 <usbd_dmareq_process+0x3c>
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    3336:	4a7b      	ldr	r2, [pc, #492]	; (3524 <usbd_dmareq_process+0x320>)
    3338:	e786      	b.n	3248 <usbd_dmareq_process+0x44>
            NRFX_ASSERT((p_state->handler.feeder) != NULL);
    333a:	4f77      	ldr	r7, [pc, #476]	; (3518 <usbd_dmareq_process+0x314>)
    333c:	f44f 63ad 	mov.w	r3, #1384	; 0x568
    3340:	463a      	mov	r2, r7
    3342:	4979      	ldr	r1, [pc, #484]	; (3528 <usbd_dmareq_process+0x324>)
    3344:	4876      	ldr	r0, [pc, #472]	; (3520 <usbd_dmareq_process+0x31c>)
    3346:	f00c fa9a 	bl	f87e <printk>
    334a:	f44f 61ad 	mov.w	r1, #1384	; 0x568
    334e:	4638      	mov	r0, r7
    3350:	f00c fb1b 	bl	f98a <assert_post_action>
    3354:	e77d      	b.n	3252 <usbd_dmareq_process+0x4e>
                continue_transfer = p_state->handler.feeder(
    3356:	6823      	ldr	r3, [r4, #0]
    3358:	89a2      	ldrh	r2, [r4, #12]
    335a:	6861      	ldr	r1, [r4, #4]
    335c:	a802      	add	r0, sp, #8
    335e:	4798      	blx	r3
                if (!continue_transfer)
    3360:	2800      	cmp	r0, #0
    3362:	d193      	bne.n	328c <usbd_dmareq_process+0x88>
                    p_state->handler.feeder = NULL;
    3364:	2300      	movs	r3, #0
    3366:	6023      	str	r3, [r4, #0]
    3368:	e790      	b.n	328c <usbd_dmareq_process+0x88>
                    NRFX_ASSERT(transfer.size == 0);
    336a:	9b03      	ldr	r3, [sp, #12]
    336c:	2b00      	cmp	r3, #0
    336e:	d08a      	beq.n	3286 <usbd_dmareq_process+0x82>
    3370:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 3518 <usbd_dmareq_process+0x314>
    3374:	f240 5384 	movw	r3, #1412	; 0x584
    3378:	4642      	mov	r2, r8
    337a:	496c      	ldr	r1, [pc, #432]	; (352c <usbd_dmareq_process+0x328>)
    337c:	4868      	ldr	r0, [pc, #416]	; (3520 <usbd_dmareq_process+0x31c>)
    337e:	f00c fa7e 	bl	f87e <printk>
    3382:	f240 5184 	movw	r1, #1412	; 0x584
    3386:	4640      	mov	r0, r8
    3388:	f00c faff 	bl	f98a <assert_post_action>
    338c:	e77b      	b.n	3286 <usbd_dmareq_process+0x82>
                    p_state->status = NRFX_USBD_EP_OVERLOAD;
    338e:	2202      	movs	r2, #2
    3390:	73a2      	strb	r2, [r4, #14]
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
    3392:	2301      	movs	r3, #1
    3394:	40b3      	lsls	r3, r6
    3396:	43db      	mvns	r3, r3
    3398:	4959      	ldr	r1, [pc, #356]	; (3500 <usbd_dmareq_process+0x2fc>)
    339a:	f3bf 8f5b 	dmb	ish
    339e:	e851 0f00 	ldrex	r0, [r1]
    33a2:	4018      	ands	r0, r3
    33a4:	e841 0400 	strex	r4, r0, [r1]
    33a8:	2c00      	cmp	r4, #0
    33aa:	d1f8      	bne.n	339e <usbd_dmareq_process+0x19a>
    33ac:	f3bf 8f5b 	dmb	ish
                    NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OVERLOAD);
    33b0:	2306      	movs	r3, #6
    33b2:	f88d 3004 	strb.w	r3, [sp, #4]
    33b6:	f88d 5006 	strb.w	r5, [sp, #6]
    33ba:	f88d 2007 	strb.w	r2, [sp, #7]
                    m_event_handler(&evt);
    33be:	4b5c      	ldr	r3, [pc, #368]	; (3530 <usbd_dmareq_process+0x32c>)
    33c0:	681b      	ldr	r3, [r3, #0]
    33c2:	a801      	add	r0, sp, #4
    33c4:	4798      	blx	r3
                    continue;
    33c6:	e725      	b.n	3214 <usbd_dmareq_process+0x10>
                    NRFX_ASSERT(transfer.size == rx_size);
    33c8:	f8df 814c 	ldr.w	r8, [pc, #332]	; 3518 <usbd_dmareq_process+0x314>
    33cc:	f240 5393 	movw	r3, #1427	; 0x593
    33d0:	4642      	mov	r2, r8
    33d2:	4958      	ldr	r1, [pc, #352]	; (3534 <usbd_dmareq_process+0x330>)
    33d4:	4852      	ldr	r0, [pc, #328]	; (3520 <usbd_dmareq_process+0x31c>)
    33d6:	f00c fa52 	bl	f87e <printk>
    33da:	f240 5193 	movw	r1, #1427	; 0x593
    33de:	4640      	mov	r0, r8
    33e0:	f00c fad3 	bl	f98a <assert_post_action>
    33e4:	e74f      	b.n	3286 <usbd_dmareq_process+0x82>
        if (NRF_USBD_EPISO_CHECK(ep))
    33e6:	f015 0f08 	tst.w	r5, #8
    33ea:	d005      	beq.n	33f8 <usbd_dmareq_process+0x1f4>
            NRF_USBD->ISOIN.PTR    = ptr;
    33ec:	4948      	ldr	r1, [pc, #288]	; (3510 <usbd_dmareq_process+0x30c>)
    33ee:	f8c1 36a0 	str.w	r3, [r1, #1696]	; 0x6a0
            NRF_USBD->ISOIN.MAXCNT = maxcnt;
    33f2:	f8c1 26a4 	str.w	r2, [r1, #1700]	; 0x6a4
    33f6:	e767      	b.n	32c8 <usbd_dmareq_process+0xc4>
            uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
    33f8:	f005 060f 	and.w	r6, r5, #15
            NRF_USBD->EPIN[epnr].PTR    = ptr;
    33fc:	4844      	ldr	r0, [pc, #272]	; (3510 <usbd_dmareq_process+0x30c>)
    33fe:	00b1      	lsls	r1, r6, #2
    3400:	198f      	adds	r7, r1, r6
    3402:	00bc      	lsls	r4, r7, #2
    3404:	4404      	add	r4, r0
    3406:	f8c4 3600 	str.w	r3, [r4, #1536]	; 0x600
            NRF_USBD->EPIN[epnr].MAXCNT = maxcnt;
    340a:	f8c4 2604 	str.w	r2, [r4, #1540]	; 0x604
    340e:	e75b      	b.n	32c8 <usbd_dmareq_process+0xc4>
        }
        else
        {
            uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
    3410:	f005 060f 	and.w	r6, r5, #15
            NRFX_ASSERT(epnr < NRFX_ARRAY_SIZE(NRF_USBD->EPOUT));
            NRF_USBD->EPOUT[epnr].PTR    = ptr;
    3414:	483e      	ldr	r0, [pc, #248]	; (3510 <usbd_dmareq_process+0x30c>)
    3416:	00b1      	lsls	r1, r6, #2
    3418:	198f      	adds	r7, r1, r6
    341a:	00bc      	lsls	r4, r7, #2
    341c:	4404      	add	r4, r0
    341e:	f8c4 3700 	str.w	r3, [r4, #1792]	; 0x700
            NRF_USBD->EPOUT[epnr].MAXCNT = maxcnt;
    3422:	f8c4 2704 	str.w	r2, [r4, #1796]	; 0x704
    3426:	e74f      	b.n	32c8 <usbd_dmareq_process+0xc4>
    3428:	4b43      	ldr	r3, [pc, #268]	; (3538 <usbd_dmareq_process+0x334>)
    342a:	681b      	ldr	r3, [r3, #0]
    342c:	2b00      	cmp	r3, #0
    342e:	f43f af51 	beq.w	32d4 <usbd_dmareq_process+0xd0>
    3432:	2301      	movs	r3, #1
    3434:	e74e      	b.n	32d4 <usbd_dmareq_process+0xd0>
    NRFX_USBD_ASSERT_EP_VALID(ep);
    3436:	4e38      	ldr	r6, [pc, #224]	; (3518 <usbd_dmareq_process+0x314>)
    3438:	f240 2392 	movw	r3, #658	; 0x292
    343c:	4632      	mov	r2, r6
    343e:	4937      	ldr	r1, [pc, #220]	; (351c <usbd_dmareq_process+0x318>)
    3440:	4837      	ldr	r0, [pc, #220]	; (3520 <usbd_dmareq_process+0x31c>)
    3442:	f00c fa1c 	bl	f87e <printk>
    3446:	f240 2192 	movw	r1, #658	; 0x292
    344a:	4630      	mov	r0, r6
    344c:	f00c fa9d 	bl	f98a <assert_post_action>
    3450:	e01d      	b.n	348e <usbd_dmareq_process+0x28a>
    return (nrf_usbd_task_t)(
    3452:	2304      	movs	r3, #4
    3454:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    return (volatile uint32_t*)(((uint8_t *)NRF_USBD) + (uint32_t)offset);
    3458:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    345c:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    *(nrf_usbd_getRegPtr((uint32_t)task)) = 1UL;
    3460:	2201      	movs	r2, #1
    3462:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
    3464:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb 0xF":::"memory");
    3468:	f3bf 8f4f 	dsb	sy
                        nrfx_systick_delay_us(2);
    346c:	2002      	movs	r0, #2
    346e:	f7fe f92f 	bl	16d0 <nrfx_systick_delay_us>
    return (bool)*nrf_usbd_getRegPtr_c((uint32_t)event);
    3472:	4b32      	ldr	r3, [pc, #200]	; (353c <usbd_dmareq_process+0x338>)
    3474:	681b      	ldr	r3, [r3, #0]
                    }while (!nrf_usbd_event_check(NRF_USBD_EVENT_STARTED));
    3476:	b97b      	cbnz	r3, 3498 <usbd_dmareq_process+0x294>
    *(nrf_usbd_getRegPtr((uint32_t)event)) = 0UL;
    3478:	4b30      	ldr	r3, [pc, #192]	; (353c <usbd_dmareq_process+0x338>)
    347a:	2200      	movs	r2, #0
    347c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
    347e:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb 0xF":::"memory");
    3482:	f3bf 8f4f 	dsb	sy
    NRFX_USBD_ASSERT_EP_VALID(ep);
    3486:	f005 040f 	and.w	r4, r5, #15
    348a:	2c08      	cmp	r4, #8
    348c:	d8d3      	bhi.n	3436 <usbd_dmareq_process+0x232>
    return (nrf_usbd_task_t)(
    348e:	f015 0f80 	tst.w	r5, #128	; 0x80
    3492:	d1de      	bne.n	3452 <usbd_dmareq_process+0x24e>
    3494:	2328      	movs	r3, #40	; 0x28
    3496:	e7dd      	b.n	3454 <usbd_dmareq_process+0x250>
                    nrfx_systick_delay_us(30);
    3498:	201e      	movs	r0, #30
    349a:	f7fe f919 	bl	16d0 <nrfx_systick_delay_us>
                    while (0 == (0x20 & *((volatile uint32_t *)(NRF_USBD_BASE + 0x474))))
    349e:	e002      	b.n	34a6 <usbd_dmareq_process+0x2a2>
                        nrfx_systick_delay_us(2);
    34a0:	2002      	movs	r0, #2
    34a2:	f7fe f915 	bl	16d0 <nrfx_systick_delay_us>
                    while (0 == (0x20 & *((volatile uint32_t *)(NRF_USBD_BASE + 0x474))))
    34a6:	4b26      	ldr	r3, [pc, #152]	; (3540 <usbd_dmareq_process+0x33c>)
    34a8:	681b      	ldr	r3, [r3, #0]
    34aa:	f013 0f20 	tst.w	r3, #32
    34ae:	d0f7      	beq.n	34a0 <usbd_dmareq_process+0x29c>
                    nrfx_systick_delay_us(1);
    34b0:	2001      	movs	r0, #1
    34b2:	f7fe f90d 	bl	16d0 <nrfx_systick_delay_us>
    NRFX_USBD_ASSERT_EP_VALID(ep);
    34b6:	f005 040f 	and.w	r4, r5, #15
    34ba:	2c08      	cmp	r4, #8
    34bc:	d80f      	bhi.n	34de <usbd_dmareq_process+0x2da>
    return (NRF_USBD_EPIN_CHECK(ep) ? epin_endev : epout_endev)[NRF_USBD_EP_NR_GET(ep)];
    34be:	f015 0f80 	tst.w	r5, #128	; 0x80
    34c2:	d141      	bne.n	3548 <usbd_dmareq_process+0x344>
    34c4:	4b1f      	ldr	r3, [pc, #124]	; (3544 <usbd_dmareq_process+0x340>)
    34c6:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    return (volatile const uint32_t*)(((uint8_t *)NRF_USBD) + (uint32_t)offset);
    34ca:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    34ce:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    return (bool)*nrf_usbd_getRegPtr_c((uint32_t)event);
    34d2:	681b      	ldr	r3, [r3, #0]
                } while (!nrf_usbd_event_check(nrfx_usbd_ep_to_endevent(ep)));
    34d4:	2b00      	cmp	r3, #0
    34d6:	d0cf      	beq.n	3478 <usbd_dmareq_process+0x274>
}
    34d8:	b005      	add	sp, #20
    34da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    NRFX_USBD_ASSERT_EP_VALID(ep);
    34de:	4e0e      	ldr	r6, [pc, #56]	; (3518 <usbd_dmareq_process+0x314>)
    34e0:	f44f 73b9 	mov.w	r3, #370	; 0x172
    34e4:	4632      	mov	r2, r6
    34e6:	490d      	ldr	r1, [pc, #52]	; (351c <usbd_dmareq_process+0x318>)
    34e8:	480d      	ldr	r0, [pc, #52]	; (3520 <usbd_dmareq_process+0x31c>)
    34ea:	f00c f9c8 	bl	f87e <printk>
    34ee:	f44f 71b9 	mov.w	r1, #370	; 0x172
    34f2:	4630      	mov	r0, r6
    34f4:	f00c fa49 	bl	f98a <assert_post_action>
    34f8:	e7e1      	b.n	34be <usbd_dmareq_process+0x2ba>
    34fa:	bf00      	nop
    34fc:	200027c9 	.word	0x200027c9
    3500:	20000388 	.word	0x20000388
    3504:	200003f8 	.word	0x200003f8
    3508:	200003fc 	.word	0x200003fc
    350c:	40027c1c 	.word	0x40027c1c
    3510:	40027000 	.word	0x40027000
    3514:	10000130 	.word	0x10000130
    3518:	00011634 	.word	0x00011634
    351c:	00011c28 	.word	0x00011c28
    3520:	00010f8c 	.word	0x00010f8c
    3524:	2000048c 	.word	0x2000048c
    3528:	00011bcc 	.word	0x00011bcc
    352c:	00011bf8 	.word	0x00011bf8
    3530:	2000051c 	.word	0x2000051c
    3534:	00011c0c 	.word	0x00011c0c
    3538:	10000134 	.word	0x10000134
    353c:	40027104 	.word	0x40027104
    3540:	40027474 	.word	0x40027474
    3544:	000115a0 	.word	0x000115a0
    return (NRF_USBD_EPIN_CHECK(ep) ? epin_endev : epout_endev)[NRF_USBD_EP_NR_GET(ep)];
    3548:	4b19      	ldr	r3, [pc, #100]	; (35b0 <usbd_dmareq_process+0x3ac>)
    354a:	e7bc      	b.n	34c6 <usbd_dmareq_process+0x2c2>
    NRFX_USBD_ASSERT_EP_VALID(ep);
    354c:	4e19      	ldr	r6, [pc, #100]	; (35b4 <usbd_dmareq_process+0x3b0>)
    354e:	f240 2392 	movw	r3, #658	; 0x292
    3552:	4632      	mov	r2, r6
    3554:	4918      	ldr	r1, [pc, #96]	; (35b8 <usbd_dmareq_process+0x3b4>)
    3556:	4819      	ldr	r0, [pc, #100]	; (35bc <usbd_dmareq_process+0x3b8>)
    3558:	f00c f991 	bl	f87e <printk>
    355c:	f240 2192 	movw	r1, #658	; 0x292
    3560:	4630      	mov	r0, r6
    3562:	f00c fa12 	bl	f98a <assert_post_action>
    3566:	e6bd      	b.n	32e4 <usbd_dmareq_process+0xe0>
    return (nrf_usbd_task_t)(
    3568:	2304      	movs	r3, #4
    356a:	e6c0      	b.n	32ee <usbd_dmareq_process+0xea>
    NRFX_USBD_ASSERT_EP_VALID(ep);
    356c:	4e11      	ldr	r6, [pc, #68]	; (35b4 <usbd_dmareq_process+0x3b0>)
    356e:	f44f 73b9 	mov.w	r3, #370	; 0x172
    3572:	4632      	mov	r2, r6
    3574:	4910      	ldr	r1, [pc, #64]	; (35b8 <usbd_dmareq_process+0x3b4>)
    3576:	4811      	ldr	r0, [pc, #68]	; (35bc <usbd_dmareq_process+0x3b8>)
    3578:	f00c f981 	bl	f87e <printk>
    357c:	f44f 71b9 	mov.w	r1, #370	; 0x172
    3580:	4630      	mov	r0, r6
    3582:	f00c fa02 	bl	f98a <assert_post_action>
    3586:	e00d      	b.n	35a4 <usbd_dmareq_process+0x3a0>
    return (NRF_USBD_EPIN_CHECK(ep) ? epin_endev : epout_endev)[NRF_USBD_EP_NR_GET(ep)];
    3588:	4b09      	ldr	r3, [pc, #36]	; (35b0 <usbd_dmareq_process+0x3ac>)
    358a:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    return (volatile const uint32_t*)(((uint8_t *)NRF_USBD) + (uint32_t)offset);
    358e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    3592:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    return (bool)*nrf_usbd_getRegPtr_c((uint32_t)event);
    3596:	681b      	ldr	r3, [r3, #0]
                while (!nrf_usbd_event_check(nrfx_usbd_ep_to_endevent(ep)))
    3598:	2b00      	cmp	r3, #0
    359a:	d19d      	bne.n	34d8 <usbd_dmareq_process+0x2d4>
    NRFX_USBD_ASSERT_EP_VALID(ep);
    359c:	f005 040f 	and.w	r4, r5, #15
    35a0:	2c08      	cmp	r4, #8
    35a2:	d8e3      	bhi.n	356c <usbd_dmareq_process+0x368>
    return (NRF_USBD_EPIN_CHECK(ep) ? epin_endev : epout_endev)[NRF_USBD_EP_NR_GET(ep)];
    35a4:	f015 0f80 	tst.w	r5, #128	; 0x80
    35a8:	d1ee      	bne.n	3588 <usbd_dmareq_process+0x384>
    35aa:	4b05      	ldr	r3, [pc, #20]	; (35c0 <usbd_dmareq_process+0x3bc>)
    35ac:	e7ed      	b.n	358a <usbd_dmareq_process+0x386>
    35ae:	4770      	bx	lr
    35b0:	00011580 	.word	0x00011580
    35b4:	00011634 	.word	0x00011634
    35b8:	00011c28 	.word	0x00011c28
    35bc:	00010f8c 	.word	0x00010f8c
    35c0:	000115a0 	.word	0x000115a0

000035c4 <ev_epdata_handler>:
{
    35c4:	b510      	push	{r4, lr}
    return NRF_USBD->EPDATASTATUS;
    35c6:	4b1b      	ldr	r3, [pc, #108]	; (3634 <ev_epdata_handler+0x70>)
    35c8:	f8d3 446c 	ldr.w	r4, [r3, #1132]	; 0x46c
    NRF_USBD->EPDATASTATUS = flags;
    35cc:	f8c3 446c 	str.w	r4, [r3, #1132]	; 0x46c
  __ASM volatile ("isb 0xF":::"memory");
    35d0:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb 0xF":::"memory");
    35d4:	f3bf 8f4f 	dsb	sy
    return (*(uint32_t *)0x10000130UL == 0x8UL);
    35d8:	4b17      	ldr	r3, [pc, #92]	; (3638 <ev_epdata_handler+0x74>)
    35da:	681b      	ldr	r3, [r3, #0]
    return (nrfx_usbd_errata_type_52840() && (*(uint32_t *)0x10000134UL >= 0x1UL));
    35dc:	2b08      	cmp	r3, #8
    35de:	d00a      	beq.n	35f6 <ev_epdata_handler+0x32>
    35e0:	2300      	movs	r3, #0
    if (nrfx_usbd_errata_104())
    35e2:	b9c3      	cbnz	r3, 3616 <ev_epdata_handler+0x52>
        dataepstatus |= (m_simulated_dataepstatus &
    35e4:	4a15      	ldr	r2, [pc, #84]	; (363c <ev_epdata_handler+0x78>)
    35e6:	6813      	ldr	r3, [r2, #0]
    35e8:	f023 1101 	bic.w	r1, r3, #65537	; 0x10001
    35ec:	430c      	orrs	r4, r1
        m_simulated_dataepstatus &=
    35ee:	f003 1301 	and.w	r3, r3, #65537	; 0x10001
    35f2:	6013      	str	r3, [r2, #0]
    35f4:	e00f      	b.n	3616 <ev_epdata_handler+0x52>
    35f6:	4b12      	ldr	r3, [pc, #72]	; (3640 <ev_epdata_handler+0x7c>)
    35f8:	681b      	ldr	r3, [r3, #0]
    35fa:	2b00      	cmp	r3, #0
    35fc:	d0f1      	beq.n	35e2 <ev_epdata_handler+0x1e>
    35fe:	2301      	movs	r3, #1
    3600:	e7ef      	b.n	35e2 <ev_epdata_handler+0x1e>
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    3602:	f041 0080 	orr.w	r0, r1, #128	; 0x80
        dataepstatus &= ~(1UL << bitpos);
    3606:	b2db      	uxtb	r3, r3
    3608:	2201      	movs	r2, #1
    360a:	fa02 f303 	lsl.w	r3, r2, r3
    360e:	ea24 0403 	bic.w	r4, r4, r3
        (void)(usbd_ep_data_handler(ep, bitpos));
    3612:	f7fe ffe1 	bl	25d8 <usbd_ep_data_handler>
    while (dataepstatus)
    3616:	b154      	cbz	r4, 362e <ev_epdata_handler+0x6a>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
    3618:	fa94 f3a4 	rbit	r3, r4
        uint8_t bitpos    = __CLZ(__RBIT(dataepstatus));
    361c:	fab3 f383 	clz	r3, r3
    3620:	b2d9      	uxtb	r1, r3
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    3622:	290f      	cmp	r1, #15
    3624:	d9ed      	bls.n	3602 <ev_epdata_handler+0x3e>
        NRF_USBD_EPOUT(bitpos - NRFX_USBD_EPOUT_BITPOS_0) : NRF_USBD_EPIN(bitpos));
    3626:	f1a3 0010 	sub.w	r0, r3, #16
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    362a:	b2c0      	uxtb	r0, r0
    362c:	e7eb      	b.n	3606 <ev_epdata_handler+0x42>
        usbd_dmareq_process();
    362e:	f7ff fde9 	bl	3204 <usbd_dmareq_process>
}
    3632:	bd10      	pop	{r4, pc}
    3634:	40027000 	.word	0x40027000
    3638:	10000130 	.word	0x10000130
    363c:	20000520 	.word	0x20000520
    3640:	10000134 	.word	0x10000134

00003644 <ev_dma_epout1_handler>:
static void ev_dma_epout1_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT1); }
    3644:	b500      	push	{lr}
    3646:	b083      	sub	sp, #12
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    3648:	2300      	movs	r3, #0
    364a:	4a1c      	ldr	r2, [pc, #112]	; (36bc <ev_dma_epout1_handler+0x78>)
    364c:	6013      	str	r3, [r2, #0]
    m_dma_pending = false;
    364e:	4a1c      	ldr	r2, [pc, #112]	; (36c0 <ev_dma_epout1_handler+0x7c>)
    3650:	7013      	strb	r3, [r2, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    3652:	4b1c      	ldr	r3, [pc, #112]	; (36c4 <ev_dma_epout1_handler+0x80>)
    3654:	7f9b      	ldrb	r3, [r3, #30]
    3656:	2b03      	cmp	r3, #3
    3658:	d007      	beq.n	366a <ev_dma_epout1_handler+0x26>
    else if (p_state->handler.consumer == NULL)
    365a:	4b1a      	ldr	r3, [pc, #104]	; (36c4 <ev_dma_epout1_handler+0x80>)
    365c:	691b      	ldr	r3, [r3, #16]
    365e:	b193      	cbz	r3, 3686 <ev_dma_epout1_handler+0x42>
    usbd_dmareq_process();
    3660:	f7ff fdd0 	bl	3204 <usbd_dmareq_process>
static void ev_dma_epout1_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT1); }
    3664:	b003      	add	sp, #12
    3666:	f85d fb04 	ldr.w	pc, [sp], #4
    366a:	4b17      	ldr	r3, [pc, #92]	; (36c8 <ev_dma_epout1_handler+0x84>)
    366c:	f3bf 8f5b 	dmb	ish
    3670:	e853 2f00 	ldrex	r2, [r3]
    3674:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
    3678:	e843 2100 	strex	r1, r2, [r3]
    367c:	2900      	cmp	r1, #0
    367e:	d1f7      	bne.n	3670 <ev_dma_epout1_handler+0x2c>
    3680:	f3bf 8f5b 	dmb	ish
    3684:	e7ec      	b.n	3660 <ev_dma_epout1_handler+0x1c>
    3686:	4b10      	ldr	r3, [pc, #64]	; (36c8 <ev_dma_epout1_handler+0x84>)
    3688:	f3bf 8f5b 	dmb	ish
    368c:	e853 2f00 	ldrex	r2, [r3]
    3690:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
    3694:	e843 2100 	strex	r1, r2, [r3]
    3698:	2900      	cmp	r1, #0
    369a:	d1f7      	bne.n	368c <ev_dma_epout1_handler+0x48>
    369c:	f3bf 8f5b 	dmb	ish
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    36a0:	2306      	movs	r3, #6
    36a2:	f88d 3004 	strb.w	r3, [sp, #4]
    36a6:	2301      	movs	r3, #1
    36a8:	f88d 3006 	strb.w	r3, [sp, #6]
    36ac:	2300      	movs	r3, #0
    36ae:	f88d 3007 	strb.w	r3, [sp, #7]
        m_event_handler(&evt);
    36b2:	4b06      	ldr	r3, [pc, #24]	; (36cc <ev_dma_epout1_handler+0x88>)
    36b4:	681b      	ldr	r3, [r3, #0]
    36b6:	a801      	add	r0, sp, #4
    36b8:	4798      	blx	r3
    36ba:	e7d1      	b.n	3660 <ev_dma_epout1_handler+0x1c>
    36bc:	40027c1c 	.word	0x40027c1c
    36c0:	200027c9 	.word	0x200027c9
    36c4:	200003fc 	.word	0x200003fc
    36c8:	20000388 	.word	0x20000388
    36cc:	2000051c 	.word	0x2000051c

000036d0 <ev_dma_epout7_handler>:
static void ev_dma_epout7_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT7); }
    36d0:	b500      	push	{lr}
    36d2:	b083      	sub	sp, #12
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    36d4:	2300      	movs	r3, #0
    36d6:	4a1d      	ldr	r2, [pc, #116]	; (374c <ev_dma_epout7_handler+0x7c>)
    36d8:	6013      	str	r3, [r2, #0]
    m_dma_pending = false;
    36da:	4a1d      	ldr	r2, [pc, #116]	; (3750 <ev_dma_epout7_handler+0x80>)
    36dc:	7013      	strb	r3, [r2, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    36de:	4b1d      	ldr	r3, [pc, #116]	; (3754 <ev_dma_epout7_handler+0x84>)
    36e0:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
    36e4:	2b03      	cmp	r3, #3
    36e6:	d007      	beq.n	36f8 <ev_dma_epout7_handler+0x28>
    else if (p_state->handler.consumer == NULL)
    36e8:	4b1a      	ldr	r3, [pc, #104]	; (3754 <ev_dma_epout7_handler+0x84>)
    36ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    36ec:	b193      	cbz	r3, 3714 <ev_dma_epout7_handler+0x44>
    usbd_dmareq_process();
    36ee:	f7ff fd89 	bl	3204 <usbd_dmareq_process>
static void ev_dma_epout7_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT7); }
    36f2:	b003      	add	sp, #12
    36f4:	f85d fb04 	ldr.w	pc, [sp], #4
    36f8:	4b17      	ldr	r3, [pc, #92]	; (3758 <ev_dma_epout7_handler+0x88>)
    36fa:	f3bf 8f5b 	dmb	ish
    36fe:	e853 2f00 	ldrex	r2, [r3]
    3702:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
    3706:	e843 2100 	strex	r1, r2, [r3]
    370a:	2900      	cmp	r1, #0
    370c:	d1f7      	bne.n	36fe <ev_dma_epout7_handler+0x2e>
    370e:	f3bf 8f5b 	dmb	ish
    3712:	e7ec      	b.n	36ee <ev_dma_epout7_handler+0x1e>
    3714:	4b10      	ldr	r3, [pc, #64]	; (3758 <ev_dma_epout7_handler+0x88>)
    3716:	f3bf 8f5b 	dmb	ish
    371a:	e853 2f00 	ldrex	r2, [r3]
    371e:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
    3722:	e843 2100 	strex	r1, r2, [r3]
    3726:	2900      	cmp	r1, #0
    3728:	d1f7      	bne.n	371a <ev_dma_epout7_handler+0x4a>
    372a:	f3bf 8f5b 	dmb	ish
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    372e:	2306      	movs	r3, #6
    3730:	f88d 3004 	strb.w	r3, [sp, #4]
    3734:	2307      	movs	r3, #7
    3736:	f88d 3006 	strb.w	r3, [sp, #6]
    373a:	2300      	movs	r3, #0
    373c:	f88d 3007 	strb.w	r3, [sp, #7]
        m_event_handler(&evt);
    3740:	4b06      	ldr	r3, [pc, #24]	; (375c <ev_dma_epout7_handler+0x8c>)
    3742:	681b      	ldr	r3, [r3, #0]
    3744:	a801      	add	r0, sp, #4
    3746:	4798      	blx	r3
    3748:	e7d1      	b.n	36ee <ev_dma_epout7_handler+0x1e>
    374a:	bf00      	nop
    374c:	40027c1c 	.word	0x40027c1c
    3750:	200027c9 	.word	0x200027c9
    3754:	200003fc 	.word	0x200003fc
    3758:	20000388 	.word	0x20000388
    375c:	2000051c 	.word	0x2000051c

00003760 <ev_dma_epout6_handler>:
static void ev_dma_epout6_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT6); }
    3760:	b500      	push	{lr}
    3762:	b083      	sub	sp, #12
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    3764:	2300      	movs	r3, #0
    3766:	4a1c      	ldr	r2, [pc, #112]	; (37d8 <ev_dma_epout6_handler+0x78>)
    3768:	6013      	str	r3, [r2, #0]
    m_dma_pending = false;
    376a:	4a1c      	ldr	r2, [pc, #112]	; (37dc <ev_dma_epout6_handler+0x7c>)
    376c:	7013      	strb	r3, [r2, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    376e:	4b1c      	ldr	r3, [pc, #112]	; (37e0 <ev_dma_epout6_handler+0x80>)
    3770:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
    3774:	2b03      	cmp	r3, #3
    3776:	d007      	beq.n	3788 <ev_dma_epout6_handler+0x28>
    else if (p_state->handler.consumer == NULL)
    3778:	4b19      	ldr	r3, [pc, #100]	; (37e0 <ev_dma_epout6_handler+0x80>)
    377a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    377c:	b193      	cbz	r3, 37a4 <ev_dma_epout6_handler+0x44>
    usbd_dmareq_process();
    377e:	f7ff fd41 	bl	3204 <usbd_dmareq_process>
static void ev_dma_epout6_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT6); }
    3782:	b003      	add	sp, #12
    3784:	f85d fb04 	ldr.w	pc, [sp], #4
    3788:	4b16      	ldr	r3, [pc, #88]	; (37e4 <ev_dma_epout6_handler+0x84>)
    378a:	f3bf 8f5b 	dmb	ish
    378e:	e853 2f00 	ldrex	r2, [r3]
    3792:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
    3796:	e843 2100 	strex	r1, r2, [r3]
    379a:	2900      	cmp	r1, #0
    379c:	d1f7      	bne.n	378e <ev_dma_epout6_handler+0x2e>
    379e:	f3bf 8f5b 	dmb	ish
    37a2:	e7ec      	b.n	377e <ev_dma_epout6_handler+0x1e>
    37a4:	4b0f      	ldr	r3, [pc, #60]	; (37e4 <ev_dma_epout6_handler+0x84>)
    37a6:	f3bf 8f5b 	dmb	ish
    37aa:	e853 2f00 	ldrex	r2, [r3]
    37ae:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
    37b2:	e843 2100 	strex	r1, r2, [r3]
    37b6:	2900      	cmp	r1, #0
    37b8:	d1f7      	bne.n	37aa <ev_dma_epout6_handler+0x4a>
    37ba:	f3bf 8f5b 	dmb	ish
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    37be:	2306      	movs	r3, #6
    37c0:	f88d 3004 	strb.w	r3, [sp, #4]
    37c4:	f88d 3006 	strb.w	r3, [sp, #6]
    37c8:	2300      	movs	r3, #0
    37ca:	f88d 3007 	strb.w	r3, [sp, #7]
        m_event_handler(&evt);
    37ce:	4b06      	ldr	r3, [pc, #24]	; (37e8 <ev_dma_epout6_handler+0x88>)
    37d0:	681b      	ldr	r3, [r3, #0]
    37d2:	a801      	add	r0, sp, #4
    37d4:	4798      	blx	r3
    37d6:	e7d2      	b.n	377e <ev_dma_epout6_handler+0x1e>
    37d8:	40027c1c 	.word	0x40027c1c
    37dc:	200027c9 	.word	0x200027c9
    37e0:	200003fc 	.word	0x200003fc
    37e4:	20000388 	.word	0x20000388
    37e8:	2000051c 	.word	0x2000051c

000037ec <ev_dma_epout5_handler>:
static void ev_dma_epout5_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT5); }
    37ec:	b500      	push	{lr}
    37ee:	b083      	sub	sp, #12
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    37f0:	2300      	movs	r3, #0
    37f2:	4a1d      	ldr	r2, [pc, #116]	; (3868 <ev_dma_epout5_handler+0x7c>)
    37f4:	6013      	str	r3, [r2, #0]
    m_dma_pending = false;
    37f6:	4a1d      	ldr	r2, [pc, #116]	; (386c <ev_dma_epout5_handler+0x80>)
    37f8:	7013      	strb	r3, [r2, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    37fa:	4b1d      	ldr	r3, [pc, #116]	; (3870 <ev_dma_epout5_handler+0x84>)
    37fc:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
    3800:	2b03      	cmp	r3, #3
    3802:	d007      	beq.n	3814 <ev_dma_epout5_handler+0x28>
    else if (p_state->handler.consumer == NULL)
    3804:	4b1a      	ldr	r3, [pc, #104]	; (3870 <ev_dma_epout5_handler+0x84>)
    3806:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    3808:	b193      	cbz	r3, 3830 <ev_dma_epout5_handler+0x44>
    usbd_dmareq_process();
    380a:	f7ff fcfb 	bl	3204 <usbd_dmareq_process>
static void ev_dma_epout5_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT5); }
    380e:	b003      	add	sp, #12
    3810:	f85d fb04 	ldr.w	pc, [sp], #4
    3814:	4b17      	ldr	r3, [pc, #92]	; (3874 <ev_dma_epout5_handler+0x88>)
    3816:	f3bf 8f5b 	dmb	ish
    381a:	e853 2f00 	ldrex	r2, [r3]
    381e:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
    3822:	e843 2100 	strex	r1, r2, [r3]
    3826:	2900      	cmp	r1, #0
    3828:	d1f7      	bne.n	381a <ev_dma_epout5_handler+0x2e>
    382a:	f3bf 8f5b 	dmb	ish
    382e:	e7ec      	b.n	380a <ev_dma_epout5_handler+0x1e>
    3830:	4b10      	ldr	r3, [pc, #64]	; (3874 <ev_dma_epout5_handler+0x88>)
    3832:	f3bf 8f5b 	dmb	ish
    3836:	e853 2f00 	ldrex	r2, [r3]
    383a:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
    383e:	e843 2100 	strex	r1, r2, [r3]
    3842:	2900      	cmp	r1, #0
    3844:	d1f7      	bne.n	3836 <ev_dma_epout5_handler+0x4a>
    3846:	f3bf 8f5b 	dmb	ish
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    384a:	2306      	movs	r3, #6
    384c:	f88d 3004 	strb.w	r3, [sp, #4]
    3850:	2305      	movs	r3, #5
    3852:	f88d 3006 	strb.w	r3, [sp, #6]
    3856:	2300      	movs	r3, #0
    3858:	f88d 3007 	strb.w	r3, [sp, #7]
        m_event_handler(&evt);
    385c:	4b06      	ldr	r3, [pc, #24]	; (3878 <ev_dma_epout5_handler+0x8c>)
    385e:	681b      	ldr	r3, [r3, #0]
    3860:	a801      	add	r0, sp, #4
    3862:	4798      	blx	r3
    3864:	e7d1      	b.n	380a <ev_dma_epout5_handler+0x1e>
    3866:	bf00      	nop
    3868:	40027c1c 	.word	0x40027c1c
    386c:	200027c9 	.word	0x200027c9
    3870:	200003fc 	.word	0x200003fc
    3874:	20000388 	.word	0x20000388
    3878:	2000051c 	.word	0x2000051c

0000387c <ev_dma_epout4_handler>:
static void ev_dma_epout4_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT4); }
    387c:	b500      	push	{lr}
    387e:	b083      	sub	sp, #12
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    3880:	2300      	movs	r3, #0
    3882:	4a1d      	ldr	r2, [pc, #116]	; (38f8 <ev_dma_epout4_handler+0x7c>)
    3884:	6013      	str	r3, [r2, #0]
    m_dma_pending = false;
    3886:	4a1d      	ldr	r2, [pc, #116]	; (38fc <ev_dma_epout4_handler+0x80>)
    3888:	7013      	strb	r3, [r2, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    388a:	4b1d      	ldr	r3, [pc, #116]	; (3900 <ev_dma_epout4_handler+0x84>)
    388c:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
    3890:	2b03      	cmp	r3, #3
    3892:	d007      	beq.n	38a4 <ev_dma_epout4_handler+0x28>
    else if (p_state->handler.consumer == NULL)
    3894:	4b1a      	ldr	r3, [pc, #104]	; (3900 <ev_dma_epout4_handler+0x84>)
    3896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    3898:	b193      	cbz	r3, 38c0 <ev_dma_epout4_handler+0x44>
    usbd_dmareq_process();
    389a:	f7ff fcb3 	bl	3204 <usbd_dmareq_process>
static void ev_dma_epout4_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT4); }
    389e:	b003      	add	sp, #12
    38a0:	f85d fb04 	ldr.w	pc, [sp], #4
    38a4:	4b17      	ldr	r3, [pc, #92]	; (3904 <ev_dma_epout4_handler+0x88>)
    38a6:	f3bf 8f5b 	dmb	ish
    38aa:	e853 2f00 	ldrex	r2, [r3]
    38ae:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
    38b2:	e843 2100 	strex	r1, r2, [r3]
    38b6:	2900      	cmp	r1, #0
    38b8:	d1f7      	bne.n	38aa <ev_dma_epout4_handler+0x2e>
    38ba:	f3bf 8f5b 	dmb	ish
    38be:	e7ec      	b.n	389a <ev_dma_epout4_handler+0x1e>
    38c0:	4b10      	ldr	r3, [pc, #64]	; (3904 <ev_dma_epout4_handler+0x88>)
    38c2:	f3bf 8f5b 	dmb	ish
    38c6:	e853 2f00 	ldrex	r2, [r3]
    38ca:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
    38ce:	e843 2100 	strex	r1, r2, [r3]
    38d2:	2900      	cmp	r1, #0
    38d4:	d1f7      	bne.n	38c6 <ev_dma_epout4_handler+0x4a>
    38d6:	f3bf 8f5b 	dmb	ish
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    38da:	2306      	movs	r3, #6
    38dc:	f88d 3004 	strb.w	r3, [sp, #4]
    38e0:	2304      	movs	r3, #4
    38e2:	f88d 3006 	strb.w	r3, [sp, #6]
    38e6:	2300      	movs	r3, #0
    38e8:	f88d 3007 	strb.w	r3, [sp, #7]
        m_event_handler(&evt);
    38ec:	4b06      	ldr	r3, [pc, #24]	; (3908 <ev_dma_epout4_handler+0x8c>)
    38ee:	681b      	ldr	r3, [r3, #0]
    38f0:	a801      	add	r0, sp, #4
    38f2:	4798      	blx	r3
    38f4:	e7d1      	b.n	389a <ev_dma_epout4_handler+0x1e>
    38f6:	bf00      	nop
    38f8:	40027c1c 	.word	0x40027c1c
    38fc:	200027c9 	.word	0x200027c9
    3900:	200003fc 	.word	0x200003fc
    3904:	20000388 	.word	0x20000388
    3908:	2000051c 	.word	0x2000051c

0000390c <ev_dma_epout3_handler>:
static void ev_dma_epout3_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT3); }
    390c:	b500      	push	{lr}
    390e:	b083      	sub	sp, #12
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    3910:	2300      	movs	r3, #0
    3912:	4a1d      	ldr	r2, [pc, #116]	; (3988 <ev_dma_epout3_handler+0x7c>)
    3914:	6013      	str	r3, [r2, #0]
    m_dma_pending = false;
    3916:	4a1d      	ldr	r2, [pc, #116]	; (398c <ev_dma_epout3_handler+0x80>)
    3918:	7013      	strb	r3, [r2, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    391a:	4b1d      	ldr	r3, [pc, #116]	; (3990 <ev_dma_epout3_handler+0x84>)
    391c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
    3920:	2b03      	cmp	r3, #3
    3922:	d007      	beq.n	3934 <ev_dma_epout3_handler+0x28>
    else if (p_state->handler.consumer == NULL)
    3924:	4b1a      	ldr	r3, [pc, #104]	; (3990 <ev_dma_epout3_handler+0x84>)
    3926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    3928:	b193      	cbz	r3, 3950 <ev_dma_epout3_handler+0x44>
    usbd_dmareq_process();
    392a:	f7ff fc6b 	bl	3204 <usbd_dmareq_process>
static void ev_dma_epout3_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT3); }
    392e:	b003      	add	sp, #12
    3930:	f85d fb04 	ldr.w	pc, [sp], #4
    3934:	4b17      	ldr	r3, [pc, #92]	; (3994 <ev_dma_epout3_handler+0x88>)
    3936:	f3bf 8f5b 	dmb	ish
    393a:	e853 2f00 	ldrex	r2, [r3]
    393e:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
    3942:	e843 2100 	strex	r1, r2, [r3]
    3946:	2900      	cmp	r1, #0
    3948:	d1f7      	bne.n	393a <ev_dma_epout3_handler+0x2e>
    394a:	f3bf 8f5b 	dmb	ish
    394e:	e7ec      	b.n	392a <ev_dma_epout3_handler+0x1e>
    3950:	4b10      	ldr	r3, [pc, #64]	; (3994 <ev_dma_epout3_handler+0x88>)
    3952:	f3bf 8f5b 	dmb	ish
    3956:	e853 2f00 	ldrex	r2, [r3]
    395a:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
    395e:	e843 2100 	strex	r1, r2, [r3]
    3962:	2900      	cmp	r1, #0
    3964:	d1f7      	bne.n	3956 <ev_dma_epout3_handler+0x4a>
    3966:	f3bf 8f5b 	dmb	ish
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    396a:	2306      	movs	r3, #6
    396c:	f88d 3004 	strb.w	r3, [sp, #4]
    3970:	2303      	movs	r3, #3
    3972:	f88d 3006 	strb.w	r3, [sp, #6]
    3976:	2300      	movs	r3, #0
    3978:	f88d 3007 	strb.w	r3, [sp, #7]
        m_event_handler(&evt);
    397c:	4b06      	ldr	r3, [pc, #24]	; (3998 <ev_dma_epout3_handler+0x8c>)
    397e:	681b      	ldr	r3, [r3, #0]
    3980:	a801      	add	r0, sp, #4
    3982:	4798      	blx	r3
    3984:	e7d1      	b.n	392a <ev_dma_epout3_handler+0x1e>
    3986:	bf00      	nop
    3988:	40027c1c 	.word	0x40027c1c
    398c:	200027c9 	.word	0x200027c9
    3990:	200003fc 	.word	0x200003fc
    3994:	20000388 	.word	0x20000388
    3998:	2000051c 	.word	0x2000051c

0000399c <ev_dma_epout2_handler>:
static void ev_dma_epout2_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT2); }
    399c:	b500      	push	{lr}
    399e:	b083      	sub	sp, #12
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    39a0:	2300      	movs	r3, #0
    39a2:	4a1d      	ldr	r2, [pc, #116]	; (3a18 <ev_dma_epout2_handler+0x7c>)
    39a4:	6013      	str	r3, [r2, #0]
    m_dma_pending = false;
    39a6:	4a1d      	ldr	r2, [pc, #116]	; (3a1c <ev_dma_epout2_handler+0x80>)
    39a8:	7013      	strb	r3, [r2, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    39aa:	4b1d      	ldr	r3, [pc, #116]	; (3a20 <ev_dma_epout2_handler+0x84>)
    39ac:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
    39b0:	2b03      	cmp	r3, #3
    39b2:	d007      	beq.n	39c4 <ev_dma_epout2_handler+0x28>
    else if (p_state->handler.consumer == NULL)
    39b4:	4b1a      	ldr	r3, [pc, #104]	; (3a20 <ev_dma_epout2_handler+0x84>)
    39b6:	6a1b      	ldr	r3, [r3, #32]
    39b8:	b193      	cbz	r3, 39e0 <ev_dma_epout2_handler+0x44>
    usbd_dmareq_process();
    39ba:	f7ff fc23 	bl	3204 <usbd_dmareq_process>
static void ev_dma_epout2_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT2); }
    39be:	b003      	add	sp, #12
    39c0:	f85d fb04 	ldr.w	pc, [sp], #4
    39c4:	4b17      	ldr	r3, [pc, #92]	; (3a24 <ev_dma_epout2_handler+0x88>)
    39c6:	f3bf 8f5b 	dmb	ish
    39ca:	e853 2f00 	ldrex	r2, [r3]
    39ce:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
    39d2:	e843 2100 	strex	r1, r2, [r3]
    39d6:	2900      	cmp	r1, #0
    39d8:	d1f7      	bne.n	39ca <ev_dma_epout2_handler+0x2e>
    39da:	f3bf 8f5b 	dmb	ish
    39de:	e7ec      	b.n	39ba <ev_dma_epout2_handler+0x1e>
    39e0:	4b10      	ldr	r3, [pc, #64]	; (3a24 <ev_dma_epout2_handler+0x88>)
    39e2:	f3bf 8f5b 	dmb	ish
    39e6:	e853 2f00 	ldrex	r2, [r3]
    39ea:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
    39ee:	e843 2100 	strex	r1, r2, [r3]
    39f2:	2900      	cmp	r1, #0
    39f4:	d1f7      	bne.n	39e6 <ev_dma_epout2_handler+0x4a>
    39f6:	f3bf 8f5b 	dmb	ish
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    39fa:	2306      	movs	r3, #6
    39fc:	f88d 3004 	strb.w	r3, [sp, #4]
    3a00:	2302      	movs	r3, #2
    3a02:	f88d 3006 	strb.w	r3, [sp, #6]
    3a06:	2300      	movs	r3, #0
    3a08:	f88d 3007 	strb.w	r3, [sp, #7]
        m_event_handler(&evt);
    3a0c:	4b06      	ldr	r3, [pc, #24]	; (3a28 <ev_dma_epout2_handler+0x8c>)
    3a0e:	681b      	ldr	r3, [r3, #0]
    3a10:	a801      	add	r0, sp, #4
    3a12:	4798      	blx	r3
    3a14:	e7d1      	b.n	39ba <ev_dma_epout2_handler+0x1e>
    3a16:	bf00      	nop
    3a18:	40027c1c 	.word	0x40027c1c
    3a1c:	200027c9 	.word	0x200027c9
    3a20:	200003fc 	.word	0x200003fc
    3a24:	20000388 	.word	0x20000388
    3a28:	2000051c 	.word	0x2000051c

00003a2c <nrfx_usbd_ep_stall>:
{
    return (0 != ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK)) & (1U << ep2bit(ep))));
}

void nrfx_usbd_ep_stall(nrfx_usbd_ep_t ep)
{
    3a2c:	b538      	push	{r3, r4, r5, lr}
    3a2e:	4604      	mov	r4, r0
    NRFX_USBD_ASSERT_EP_VALID(ep);
    3a30:	f000 030f 	and.w	r3, r0, #15
    3a34:	2b08      	cmp	r3, #8
    3a36:	d80c      	bhi.n	3a52 <nrfx_usbd_ep_stall+0x26>
    NRFX_ASSERT(!NRF_USBD_EPISO_CHECK(ep));
    3a38:	f014 0f08 	tst.w	r4, #8
    3a3c:	d117      	bne.n	3a6e <nrfx_usbd_ep_stall+0x42>
    NRF_USBD->EPSTALL = (USBD_EPSTALL_STALL_Stall << USBD_EPSTALL_STALL_Pos) | ep;
    3a3e:	f444 7480 	orr.w	r4, r4, #256	; 0x100
    3a42:	4b12      	ldr	r3, [pc, #72]	; (3a8c <nrfx_usbd_ep_stall+0x60>)
    3a44:	f8c3 4518 	str.w	r4, [r3, #1304]	; 0x518
  __ASM volatile ("isb 0xF":::"memory");
    3a48:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb 0xF":::"memory");
    3a4c:	f3bf 8f4f 	dsb	sy
    NRFX_LOG_DEBUG("USB: EP %x stalled.", ep);
    nrf_usbd_ep_stall(ep_to_hal(ep));
}
    3a50:	bd38      	pop	{r3, r4, r5, pc}
    NRFX_USBD_ASSERT_EP_VALID(ep);
    3a52:	4d0f      	ldr	r5, [pc, #60]	; (3a90 <nrfx_usbd_ep_stall+0x64>)
    3a54:	f240 2385 	movw	r3, #645	; 0x285
    3a58:	462a      	mov	r2, r5
    3a5a:	490e      	ldr	r1, [pc, #56]	; (3a94 <nrfx_usbd_ep_stall+0x68>)
    3a5c:	480e      	ldr	r0, [pc, #56]	; (3a98 <nrfx_usbd_ep_stall+0x6c>)
    3a5e:	f00b ff0e 	bl	f87e <printk>
    3a62:	f240 2185 	movw	r1, #645	; 0x285
    3a66:	4628      	mov	r0, r5
    3a68:	f00b ff8f 	bl	f98a <assert_post_action>
    3a6c:	e7e4      	b.n	3a38 <nrfx_usbd_ep_stall+0xc>
    NRFX_ASSERT(!NRF_USBD_EPISO_CHECK(ep));
    3a6e:	4d0b      	ldr	r5, [pc, #44]	; (3a9c <nrfx_usbd_ep_stall+0x70>)
    3a70:	f240 43e7 	movw	r3, #1255	; 0x4e7
    3a74:	462a      	mov	r2, r5
    3a76:	490a      	ldr	r1, [pc, #40]	; (3aa0 <nrfx_usbd_ep_stall+0x74>)
    3a78:	4807      	ldr	r0, [pc, #28]	; (3a98 <nrfx_usbd_ep_stall+0x6c>)
    3a7a:	f00b ff00 	bl	f87e <printk>
    3a7e:	f240 41e7 	movw	r1, #1255	; 0x4e7
    3a82:	4628      	mov	r0, r5
    3a84:	f00b ff81 	bl	f98a <assert_post_action>
    3a88:	e7d9      	b.n	3a3e <nrfx_usbd_ep_stall+0x12>
    3a8a:	bf00      	nop
    3a8c:	40027000 	.word	0x40027000
    3a90:	00011634 	.word	0x00011634
    3a94:	00011c28 	.word	0x00011c28
    3a98:	00010f8c 	.word	0x00010f8c
    3a9c:	000116f8 	.word	0x000116f8
    3aa0:	00011d1c 	.word	0x00011d1c

00003aa4 <nrfx_usbd_ep_stall_check>:
    }
    nrf_usbd_ep_unstall(ep_to_hal(ep));
}

bool nrfx_usbd_ep_stall_check(nrfx_usbd_ep_t ep)
{
    3aa4:	b538      	push	{r3, r4, r5, lr}
    3aa6:	4604      	mov	r4, r0
    NRFX_USBD_ASSERT_EP_VALID(ep);
    3aa8:	f000 030f 	and.w	r3, r0, #15
    3aac:	2b08      	cmp	r3, #8
    3aae:	d804      	bhi.n	3aba <nrfx_usbd_ep_stall_check+0x16>
    if (NRF_USBD_EPISO_CHECK(ep))
    3ab0:	f014 0f08 	tst.w	r4, #8
    3ab4:	d00f      	beq.n	3ad6 <nrfx_usbd_ep_stall_check+0x32>
        return false;
    3ab6:	2000      	movs	r0, #0
    return nrf_usbd_ep_is_stall(ep_to_hal(ep));
}
    3ab8:	bd38      	pop	{r3, r4, r5, pc}
    NRFX_USBD_ASSERT_EP_VALID(ep);
    3aba:	4d24      	ldr	r5, [pc, #144]	; (3b4c <nrfx_usbd_ep_stall_check+0xa8>)
    3abc:	f240 2385 	movw	r3, #645	; 0x285
    3ac0:	462a      	mov	r2, r5
    3ac2:	4923      	ldr	r1, [pc, #140]	; (3b50 <nrfx_usbd_ep_stall_check+0xac>)
    3ac4:	4823      	ldr	r0, [pc, #140]	; (3b54 <nrfx_usbd_ep_stall_check+0xb0>)
    3ac6:	f00b feda 	bl	f87e <printk>
    3aca:	f240 2185 	movw	r1, #645	; 0x285
    3ace:	4628      	mov	r0, r5
    3ad0:	f00b ff5b 	bl	f98a <assert_post_action>
    3ad4:	e7ec      	b.n	3ab0 <nrfx_usbd_ep_stall_check+0xc>
    uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
    3ad6:	f004 050f 	and.w	r5, r4, #15
    if (NRF_USBD_EPIN_CHECK(ep))
    3ada:	f014 0f80 	tst.w	r4, #128	; 0x80
    3ade:	d10f      	bne.n	3b00 <nrfx_usbd_ep_stall_check+0x5c>
        NRFX_ASSERT(epnr < NRFX_ARRAY_SIZE(NRF_USBD->HALTED.EPOUT));
    3ae0:	f014 0f08 	tst.w	r4, #8
    3ae4:	d123      	bne.n	3b2e <nrfx_usbd_ep_stall_check+0x8a>
        return NRF_USBD->HALTED.EPOUT[epnr];
    3ae6:	f505 7388 	add.w	r3, r5, #272	; 0x110
    3aea:	009b      	lsls	r3, r3, #2
    3aec:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    3af0:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    3af4:	6858      	ldr	r0, [r3, #4]
    return USBD_HALTED_EPOUT_GETSTATUS_Halted == nrf_usbd_haltedep(ep);
    3af6:	2801      	cmp	r0, #1
    3af8:	bf14      	ite	ne
    3afa:	2000      	movne	r0, #0
    3afc:	2001      	moveq	r0, #1
    3afe:	e7db      	b.n	3ab8 <nrfx_usbd_ep_stall_check+0x14>
        NRFX_ASSERT(epnr < NRFX_ARRAY_SIZE(NRF_USBD->HALTED.EPIN));
    3b00:	f014 0f08 	tst.w	r4, #8
    3b04:	d105      	bne.n	3b12 <nrfx_usbd_ep_stall_check+0x6e>
        return NRF_USBD->HALTED.EPIN[epnr];
    3b06:	f505 7584 	add.w	r5, r5, #264	; 0x108
    3b0a:	4b13      	ldr	r3, [pc, #76]	; (3b58 <nrfx_usbd_ep_stall_check+0xb4>)
    3b0c:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
    3b10:	e7f1      	b.n	3af6 <nrfx_usbd_ep_stall_check+0x52>
        NRFX_ASSERT(epnr < NRFX_ARRAY_SIZE(NRF_USBD->HALTED.EPIN));
    3b12:	4c12      	ldr	r4, [pc, #72]	; (3b5c <nrfx_usbd_ep_stall_check+0xb8>)
    3b14:	f240 33ff 	movw	r3, #1023	; 0x3ff
    3b18:	4622      	mov	r2, r4
    3b1a:	4911      	ldr	r1, [pc, #68]	; (3b60 <nrfx_usbd_ep_stall_check+0xbc>)
    3b1c:	480d      	ldr	r0, [pc, #52]	; (3b54 <nrfx_usbd_ep_stall_check+0xb0>)
    3b1e:	f00b feae 	bl	f87e <printk>
    3b22:	f240 31ff 	movw	r1, #1023	; 0x3ff
    3b26:	4620      	mov	r0, r4
    3b28:	f00b ff2f 	bl	f98a <assert_post_action>
    3b2c:	e7eb      	b.n	3b06 <nrfx_usbd_ep_stall_check+0x62>
        NRFX_ASSERT(epnr < NRFX_ARRAY_SIZE(NRF_USBD->HALTED.EPOUT));
    3b2e:	4c0b      	ldr	r4, [pc, #44]	; (3b5c <nrfx_usbd_ep_stall_check+0xb8>)
    3b30:	f240 4304 	movw	r3, #1028	; 0x404
    3b34:	4622      	mov	r2, r4
    3b36:	490b      	ldr	r1, [pc, #44]	; (3b64 <nrfx_usbd_ep_stall_check+0xc0>)
    3b38:	4806      	ldr	r0, [pc, #24]	; (3b54 <nrfx_usbd_ep_stall_check+0xb0>)
    3b3a:	f00b fea0 	bl	f87e <printk>
    3b3e:	f240 4104 	movw	r1, #1028	; 0x404
    3b42:	4620      	mov	r0, r4
    3b44:	f00b ff21 	bl	f98a <assert_post_action>
    3b48:	e7cd      	b.n	3ae6 <nrfx_usbd_ep_stall_check+0x42>
    3b4a:	bf00      	nop
    3b4c:	00011634 	.word	0x00011634
    3b50:	00011c28 	.word	0x00011c28
    3b54:	00010f8c 	.word	0x00010f8c
    3b58:	40027000 	.word	0x40027000
    3b5c:	000116f8 	.word	0x000116f8
    3b60:	000118a0 	.word	0x000118a0
    3b64:	0001191c 	.word	0x0001191c

00003b68 <nrfx_usbd_setup_get>:
{
    nrf_usbd_dtoggle_set(ep, NRF_USBD_DTOGGLE_DATA0);
}

void nrfx_usbd_setup_get(nrfx_usbd_setup_t * p_setup)
{
    3b68:	b510      	push	{r4, lr}
    3b6a:	4604      	mov	r4, r0
    memset(p_setup, 0, sizeof(nrfx_usbd_setup_t));
    3b6c:	2208      	movs	r2, #8
    3b6e:	2100      	movs	r1, #0
    3b70:	f00c fd01 	bl	10576 <memset>
    return (uint8_t)(NRF_USBD->BMREQUESTTYPE);
    3b74:	4b11      	ldr	r3, [pc, #68]	; (3bbc <nrfx_usbd_setup_get+0x54>)
    3b76:	f8d3 2480 	ldr.w	r2, [r3, #1152]	; 0x480
    p_setup->bmRequestType = nrf_usbd_setup_bmrequesttype_get();
    3b7a:	7022      	strb	r2, [r4, #0]
    return (uint8_t)(NRF_USBD->BREQUEST);
    3b7c:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
    p_setup->bRequest      = nrf_usbd_setup_brequest_get();
    3b80:	7062      	strb	r2, [r4, #1]
    const uint16_t val = NRF_USBD->WVALUEL;
    3b82:	f8d3 2488 	ldr.w	r2, [r3, #1160]	; 0x488
    3b86:	b292      	uxth	r2, r2
    return (uint16_t)(val | ((NRF_USBD->WVALUEH) << 8));
    3b88:	f8d3 148c 	ldr.w	r1, [r3, #1164]	; 0x48c
    3b8c:	0209      	lsls	r1, r1, #8
    3b8e:	b289      	uxth	r1, r1
    3b90:	430a      	orrs	r2, r1
    p_setup->wValue        = nrf_usbd_setup_wvalue_get();
    3b92:	8062      	strh	r2, [r4, #2]
    const uint16_t val = NRF_USBD->WINDEXL;
    3b94:	f8d3 2490 	ldr.w	r2, [r3, #1168]	; 0x490
    3b98:	b292      	uxth	r2, r2
    return (uint16_t)(val | ((NRF_USBD->WINDEXH) << 8));
    3b9a:	f8d3 1494 	ldr.w	r1, [r3, #1172]	; 0x494
    3b9e:	0209      	lsls	r1, r1, #8
    3ba0:	b289      	uxth	r1, r1
    3ba2:	430a      	orrs	r2, r1
    p_setup->wIndex        = nrf_usbd_setup_windex_get();
    3ba4:	80a2      	strh	r2, [r4, #4]
    const uint16_t val = NRF_USBD->WLENGTHL;
    3ba6:	f8d3 2498 	ldr.w	r2, [r3, #1176]	; 0x498
    3baa:	b292      	uxth	r2, r2
    return (uint16_t)(val | ((NRF_USBD->WLENGTHH) << 8));
    3bac:	f8d3 349c 	ldr.w	r3, [r3, #1180]	; 0x49c
    3bb0:	021b      	lsls	r3, r3, #8
    3bb2:	b29b      	uxth	r3, r3
    3bb4:	4313      	orrs	r3, r2
    p_setup->wLength       = nrf_usbd_setup_wlength_get();
    3bb6:	80e3      	strh	r3, [r4, #6]
}
    3bb8:	bd10      	pop	{r4, pc}
    3bba:	bf00      	nop
    3bbc:	40027000 	.word	0x40027000

00003bc0 <nrfx_usbd_setup_data_clear>:
    return (*(uint32_t *)0x10000130UL == 0x8UL);
    3bc0:	4b12      	ldr	r3, [pc, #72]	; (3c0c <nrfx_usbd_setup_data_clear+0x4c>)
    3bc2:	681b      	ldr	r3, [r3, #0]
    return (nrfx_usbd_errata_type_52840() && (*(uint32_t *)0x10000134UL >= 0x1UL));
    3bc4:	2b08      	cmp	r3, #8
    3bc6:	d013      	beq.n	3bf0 <nrfx_usbd_setup_data_clear+0x30>
    3bc8:	2300      	movs	r3, #0

void nrfx_usbd_setup_data_clear(void)
{
    if (nrfx_usbd_errata_104())
    3bca:	b9bb      	cbnz	r3, 3bfc <nrfx_usbd_setup_data_clear+0x3c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    3bcc:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
    3bd0:	b672      	cpsid	i
    *(nrf_usbd_getRegPtr((uint32_t)task)) = 1UL;
    3bd2:	4b0f      	ldr	r3, [pc, #60]	; (3c10 <nrfx_usbd_setup_data_clear+0x50>)
    3bd4:	2201      	movs	r2, #1
    3bd6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
    3bd8:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb 0xF":::"memory");
    3bdc:	f3bf 8f4f 	dsb	sy
    3be0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
    3be2:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb 0xF":::"memory");
    3be6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    3bea:	f381 8810 	msr	PRIMASK, r1
    3bee:	4770      	bx	lr
    3bf0:	4b08      	ldr	r3, [pc, #32]	; (3c14 <nrfx_usbd_setup_data_clear+0x54>)
    3bf2:	681b      	ldr	r3, [r3, #0]
    3bf4:	2b00      	cmp	r3, #0
    3bf6:	d0e8      	beq.n	3bca <nrfx_usbd_setup_data_clear+0xa>
    3bf8:	2301      	movs	r3, #1
    3bfa:	e7e6      	b.n	3bca <nrfx_usbd_setup_data_clear+0xa>
    3bfc:	4b04      	ldr	r3, [pc, #16]	; (3c10 <nrfx_usbd_setup_data_clear+0x50>)
    3bfe:	2201      	movs	r2, #1
    3c00:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
    3c02:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb 0xF":::"memory");
    3c06:	f3bf 8f4f 	dsb	sy
    }
    else
    {
        nrf_usbd_task_trigger(NRF_USBD_TASK_EP0RCVOUT);
    }
}
    3c0a:	4770      	bx	lr
    3c0c:	10000130 	.word	0x10000130
    3c10:	4002704c 	.word	0x4002704c
    3c14:	10000134 	.word	0x10000134

00003c18 <ev_dma_epout0_handler>:
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    3c18:	2300      	movs	r3, #0
    3c1a:	4a1d      	ldr	r2, [pc, #116]	; (3c90 <ev_dma_epout0_handler+0x78>)
    3c1c:	6013      	str	r3, [r2, #0]
    m_dma_pending = false;
    3c1e:	4a1d      	ldr	r2, [pc, #116]	; (3c94 <ev_dma_epout0_handler+0x7c>)
    3c20:	7013      	strb	r3, [r2, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    3c22:	4b1d      	ldr	r3, [pc, #116]	; (3c98 <ev_dma_epout0_handler+0x80>)
    3c24:	7b9b      	ldrb	r3, [r3, #14]
    3c26:	2b03      	cmp	r3, #3
    3c28:	d007      	beq.n	3c3a <ev_dma_epout0_handler+0x22>
static void ev_dma_epout0_handler(void) { nrf_usbd_ep0out_dma_handler(); }
    3c2a:	b500      	push	{lr}
    3c2c:	b083      	sub	sp, #12
    else if (p_state->handler.consumer == NULL)
    3c2e:	4b1a      	ldr	r3, [pc, #104]	; (3c98 <ev_dma_epout0_handler+0x80>)
    3c30:	681b      	ldr	r3, [r3, #0]
    3c32:	b183      	cbz	r3, 3c56 <ev_dma_epout0_handler+0x3e>
        nrfx_usbd_setup_data_clear();
    3c34:	f7ff ffc4 	bl	3bc0 <nrfx_usbd_setup_data_clear>
static void ev_dma_epout0_handler(void) { nrf_usbd_ep0out_dma_handler(); }
    3c38:	e026      	b.n	3c88 <ev_dma_epout0_handler+0x70>
    3c3a:	4b18      	ldr	r3, [pc, #96]	; (3c9c <ev_dma_epout0_handler+0x84>)
    3c3c:	f3bf 8f5b 	dmb	ish
    3c40:	e853 2f00 	ldrex	r2, [r3]
    3c44:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
    3c48:	e843 2100 	strex	r1, r2, [r3]
    3c4c:	2900      	cmp	r1, #0
    3c4e:	d1f7      	bne.n	3c40 <ev_dma_epout0_handler+0x28>
    3c50:	f3bf 8f5b 	dmb	ish
    3c54:	4770      	bx	lr
    3c56:	4b11      	ldr	r3, [pc, #68]	; (3c9c <ev_dma_epout0_handler+0x84>)
    3c58:	f3bf 8f5b 	dmb	ish
    3c5c:	e853 2f00 	ldrex	r2, [r3]
    3c60:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
    3c64:	e843 2100 	strex	r1, r2, [r3]
    3c68:	2900      	cmp	r1, #0
    3c6a:	d1f7      	bne.n	3c5c <ev_dma_epout0_handler+0x44>
    3c6c:	f3bf 8f5b 	dmb	ish
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    3c70:	2306      	movs	r3, #6
    3c72:	f88d 3004 	strb.w	r3, [sp, #4]
    3c76:	2300      	movs	r3, #0
    3c78:	f88d 3006 	strb.w	r3, [sp, #6]
    3c7c:	f88d 3007 	strb.w	r3, [sp, #7]
        m_event_handler(&evt);
    3c80:	4b07      	ldr	r3, [pc, #28]	; (3ca0 <ev_dma_epout0_handler+0x88>)
    3c82:	681b      	ldr	r3, [r3, #0]
    3c84:	a801      	add	r0, sp, #4
    3c86:	4798      	blx	r3
static void ev_dma_epout0_handler(void) { nrf_usbd_ep0out_dma_handler(); }
    3c88:	b003      	add	sp, #12
    3c8a:	f85d fb04 	ldr.w	pc, [sp], #4
    3c8e:	bf00      	nop
    3c90:	40027c1c 	.word	0x40027c1c
    3c94:	200027c9 	.word	0x200027c9
    3c98:	200003fc 	.word	0x200003fc
    3c9c:	20000388 	.word	0x20000388
    3ca0:	2000051c 	.word	0x2000051c

00003ca4 <nrfx_usbd_setup_clear>:
    3ca4:	4b03      	ldr	r3, [pc, #12]	; (3cb4 <nrfx_usbd_setup_clear+0x10>)
    3ca6:	2201      	movs	r2, #1
    3ca8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
    3caa:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb 0xF":::"memory");
    3cae:	f3bf 8f4f 	dsb	sy

void nrfx_usbd_setup_clear(void)
{
    NRFX_LOG_DEBUG(">> ep0status >>");
    nrf_usbd_task_trigger(NRF_USBD_TASK_EP0STATUS);
}
    3cb2:	4770      	bx	lr
    3cb4:	40027050 	.word	0x40027050

00003cb8 <nrfx_usbd_setup_stall>:
    3cb8:	4b03      	ldr	r3, [pc, #12]	; (3cc8 <nrfx_usbd_setup_stall+0x10>)
    3cba:	2201      	movs	r2, #1
    3cbc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
    3cbe:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb 0xF":::"memory");
    3cc2:	f3bf 8f4f 	dsb	sy

void nrfx_usbd_setup_stall(void)
{
    NRFX_LOG_DEBUG("Setup stalled.");
    nrf_usbd_task_trigger(NRF_USBD_TASK_EP0STALL);
}
    3cc6:	4770      	bx	lr
    3cc8:	40027054 	.word	0x40027054

00003ccc <nrfx_usbd_last_setup_dir_get>:

nrfx_usbd_ep_t nrfx_usbd_last_setup_dir_get(void)
{
    return m_last_setup_dir;
}
    3ccc:	4b01      	ldr	r3, [pc, #4]	; (3cd4 <nrfx_usbd_last_setup_dir_get+0x8>)
    3cce:	7818      	ldrb	r0, [r3, #0]
    3cd0:	4770      	bx	lr
    3cd2:	bf00      	nop
    3cd4:	200027cb 	.word	0x200027cb

00003cd8 <nrfx_usbd_transfer_out_drop>:

void nrfx_usbd_transfer_out_drop(nrfx_usbd_ep_t ep)
{
    3cd8:	b570      	push	{r4, r5, r6, lr}
    3cda:	4604      	mov	r4, r0
    NRFX_ASSERT(NRF_USBD_EPOUT_CHECK(ep));
    3cdc:	f010 0f80 	tst.w	r0, #128	; 0x80
    3ce0:	d131      	bne.n	3d46 <nrfx_usbd_transfer_out_drop+0x6e>
    return (*(uint32_t *)0x10000130UL == 0x8UL);
    3ce2:	4b54      	ldr	r3, [pc, #336]	; (3e34 <nrfx_usbd_transfer_out_drop+0x15c>)
    3ce4:	681b      	ldr	r3, [r3, #0]
    return (nrfx_usbd_errata_type_52840() && (*(uint32_t *)0x10000134UL >= 0x1UL));
    3ce6:	2b08      	cmp	r3, #8
    3ce8:	d03b      	beq.n	3d62 <nrfx_usbd_transfer_out_drop+0x8a>
    3cea:	2300      	movs	r3, #0

    if (nrfx_usbd_errata_200())
    3cec:	2b00      	cmp	r3, #0
    3cee:	d14e      	bne.n	3d8e <nrfx_usbd_transfer_out_drop+0xb6>
	__asm__ volatile(
    3cf0:	f04f 0320 	mov.w	r3, #32
    3cf4:	f3ef 8511 	mrs	r5, BASEPRI
    3cf8:	f383 8811 	msr	BASEPRI, r3
    3cfc:	f3bf 8f6f 	isb	sy
    NRFX_USBD_ASSERT_EP_VALID(ep);
    3d00:	f004 030f 	and.w	r3, r4, #15
    3d04:	2b08      	cmp	r3, #8
    3d06:	d832      	bhi.n	3d6e <nrfx_usbd_transfer_out_drop+0x96>
    return NRFX_USBD_EP_BITPOS(ep);
    3d08:	b263      	sxtb	r3, r4
    3d0a:	2b00      	cmp	r3, #0
    3d0c:	db3d      	blt.n	3d8a <nrfx_usbd_transfer_out_drop+0xb2>
    3d0e:	2210      	movs	r2, #16
    3d10:	f003 030f 	and.w	r3, r3, #15
    3d14:	4413      	add	r3, r2
    {
        NRFX_CRITICAL_SECTION_ENTER();
        m_ep_ready &= ~(1U << ep2bit(ep));
    3d16:	2201      	movs	r2, #1
    3d18:	fa02 f303 	lsl.w	r3, r2, r3
    3d1c:	4946      	ldr	r1, [pc, #280]	; (3e38 <nrfx_usbd_transfer_out_drop+0x160>)
    3d1e:	680a      	ldr	r2, [r1, #0]
    3d20:	ea22 0203 	bic.w	r2, r2, r3
    3d24:	600a      	str	r2, [r1, #0]
        *((volatile uint32_t *)(NRF_USBD_BASE + 0x800)) = 0x7C5 + (2u * NRF_USBD_EP_NR_GET(ep));
    3d26:	f004 040f 	and.w	r4, r4, #15
    3d2a:	0064      	lsls	r4, r4, #1
    3d2c:	f204 74c5 	addw	r4, r4, #1989	; 0x7c5
    3d30:	4b42      	ldr	r3, [pc, #264]	; (3e3c <nrfx_usbd_transfer_out_drop+0x164>)
    3d32:	601c      	str	r4, [r3, #0]
        *((volatile uint32_t *)(NRF_USBD_BASE + 0x804)) = 0;
    3d34:	3304      	adds	r3, #4
    3d36:	2200      	movs	r2, #0
    3d38:	601a      	str	r2, [r3, #0]
        (void)(*((volatile uint32_t *)(NRF_USBD_BASE + 0x804)));
    3d3a:	681b      	ldr	r3, [r3, #0]
	__asm__ volatile(
    3d3c:	f385 8811 	msr	BASEPRI, r5
    3d40:	f3bf 8f6f 	isb	sy
        {
            nrf_usbd_epout_clear(ep);
        }
        NRFX_CRITICAL_SECTION_EXIT();
    }
}
    3d44:	bd70      	pop	{r4, r5, r6, pc}
    NRFX_ASSERT(NRF_USBD_EPOUT_CHECK(ep));
    3d46:	4d3e      	ldr	r5, [pc, #248]	; (3e40 <nrfx_usbd_transfer_out_drop+0x168>)
    3d48:	f640 131d 	movw	r3, #2333	; 0x91d
    3d4c:	462a      	mov	r2, r5
    3d4e:	493d      	ldr	r1, [pc, #244]	; (3e44 <nrfx_usbd_transfer_out_drop+0x16c>)
    3d50:	483d      	ldr	r0, [pc, #244]	; (3e48 <nrfx_usbd_transfer_out_drop+0x170>)
    3d52:	f00b fd94 	bl	f87e <printk>
    3d56:	f640 111d 	movw	r1, #2333	; 0x91d
    3d5a:	4628      	mov	r0, r5
    3d5c:	f00b fe15 	bl	f98a <assert_post_action>
    3d60:	e7bf      	b.n	3ce2 <nrfx_usbd_transfer_out_drop+0xa>
    3d62:	4b3a      	ldr	r3, [pc, #232]	; (3e4c <nrfx_usbd_transfer_out_drop+0x174>)
    3d64:	681b      	ldr	r3, [r3, #0]
    3d66:	2b00      	cmp	r3, #0
    3d68:	d0c0      	beq.n	3cec <nrfx_usbd_transfer_out_drop+0x14>
    3d6a:	2301      	movs	r3, #1
    3d6c:	e7be      	b.n	3cec <nrfx_usbd_transfer_out_drop+0x14>
    NRFX_USBD_ASSERT_EP_VALID(ep);
    3d6e:	4e34      	ldr	r6, [pc, #208]	; (3e40 <nrfx_usbd_transfer_out_drop+0x168>)
    3d70:	f240 23b5 	movw	r3, #693	; 0x2b5
    3d74:	4632      	mov	r2, r6
    3d76:	4936      	ldr	r1, [pc, #216]	; (3e50 <nrfx_usbd_transfer_out_drop+0x178>)
    3d78:	4833      	ldr	r0, [pc, #204]	; (3e48 <nrfx_usbd_transfer_out_drop+0x170>)
    3d7a:	f00b fd80 	bl	f87e <printk>
    3d7e:	f240 21b5 	movw	r1, #693	; 0x2b5
    3d82:	4630      	mov	r0, r6
    3d84:	f00b fe01 	bl	f98a <assert_post_action>
    3d88:	e7be      	b.n	3d08 <nrfx_usbd_transfer_out_drop+0x30>
    return NRFX_USBD_EP_BITPOS(ep);
    3d8a:	2200      	movs	r2, #0
    3d8c:	e7c0      	b.n	3d10 <nrfx_usbd_transfer_out_drop+0x38>
	__asm__ volatile(
    3d8e:	f04f 0320 	mov.w	r3, #32
    3d92:	f3ef 8511 	mrs	r5, BASEPRI
    3d96:	f383 8811 	msr	BASEPRI, r3
    3d9a:	f3bf 8f6f 	isb	sy
    NRFX_USBD_ASSERT_EP_VALID(ep);
    3d9e:	f004 030f 	and.w	r3, r4, #15
    3da2:	2b08      	cmp	r3, #8
    3da4:	d816      	bhi.n	3dd4 <nrfx_usbd_transfer_out_drop+0xfc>
    return NRFX_USBD_EP_BITPOS(ep);
    3da6:	b263      	sxtb	r3, r4
    3da8:	2b00      	cmp	r3, #0
    3daa:	db21      	blt.n	3df0 <nrfx_usbd_transfer_out_drop+0x118>
    3dac:	2210      	movs	r2, #16
    3dae:	f003 030f 	and.w	r3, r3, #15
    3db2:	4413      	add	r3, r2
        m_ep_ready &= ~(1U << ep2bit(ep));
    3db4:	2201      	movs	r2, #1
    3db6:	fa02 f303 	lsl.w	r3, r2, r3
    3dba:	491f      	ldr	r1, [pc, #124]	; (3e38 <nrfx_usbd_transfer_out_drop+0x160>)
    3dbc:	680a      	ldr	r2, [r1, #0]
    3dbe:	ea22 0203 	bic.w	r2, r2, r3
    3dc2:	600a      	str	r2, [r1, #0]
        if (!NRF_USBD_EPISO_CHECK(ep))
    3dc4:	f014 0f08 	tst.w	r4, #8
    3dc8:	d014      	beq.n	3df4 <nrfx_usbd_transfer_out_drop+0x11c>
	__asm__ volatile(
    3dca:	f385 8811 	msr	BASEPRI, r5
    3dce:	f3bf 8f6f 	isb	sy
}
    3dd2:	e7b7      	b.n	3d44 <nrfx_usbd_transfer_out_drop+0x6c>
    NRFX_USBD_ASSERT_EP_VALID(ep);
    3dd4:	4e1a      	ldr	r6, [pc, #104]	; (3e40 <nrfx_usbd_transfer_out_drop+0x168>)
    3dd6:	f240 23b5 	movw	r3, #693	; 0x2b5
    3dda:	4632      	mov	r2, r6
    3ddc:	491c      	ldr	r1, [pc, #112]	; (3e50 <nrfx_usbd_transfer_out_drop+0x178>)
    3dde:	481a      	ldr	r0, [pc, #104]	; (3e48 <nrfx_usbd_transfer_out_drop+0x170>)
    3de0:	f00b fd4d 	bl	f87e <printk>
    3de4:	f240 21b5 	movw	r1, #693	; 0x2b5
    3de8:	4630      	mov	r0, r6
    3dea:	f00b fdce 	bl	f98a <assert_post_action>
    3dee:	e7da      	b.n	3da6 <nrfx_usbd_transfer_out_drop+0xce>
    return NRFX_USBD_EP_BITPOS(ep);
    3df0:	2200      	movs	r2, #0
    3df2:	e7dc      	b.n	3dae <nrfx_usbd_transfer_out_drop+0xd6>
    NRFX_ASSERT(NRF_USBD_EPOUT_CHECK(ep) && (NRF_USBD_EP_NR_GET(ep) < NRFX_ARRAY_SIZE(NRF_USBD->SIZE.EPOUT)));
    3df4:	f014 0f80 	tst.w	r4, #128	; 0x80
    3df8:	d102      	bne.n	3e00 <nrfx_usbd_transfer_out_drop+0x128>
    3dfa:	f014 0f08 	tst.w	r4, #8
    3dfe:	d00c      	beq.n	3e1a <nrfx_usbd_transfer_out_drop+0x142>
    3e00:	4e14      	ldr	r6, [pc, #80]	; (3e54 <nrfx_usbd_transfer_out_drop+0x17c>)
    3e02:	f240 437a 	movw	r3, #1146	; 0x47a
    3e06:	4632      	mov	r2, r6
    3e08:	4913      	ldr	r1, [pc, #76]	; (3e58 <nrfx_usbd_transfer_out_drop+0x180>)
    3e0a:	480f      	ldr	r0, [pc, #60]	; (3e48 <nrfx_usbd_transfer_out_drop+0x170>)
    3e0c:	f00b fd37 	bl	f87e <printk>
    3e10:	f240 417a 	movw	r1, #1146	; 0x47a
    3e14:	4630      	mov	r0, r6
    3e16:	f00b fdb8 	bl	f98a <assert_post_action>
    NRF_USBD->SIZE.EPOUT[NRF_USBD_EP_NR_GET(ep)] = 0;
    3e1a:	f004 040f 	and.w	r4, r4, #15
    3e1e:	f504 7494 	add.w	r4, r4, #296	; 0x128
    3e22:	4b0e      	ldr	r3, [pc, #56]	; (3e5c <nrfx_usbd_transfer_out_drop+0x184>)
    3e24:	2200      	movs	r2, #0
    3e26:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
  __ASM volatile ("isb 0xF":::"memory");
    3e2a:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb 0xF":::"memory");
    3e2e:	f3bf 8f4f 	dsb	sy
    3e32:	e7ca      	b.n	3dca <nrfx_usbd_transfer_out_drop+0xf2>
    3e34:	10000130 	.word	0x10000130
    3e38:	200003f8 	.word	0x200003f8
    3e3c:	40027800 	.word	0x40027800
    3e40:	00011634 	.word	0x00011634
    3e44:	00011a08 	.word	0x00011a08
    3e48:	00010f8c 	.word	0x00010f8c
    3e4c:	10000134 	.word	0x10000134
    3e50:	00011c28 	.word	0x00011c28
    3e54:	000116f8 	.word	0x000116f8
    3e58:	00011ad4 	.word	0x00011ad4
    3e5c:	40027000 	.word	0x40027000

00003e60 <ev_setup_handler>:
{
    3e60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    3e64:	b083      	sub	sp, #12
    return (uint8_t)(NRF_USBD->BMREQUESTTYPE);
    3e66:	4bbe      	ldr	r3, [pc, #760]	; (4160 <ev_setup_handler+0x300>)
    3e68:	f8d3 6480 	ldr.w	r6, [r3, #1152]	; 0x480
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
    3e6c:	4bbd      	ldr	r3, [pc, #756]	; (4164 <ev_setup_handler+0x304>)
    3e6e:	681d      	ldr	r5, [r3, #0]
    3e70:	43ed      	mvns	r5, r5
    3e72:	b2ad      	uxth	r5, r5
    3e74:	4bbc      	ldr	r3, [pc, #752]	; (4168 <ev_setup_handler+0x308>)
    3e76:	681b      	ldr	r3, [r3, #0]
    3e78:	431d      	orrs	r5, r3
        & (1U <<ep2bit(m_last_setup_dir)))
    3e7a:	4bbc      	ldr	r3, [pc, #752]	; (416c <ev_setup_handler+0x30c>)
    3e7c:	781c      	ldrb	r4, [r3, #0]
    NRFX_USBD_ASSERT_EP_VALID(ep);
    3e7e:	f004 030f 	and.w	r3, r4, #15
    3e82:	2b08      	cmp	r3, #8
    3e84:	d830      	bhi.n	3ee8 <ev_setup_handler+0x88>
    return NRFX_USBD_EP_BITPOS(ep);
    3e86:	b264      	sxtb	r4, r4
    3e88:	2c00      	cmp	r4, #0
    3e8a:	db3b      	blt.n	3f04 <ev_setup_handler+0xa4>
    3e8c:	2310      	movs	r3, #16
    3e8e:	f004 040f 	and.w	r4, r4, #15
    3e92:	441c      	add	r4, r3
        & (1U <<ep2bit(m_last_setup_dir)))
    3e94:	2301      	movs	r3, #1
    3e96:	fa03 f404 	lsl.w	r4, r3, r4
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
    3e9a:	4225      	tst	r5, r4
    3e9c:	d134      	bne.n	3f08 <ev_setup_handler+0xa8>
        NRFX_USBD_EPOUT0 : NRFX_USBD_EPIN0;
    3e9e:	f016 0f80 	tst.w	r6, #128	; 0x80
    3ea2:	f040 8197 	bne.w	41d4 <ev_setup_handler+0x374>
    3ea6:	2200      	movs	r2, #0
    m_last_setup_dir =
    3ea8:	4bb0      	ldr	r3, [pc, #704]	; (416c <ev_setup_handler+0x30c>)
    3eaa:	701a      	strb	r2, [r3, #0]
    3eac:	4bae      	ldr	r3, [pc, #696]	; (4168 <ev_setup_handler+0x308>)
    3eae:	f3bf 8f5b 	dmb	ish
    3eb2:	e853 2f00 	ldrex	r2, [r3]
    3eb6:	f022 1201 	bic.w	r2, r2, #65537	; 0x10001
    3eba:	e843 2100 	strex	r1, r2, [r3]
    3ebe:	2900      	cmp	r1, #0
    3ec0:	d1f7      	bne.n	3eb2 <ev_setup_handler+0x52>
    3ec2:	f3bf 8f5b 	dmb	ish
    m_ep_ready |= 1U << ep2bit(NRFX_USBD_EPIN0);
    3ec6:	4aa7      	ldr	r2, [pc, #668]	; (4164 <ev_setup_handler+0x304>)
    3ec8:	6813      	ldr	r3, [r2, #0]
    3eca:	f043 0301 	orr.w	r3, r3, #1
    3ece:	6013      	str	r3, [r2, #0]
    const nrfx_usbd_evt_t evt = {
    3ed0:	2300      	movs	r3, #0
    3ed2:	9301      	str	r3, [sp, #4]
    3ed4:	2305      	movs	r3, #5
    3ed6:	f88d 3004 	strb.w	r3, [sp, #4]
    m_event_handler(&evt);
    3eda:	4ba5      	ldr	r3, [pc, #660]	; (4170 <ev_setup_handler+0x310>)
    3edc:	681b      	ldr	r3, [r3, #0]
    3ede:	a801      	add	r0, sp, #4
    3ee0:	4798      	blx	r3
}
    3ee2:	b003      	add	sp, #12
    3ee4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    NRFX_USBD_ASSERT_EP_VALID(ep);
    3ee8:	4fa2      	ldr	r7, [pc, #648]	; (4174 <ev_setup_handler+0x314>)
    3eea:	f240 23b5 	movw	r3, #693	; 0x2b5
    3eee:	463a      	mov	r2, r7
    3ef0:	49a1      	ldr	r1, [pc, #644]	; (4178 <ev_setup_handler+0x318>)
    3ef2:	48a2      	ldr	r0, [pc, #648]	; (417c <ev_setup_handler+0x31c>)
    3ef4:	f00b fcc3 	bl	f87e <printk>
    3ef8:	f240 21b5 	movw	r1, #693	; 0x2b5
    3efc:	4638      	mov	r0, r7
    3efe:	f00b fd44 	bl	f98a <assert_post_action>
    3f02:	e7c0      	b.n	3e86 <ev_setup_handler+0x26>
    return NRFX_USBD_EP_BITPOS(ep);
    3f04:	2300      	movs	r3, #0
    3f06:	e7c2      	b.n	3e8e <ev_setup_handler+0x2e>
        usbd_ep_abort(m_last_setup_dir);
    3f08:	4b98      	ldr	r3, [pc, #608]	; (416c <ev_setup_handler+0x30c>)
    3f0a:	781c      	ldrb	r4, [r3, #0]
	__asm__ volatile(
    3f0c:	f04f 0320 	mov.w	r3, #32
    3f10:	f3ef 8711 	mrs	r7, BASEPRI
    3f14:	f383 8811 	msr	BASEPRI, r3
    3f18:	f3bf 8f6f 	isb	sy
    NRFX_USBD_ASSERT_EP_VALID(ep);
    3f1c:	f004 050f 	and.w	r5, r4, #15
    3f20:	2d08      	cmp	r5, #8
    3f22:	d871      	bhi.n	4008 <ev_setup_handler+0x1a8>
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    3f24:	f014 0f80 	tst.w	r4, #128	; 0x80
    3f28:	d17d      	bne.n	4026 <ev_setup_handler+0x1c6>
    3f2a:	4b95      	ldr	r3, [pc, #596]	; (4180 <ev_setup_handler+0x320>)
    3f2c:	eb03 1505 	add.w	r5, r3, r5, lsl #4
    if (NRF_USBD_EPOUT_CHECK(ep))
    3f30:	f014 0f80 	tst.w	r4, #128	; 0x80
    3f34:	d079      	beq.n	402a <ev_setup_handler+0x1ca>
        if(!NRF_USBD_EPISO_CHECK(ep))
    3f36:	f014 0f08 	tst.w	r4, #8
    3f3a:	d113      	bne.n	3f64 <ev_setup_handler+0x104>
            if(ep != NRFX_USBD_EPIN0)
    3f3c:	2c80      	cmp	r4, #128	; 0x80
    3f3e:	f000 80ef 	beq.w	4120 <ev_setup_handler+0x2c0>
                *((volatile uint32_t *)(NRF_USBD_BASE + 0x800)) = 0x7B6 + (2u * (NRF_USBD_EP_NR_GET(ep) - 1));
    3f42:	f004 030f 	and.w	r3, r4, #15
    3f46:	3b01      	subs	r3, #1
    3f48:	005b      	lsls	r3, r3, #1
    3f4a:	f203 73b6 	addw	r3, r3, #1974	; 0x7b6
    3f4e:	4a8d      	ldr	r2, [pc, #564]	; (4184 <ev_setup_handler+0x324>)
    3f50:	6013      	str	r3, [r2, #0]
                uint8_t temp = *((volatile uint32_t *)(NRF_USBD_BASE + 0x804));
    3f52:	3204      	adds	r2, #4
    3f54:	6813      	ldr	r3, [r2, #0]
    3f56:	b2db      	uxtb	r3, r3
                temp |= (1U << 1);
    3f58:	f043 0302 	orr.w	r3, r3, #2
                *((volatile uint32_t *)(NRF_USBD_BASE + 0x804)) |= temp;
    3f5c:	6811      	ldr	r1, [r2, #0]
    3f5e:	430b      	orrs	r3, r1
    3f60:	6013      	str	r3, [r2, #0]
                (void)(*((volatile uint32_t *)(NRF_USBD_BASE + 0x804)));
    3f62:	6813      	ldr	r3, [r2, #0]
        if ((m_ep_dma_waiting | (~m_ep_ready)) & (1U << ep2bit(ep)))
    3f64:	4b7f      	ldr	r3, [pc, #508]	; (4164 <ev_setup_handler+0x304>)
    3f66:	681a      	ldr	r2, [r3, #0]
    3f68:	4b7f      	ldr	r3, [pc, #508]	; (4168 <ev_setup_handler+0x308>)
    3f6a:	681b      	ldr	r3, [r3, #0]
    3f6c:	ea63 0802 	orn	r8, r3, r2
    NRFX_USBD_ASSERT_EP_VALID(ep);
    3f70:	f004 030f 	and.w	r3, r4, #15
    3f74:	2b08      	cmp	r3, #8
    3f76:	f200 80e1 	bhi.w	413c <ev_setup_handler+0x2dc>
    return NRFX_USBD_EP_BITPOS(ep);
    3f7a:	b263      	sxtb	r3, r4
    3f7c:	2b00      	cmp	r3, #0
    3f7e:	f2c0 80ec 	blt.w	415a <ev_setup_handler+0x2fa>
    3f82:	2210      	movs	r2, #16
    3f84:	f003 030f 	and.w	r3, r3, #15
    3f88:	4413      	add	r3, r2
        if ((m_ep_dma_waiting | (~m_ep_ready)) & (1U << ep2bit(ep)))
    3f8a:	2201      	movs	r2, #1
    3f8c:	fa02 f303 	lsl.w	r3, r2, r3
    3f90:	ea18 0f03 	tst.w	r8, r3
    3f94:	d063      	beq.n	405e <ev_setup_handler+0x1fe>
    NRFX_USBD_ASSERT_EP_VALID(ep);
    3f96:	f004 030f 	and.w	r3, r4, #15
    3f9a:	2b08      	cmp	r3, #8
    3f9c:	f200 80f8 	bhi.w	4190 <ev_setup_handler+0x330>
    return NRFX_USBD_EP_BITPOS(ep);
    3fa0:	b263      	sxtb	r3, r4
    3fa2:	2b00      	cmp	r3, #0
    3fa4:	f2c0 8103 	blt.w	41ae <ev_setup_handler+0x34e>
    3fa8:	2210      	movs	r2, #16
    3faa:	f003 030f 	and.w	r3, r3, #15
    3fae:	4413      	add	r3, r2
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    3fb0:	2201      	movs	r2, #1
    3fb2:	fa02 f303 	lsl.w	r3, r2, r3
    3fb6:	496c      	ldr	r1, [pc, #432]	; (4168 <ev_setup_handler+0x308>)
    3fb8:	680a      	ldr	r2, [r1, #0]
    3fba:	ea22 0203 	bic.w	r2, r2, r3
    3fbe:	600a      	str	r2, [r1, #0]
    NRFX_USBD_ASSERT_EP_VALID(ep);
    3fc0:	f004 030f 	and.w	r3, r4, #15
    3fc4:	2b08      	cmp	r3, #8
    3fc6:	f200 80f4 	bhi.w	41b2 <ev_setup_handler+0x352>
    return NRFX_USBD_EP_BITPOS(ep);
    3fca:	b263      	sxtb	r3, r4
    3fcc:	2b00      	cmp	r3, #0
    3fce:	f2c0 80ff 	blt.w	41d0 <ev_setup_handler+0x370>
    3fd2:	2210      	movs	r2, #16
    3fd4:	f003 030f 	and.w	r3, r3, #15
    3fd8:	4413      	add	r3, r2
            m_ep_ready       |=   1U << ep2bit(ep) ;
    3fda:	2201      	movs	r2, #1
    3fdc:	fa02 f303 	lsl.w	r3, r2, r3
    3fe0:	4960      	ldr	r1, [pc, #384]	; (4164 <ev_setup_handler+0x304>)
    3fe2:	680a      	ldr	r2, [r1, #0]
    3fe4:	431a      	orrs	r2, r3
    3fe6:	600a      	str	r2, [r1, #0]
            p_state->handler.feeder = NULL;
    3fe8:	2300      	movs	r3, #0
    3fea:	602b      	str	r3, [r5, #0]
            p_state->status = NRFX_USBD_EP_ABORTED;
    3fec:	2303      	movs	r3, #3
    3fee:	73ab      	strb	r3, [r5, #14]
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
    3ff0:	2206      	movs	r2, #6
    3ff2:	f88d 2000 	strb.w	r2, [sp]
    3ff6:	f88d 4002 	strb.w	r4, [sp, #2]
    3ffa:	f88d 3003 	strb.w	r3, [sp, #3]
            m_event_handler(&evt);
    3ffe:	4b5c      	ldr	r3, [pc, #368]	; (4170 <ev_setup_handler+0x310>)
    4000:	681b      	ldr	r3, [r3, #0]
    4002:	4668      	mov	r0, sp
    4004:	4798      	blx	r3
    4006:	e02a      	b.n	405e <ev_setup_handler+0x1fe>
    NRFX_USBD_ASSERT_EP_VALID(ep);
    4008:	f8df 8168 	ldr.w	r8, [pc, #360]	; 4174 <ev_setup_handler+0x314>
    400c:	f240 23a2 	movw	r3, #674	; 0x2a2
    4010:	4642      	mov	r2, r8
    4012:	4959      	ldr	r1, [pc, #356]	; (4178 <ev_setup_handler+0x318>)
    4014:	4859      	ldr	r0, [pc, #356]	; (417c <ev_setup_handler+0x31c>)
    4016:	f00b fc32 	bl	f87e <printk>
    401a:	f240 21a2 	movw	r1, #674	; 0x2a2
    401e:	4640      	mov	r0, r8
    4020:	f00b fcb3 	bl	f98a <assert_post_action>
    4024:	e77e      	b.n	3f24 <ev_setup_handler+0xc4>
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    4026:	4b58      	ldr	r3, [pc, #352]	; (4188 <ev_setup_handler+0x328>)
    4028:	e780      	b.n	3f2c <ev_setup_handler+0xcc>
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
    402a:	4b4f      	ldr	r3, [pc, #316]	; (4168 <ev_setup_handler+0x308>)
    402c:	681b      	ldr	r3, [r3, #0]
    402e:	ea6f 0803 	mvn.w	r8, r3
    NRFX_USBD_ASSERT_EP_VALID(ep);
    4032:	f004 030f 	and.w	r3, r4, #15
    4036:	2b08      	cmp	r3, #8
    4038:	d816      	bhi.n	4068 <ev_setup_handler+0x208>
    return NRFX_USBD_EP_BITPOS(ep);
    403a:	b263      	sxtb	r3, r4
    403c:	2b00      	cmp	r3, #0
    403e:	db22      	blt.n	4086 <ev_setup_handler+0x226>
    4040:	2210      	movs	r2, #16
    4042:	f003 030f 	and.w	r3, r3, #15
    4046:	4413      	add	r3, r2
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
    4048:	2201      	movs	r2, #1
    404a:	fa02 f303 	lsl.w	r3, r2, r3
    404e:	ea18 0f03 	tst.w	r8, r3
    4052:	d01a      	beq.n	408a <ev_setup_handler+0x22a>
            nrfx_usbd_transfer_out_drop(ep);
    4054:	4620      	mov	r0, r4
    4056:	f7ff fe3f 	bl	3cd8 <nrfx_usbd_transfer_out_drop>
        p_state->status = NRFX_USBD_EP_ABORTED;
    405a:	2303      	movs	r3, #3
    405c:	73ab      	strb	r3, [r5, #14]
	__asm__ volatile(
    405e:	f387 8811 	msr	BASEPRI, r7
    4062:	f3bf 8f6f 	isb	sy
    NRFX_CRITICAL_SECTION_EXIT();
    4066:	e71a      	b.n	3e9e <ev_setup_handler+0x3e>
    NRFX_USBD_ASSERT_EP_VALID(ep);
    4068:	f8df 9108 	ldr.w	r9, [pc, #264]	; 4174 <ev_setup_handler+0x314>
    406c:	f240 23b5 	movw	r3, #693	; 0x2b5
    4070:	464a      	mov	r2, r9
    4072:	4941      	ldr	r1, [pc, #260]	; (4178 <ev_setup_handler+0x318>)
    4074:	4841      	ldr	r0, [pc, #260]	; (417c <ev_setup_handler+0x31c>)
    4076:	f00b fc02 	bl	f87e <printk>
    407a:	f240 21b5 	movw	r1, #693	; 0x2b5
    407e:	4648      	mov	r0, r9
    4080:	f00b fc83 	bl	f98a <assert_post_action>
    4084:	e7d9      	b.n	403a <ev_setup_handler+0x1da>
    return NRFX_USBD_EP_BITPOS(ep);
    4086:	2200      	movs	r2, #0
    4088:	e7db      	b.n	4042 <ev_setup_handler+0x1e2>
            p_state->handler.consumer = NULL;
    408a:	2300      	movs	r3, #0
    408c:	602b      	str	r3, [r5, #0]
    NRFX_USBD_ASSERT_EP_VALID(ep);
    408e:	f004 030f 	and.w	r3, r4, #15
    4092:	2b08      	cmp	r3, #8
    4094:	d822      	bhi.n	40dc <ev_setup_handler+0x27c>
    return NRFX_USBD_EP_BITPOS(ep);
    4096:	b263      	sxtb	r3, r4
    4098:	2b00      	cmp	r3, #0
    409a:	db2e      	blt.n	40fa <ev_setup_handler+0x29a>
    409c:	2210      	movs	r2, #16
    409e:	f003 030f 	and.w	r3, r3, #15
    40a2:	4413      	add	r3, r2
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    40a4:	2201      	movs	r2, #1
    40a6:	fa02 f303 	lsl.w	r3, r2, r3
    40aa:	492f      	ldr	r1, [pc, #188]	; (4168 <ev_setup_handler+0x308>)
    40ac:	680a      	ldr	r2, [r1, #0]
    40ae:	ea22 0203 	bic.w	r2, r2, r3
    40b2:	600a      	str	r2, [r1, #0]
    NRFX_USBD_ASSERT_EP_VALID(ep);
    40b4:	f004 030f 	and.w	r3, r4, #15
    40b8:	2b08      	cmp	r3, #8
    40ba:	d820      	bhi.n	40fe <ev_setup_handler+0x29e>
    return NRFX_USBD_EP_BITPOS(ep);
    40bc:	b264      	sxtb	r4, r4
    40be:	2c00      	cmp	r4, #0
    40c0:	db2c      	blt.n	411c <ev_setup_handler+0x2bc>
    40c2:	2310      	movs	r3, #16
    40c4:	f004 040f 	and.w	r4, r4, #15
    40c8:	441c      	add	r4, r3
            m_ep_ready &= ~(1U << ep2bit(ep));
    40ca:	2301      	movs	r3, #1
    40cc:	fa03 f404 	lsl.w	r4, r3, r4
    40d0:	4a24      	ldr	r2, [pc, #144]	; (4164 <ev_setup_handler+0x304>)
    40d2:	6813      	ldr	r3, [r2, #0]
    40d4:	ea23 0304 	bic.w	r3, r3, r4
    40d8:	6013      	str	r3, [r2, #0]
    40da:	e7be      	b.n	405a <ev_setup_handler+0x1fa>
    NRFX_USBD_ASSERT_EP_VALID(ep);
    40dc:	f8df 8094 	ldr.w	r8, [pc, #148]	; 4174 <ev_setup_handler+0x314>
    40e0:	f240 23b5 	movw	r3, #693	; 0x2b5
    40e4:	4642      	mov	r2, r8
    40e6:	4924      	ldr	r1, [pc, #144]	; (4178 <ev_setup_handler+0x318>)
    40e8:	4824      	ldr	r0, [pc, #144]	; (417c <ev_setup_handler+0x31c>)
    40ea:	f00b fbc8 	bl	f87e <printk>
    40ee:	f240 21b5 	movw	r1, #693	; 0x2b5
    40f2:	4640      	mov	r0, r8
    40f4:	f00b fc49 	bl	f98a <assert_post_action>
    40f8:	e7cd      	b.n	4096 <ev_setup_handler+0x236>
    return NRFX_USBD_EP_BITPOS(ep);
    40fa:	2200      	movs	r2, #0
    40fc:	e7cf      	b.n	409e <ev_setup_handler+0x23e>
    NRFX_USBD_ASSERT_EP_VALID(ep);
    40fe:	f8df 8074 	ldr.w	r8, [pc, #116]	; 4174 <ev_setup_handler+0x314>
    4102:	f240 23b5 	movw	r3, #693	; 0x2b5
    4106:	4642      	mov	r2, r8
    4108:	491b      	ldr	r1, [pc, #108]	; (4178 <ev_setup_handler+0x318>)
    410a:	481c      	ldr	r0, [pc, #112]	; (417c <ev_setup_handler+0x31c>)
    410c:	f00b fbb7 	bl	f87e <printk>
    4110:	f240 21b5 	movw	r1, #693	; 0x2b5
    4114:	4640      	mov	r0, r8
    4116:	f00b fc38 	bl	f98a <assert_post_action>
    411a:	e7cf      	b.n	40bc <ev_setup_handler+0x25c>
    return NRFX_USBD_EP_BITPOS(ep);
    411c:	2300      	movs	r3, #0
    411e:	e7d1      	b.n	40c4 <ev_setup_handler+0x264>
                *((volatile uint32_t *)(NRF_USBD_BASE + 0x800)) = 0x7B4;
    4120:	4b18      	ldr	r3, [pc, #96]	; (4184 <ev_setup_handler+0x324>)
    4122:	f240 72b4 	movw	r2, #1972	; 0x7b4
    4126:	601a      	str	r2, [r3, #0]
                uint8_t temp = *((volatile uint32_t *)(NRF_USBD_BASE + 0x804));
    4128:	4a18      	ldr	r2, [pc, #96]	; (418c <ev_setup_handler+0x32c>)
    412a:	6813      	ldr	r3, [r2, #0]
    412c:	b2db      	uxtb	r3, r3
                temp |= (1U << 2);
    412e:	f043 0304 	orr.w	r3, r3, #4
                *((volatile uint32_t *)(NRF_USBD_BASE + 0x804)) |= temp;
    4132:	6811      	ldr	r1, [r2, #0]
    4134:	430b      	orrs	r3, r1
    4136:	6013      	str	r3, [r2, #0]
                (void)(*((volatile uint32_t *)(NRF_USBD_BASE + 0x804)));
    4138:	6813      	ldr	r3, [r2, #0]
    413a:	e713      	b.n	3f64 <ev_setup_handler+0x104>
    NRFX_USBD_ASSERT_EP_VALID(ep);
    413c:	f8df 9034 	ldr.w	r9, [pc, #52]	; 4174 <ev_setup_handler+0x314>
    4140:	f240 23b5 	movw	r3, #693	; 0x2b5
    4144:	464a      	mov	r2, r9
    4146:	490c      	ldr	r1, [pc, #48]	; (4178 <ev_setup_handler+0x318>)
    4148:	480c      	ldr	r0, [pc, #48]	; (417c <ev_setup_handler+0x31c>)
    414a:	f00b fb98 	bl	f87e <printk>
    414e:	f240 21b5 	movw	r1, #693	; 0x2b5
    4152:	4648      	mov	r0, r9
    4154:	f00b fc19 	bl	f98a <assert_post_action>
    4158:	e70f      	b.n	3f7a <ev_setup_handler+0x11a>
    return NRFX_USBD_EP_BITPOS(ep);
    415a:	2200      	movs	r2, #0
    415c:	e712      	b.n	3f84 <ev_setup_handler+0x124>
    415e:	bf00      	nop
    4160:	40027000 	.word	0x40027000
    4164:	200003f8 	.word	0x200003f8
    4168:	20000388 	.word	0x20000388
    416c:	200027cb 	.word	0x200027cb
    4170:	2000051c 	.word	0x2000051c
    4174:	00011634 	.word	0x00011634
    4178:	00011c28 	.word	0x00011c28
    417c:	00010f8c 	.word	0x00010f8c
    4180:	200003fc 	.word	0x200003fc
    4184:	40027800 	.word	0x40027800
    4188:	2000048c 	.word	0x2000048c
    418c:	40027804 	.word	0x40027804
    NRFX_USBD_ASSERT_EP_VALID(ep);
    4190:	f8df 804c 	ldr.w	r8, [pc, #76]	; 41e0 <ev_setup_handler+0x380>
    4194:	f240 23b5 	movw	r3, #693	; 0x2b5
    4198:	4642      	mov	r2, r8
    419a:	490f      	ldr	r1, [pc, #60]	; (41d8 <ev_setup_handler+0x378>)
    419c:	480f      	ldr	r0, [pc, #60]	; (41dc <ev_setup_handler+0x37c>)
    419e:	f00b fb6e 	bl	f87e <printk>
    41a2:	f240 21b5 	movw	r1, #693	; 0x2b5
    41a6:	4640      	mov	r0, r8
    41a8:	f00b fbef 	bl	f98a <assert_post_action>
    41ac:	e6f8      	b.n	3fa0 <ev_setup_handler+0x140>
    return NRFX_USBD_EP_BITPOS(ep);
    41ae:	2200      	movs	r2, #0
    41b0:	e6fb      	b.n	3faa <ev_setup_handler+0x14a>
    NRFX_USBD_ASSERT_EP_VALID(ep);
    41b2:	f8df 802c 	ldr.w	r8, [pc, #44]	; 41e0 <ev_setup_handler+0x380>
    41b6:	f240 23b5 	movw	r3, #693	; 0x2b5
    41ba:	4642      	mov	r2, r8
    41bc:	4906      	ldr	r1, [pc, #24]	; (41d8 <ev_setup_handler+0x378>)
    41be:	4807      	ldr	r0, [pc, #28]	; (41dc <ev_setup_handler+0x37c>)
    41c0:	f00b fb5d 	bl	f87e <printk>
    41c4:	f240 21b5 	movw	r1, #693	; 0x2b5
    41c8:	4640      	mov	r0, r8
    41ca:	f00b fbde 	bl	f98a <assert_post_action>
    41ce:	e6fc      	b.n	3fca <ev_setup_handler+0x16a>
    return NRFX_USBD_EP_BITPOS(ep);
    41d0:	2200      	movs	r2, #0
    41d2:	e6ff      	b.n	3fd4 <ev_setup_handler+0x174>
        NRFX_USBD_EPOUT0 : NRFX_USBD_EPIN0;
    41d4:	2280      	movs	r2, #128	; 0x80
    41d6:	e667      	b.n	3ea8 <ev_setup_handler+0x48>
    41d8:	00011c28 	.word	0x00011c28
    41dc:	00010f8c 	.word	0x00010f8c
    41e0:	00011634 	.word	0x00011634

000041e4 <nrfx_usbd_irq_handler>:
{
    41e4:	b570      	push	{r4, r5, r6, lr}
    return NRF_USBD->INTENSET;
    41e6:	4b65      	ldr	r3, [pc, #404]	; (437c <nrfx_usbd_irq_handler+0x198>)
    41e8:	f8d3 6304 	ldr.w	r6, [r3, #772]	; 0x304
    uint32_t to_process = enabled;
    41ec:	4631      	mov	r1, r6
    uint32_t active = 0;
    41ee:	2400      	movs	r4, #0
    while (to_process)
    41f0:	e004      	b.n	41fc <nrfx_usbd_irq_handler+0x18>
        to_process &= ~(1UL << event_nr);
    41f2:	2301      	movs	r3, #1
    41f4:	fa03 f202 	lsl.w	r2, r3, r2
    41f8:	ea21 0102 	bic.w	r1, r1, r2
    while (to_process)
    41fc:	b1c1      	cbz	r1, 4230 <nrfx_usbd_irq_handler+0x4c>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
    41fe:	fa91 f2a1 	rbit	r2, r1
        if (nrf_usbd_event_get_and_clear((nrf_usbd_event_t)nrfx_bitpos_to_event(event_nr)))
    4202:	fab2 f282 	clz	r2, r2
}

__STATIC_INLINE uint32_t nrfx_bitpos_to_event(uint32_t bit)
{
    static const uint32_t event_reg_offset = 0x100u;
    return event_reg_offset + (bit * sizeof(uint32_t));
    4206:	f102 0340 	add.w	r3, r2, #64	; 0x40
    return (volatile const uint32_t*)(((uint8_t *)NRF_USBD) + (uint32_t)offset);
    420a:	009b      	lsls	r3, r3, #2
    420c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    4210:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    return (bool)*nrf_usbd_getRegPtr_c((uint32_t)event);
    4214:	6818      	ldr	r0, [r3, #0]
    if (ret)
    4216:	b128      	cbz	r0, 4224 <nrfx_usbd_irq_handler+0x40>
    *(nrf_usbd_getRegPtr((uint32_t)event)) = 0UL;
    4218:	2500      	movs	r5, #0
    421a:	601d      	str	r5, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
    421c:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb 0xF":::"memory");
    4220:	f3bf 8f4f 	dsb	sy
    4224:	2800      	cmp	r0, #0
    4226:	d0e4      	beq.n	41f2 <nrfx_usbd_irq_handler+0xe>
            active |= 1UL << event_nr;
    4228:	2301      	movs	r3, #1
    422a:	4093      	lsls	r3, r2
    422c:	431c      	orrs	r4, r3
    422e:	e7e0      	b.n	41f2 <nrfx_usbd_irq_handler+0xe>
    return (*(uint32_t *)0x10000130UL == 0x8UL);
    4230:	4b53      	ldr	r3, [pc, #332]	; (4380 <nrfx_usbd_irq_handler+0x19c>)
    4232:	681b      	ldr	r3, [r3, #0]
    return (nrfx_usbd_errata_type_52840() && (*(uint32_t *)0x10000134UL >= 0x1UL));
    4234:	2b08      	cmp	r3, #8
    4236:	f000 8083 	beq.w	4340 <nrfx_usbd_irq_handler+0x15c>
    423a:	2300      	movs	r3, #0
    if (nrfx_usbd_errata_104())
    423c:	2b00      	cmp	r3, #0
    423e:	d17a      	bne.n	4336 <nrfx_usbd_irq_handler+0x152>
        if ((!m_dma_pending) && (0 != (active & (USBD_INTEN_SOF_Msk))))
    4240:	4b50      	ldr	r3, [pc, #320]	; (4384 <nrfx_usbd_irq_handler+0x1a0>)
    4242:	781b      	ldrb	r3, [r3, #0]
    4244:	2b00      	cmp	r3, #0
    4246:	d176      	bne.n	4336 <nrfx_usbd_irq_handler+0x152>
    4248:	f414 1f00 	tst.w	r4, #2097152	; 0x200000
    424c:	d073      	beq.n	4336 <nrfx_usbd_irq_handler+0x152>
            *((volatile uint32_t *)(NRF_USBD_BASE + 0x800)) = 0x7A9;
    424e:	4b4e      	ldr	r3, [pc, #312]	; (4388 <nrfx_usbd_irq_handler+0x1a4>)
    4250:	f240 72a9 	movw	r2, #1961	; 0x7a9
    4254:	601a      	str	r2, [r3, #0]
            uii = (uint8_t)(*((volatile uint32_t *)(NRF_USBD_BASE + 0x804)));
    4256:	3304      	adds	r3, #4
    4258:	6819      	ldr	r1, [r3, #0]
            if (0 != uii)
    425a:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
    425e:	d001      	beq.n	4264 <nrfx_usbd_irq_handler+0x80>
                uii &= (uint8_t)(*((volatile uint32_t *)(NRF_USBD_BASE + 0x804)));
    4260:	681b      	ldr	r3, [r3, #0]
    4262:	4019      	ands	r1, r3
            *((volatile uint32_t *)(NRF_USBD_BASE + 0x800)) = 0x7AA;
    4264:	4b48      	ldr	r3, [pc, #288]	; (4388 <nrfx_usbd_irq_handler+0x1a4>)
    4266:	f240 72aa 	movw	r2, #1962	; 0x7aa
    426a:	601a      	str	r2, [r3, #0]
            uoi = (uint8_t)(*((volatile uint32_t *)(NRF_USBD_BASE + 0x804)));
    426c:	3304      	adds	r3, #4
    426e:	681a      	ldr	r2, [r3, #0]
            if (0 != uoi)
    4270:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
    4274:	d001      	beq.n	427a <nrfx_usbd_irq_handler+0x96>
                uoi &= (uint8_t)(*((volatile uint32_t *)(NRF_USBD_BASE + 0x804)));
    4276:	681b      	ldr	r3, [r3, #0]
    4278:	401a      	ands	r2, r3
            *((volatile uint32_t *)(NRF_USBD_BASE + 0x800)) = 0x7AB;
    427a:	4b43      	ldr	r3, [pc, #268]	; (4388 <nrfx_usbd_irq_handler+0x1a4>)
    427c:	f240 70ab 	movw	r0, #1963	; 0x7ab
    4280:	6018      	str	r0, [r3, #0]
            usbi = (uint8_t)(*((volatile uint32_t *)(NRF_USBD_BASE + 0x804)));
    4282:	3304      	adds	r3, #4
    4284:	681b      	ldr	r3, [r3, #0]
            if (0 != usbi)
    4286:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
    428a:	d002      	beq.n	4292 <nrfx_usbd_irq_handler+0xae>
                usbi &= (uint8_t)(*((volatile uint32_t *)(NRF_USBD_BASE + 0x804)));
    428c:	483f      	ldr	r0, [pc, #252]	; (438c <nrfx_usbd_irq_handler+0x1a8>)
    428e:	6800      	ldr	r0, [r0, #0]
    4290:	4003      	ands	r3, r0
            *((volatile uint32_t *)(NRF_USBD_BASE + 0x800)) = 0x7AC;
    4292:	483d      	ldr	r0, [pc, #244]	; (4388 <nrfx_usbd_irq_handler+0x1a4>)
    4294:	f240 75ac 	movw	r5, #1964	; 0x7ac
    4298:	6005      	str	r5, [r0, #0]
            uii &= (uint8_t)*((volatile uint32_t *)(NRF_USBD_BASE + 0x804));
    429a:	3004      	adds	r0, #4
    429c:	6800      	ldr	r0, [r0, #0]
            if (0 != uii)
    429e:	4001      	ands	r1, r0
    42a0:	d00a      	beq.n	42b8 <nrfx_usbd_irq_handler+0xd4>
                m_simulated_dataepstatus |= ((uint32_t)uii) << NRFX_USBD_EPIN_BITPOS_0;
    42a2:	4d3b      	ldr	r5, [pc, #236]	; (4390 <nrfx_usbd_irq_handler+0x1ac>)
    42a4:	6828      	ldr	r0, [r5, #0]
    42a6:	4308      	orrs	r0, r1
    42a8:	6028      	str	r0, [r5, #0]
                *((volatile uint32_t *)(NRF_USBD_BASE + 0x800)) = 0x7A9;
    42aa:	4837      	ldr	r0, [pc, #220]	; (4388 <nrfx_usbd_irq_handler+0x1a4>)
    42ac:	f240 75a9 	movw	r5, #1961	; 0x7a9
    42b0:	6005      	str	r5, [r0, #0]
                *((volatile uint32_t *)(NRF_USBD_BASE + 0x804)) = uii;
    42b2:	3004      	adds	r0, #4
    42b4:	6001      	str	r1, [r0, #0]
                rb = (uint8_t)*((volatile uint32_t *)(NRF_USBD_BASE + 0x804));
    42b6:	6801      	ldr	r1, [r0, #0]
            *((volatile uint32_t *)(NRF_USBD_BASE + 0x800)) = 0x7AD;
    42b8:	4933      	ldr	r1, [pc, #204]	; (4388 <nrfx_usbd_irq_handler+0x1a4>)
    42ba:	f240 70ad 	movw	r0, #1965	; 0x7ad
    42be:	6008      	str	r0, [r1, #0]
            uoi &= (uint8_t)*((volatile uint32_t *)(NRF_USBD_BASE + 0x804));
    42c0:	3104      	adds	r1, #4
    42c2:	6809      	ldr	r1, [r1, #0]
            if (0 != uoi)
    42c4:	400a      	ands	r2, r1
    42c6:	d00b      	beq.n	42e0 <nrfx_usbd_irq_handler+0xfc>
                m_simulated_dataepstatus |= ((uint32_t)uoi) << NRFX_USBD_EPOUT_BITPOS_0;
    42c8:	4831      	ldr	r0, [pc, #196]	; (4390 <nrfx_usbd_irq_handler+0x1ac>)
    42ca:	6801      	ldr	r1, [r0, #0]
    42cc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
    42d0:	6001      	str	r1, [r0, #0]
                *((volatile uint32_t *)(NRF_USBD_BASE + 0x800)) = 0x7AA;
    42d2:	492d      	ldr	r1, [pc, #180]	; (4388 <nrfx_usbd_irq_handler+0x1a4>)
    42d4:	f240 70aa 	movw	r0, #1962	; 0x7aa
    42d8:	6008      	str	r0, [r1, #0]
                *((volatile uint32_t *)(NRF_USBD_BASE + 0x804)) = uoi;
    42da:	3104      	adds	r1, #4
    42dc:	600a      	str	r2, [r1, #0]
                rb = (uint8_t)*((volatile uint32_t *)(NRF_USBD_BASE + 0x804));
    42de:	680a      	ldr	r2, [r1, #0]
            *((volatile uint32_t *)(NRF_USBD_BASE + 0x800)) = 0x7AE;
    42e0:	4a29      	ldr	r2, [pc, #164]	; (4388 <nrfx_usbd_irq_handler+0x1a4>)
    42e2:	f240 71ae 	movw	r1, #1966	; 0x7ae
    42e6:	6011      	str	r1, [r2, #0]
            usbi &= (uint8_t)*((volatile uint32_t *)(NRF_USBD_BASE + 0x804));
    42e8:	3204      	adds	r2, #4
    42ea:	6812      	ldr	r2, [r2, #0]
            if (0 != usbi)
    42ec:	4013      	ands	r3, r2
    42ee:	d010      	beq.n	4312 <nrfx_usbd_irq_handler+0x12e>
                if (usbi & 0x01)
    42f0:	f013 0f01 	tst.w	r3, #1
    42f4:	d001      	beq.n	42fa <nrfx_usbd_irq_handler+0x116>
                    active |= USBD_INTEN_EP0SETUP_Msk;
    42f6:	f444 0400 	orr.w	r4, r4, #8388608	; 0x800000
                if (usbi & 0x10)
    42fa:	f013 0f10 	tst.w	r3, #16
    42fe:	d001      	beq.n	4304 <nrfx_usbd_irq_handler+0x120>
                    active |= USBD_INTEN_USBRESET_Msk;
    4300:	f044 0401 	orr.w	r4, r4, #1
                *((volatile uint32_t *)(NRF_USBD_BASE + 0x800)) = 0x7AB;
    4304:	4a20      	ldr	r2, [pc, #128]	; (4388 <nrfx_usbd_irq_handler+0x1a4>)
    4306:	f240 71ab 	movw	r1, #1963	; 0x7ab
    430a:	6011      	str	r1, [r2, #0]
                *((volatile uint32_t *)(NRF_USBD_BASE + 0x804)) = usbi;
    430c:	3204      	adds	r2, #4
    430e:	6013      	str	r3, [r2, #0]
                rb = (uint8_t)*((volatile uint32_t *)(NRF_USBD_BASE + 0x804));
    4310:	6813      	ldr	r3, [r2, #0]
            if (0 != (m_simulated_dataepstatus &
    4312:	4b1f      	ldr	r3, [pc, #124]	; (4390 <nrfx_usbd_irq_handler+0x1ac>)
    4314:	681b      	ldr	r3, [r3, #0]
    4316:	f033 1201 	bics.w	r2, r3, #65537	; 0x10001
    431a:	d002      	beq.n	4322 <nrfx_usbd_irq_handler+0x13e>
                active |= enabled & NRF_USBD_INT_DATAEP_MASK;
    431c:	f006 7180 	and.w	r1, r6, #16777216	; 0x1000000
    4320:	430c      	orrs	r4, r1
            if (0 != (m_simulated_dataepstatus &
    4322:	f013 1f01 	tst.w	r3, #65537	; 0x10001
    4326:	d006      	beq.n	4336 <nrfx_usbd_irq_handler+0x152>
                if (0 != (enabled & NRF_USBD_INT_EP0DATADONE_MASK))
    4328:	f416 6f80 	tst.w	r6, #1024	; 0x400
    432c:	d003      	beq.n	4336 <nrfx_usbd_irq_handler+0x152>
                    m_simulated_dataepstatus &=
    432e:	4b18      	ldr	r3, [pc, #96]	; (4390 <nrfx_usbd_irq_handler+0x1ac>)
    4330:	601a      	str	r2, [r3, #0]
                    active |= NRF_USBD_INT_EP0DATADONE_MASK;
    4332:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
    bool setup_active = 0 != (active & NRF_USBD_INT_EP0SETUP_MASK);
    4336:	f404 0600 	and.w	r6, r4, #8388608	; 0x800000
    active &= ~NRF_USBD_INT_EP0SETUP_MASK;
    433a:	f424 0400 	bic.w	r4, r4, #8388608	; 0x800000
    while (active)
    433e:	e013      	b.n	4368 <nrfx_usbd_irq_handler+0x184>
    4340:	4b14      	ldr	r3, [pc, #80]	; (4394 <nrfx_usbd_irq_handler+0x1b0>)
    4342:	681b      	ldr	r3, [r3, #0]
    4344:	2b00      	cmp	r3, #0
    4346:	f43f af79 	beq.w	423c <nrfx_usbd_irq_handler+0x58>
    434a:	2301      	movs	r3, #1
    434c:	e776      	b.n	423c <nrfx_usbd_irq_handler+0x58>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
    434e:	fa94 f5a4 	rbit	r5, r4
        m_isr[event_nr]();
    4352:	fab5 f585 	clz	r5, r5
    4356:	4b10      	ldr	r3, [pc, #64]	; (4398 <nrfx_usbd_irq_handler+0x1b4>)
    4358:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
    435c:	4798      	blx	r3
        active &= ~(1UL << event_nr);
    435e:	2301      	movs	r3, #1
    4360:	fa03 f505 	lsl.w	r5, r3, r5
    4364:	ea24 0405 	bic.w	r4, r4, r5
    while (active)
    4368:	2c00      	cmp	r4, #0
    436a:	d1f0      	bne.n	434e <nrfx_usbd_irq_handler+0x16a>
    usbd_dmareq_process();
    436c:	f7fe ff4a 	bl	3204 <usbd_dmareq_process>
    if (setup_active)
    4370:	b906      	cbnz	r6, 4374 <nrfx_usbd_irq_handler+0x190>
}
    4372:	bd70      	pop	{r4, r5, r6, pc}
        m_isr[USBD_INTEN_EP0SETUP_Pos]();
    4374:	f7ff fd74 	bl	3e60 <ev_setup_handler>
}
    4378:	e7fb      	b.n	4372 <nrfx_usbd_irq_handler+0x18e>
    437a:	bf00      	nop
    437c:	40027000 	.word	0x40027000
    4380:	10000130 	.word	0x10000130
    4384:	200027c9 	.word	0x200027c9
    4388:	40027800 	.word	0x40027800
    438c:	40027804 	.word	0x40027804
    4390:	20000520 	.word	0x20000520
    4394:	10000134 	.word	0x10000134
    4398:	000115d0 	.word	0x000115d0

0000439c <nrfx_usbd_ep_enable>:
{
    439c:	b570      	push	{r4, r5, r6, lr}
    439e:	4604      	mov	r4, r0
    NRFX_USBD_ASSERT_EP_VALID(ep);
    43a0:	f000 050f 	and.w	r5, r0, #15
    43a4:	2d08      	cmp	r5, #8
    43a6:	d818      	bhi.n	43da <nrfx_usbd_ep_enable+0x3e>
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
    43a8:	f014 0f80 	tst.w	r4, #128	; 0x80
    43ac:	d123      	bne.n	43f6 <nrfx_usbd_ep_enable+0x5a>
    43ae:	4b5a      	ldr	r3, [pc, #360]	; (4518 <nrfx_usbd_ep_enable+0x17c>)
    43b0:	5d5a      	ldrb	r2, [r3, r5]
    43b2:	2301      	movs	r3, #1
    43b4:	4093      	lsls	r3, r2
    NRF_USBD->INTENSET = mask;
    43b6:	4a59      	ldr	r2, [pc, #356]	; (451c <nrfx_usbd_ep_enable+0x180>)
    43b8:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    NRFX_ASSERT(NRF_USBD_EP_VALIDATE(ep));
    43bc:	f004 050f 	and.w	r5, r4, #15
    43c0:	2d08      	cmp	r5, #8
    43c2:	d81a      	bhi.n	43fa <nrfx_usbd_ep_enable+0x5e>
    if (NRF_USBD_EPIN_CHECK(ep))
    43c4:	f014 0f80 	tst.w	r4, #128	; 0x80
    43c8:	d125      	bne.n	4416 <nrfx_usbd_ep_enable+0x7a>
        return 0 != (NRF_USBD->EPOUTEN & (1UL << epnr));
    43ca:	4b54      	ldr	r3, [pc, #336]	; (451c <nrfx_usbd_ep_enable+0x180>)
    43cc:	f8d3 3514 	ldr.w	r3, [r3, #1300]	; 0x514
    43d0:	40eb      	lsrs	r3, r5
    43d2:	f003 0301 	and.w	r3, r3, #1
    if (nrf_usbd_ep_enable_check(ep))
    43d6:	b32b      	cbz	r3, 4424 <nrfx_usbd_ep_enable+0x88>
}
    43d8:	bd70      	pop	{r4, r5, r6, pc}
    NRFX_USBD_ASSERT_EP_VALID(ep);
    43da:	4e51      	ldr	r6, [pc, #324]	; (4520 <nrfx_usbd_ep_enable+0x184>)
    43dc:	f240 139b 	movw	r3, #411	; 0x19b
    43e0:	4632      	mov	r2, r6
    43e2:	4950      	ldr	r1, [pc, #320]	; (4524 <nrfx_usbd_ep_enable+0x188>)
    43e4:	4850      	ldr	r0, [pc, #320]	; (4528 <nrfx_usbd_ep_enable+0x18c>)
    43e6:	f00b fa4a 	bl	f87e <printk>
    43ea:	f240 119b 	movw	r1, #411	; 0x19b
    43ee:	4630      	mov	r0, r6
    43f0:	f00b facb 	bl	f98a <assert_post_action>
    43f4:	e7d8      	b.n	43a8 <nrfx_usbd_ep_enable+0xc>
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
    43f6:	4b4d      	ldr	r3, [pc, #308]	; (452c <nrfx_usbd_ep_enable+0x190>)
    43f8:	e7da      	b.n	43b0 <nrfx_usbd_ep_enable+0x14>
    NRFX_ASSERT(NRF_USBD_EP_VALIDATE(ep));
    43fa:	4e4d      	ldr	r6, [pc, #308]	; (4530 <nrfx_usbd_ep_enable+0x194>)
    43fc:	f240 43ae 	movw	r3, #1198	; 0x4ae
    4400:	4632      	mov	r2, r6
    4402:	494c      	ldr	r1, [pc, #304]	; (4534 <nrfx_usbd_ep_enable+0x198>)
    4404:	4848      	ldr	r0, [pc, #288]	; (4528 <nrfx_usbd_ep_enable+0x18c>)
    4406:	f00b fa3a 	bl	f87e <printk>
    440a:	f240 41ae 	movw	r1, #1198	; 0x4ae
    440e:	4630      	mov	r0, r6
    4410:	f00b fabb 	bl	f98a <assert_post_action>
    4414:	e7d6      	b.n	43c4 <nrfx_usbd_ep_enable+0x28>
        return 0 != (NRF_USBD->EPINEN & (1UL << epnr));
    4416:	4b41      	ldr	r3, [pc, #260]	; (451c <nrfx_usbd_ep_enable+0x180>)
    4418:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
    441c:	40eb      	lsrs	r3, r5
    441e:	f003 0301 	and.w	r3, r3, #1
    4422:	e7d8      	b.n	43d6 <nrfx_usbd_ep_enable+0x3a>
    NRFX_USBD_ASSERT_EP_VALID(ep);
    4424:	f004 030f 	and.w	r3, r4, #15
    4428:	2b08      	cmp	r3, #8
    442a:	d83f      	bhi.n	44ac <nrfx_usbd_ep_enable+0x110>
    NRFX_ASSERT(NRF_USBD_EP_VALIDATE(ep));
    442c:	f004 050f 	and.w	r5, r4, #15
    4430:	2d08      	cmp	r5, #8
    4432:	d849      	bhi.n	44c8 <nrfx_usbd_ep_enable+0x12c>
    if (NRF_USBD_EPIN_CHECK(ep))
    4434:	f014 0f80 	tst.w	r4, #128	; 0x80
    4438:	d154      	bne.n	44e4 <nrfx_usbd_ep_enable+0x148>
        NRF_USBD->EPOUTEN |= 1UL << epnr;
    443a:	4938      	ldr	r1, [pc, #224]	; (451c <nrfx_usbd_ep_enable+0x180>)
    443c:	f8d1 3514 	ldr.w	r3, [r1, #1300]	; 0x514
    4440:	2201      	movs	r2, #1
    4442:	fa02 f505 	lsl.w	r5, r2, r5
    4446:	431d      	orrs	r5, r3
    4448:	f8c1 5514 	str.w	r5, [r1, #1300]	; 0x514
  __ASM volatile ("isb 0xF":::"memory");
    444c:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb 0xF":::"memory");
    4450:	f3bf 8f4f 	dsb	sy
    if ((NRF_USBD_EP_NR_GET(ep) != 0) &&
    4454:	f014 0f0f 	tst.w	r4, #15
    4458:	d0be      	beq.n	43d8 <nrfx_usbd_ep_enable+0x3c>
    445a:	f014 0f80 	tst.w	r4, #128	; 0x80
    445e:	d1bb      	bne.n	43d8 <nrfx_usbd_ep_enable+0x3c>
        NRF_USBD_EPOUT_CHECK(ep) &&
    4460:	f014 0f08 	tst.w	r4, #8
    4464:	d1b8      	bne.n	43d8 <nrfx_usbd_ep_enable+0x3c>
	__asm__ volatile(
    4466:	f04f 0320 	mov.w	r3, #32
    446a:	f3ef 8511 	mrs	r5, BASEPRI
    446e:	f383 8811 	msr	BASEPRI, r3
    4472:	f3bf 8f6f 	isb	sy
        nrfx_usbd_transfer_out_drop(ep);
    4476:	4620      	mov	r0, r4
    4478:	f7ff fc2e 	bl	3cd8 <nrfx_usbd_transfer_out_drop>
    NRFX_USBD_ASSERT_EP_VALID(ep);
    447c:	f004 030f 	and.w	r3, r4, #15
    4480:	2b08      	cmp	r3, #8
    4482:	d839      	bhi.n	44f8 <nrfx_usbd_ep_enable+0x15c>
    return NRFX_USBD_EP_BITPOS(ep);
    4484:	b264      	sxtb	r4, r4
    4486:	2c00      	cmp	r4, #0
    4488:	db44      	blt.n	4514 <nrfx_usbd_ep_enable+0x178>
    448a:	2310      	movs	r3, #16
    448c:	f004 040f 	and.w	r4, r4, #15
    4490:	441c      	add	r4, r3
        m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    4492:	2301      	movs	r3, #1
    4494:	fa03 f404 	lsl.w	r4, r3, r4
    4498:	4a27      	ldr	r2, [pc, #156]	; (4538 <nrfx_usbd_ep_enable+0x19c>)
    449a:	6813      	ldr	r3, [r2, #0]
    449c:	ea23 0304 	bic.w	r3, r3, r4
    44a0:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
    44a2:	f385 8811 	msr	BASEPRI, r5
    44a6:	f3bf 8f6f 	isb	sy
        NRFX_CRITICAL_SECTION_EXIT();
    44aa:	e795      	b.n	43d8 <nrfx_usbd_ep_enable+0x3c>
    NRFX_USBD_ASSERT_EP_VALID(ep);
    44ac:	4d1c      	ldr	r5, [pc, #112]	; (4520 <nrfx_usbd_ep_enable+0x184>)
    44ae:	f240 2385 	movw	r3, #645	; 0x285
    44b2:	462a      	mov	r2, r5
    44b4:	491b      	ldr	r1, [pc, #108]	; (4524 <nrfx_usbd_ep_enable+0x188>)
    44b6:	481c      	ldr	r0, [pc, #112]	; (4528 <nrfx_usbd_ep_enable+0x18c>)
    44b8:	f00b f9e1 	bl	f87e <printk>
    44bc:	f240 2185 	movw	r1, #645	; 0x285
    44c0:	4628      	mov	r0, r5
    44c2:	f00b fa62 	bl	f98a <assert_post_action>
    44c6:	e7b1      	b.n	442c <nrfx_usbd_ep_enable+0x90>
    NRFX_ASSERT(NRF_USBD_EP_VALIDATE(ep));
    44c8:	4e19      	ldr	r6, [pc, #100]	; (4530 <nrfx_usbd_ep_enable+0x194>)
    44ca:	f240 43bd 	movw	r3, #1213	; 0x4bd
    44ce:	4632      	mov	r2, r6
    44d0:	4918      	ldr	r1, [pc, #96]	; (4534 <nrfx_usbd_ep_enable+0x198>)
    44d2:	4815      	ldr	r0, [pc, #84]	; (4528 <nrfx_usbd_ep_enable+0x18c>)
    44d4:	f00b f9d3 	bl	f87e <printk>
    44d8:	f240 41bd 	movw	r1, #1213	; 0x4bd
    44dc:	4630      	mov	r0, r6
    44de:	f00b fa54 	bl	f98a <assert_post_action>
    44e2:	e7a7      	b.n	4434 <nrfx_usbd_ep_enable+0x98>
        NRF_USBD->EPINEN |= 1UL << epnr;
    44e4:	490d      	ldr	r1, [pc, #52]	; (451c <nrfx_usbd_ep_enable+0x180>)
    44e6:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
    44ea:	2201      	movs	r2, #1
    44ec:	fa02 f505 	lsl.w	r5, r2, r5
    44f0:	431d      	orrs	r5, r3
    44f2:	f8c1 5510 	str.w	r5, [r1, #1296]	; 0x510
    44f6:	e7a9      	b.n	444c <nrfx_usbd_ep_enable+0xb0>
    NRFX_USBD_ASSERT_EP_VALID(ep);
    44f8:	4e09      	ldr	r6, [pc, #36]	; (4520 <nrfx_usbd_ep_enable+0x184>)
    44fa:	f240 23b5 	movw	r3, #693	; 0x2b5
    44fe:	4632      	mov	r2, r6
    4500:	4908      	ldr	r1, [pc, #32]	; (4524 <nrfx_usbd_ep_enable+0x188>)
    4502:	4809      	ldr	r0, [pc, #36]	; (4528 <nrfx_usbd_ep_enable+0x18c>)
    4504:	f00b f9bb 	bl	f87e <printk>
    4508:	f240 21b5 	movw	r1, #693	; 0x2b5
    450c:	4630      	mov	r0, r6
    450e:	f00b fa3c 	bl	f98a <assert_post_action>
    4512:	e7b7      	b.n	4484 <nrfx_usbd_ep_enable+0xe8>
    return NRFX_USBD_EP_BITPOS(ep);
    4514:	2300      	movs	r3, #0
    4516:	e7b9      	b.n	448c <nrfx_usbd_ep_enable+0xf0>
    4518:	00011594 	.word	0x00011594
    451c:	40027000 	.word	0x40027000
    4520:	00011634 	.word	0x00011634
    4524:	00011c28 	.word	0x00011c28
    4528:	00010f8c 	.word	0x00010f8c
    452c:	00011574 	.word	0x00011574
    4530:	000116f8 	.word	0x000116f8
    4534:	00011720 	.word	0x00011720
    4538:	20000388 	.word	0x20000388

0000453c <nrfx_usbd_ep_stall_clear>:
{
    453c:	b538      	push	{r3, r4, r5, lr}
    453e:	4604      	mov	r4, r0
    if (NRF_USBD_EPOUT_CHECK(ep) && nrfx_usbd_ep_stall_check(ep))
    4540:	f010 0f80 	tst.w	r0, #128	; 0x80
    4544:	d00e      	beq.n	4564 <nrfx_usbd_ep_stall_clear+0x28>
    NRFX_USBD_ASSERT_EP_VALID(ep);
    4546:	f004 030f 	and.w	r3, r4, #15
    454a:	2b08      	cmp	r3, #8
    454c:	d812      	bhi.n	4574 <nrfx_usbd_ep_stall_clear+0x38>
    NRFX_ASSERT(!NRF_USBD_EPISO_CHECK(ep));
    454e:	f014 0f08 	tst.w	r4, #8
    4552:	d11d      	bne.n	4590 <nrfx_usbd_ep_stall_clear+0x54>
    NRF_USBD->EPSTALL = (USBD_EPSTALL_STALL_UnStall << USBD_EPSTALL_STALL_Pos) | ep;
    4554:	4b15      	ldr	r3, [pc, #84]	; (45ac <nrfx_usbd_ep_stall_clear+0x70>)
    4556:	f8c3 4518 	str.w	r4, [r3, #1304]	; 0x518
  __ASM volatile ("isb 0xF":::"memory");
    455a:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb 0xF":::"memory");
    455e:	f3bf 8f4f 	dsb	sy
}
    4562:	bd38      	pop	{r3, r4, r5, pc}
    if (NRF_USBD_EPOUT_CHECK(ep) && nrfx_usbd_ep_stall_check(ep))
    4564:	f7ff fa9e 	bl	3aa4 <nrfx_usbd_ep_stall_check>
    4568:	2800      	cmp	r0, #0
    456a:	d0ec      	beq.n	4546 <nrfx_usbd_ep_stall_clear+0xa>
        nrfx_usbd_transfer_out_drop(ep);
    456c:	4620      	mov	r0, r4
    456e:	f7ff fbb3 	bl	3cd8 <nrfx_usbd_transfer_out_drop>
    4572:	e7e8      	b.n	4546 <nrfx_usbd_ep_stall_clear+0xa>
    NRFX_USBD_ASSERT_EP_VALID(ep);
    4574:	4d0e      	ldr	r5, [pc, #56]	; (45b0 <nrfx_usbd_ep_stall_clear+0x74>)
    4576:	f240 2385 	movw	r3, #645	; 0x285
    457a:	462a      	mov	r2, r5
    457c:	490d      	ldr	r1, [pc, #52]	; (45b4 <nrfx_usbd_ep_stall_clear+0x78>)
    457e:	480e      	ldr	r0, [pc, #56]	; (45b8 <nrfx_usbd_ep_stall_clear+0x7c>)
    4580:	f00b f97d 	bl	f87e <printk>
    4584:	f240 2185 	movw	r1, #645	; 0x285
    4588:	4628      	mov	r0, r5
    458a:	f00b f9fe 	bl	f98a <assert_post_action>
    458e:	e7de      	b.n	454e <nrfx_usbd_ep_stall_clear+0x12>
    NRFX_ASSERT(!NRF_USBD_EPISO_CHECK(ep));
    4590:	4d0a      	ldr	r5, [pc, #40]	; (45bc <nrfx_usbd_ep_stall_clear+0x80>)
    4592:	f240 43ef 	movw	r3, #1263	; 0x4ef
    4596:	462a      	mov	r2, r5
    4598:	4909      	ldr	r1, [pc, #36]	; (45c0 <nrfx_usbd_ep_stall_clear+0x84>)
    459a:	4807      	ldr	r0, [pc, #28]	; (45b8 <nrfx_usbd_ep_stall_clear+0x7c>)
    459c:	f00b f96f 	bl	f87e <printk>
    45a0:	f240 41ef 	movw	r1, #1263	; 0x4ef
    45a4:	4628      	mov	r0, r5
    45a6:	f00b f9f0 	bl	f98a <assert_post_action>
    45aa:	e7d3      	b.n	4554 <nrfx_usbd_ep_stall_clear+0x18>
    45ac:	40027000 	.word	0x40027000
    45b0:	00011634 	.word	0x00011634
    45b4:	00011c28 	.word	0x00011c28
    45b8:	00010f8c 	.word	0x00010f8c
    45bc:	000116f8 	.word	0x000116f8
    45c0:	00011d1c 	.word	0x00011d1c

000045c4 <usbd_ep_abort_all>:
{
    45c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    45c8:	b082      	sub	sp, #8
    uint32_t ep_waiting = m_ep_dma_waiting | (m_ep_ready & NRFX_USBD_EPOUT_BIT_MASK);
    45ca:	4bb9      	ldr	r3, [pc, #740]	; (48b0 <usbd_ep_abort_all+0x2ec>)
    45cc:	885b      	ldrh	r3, [r3, #2]
    45ce:	4ab9      	ldr	r2, [pc, #740]	; (48b4 <usbd_ep_abort_all+0x2f0>)
    45d0:	6816      	ldr	r6, [r2, #0]
    45d2:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
    while (0 != ep_waiting)
    45d6:	e00a      	b.n	45ee <usbd_ep_abort_all+0x2a>
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    45d8:	f044 0480 	orr.w	r4, r4, #128	; 0x80
        if (!NRF_USBD_EPISO_CHECK(bit2ep(bitpos)))
    45dc:	f014 0f08 	tst.w	r4, #8
    45e0:	d013      	beq.n	460a <usbd_ep_abort_all+0x46>
        ep_waiting &= ~(1U << bitpos);
    45e2:	b2eb      	uxtb	r3, r5
    45e4:	2201      	movs	r2, #1
    45e6:	fa02 f303 	lsl.w	r3, r2, r3
    45ea:	ea26 0603 	bic.w	r6, r6, r3
    while (0 != ep_waiting)
    45ee:	2e00      	cmp	r6, #0
    45f0:	f000 8156 	beq.w	48a0 <usbd_ep_abort_all+0x2dc>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
    45f4:	fa96 f3a6 	rbit	r3, r6
        uint8_t bitpos = __CLZ(__RBIT(ep_waiting));
    45f8:	fab3 f583 	clz	r5, r3
    45fc:	b2ec      	uxtb	r4, r5
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    45fe:	2c0f      	cmp	r4, #15
    4600:	d9ea      	bls.n	45d8 <usbd_ep_abort_all+0x14>
        NRF_USBD_EPOUT(bitpos - NRFX_USBD_EPOUT_BITPOS_0) : NRF_USBD_EPIN(bitpos));
    4602:	f1a5 0410 	sub.w	r4, r5, #16
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    4606:	b2e4      	uxtb	r4, r4
    4608:	e7e8      	b.n	45dc <usbd_ep_abort_all+0x18>
	__asm__ volatile(
    460a:	f04f 0320 	mov.w	r3, #32
    460e:	f3ef 8911 	mrs	r9, BASEPRI
    4612:	f383 8811 	msr	BASEPRI, r3
    4616:	f3bf 8f6f 	isb	sy
    NRFX_USBD_ASSERT_EP_VALID(ep);
    461a:	f004 070f 	and.w	r7, r4, #15
    461e:	2f08      	cmp	r7, #8
    4620:	d871      	bhi.n	4706 <usbd_ep_abort_all+0x142>
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    4622:	f014 0f80 	tst.w	r4, #128	; 0x80
    4626:	d17d      	bne.n	4724 <usbd_ep_abort_all+0x160>
    4628:	4ba3      	ldr	r3, [pc, #652]	; (48b8 <usbd_ep_abort_all+0x2f4>)
    462a:	eb03 1707 	add.w	r7, r3, r7, lsl #4
    if (NRF_USBD_EPOUT_CHECK(ep))
    462e:	f014 0f80 	tst.w	r4, #128	; 0x80
    4632:	d079      	beq.n	4728 <usbd_ep_abort_all+0x164>
        if(!NRF_USBD_EPISO_CHECK(ep))
    4634:	f014 0f08 	tst.w	r4, #8
    4638:	d113      	bne.n	4662 <usbd_ep_abort_all+0x9e>
            if(ep != NRFX_USBD_EPIN0)
    463a:	2c80      	cmp	r4, #128	; 0x80
    463c:	f000 80ef 	beq.w	481e <usbd_ep_abort_all+0x25a>
                *((volatile uint32_t *)(NRF_USBD_BASE + 0x800)) = 0x7B6 + (2u * (NRF_USBD_EP_NR_GET(ep) - 1));
    4640:	f004 030f 	and.w	r3, r4, #15
    4644:	3b01      	subs	r3, #1
    4646:	005b      	lsls	r3, r3, #1
    4648:	f203 73b6 	addw	r3, r3, #1974	; 0x7b6
    464c:	4a9b      	ldr	r2, [pc, #620]	; (48bc <usbd_ep_abort_all+0x2f8>)
    464e:	6013      	str	r3, [r2, #0]
                uint8_t temp = *((volatile uint32_t *)(NRF_USBD_BASE + 0x804));
    4650:	3204      	adds	r2, #4
    4652:	6813      	ldr	r3, [r2, #0]
    4654:	b2db      	uxtb	r3, r3
                temp |= (1U << 1);
    4656:	f043 0302 	orr.w	r3, r3, #2
                *((volatile uint32_t *)(NRF_USBD_BASE + 0x804)) |= temp;
    465a:	6811      	ldr	r1, [r2, #0]
    465c:	430b      	orrs	r3, r1
    465e:	6013      	str	r3, [r2, #0]
                (void)(*((volatile uint32_t *)(NRF_USBD_BASE + 0x804)));
    4660:	6813      	ldr	r3, [r2, #0]
        if ((m_ep_dma_waiting | (~m_ep_ready)) & (1U << ep2bit(ep)))
    4662:	4b93      	ldr	r3, [pc, #588]	; (48b0 <usbd_ep_abort_all+0x2ec>)
    4664:	681a      	ldr	r2, [r3, #0]
    4666:	4b93      	ldr	r3, [pc, #588]	; (48b4 <usbd_ep_abort_all+0x2f0>)
    4668:	681b      	ldr	r3, [r3, #0]
    466a:	ea63 0802 	orn	r8, r3, r2
    NRFX_USBD_ASSERT_EP_VALID(ep);
    466e:	f004 030f 	and.w	r3, r4, #15
    4672:	2b08      	cmp	r3, #8
    4674:	f200 80e1 	bhi.w	483a <usbd_ep_abort_all+0x276>
    return NRFX_USBD_EP_BITPOS(ep);
    4678:	b263      	sxtb	r3, r4
    467a:	2b00      	cmp	r3, #0
    467c:	f2c0 80ec 	blt.w	4858 <usbd_ep_abort_all+0x294>
    4680:	2210      	movs	r2, #16
    4682:	f003 030f 	and.w	r3, r3, #15
    4686:	4413      	add	r3, r2
        if ((m_ep_dma_waiting | (~m_ep_ready)) & (1U << ep2bit(ep)))
    4688:	2201      	movs	r2, #1
    468a:	fa02 f303 	lsl.w	r3, r2, r3
    468e:	ea18 0f03 	tst.w	r8, r3
    4692:	d063      	beq.n	475c <usbd_ep_abort_all+0x198>
    NRFX_USBD_ASSERT_EP_VALID(ep);
    4694:	f004 030f 	and.w	r3, r4, #15
    4698:	2b08      	cmp	r3, #8
    469a:	f200 80df 	bhi.w	485c <usbd_ep_abort_all+0x298>
    return NRFX_USBD_EP_BITPOS(ep);
    469e:	b263      	sxtb	r3, r4
    46a0:	2b00      	cmp	r3, #0
    46a2:	f2c0 80ea 	blt.w	487a <usbd_ep_abort_all+0x2b6>
    46a6:	2210      	movs	r2, #16
    46a8:	f003 030f 	and.w	r3, r3, #15
    46ac:	4413      	add	r3, r2
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    46ae:	2201      	movs	r2, #1
    46b0:	fa02 f303 	lsl.w	r3, r2, r3
    46b4:	497f      	ldr	r1, [pc, #508]	; (48b4 <usbd_ep_abort_all+0x2f0>)
    46b6:	680a      	ldr	r2, [r1, #0]
    46b8:	ea22 0203 	bic.w	r2, r2, r3
    46bc:	600a      	str	r2, [r1, #0]
    NRFX_USBD_ASSERT_EP_VALID(ep);
    46be:	f004 030f 	and.w	r3, r4, #15
    46c2:	2b08      	cmp	r3, #8
    46c4:	f200 80db 	bhi.w	487e <usbd_ep_abort_all+0x2ba>
    return NRFX_USBD_EP_BITPOS(ep);
    46c8:	b263      	sxtb	r3, r4
    46ca:	2b00      	cmp	r3, #0
    46cc:	f2c0 80e6 	blt.w	489c <usbd_ep_abort_all+0x2d8>
    46d0:	2210      	movs	r2, #16
    46d2:	f003 030f 	and.w	r3, r3, #15
    46d6:	4413      	add	r3, r2
            m_ep_ready       |=   1U << ep2bit(ep) ;
    46d8:	2201      	movs	r2, #1
    46da:	fa02 f303 	lsl.w	r3, r2, r3
    46de:	4974      	ldr	r1, [pc, #464]	; (48b0 <usbd_ep_abort_all+0x2ec>)
    46e0:	680a      	ldr	r2, [r1, #0]
    46e2:	431a      	orrs	r2, r3
    46e4:	600a      	str	r2, [r1, #0]
            p_state->handler.feeder = NULL;
    46e6:	2300      	movs	r3, #0
    46e8:	603b      	str	r3, [r7, #0]
            p_state->status = NRFX_USBD_EP_ABORTED;
    46ea:	2303      	movs	r3, #3
    46ec:	73bb      	strb	r3, [r7, #14]
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
    46ee:	2206      	movs	r2, #6
    46f0:	f88d 2004 	strb.w	r2, [sp, #4]
    46f4:	f88d 4006 	strb.w	r4, [sp, #6]
    46f8:	f88d 3007 	strb.w	r3, [sp, #7]
            m_event_handler(&evt);
    46fc:	4b70      	ldr	r3, [pc, #448]	; (48c0 <usbd_ep_abort_all+0x2fc>)
    46fe:	681b      	ldr	r3, [r3, #0]
    4700:	a801      	add	r0, sp, #4
    4702:	4798      	blx	r3
    4704:	e02a      	b.n	475c <usbd_ep_abort_all+0x198>
    NRFX_USBD_ASSERT_EP_VALID(ep);
    4706:	f8df 81cc 	ldr.w	r8, [pc, #460]	; 48d4 <usbd_ep_abort_all+0x310>
    470a:	f240 23a2 	movw	r3, #674	; 0x2a2
    470e:	4642      	mov	r2, r8
    4710:	496c      	ldr	r1, [pc, #432]	; (48c4 <usbd_ep_abort_all+0x300>)
    4712:	486d      	ldr	r0, [pc, #436]	; (48c8 <usbd_ep_abort_all+0x304>)
    4714:	f00b f8b3 	bl	f87e <printk>
    4718:	f240 21a2 	movw	r1, #674	; 0x2a2
    471c:	4640      	mov	r0, r8
    471e:	f00b f934 	bl	f98a <assert_post_action>
    4722:	e77e      	b.n	4622 <usbd_ep_abort_all+0x5e>
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    4724:	4b69      	ldr	r3, [pc, #420]	; (48cc <usbd_ep_abort_all+0x308>)
    4726:	e780      	b.n	462a <usbd_ep_abort_all+0x66>
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
    4728:	4b62      	ldr	r3, [pc, #392]	; (48b4 <usbd_ep_abort_all+0x2f0>)
    472a:	681b      	ldr	r3, [r3, #0]
    472c:	ea6f 0803 	mvn.w	r8, r3
    NRFX_USBD_ASSERT_EP_VALID(ep);
    4730:	f004 030f 	and.w	r3, r4, #15
    4734:	2b08      	cmp	r3, #8
    4736:	d816      	bhi.n	4766 <usbd_ep_abort_all+0x1a2>
    return NRFX_USBD_EP_BITPOS(ep);
    4738:	b263      	sxtb	r3, r4
    473a:	2b00      	cmp	r3, #0
    473c:	db22      	blt.n	4784 <usbd_ep_abort_all+0x1c0>
    473e:	2210      	movs	r2, #16
    4740:	f003 030f 	and.w	r3, r3, #15
    4744:	4413      	add	r3, r2
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
    4746:	2201      	movs	r2, #1
    4748:	fa02 f303 	lsl.w	r3, r2, r3
    474c:	ea18 0f03 	tst.w	r8, r3
    4750:	d01a      	beq.n	4788 <usbd_ep_abort_all+0x1c4>
            nrfx_usbd_transfer_out_drop(ep);
    4752:	4620      	mov	r0, r4
    4754:	f7ff fac0 	bl	3cd8 <nrfx_usbd_transfer_out_drop>
        p_state->status = NRFX_USBD_EP_ABORTED;
    4758:	2303      	movs	r3, #3
    475a:	73bb      	strb	r3, [r7, #14]
	__asm__ volatile(
    475c:	f389 8811 	msr	BASEPRI, r9
    4760:	f3bf 8f6f 	isb	sy
    NRFX_CRITICAL_SECTION_EXIT();
    4764:	e73d      	b.n	45e2 <usbd_ep_abort_all+0x1e>
    NRFX_USBD_ASSERT_EP_VALID(ep);
    4766:	f8df a16c 	ldr.w	sl, [pc, #364]	; 48d4 <usbd_ep_abort_all+0x310>
    476a:	f240 23b5 	movw	r3, #693	; 0x2b5
    476e:	4652      	mov	r2, sl
    4770:	4954      	ldr	r1, [pc, #336]	; (48c4 <usbd_ep_abort_all+0x300>)
    4772:	4855      	ldr	r0, [pc, #340]	; (48c8 <usbd_ep_abort_all+0x304>)
    4774:	f00b f883 	bl	f87e <printk>
    4778:	f240 21b5 	movw	r1, #693	; 0x2b5
    477c:	4650      	mov	r0, sl
    477e:	f00b f904 	bl	f98a <assert_post_action>
    4782:	e7d9      	b.n	4738 <usbd_ep_abort_all+0x174>
    return NRFX_USBD_EP_BITPOS(ep);
    4784:	2200      	movs	r2, #0
    4786:	e7db      	b.n	4740 <usbd_ep_abort_all+0x17c>
            p_state->handler.consumer = NULL;
    4788:	2300      	movs	r3, #0
    478a:	603b      	str	r3, [r7, #0]
    NRFX_USBD_ASSERT_EP_VALID(ep);
    478c:	f004 030f 	and.w	r3, r4, #15
    4790:	2b08      	cmp	r3, #8
    4792:	d822      	bhi.n	47da <usbd_ep_abort_all+0x216>
    return NRFX_USBD_EP_BITPOS(ep);
    4794:	b263      	sxtb	r3, r4
    4796:	2b00      	cmp	r3, #0
    4798:	db2e      	blt.n	47f8 <usbd_ep_abort_all+0x234>
    479a:	2210      	movs	r2, #16
    479c:	f003 030f 	and.w	r3, r3, #15
    47a0:	4413      	add	r3, r2
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    47a2:	2201      	movs	r2, #1
    47a4:	fa02 f303 	lsl.w	r3, r2, r3
    47a8:	4942      	ldr	r1, [pc, #264]	; (48b4 <usbd_ep_abort_all+0x2f0>)
    47aa:	680a      	ldr	r2, [r1, #0]
    47ac:	ea22 0203 	bic.w	r2, r2, r3
    47b0:	600a      	str	r2, [r1, #0]
    NRFX_USBD_ASSERT_EP_VALID(ep);
    47b2:	f004 030f 	and.w	r3, r4, #15
    47b6:	2b08      	cmp	r3, #8
    47b8:	d820      	bhi.n	47fc <usbd_ep_abort_all+0x238>
    return NRFX_USBD_EP_BITPOS(ep);
    47ba:	b264      	sxtb	r4, r4
    47bc:	2c00      	cmp	r4, #0
    47be:	db2c      	blt.n	481a <usbd_ep_abort_all+0x256>
    47c0:	2310      	movs	r3, #16
    47c2:	f004 040f 	and.w	r4, r4, #15
    47c6:	441c      	add	r4, r3
            m_ep_ready &= ~(1U << ep2bit(ep));
    47c8:	2301      	movs	r3, #1
    47ca:	fa03 f404 	lsl.w	r4, r3, r4
    47ce:	4a38      	ldr	r2, [pc, #224]	; (48b0 <usbd_ep_abort_all+0x2ec>)
    47d0:	6813      	ldr	r3, [r2, #0]
    47d2:	ea23 0304 	bic.w	r3, r3, r4
    47d6:	6013      	str	r3, [r2, #0]
    47d8:	e7be      	b.n	4758 <usbd_ep_abort_all+0x194>
    NRFX_USBD_ASSERT_EP_VALID(ep);
    47da:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 48d4 <usbd_ep_abort_all+0x310>
    47de:	f240 23b5 	movw	r3, #693	; 0x2b5
    47e2:	4642      	mov	r2, r8
    47e4:	4937      	ldr	r1, [pc, #220]	; (48c4 <usbd_ep_abort_all+0x300>)
    47e6:	4838      	ldr	r0, [pc, #224]	; (48c8 <usbd_ep_abort_all+0x304>)
    47e8:	f00b f849 	bl	f87e <printk>
    47ec:	f240 21b5 	movw	r1, #693	; 0x2b5
    47f0:	4640      	mov	r0, r8
    47f2:	f00b f8ca 	bl	f98a <assert_post_action>
    47f6:	e7cd      	b.n	4794 <usbd_ep_abort_all+0x1d0>
    return NRFX_USBD_EP_BITPOS(ep);
    47f8:	2200      	movs	r2, #0
    47fa:	e7cf      	b.n	479c <usbd_ep_abort_all+0x1d8>
    NRFX_USBD_ASSERT_EP_VALID(ep);
    47fc:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 48d4 <usbd_ep_abort_all+0x310>
    4800:	f240 23b5 	movw	r3, #693	; 0x2b5
    4804:	4642      	mov	r2, r8
    4806:	492f      	ldr	r1, [pc, #188]	; (48c4 <usbd_ep_abort_all+0x300>)
    4808:	482f      	ldr	r0, [pc, #188]	; (48c8 <usbd_ep_abort_all+0x304>)
    480a:	f00b f838 	bl	f87e <printk>
    480e:	f240 21b5 	movw	r1, #693	; 0x2b5
    4812:	4640      	mov	r0, r8
    4814:	f00b f8b9 	bl	f98a <assert_post_action>
    4818:	e7cf      	b.n	47ba <usbd_ep_abort_all+0x1f6>
    return NRFX_USBD_EP_BITPOS(ep);
    481a:	2300      	movs	r3, #0
    481c:	e7d1      	b.n	47c2 <usbd_ep_abort_all+0x1fe>
                *((volatile uint32_t *)(NRF_USBD_BASE + 0x800)) = 0x7B4;
    481e:	4b27      	ldr	r3, [pc, #156]	; (48bc <usbd_ep_abort_all+0x2f8>)
    4820:	f240 72b4 	movw	r2, #1972	; 0x7b4
    4824:	601a      	str	r2, [r3, #0]
                uint8_t temp = *((volatile uint32_t *)(NRF_USBD_BASE + 0x804));
    4826:	4a2a      	ldr	r2, [pc, #168]	; (48d0 <usbd_ep_abort_all+0x30c>)
    4828:	6813      	ldr	r3, [r2, #0]
    482a:	b2db      	uxtb	r3, r3
                temp |= (1U << 2);
    482c:	f043 0304 	orr.w	r3, r3, #4
                *((volatile uint32_t *)(NRF_USBD_BASE + 0x804)) |= temp;
    4830:	6811      	ldr	r1, [r2, #0]
    4832:	430b      	orrs	r3, r1
    4834:	6013      	str	r3, [r2, #0]
                (void)(*((volatile uint32_t *)(NRF_USBD_BASE + 0x804)));
    4836:	6813      	ldr	r3, [r2, #0]
    4838:	e713      	b.n	4662 <usbd_ep_abort_all+0x9e>
    NRFX_USBD_ASSERT_EP_VALID(ep);
    483a:	f8df a098 	ldr.w	sl, [pc, #152]	; 48d4 <usbd_ep_abort_all+0x310>
    483e:	f240 23b5 	movw	r3, #693	; 0x2b5
    4842:	4652      	mov	r2, sl
    4844:	491f      	ldr	r1, [pc, #124]	; (48c4 <usbd_ep_abort_all+0x300>)
    4846:	4820      	ldr	r0, [pc, #128]	; (48c8 <usbd_ep_abort_all+0x304>)
    4848:	f00b f819 	bl	f87e <printk>
    484c:	f240 21b5 	movw	r1, #693	; 0x2b5
    4850:	4650      	mov	r0, sl
    4852:	f00b f89a 	bl	f98a <assert_post_action>
    4856:	e70f      	b.n	4678 <usbd_ep_abort_all+0xb4>
    return NRFX_USBD_EP_BITPOS(ep);
    4858:	2200      	movs	r2, #0
    485a:	e712      	b.n	4682 <usbd_ep_abort_all+0xbe>
    NRFX_USBD_ASSERT_EP_VALID(ep);
    485c:	f8df 8074 	ldr.w	r8, [pc, #116]	; 48d4 <usbd_ep_abort_all+0x310>
    4860:	f240 23b5 	movw	r3, #693	; 0x2b5
    4864:	4642      	mov	r2, r8
    4866:	4917      	ldr	r1, [pc, #92]	; (48c4 <usbd_ep_abort_all+0x300>)
    4868:	4817      	ldr	r0, [pc, #92]	; (48c8 <usbd_ep_abort_all+0x304>)
    486a:	f00b f808 	bl	f87e <printk>
    486e:	f240 21b5 	movw	r1, #693	; 0x2b5
    4872:	4640      	mov	r0, r8
    4874:	f00b f889 	bl	f98a <assert_post_action>
    4878:	e711      	b.n	469e <usbd_ep_abort_all+0xda>
    return NRFX_USBD_EP_BITPOS(ep);
    487a:	2200      	movs	r2, #0
    487c:	e714      	b.n	46a8 <usbd_ep_abort_all+0xe4>
    NRFX_USBD_ASSERT_EP_VALID(ep);
    487e:	f8df 8054 	ldr.w	r8, [pc, #84]	; 48d4 <usbd_ep_abort_all+0x310>
    4882:	f240 23b5 	movw	r3, #693	; 0x2b5
    4886:	4642      	mov	r2, r8
    4888:	490e      	ldr	r1, [pc, #56]	; (48c4 <usbd_ep_abort_all+0x300>)
    488a:	480f      	ldr	r0, [pc, #60]	; (48c8 <usbd_ep_abort_all+0x304>)
    488c:	f00a fff7 	bl	f87e <printk>
    4890:	f240 21b5 	movw	r1, #693	; 0x2b5
    4894:	4640      	mov	r0, r8
    4896:	f00b f878 	bl	f98a <assert_post_action>
    489a:	e715      	b.n	46c8 <usbd_ep_abort_all+0x104>
    return NRFX_USBD_EP_BITPOS(ep);
    489c:	2200      	movs	r2, #0
    489e:	e718      	b.n	46d2 <usbd_ep_abort_all+0x10e>
    m_ep_ready = (((1U << NRF_USBD_EPIN_CNT) - 1U) << NRFX_USBD_EPIN_BITPOS_0);
    48a0:	4b03      	ldr	r3, [pc, #12]	; (48b0 <usbd_ep_abort_all+0x2ec>)
    48a2:	f240 12ff 	movw	r2, #511	; 0x1ff
    48a6:	601a      	str	r2, [r3, #0]
}
    48a8:	b002      	add	sp, #8
    48aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    48ae:	bf00      	nop
    48b0:	200003f8 	.word	0x200003f8
    48b4:	20000388 	.word	0x20000388
    48b8:	200003fc 	.word	0x200003fc
    48bc:	40027800 	.word	0x40027800
    48c0:	2000051c 	.word	0x2000051c
    48c4:	00011c28 	.word	0x00011c28
    48c8:	00010f8c 	.word	0x00010f8c
    48cc:	2000048c 	.word	0x2000048c
    48d0:	40027804 	.word	0x40027804
    48d4:	00011634 	.word	0x00011634

000048d8 <nrfx_usbd_stop>:
{
    48d8:	b510      	push	{r4, lr}
    NRFX_ASSERT(m_drv_state == NRFX_DRV_STATE_POWERED_ON);
    48da:	4b16      	ldr	r3, [pc, #88]	; (4934 <nrfx_usbd_stop+0x5c>)
    48dc:	781b      	ldrb	r3, [r3, #0]
    48de:	2b02      	cmp	r3, #2
    48e0:	d108      	bne.n	48f4 <nrfx_usbd_stop+0x1c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    48e2:	4b15      	ldr	r3, [pc, #84]	; (4938 <nrfx_usbd_stop+0x60>)
    48e4:	2280      	movs	r2, #128	; 0x80
    48e6:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    if (NRFX_IRQ_IS_ENABLED(USBD_IRQn))
    48ea:	2027      	movs	r0, #39	; 0x27
    48ec:	f004 fe00 	bl	94f0 <z_arch_irq_is_enabled>
    48f0:	b970      	cbnz	r0, 4910 <nrfx_usbd_stop+0x38>
}
    48f2:	bd10      	pop	{r4, pc}
    NRFX_ASSERT(m_drv_state == NRFX_DRV_STATE_POWERED_ON);
    48f4:	4c11      	ldr	r4, [pc, #68]	; (493c <nrfx_usbd_stop+0x64>)
    48f6:	f44f 63eb 	mov.w	r3, #1880	; 0x758
    48fa:	4622      	mov	r2, r4
    48fc:	4910      	ldr	r1, [pc, #64]	; (4940 <nrfx_usbd_stop+0x68>)
    48fe:	4811      	ldr	r0, [pc, #68]	; (4944 <nrfx_usbd_stop+0x6c>)
    4900:	f00a ffbd 	bl	f87e <printk>
    4904:	f44f 61eb 	mov.w	r1, #1880	; 0x758
    4908:	4620      	mov	r0, r4
    490a:	f00b f83e 	bl	f98a <assert_post_action>
    490e:	e7e8      	b.n	48e2 <nrfx_usbd_stop+0xa>
        usbd_ep_abort_all();
    4910:	f7ff fe58 	bl	45c4 <usbd_ep_abort_all>
    NRF_USBD->USBPULLUP = USBD_USBPULLUP_CONNECT_Disabled << USBD_USBPULLUP_CONNECT_Pos;
    4914:	4c0c      	ldr	r4, [pc, #48]	; (4948 <nrfx_usbd_stop+0x70>)
    4916:	2300      	movs	r3, #0
    4918:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
  __ASM volatile ("isb 0xF":::"memory");
    491c:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb 0xF":::"memory");
    4920:	f3bf 8f4f 	dsb	sy
        NRFX_IRQ_DISABLE(USBD_IRQn);
    4924:	2027      	movs	r0, #39	; 0x27
    4926:	f004 fdcf 	bl	94c8 <z_arch_irq_disable>
    NRF_USBD->INTENCLR = mask;
    492a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    492e:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
}
    4932:	e7de      	b.n	48f2 <nrfx_usbd_stop+0x1a>
    4934:	200027ca 	.word	0x200027ca
    4938:	e000e100 	.word	0xe000e100
    493c:	00011634 	.word	0x00011634
    4940:	00011aa8 	.word	0x00011aa8
    4944:	00010f8c 	.word	0x00010f8c
    4948:	40027000 	.word	0x40027000

0000494c <nrfx_usbd_disable>:
{
    494c:	b510      	push	{r4, lr}
    NRFX_ASSERT(m_drv_state != NRFX_DRV_STATE_UNINITIALIZED);
    494e:	4b14      	ldr	r3, [pc, #80]	; (49a0 <nrfx_usbd_disable+0x54>)
    4950:	781b      	ldrb	r3, [r3, #0]
    4952:	b1b3      	cbz	r3, 4982 <nrfx_usbd_disable+0x36>
    nrfx_usbd_stop();
    4954:	f7ff ffc0 	bl	48d8 <nrfx_usbd_stop>
    return NRF_USBD->INTENSET;
    4958:	4a12      	ldr	r2, [pc, #72]	; (49a4 <nrfx_usbd_disable+0x58>)
    495a:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
    NRF_USBD->INTENCLR = mask;
    495e:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    NRF_USBD->ENABLE = USBD_ENABLE_ENABLE_Disabled << USBD_ENABLE_ENABLE_Pos;
    4962:	2300      	movs	r3, #0
    4964:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
  __ASM volatile ("isb 0xF":::"memory");
    4968:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb 0xF":::"memory");
    496c:	f3bf 8f4f 	dsb	sy
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    4970:	f602 421c 	addw	r2, r2, #3100	; 0xc1c
    4974:	6013      	str	r3, [r2, #0]
    m_dma_pending = false;
    4976:	4a0c      	ldr	r2, [pc, #48]	; (49a8 <nrfx_usbd_disable+0x5c>)
    4978:	7013      	strb	r3, [r2, #0]
    m_drv_state = NRFX_DRV_STATE_INITIALIZED;
    497a:	4b09      	ldr	r3, [pc, #36]	; (49a0 <nrfx_usbd_disable+0x54>)
    497c:	2201      	movs	r2, #1
    497e:	701a      	strb	r2, [r3, #0]
}
    4980:	bd10      	pop	{r4, pc}
    NRFX_ASSERT(m_drv_state != NRFX_DRV_STATE_UNINITIALIZED);
    4982:	4c0a      	ldr	r4, [pc, #40]	; (49ac <nrfx_usbd_disable+0x60>)
    4984:	f240 732b 	movw	r3, #1835	; 0x72b
    4988:	4622      	mov	r2, r4
    498a:	4909      	ldr	r1, [pc, #36]	; (49b0 <nrfx_usbd_disable+0x64>)
    498c:	4809      	ldr	r0, [pc, #36]	; (49b4 <nrfx_usbd_disable+0x68>)
    498e:	f00a ff76 	bl	f87e <printk>
    4992:	f240 712b 	movw	r1, #1835	; 0x72b
    4996:	4620      	mov	r0, r4
    4998:	f00a fff7 	bl	f98a <assert_post_action>
    499c:	e7da      	b.n	4954 <nrfx_usbd_disable+0x8>
    499e:	bf00      	nop
    49a0:	200027ca 	.word	0x200027ca
    49a4:	40027000 	.word	0x40027000
    49a8:	200027c9 	.word	0x200027c9
    49ac:	00011634 	.word	0x00011634
    49b0:	000116cc 	.word	0x000116cc
    49b4:	00010f8c 	.word	0x00010f8c

000049b8 <nrfx_usbd_suspend>:
{
    49b8:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    49ba:	f04f 0320 	mov.w	r3, #32
    49be:	f3ef 8511 	mrs	r5, BASEPRI
    49c2:	f383 8811 	msr	BASEPRI, r3
    49c6:	f3bf 8f6f 	isb	sy
    if (m_bus_suspend)
    49ca:	4b11      	ldr	r3, [pc, #68]	; (4a10 <nrfx_usbd_suspend+0x58>)
    49cc:	781b      	ldrb	r3, [r3, #0]
    49ce:	f003 04ff 	and.w	r4, r3, #255	; 0xff
    49d2:	b92b      	cbnz	r3, 49e0 <nrfx_usbd_suspend+0x28>
	__asm__ volatile(
    49d4:	f385 8811 	msr	BASEPRI, r5
    49d8:	f3bf 8f6f 	isb	sy
}
    49dc:	4620      	mov	r0, r4
    49de:	bd38      	pop	{r3, r4, r5, pc}
        usbd_ep_abort_all();
    49e0:	f7ff fdf0 	bl	45c4 <usbd_ep_abort_all>
    return NRF_USBD->EVENTCAUSE;
    49e4:	4b0b      	ldr	r3, [pc, #44]	; (4a14 <nrfx_usbd_suspend+0x5c>)
    49e6:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
        if (!(nrf_usbd_eventcause_get() & NRF_USBD_EVENTCAUSE_RESUME_MASK))
    49ea:	f413 7f00 	tst.w	r3, #512	; 0x200
    49ee:	d10d      	bne.n	4a0c <nrfx_usbd_suspend+0x54>
    NRF_USBD->LOWPOWER = USBD_LOWPOWER_LOWPOWER_LowPower << USBD_LOWPOWER_LOWPOWER_Pos;
    49f0:	4b08      	ldr	r3, [pc, #32]	; (4a14 <nrfx_usbd_suspend+0x5c>)
    49f2:	2201      	movs	r2, #1
    49f4:	f8c3 252c 	str.w	r2, [r3, #1324]	; 0x52c
    return NRF_USBD->EVENTCAUSE;
    49f8:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
            if (nrf_usbd_eventcause_get() & NRF_USBD_EVENTCAUSE_RESUME_MASK)
    49fc:	f413 7f00 	tst.w	r3, #512	; 0x200
    4a00:	d0e8      	beq.n	49d4 <nrfx_usbd_suspend+0x1c>
    NRF_USBD->LOWPOWER = USBD_LOWPOWER_LOWPOWER_ForceNormal << USBD_LOWPOWER_LOWPOWER_Pos;
    4a02:	2400      	movs	r4, #0
    4a04:	4b03      	ldr	r3, [pc, #12]	; (4a14 <nrfx_usbd_suspend+0x5c>)
    4a06:	f8c3 452c 	str.w	r4, [r3, #1324]	; 0x52c
    4a0a:	e7e3      	b.n	49d4 <nrfx_usbd_suspend+0x1c>
    bool suspended = false;
    4a0c:	2400      	movs	r4, #0
    4a0e:	e7e1      	b.n	49d4 <nrfx_usbd_suspend+0x1c>
    4a10:	200027c8 	.word	0x200027c8
    4a14:	40027000 	.word	0x40027000

00004a18 <_DoInit>:
*
*/
#define INIT()  do {                                            \
                  if (_SEGGER_RTT.acID[0] == '\0') { _DoInit(); }  \
                } while (0)
static void _DoInit(void) {
    4a18:	b510      	push	{r4, lr}
  SEGGER_RTT_CB* p;
  //
  // Initialize control block
  //
  p = &_SEGGER_RTT;
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    4a1a:	4c11      	ldr	r4, [pc, #68]	; (4a60 <_DoInit+0x48>)
    4a1c:	2303      	movs	r3, #3
    4a1e:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    4a20:	6163      	str	r3, [r4, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    4a22:	4a10      	ldr	r2, [pc, #64]	; (4a64 <_DoInit+0x4c>)
    4a24:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
    4a26:	4b10      	ldr	r3, [pc, #64]	; (4a68 <_DoInit+0x50>)
    4a28:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
    4a2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
    4a2e:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
    4a30:	2300      	movs	r3, #0
    4a32:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    4a34:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    4a36:	62e3      	str	r3, [r4, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
    4a38:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
    4a3a:	4a0c      	ldr	r2, [pc, #48]	; (4a6c <_DoInit+0x54>)
    4a3c:	6662      	str	r2, [r4, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
    4a3e:	2210      	movs	r2, #16
    4a40:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
    4a42:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    4a44:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    4a46:	6763      	str	r3, [r4, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  strcpy(&p->acID[7], "RTT");
    4a48:	4909      	ldr	r1, [pc, #36]	; (4a70 <_DoInit+0x58>)
    4a4a:	1de0      	adds	r0, r4, #7
    4a4c:	f00b fd33 	bl	104b6 <strcpy>
  strcpy(&p->acID[0], "SEGGER");
    4a50:	4908      	ldr	r1, [pc, #32]	; (4a74 <_DoInit+0x5c>)
    4a52:	4620      	mov	r0, r4
    4a54:	f00b fd2f 	bl	104b6 <strcpy>
  p->acID[6] = ' ';
    4a58:	2320      	movs	r3, #32
    4a5a:	71a3      	strb	r3, [r4, #6]
}
    4a5c:	bd10      	pop	{r4, pc}
    4a5e:	bf00      	nop
    4a60:	20000564 	.word	0x20000564
    4a64:	00011d70 	.word	0x00011d70
    4a68:	2000061c 	.word	0x2000061c
    4a6c:	2000060c 	.word	0x2000060c
    4a70:	00011d7c 	.word	0x00011d7c
    4a74:	00011d80 	.word	0x00011d80

00004a78 <SEGGER_RTT_WriteSkipNoLock>:
*    (1) If there is not enough space in the "Up"-buffer, all data is dropped.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    4a78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4a7c:	b083      	sub	sp, #12
    4a7e:	4604      	mov	r4, r0
    4a80:	9101      	str	r1, [sp, #4]
    4a82:	4616      	mov	r6, r2
  pData = (const char *)pBuffer;
  //
  // Get "to-host" ring buffer and copy some elements into local variables.
  //
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
  RdOff = pRing->RdOff;
    4a84:	0043      	lsls	r3, r0, #1
    4a86:	4403      	add	r3, r0
    4a88:	00d9      	lsls	r1, r3, #3
    4a8a:	4a42      	ldr	r2, [pc, #264]	; (4b94 <SEGGER_RTT_WriteSkipNoLock+0x11c>)
    4a8c:	440a      	add	r2, r1
    4a8e:	6a93      	ldr	r3, [r2, #40]	; 0x28
  WrOff = pRing->WrOff;
    4a90:	6a55      	ldr	r5, [r2, #36]	; 0x24
  //
  //    RdOff > WrOff -> Space until RdOff - 1 is free.
  //  AND
  //    WrOff + NumBytes < RdOff -> Data fits into buffer
  //
  if (RdOff <= WrOff) {
    4a92:	42ab      	cmp	r3, r5
    4a94:	d860      	bhi.n	4b58 <SEGGER_RTT_WriteSkipNoLock+0xe0>
    //
    // Get space until WrOff will be at wrap around.
    //
    Avail = pRing->SizeOfBuffer - 1u - WrOff ;
    4a96:	4a3f      	ldr	r2, [pc, #252]	; (4b94 <SEGGER_RTT_WriteSkipNoLock+0x11c>)
    4a98:	440a      	add	r2, r1
    4a9a:	f8d2 8020 	ldr.w	r8, [r2, #32]
    4a9e:	eba8 0905 	sub.w	r9, r8, r5
    4aa2:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
    if (Avail >= NumBytes) {
    4aa6:	42b2      	cmp	r2, r6
    4aa8:	d204      	bcs.n	4ab4 <SEGGER_RTT_WriteSkipNoLock+0x3c>
      return 1;
    }
    //
    // If data did not fit into space until wrap around calculate complete space in buffer.
    //
    Avail += RdOff;
    4aaa:	4413      	add	r3, r2
    //
    // If there is still no space for the whole of this output, don't bother.
    //
    if (Avail >= NumBytes) {
    4aac:	429e      	cmp	r6, r3
    4aae:	d917      	bls.n	4ae0 <SEGGER_RTT_WriteSkipNoLock+0x68>
    }
  }
  //
  // If we reach this point no data has been written
  //
  return 0;
    4ab0:	2000      	movs	r0, #0
    4ab2:	e056      	b.n	4b62 <SEGGER_RTT_WriteSkipNoLock+0xea>
      SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
    4ab4:	4f37      	ldr	r7, [pc, #220]	; (4b94 <SEGGER_RTT_WriteSkipNoLock+0x11c>)
    4ab6:	1c43      	adds	r3, r0, #1
    4ab8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    4abc:	00da      	lsls	r2, r3, #3
    4abe:	443a      	add	r2, r7
    4ac0:	6850      	ldr	r0, [r2, #4]
    4ac2:	4632      	mov	r2, r6
    4ac4:	9901      	ldr	r1, [sp, #4]
    4ac6:	4428      	add	r0, r5
    4ac8:	f00b fd32 	bl	10530 <memcpy>
      pRing->WrOff = WrOff + NumBytes;
    4acc:	4435      	add	r5, r6
    4ace:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    4ad2:	00e3      	lsls	r3, r4, #3
    4ad4:	eb07 0803 	add.w	r8, r7, r3
    4ad8:	f8c8 5024 	str.w	r5, [r8, #36]	; 0x24
      return 1;
    4adc:	2001      	movs	r0, #1
    4ade:	e040      	b.n	4b62 <SEGGER_RTT_WriteSkipNoLock+0xea>
      if (Rem > NumBytes) {
    4ae0:	45b1      	cmp	r9, r6
    4ae2:	d915      	bls.n	4b10 <SEGGER_RTT_WriteSkipNoLock+0x98>
        SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
    4ae4:	4f2b      	ldr	r7, [pc, #172]	; (4b94 <SEGGER_RTT_WriteSkipNoLock+0x11c>)
    4ae6:	1c43      	adds	r3, r0, #1
    4ae8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    4aec:	00da      	lsls	r2, r3, #3
    4aee:	443a      	add	r2, r7
    4af0:	6850      	ldr	r0, [r2, #4]
    4af2:	4632      	mov	r2, r6
    4af4:	9901      	ldr	r1, [sp, #4]
    4af6:	4428      	add	r0, r5
    4af8:	f00b fd1a 	bl	10530 <memcpy>
        pRing->WrOff = WrOff + NumBytes;
    4afc:	4435      	add	r5, r6
    4afe:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    4b02:	00e3      	lsls	r3, r4, #3
    4b04:	eb07 0803 	add.w	r8, r7, r3
    4b08:	f8c8 5024 	str.w	r5, [r8, #36]	; 0x24
      return 1;
    4b0c:	2001      	movs	r0, #1
    4b0e:	e028      	b.n	4b62 <SEGGER_RTT_WriteSkipNoLock+0xea>
        SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, Rem);
    4b10:	f8df a080 	ldr.w	sl, [pc, #128]	; 4b94 <SEGGER_RTT_WriteSkipNoLock+0x11c>
    4b14:	f100 0b01 	add.w	fp, r0, #1
    4b18:	ea4f 074b 	mov.w	r7, fp, lsl #1
    4b1c:	eb07 020b 	add.w	r2, r7, fp
    4b20:	00d3      	lsls	r3, r2, #3
    4b22:	4453      	add	r3, sl
    4b24:	6858      	ldr	r0, [r3, #4]
    4b26:	464a      	mov	r2, r9
    4b28:	9901      	ldr	r1, [sp, #4]
    4b2a:	4428      	add	r0, r5
    4b2c:	f00b fd00 	bl	10530 <memcpy>
        SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytes - Rem);
    4b30:	44bb      	add	fp, r7
    4b32:	ea4f 03cb 	mov.w	r3, fp, lsl #3
    4b36:	4453      	add	r3, sl
    4b38:	eba5 0508 	sub.w	r5, r5, r8
    4b3c:	4435      	add	r5, r6
    4b3e:	462a      	mov	r2, r5
    4b40:	9901      	ldr	r1, [sp, #4]
    4b42:	4449      	add	r1, r9
    4b44:	6858      	ldr	r0, [r3, #4]
    4b46:	f00b fcf3 	bl	10530 <memcpy>
        pRing->WrOff = NumBytes - Rem;
    4b4a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    4b4e:	00e3      	lsls	r3, r4, #3
    4b50:	449a      	add	sl, r3
    4b52:	f8ca 5024 	str.w	r5, [sl, #36]	; 0x24
    4b56:	e7d9      	b.n	4b0c <SEGGER_RTT_WriteSkipNoLock+0x94>
    Avail = RdOff - WrOff - 1u;
    4b58:	1b5b      	subs	r3, r3, r5
    4b5a:	3b01      	subs	r3, #1
    if (Avail >= NumBytes) {
    4b5c:	429e      	cmp	r6, r3
    4b5e:	d903      	bls.n	4b68 <SEGGER_RTT_WriteSkipNoLock+0xf0>
  return 0;
    4b60:	2000      	movs	r0, #0
}
    4b62:	b003      	add	sp, #12
    4b64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
    4b68:	f8df 8028 	ldr.w	r8, [pc, #40]	; 4b94 <SEGGER_RTT_WriteSkipNoLock+0x11c>
    4b6c:	1c43      	adds	r3, r0, #1
    4b6e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    4b72:	00da      	lsls	r2, r3, #3
    4b74:	4442      	add	r2, r8
    4b76:	6850      	ldr	r0, [r2, #4]
    4b78:	4632      	mov	r2, r6
    4b7a:	9901      	ldr	r1, [sp, #4]
    4b7c:	4428      	add	r0, r5
    4b7e:	f00b fcd7 	bl	10530 <memcpy>
      pRing->WrOff = WrOff + NumBytes;
    4b82:	4435      	add	r5, r6
    4b84:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    4b88:	00e3      	lsls	r3, r4, #3
    4b8a:	4498      	add	r8, r3
    4b8c:	f8c8 5024 	str.w	r5, [r8, #36]	; 0x24
      return 1;
    4b90:	2001      	movs	r0, #1
    4b92:	e7e6      	b.n	4b62 <SEGGER_RTT_WriteSkipNoLock+0xea>
    4b94:	20000564 	.word	0x20000564

00004b98 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    4b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4b9a:	460f      	mov	r7, r1
    4b9c:	4616      	mov	r6, r2

  pData = (const char *)pBuffer;
  //
  // Get "to-host" ring buffer.
  //
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
    4b9e:	4a19      	ldr	r2, [pc, #100]	; (4c04 <SEGGER_RTT_WriteNoLock+0x6c>)
    4ba0:	1c43      	adds	r3, r0, #1
    4ba2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    4ba6:	00dd      	lsls	r5, r3, #3
    4ba8:	4415      	add	r5, r2
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
    4baa:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    4bae:	00c3      	lsls	r3, r0, #3
    4bb0:	441a      	add	r2, r3
    4bb2:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
    4bb4:	2c01      	cmp	r4, #1
    4bb6:	d011      	beq.n	4bdc <SEGGER_RTT_WriteNoLock+0x44>
    4bb8:	b124      	cbz	r4, 4bc4 <SEGGER_RTT_WriteNoLock+0x2c>
    4bba:	2c02      	cmp	r4, #2
    4bbc:	d01b      	beq.n	4bf6 <SEGGER_RTT_WriteNoLock+0x5e>
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
    break;
  default:
    Status = 0u;
    4bbe:	2400      	movs	r4, #0
  }
  //
  // Finish up.
  //
  return Status;
}
    4bc0:	4620      	mov	r0, r4
    4bc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    Avail = _GetAvailWriteSpace(pRing);
    4bc4:	4628      	mov	r0, r5
    4bc6:	f00a fef6 	bl	f9b6 <_GetAvailWriteSpace>
    if (Avail < NumBytes) {
    4bca:	42b0      	cmp	r0, r6
    4bcc:	d3f8      	bcc.n	4bc0 <SEGGER_RTT_WriteNoLock+0x28>
      _WriteNoCheck(pRing, pData, NumBytes);
    4bce:	4632      	mov	r2, r6
    4bd0:	4639      	mov	r1, r7
    4bd2:	4628      	mov	r0, r5
    4bd4:	f00a fefb 	bl	f9ce <_WriteNoCheck>
      Status = NumBytes;
    4bd8:	4634      	mov	r4, r6
    4bda:	e7f1      	b.n	4bc0 <SEGGER_RTT_WriteNoLock+0x28>
    Avail = _GetAvailWriteSpace(pRing);
    4bdc:	4628      	mov	r0, r5
    4bde:	f00a feea 	bl	f9b6 <_GetAvailWriteSpace>
    Status = Avail < NumBytes ? Avail : NumBytes;
    4be2:	4634      	mov	r4, r6
    4be4:	4286      	cmp	r6, r0
    4be6:	bf28      	it	cs
    4be8:	4604      	movcs	r4, r0
    _WriteNoCheck(pRing, pData, Status);
    4bea:	4622      	mov	r2, r4
    4bec:	4639      	mov	r1, r7
    4bee:	4628      	mov	r0, r5
    4bf0:	f00a feed 	bl	f9ce <_WriteNoCheck>
    break;
    4bf4:	e7e4      	b.n	4bc0 <SEGGER_RTT_WriteNoLock+0x28>
    Status = _WriteBlocking(pRing, pData, NumBytes);
    4bf6:	4632      	mov	r2, r6
    4bf8:	4628      	mov	r0, r5
    4bfa:	f00a ff0c 	bl	fa16 <_WriteBlocking>
    4bfe:	4604      	mov	r4, r0
  return Status;
    4c00:	e7de      	b.n	4bc0 <SEGGER_RTT_WriteNoLock+0x28>
    4c02:	bf00      	nop
    4c04:	20000564 	.word	0x20000564

00004c08 <SEGGER_RTT_HasDataUp>:
*  Return value:
*  ==0:  No data
*  !=0:  Data in buffer
*
*/
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
    4c08:	b410      	push	{r4}
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = &_SEGGER_RTT.aUp[BufferIndex];
  v = pRing->RdOff;
    4c0a:	4a06      	ldr	r2, [pc, #24]	; (4c24 <SEGGER_RTT_HasDataUp+0x1c>)
    4c0c:	0043      	lsls	r3, r0, #1
    4c0e:	181c      	adds	r4, r3, r0
    4c10:	00e1      	lsls	r1, r4, #3
    4c12:	4411      	add	r1, r2
    4c14:	6a8c      	ldr	r4, [r1, #40]	; 0x28
  return pRing->WrOff - v;
    4c16:	4403      	add	r3, r0
    4c18:	00d9      	lsls	r1, r3, #3
    4c1a:	440a      	add	r2, r1
    4c1c:	6a50      	ldr	r0, [r2, #36]	; 0x24
}
    4c1e:	1b00      	subs	r0, r0, r4
    4c20:	bc10      	pop	{r4}
    4c22:	4770      	bx	lr
    4c24:	20000564 	.word	0x20000564

00004c28 <thread_set>:
		}
	}
}

static void thread_set(k_tid_t process_tid)
{
    4c28:	b508      	push	{r3, lr}
	proc_tid = process_tid;
    4c2a:	4b05      	ldr	r3, [pc, #20]	; (4c40 <thread_set+0x18>)
    4c2c:	6018      	str	r0, [r3, #0]

	if (IS_ENABLED(CONFIG_LOG_IMMEDIATE)) {
		return;
	}

	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    4c2e:	b118      	cbz	r0, 4c38 <thread_set+0x10>
	    process_tid &&
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
    4c30:	4b04      	ldr	r3, [pc, #16]	; (4c44 <thread_set+0x1c>)
    4c32:	681b      	ldr	r3, [r3, #0]
	    process_tid &&
    4c34:	2b09      	cmp	r3, #9
    4c36:	dc00      	bgt.n	4c3a <thread_set+0x12>
		k_wakeup(proc_tid);
	}
}
    4c38:	bd08      	pop	{r3, pc}
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_WAKEUP, k_wakeup, k_tid_t, thread)
    4c3a:	f009 fc53 	bl	e4e4 <z_impl_k_wakeup>
    4c3e:	e7fb      	b.n	4c38 <thread_set+0x10>
    4c40:	20000ab8 	.word	0x20000ab8
    4c44:	20000a1c 	.word	0x20000a1c

00004c48 <msg_process>:
		return true;
	}
}

static void msg_process(struct log_msg *msg, bool bypass)
{
    4c48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4c4c:	4680      	mov	r8, r0
	struct log_backend const *backend;

	if (!bypass) {
    4c4e:	2900      	cmp	r1, #0
    4c50:	d149      	bne.n	4ce6 <msg_process+0x9e>
		for (int i = 0; i < log_backend_count_get(); i++) {
    4c52:	2400      	movs	r4, #0
    4c54:	e021      	b.n	4c9a <msg_process+0x52>
 * @return True if backend is active, false otherwise.
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
    4c56:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 4d04 <msg_process+0xbc>
    4c5a:	f44f 7385 	mov.w	r3, #266	; 0x10a
    4c5e:	464a      	mov	r2, r9
    4c60:	4923      	ldr	r1, [pc, #140]	; (4cf0 <msg_process+0xa8>)
    4c62:	4824      	ldr	r0, [pc, #144]	; (4cf4 <msg_process+0xac>)
    4c64:	f00a fe0b 	bl	f87e <printk>
    4c68:	f44f 7185 	mov.w	r1, #266	; 0x10a
    4c6c:	4648      	mov	r0, r9
    4c6e:	f00a fe8c 	bl	f98a <assert_post_action>
    4c72:	e01c      	b.n	4cae <msg_process+0x66>
	__ASSERT_NO_MSG(backend != NULL);
    4c74:	f8df 908c 	ldr.w	r9, [pc, #140]	; 4d04 <msg_process+0xbc>
    4c78:	2362      	movs	r3, #98	; 0x62
    4c7a:	464a      	mov	r2, r9
    4c7c:	491c      	ldr	r1, [pc, #112]	; (4cf0 <msg_process+0xa8>)
    4c7e:	481d      	ldr	r0, [pc, #116]	; (4cf4 <msg_process+0xac>)
    4c80:	f00a fdfd 	bl	f87e <printk>
    4c84:	2162      	movs	r1, #98	; 0x62
    4c86:	4648      	mov	r0, r9
    4c88:	f00a fe7f 	bl	f98a <assert_post_action>
    4c8c:	e01b      	b.n	4cc6 <msg_process+0x7e>
	backend->api->put(backend, msg);
    4c8e:	5973      	ldr	r3, [r6, r5]
    4c90:	681b      	ldr	r3, [r3, #0]
    4c92:	4641      	mov	r1, r8
    4c94:	4638      	mov	r0, r7
    4c96:	4798      	blx	r3
    4c98:	3401      	adds	r4, #1
    4c9a:	4b17      	ldr	r3, [pc, #92]	; (4cf8 <msg_process+0xb0>)
    4c9c:	4a17      	ldr	r2, [pc, #92]	; (4cfc <msg_process+0xb4>)
    4c9e:	1a9b      	subs	r3, r3, r2
    4ca0:	ebb4 1f23 	cmp.w	r4, r3, asr #4
    4ca4:	da1f      	bge.n	4ce6 <msg_process+0x9e>
	return &__log_backends_start[idx];
    4ca6:	0126      	lsls	r6, r4, #4
    4ca8:	4d14      	ldr	r5, [pc, #80]	; (4cfc <msg_process+0xb4>)
	__ASSERT_NO_MSG(backend != NULL);
    4caa:	1977      	adds	r7, r6, r5
    4cac:	d0d3      	beq.n	4c56 <msg_process+0xe>
	return backend->cb->active;
    4cae:	687b      	ldr	r3, [r7, #4]
    4cb0:	795b      	ldrb	r3, [r3, #5]
			backend = log_backend_get(i);

			if (log_backend_is_active(backend) &&
    4cb2:	2b00      	cmp	r3, #0
    4cb4:	d0f0      	beq.n	4c98 <msg_process+0x50>
			    msg_filter_check(backend, msg)) {
    4cb6:	4641      	mov	r1, r8
    4cb8:	4638      	mov	r0, r7
    4cba:	f00a fefc 	bl	fab6 <msg_filter_check>
			if (log_backend_is_active(backend) &&
    4cbe:	2800      	cmp	r0, #0
    4cc0:	d0ea      	beq.n	4c98 <msg_process+0x50>
	__ASSERT_NO_MSG(backend != NULL);
    4cc2:	2f00      	cmp	r7, #0
    4cc4:	d0d6      	beq.n	4c74 <msg_process+0x2c>
	__ASSERT_NO_MSG(msg != NULL);
    4cc6:	f1b8 0f00 	cmp.w	r8, #0
    4cca:	d1e0      	bne.n	4c8e <msg_process+0x46>
    4ccc:	f8df 9034 	ldr.w	r9, [pc, #52]	; 4d04 <msg_process+0xbc>
    4cd0:	2363      	movs	r3, #99	; 0x63
    4cd2:	464a      	mov	r2, r9
    4cd4:	490a      	ldr	r1, [pc, #40]	; (4d00 <msg_process+0xb8>)
    4cd6:	4807      	ldr	r0, [pc, #28]	; (4cf4 <msg_process+0xac>)
    4cd8:	f00a fdd1 	bl	f87e <printk>
    4cdc:	2163      	movs	r1, #99	; 0x63
    4cde:	4648      	mov	r0, r9
    4ce0:	f00a fe53 	bl	f98a <assert_post_action>
    4ce4:	e7d3      	b.n	4c8e <msg_process+0x46>
				log_backend_put(backend, msg);
			}
		}
	}

	log_msg_put(msg);
    4ce6:	4640      	mov	r0, r8
    4ce8:	f00a ff7a 	bl	fbe0 <log_msg_put>
}
    4cec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    4cf0:	00011e0c 	.word	0x00011e0c
    4cf4:	00010f8c 	.word	0x00010f8c
    4cf8:	00010e34 	.word	0x00010e34
    4cfc:	00010e24 	.word	0x00010e24
    4d00:	00011e24 	.word	0x00011e24
    4d04:	00011dec 	.word	0x00011dec

00004d08 <enable_logger>:

K_THREAD_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(struct device *arg)
{
    4d08:	b530      	push	{r4, r5, lr}
    4d0a:	b087      	sub	sp, #28
K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay)
    4d0c:	4d0b      	ldr	r5, [pc, #44]	; (4d3c <enable_logger+0x34>)
    4d0e:	2400      	movs	r4, #0
    4d10:	9405      	str	r4, [sp, #20]
    4d12:	9404      	str	r4, [sp, #16]
    4d14:	230e      	movs	r3, #14
    4d16:	9303      	str	r3, [sp, #12]
    4d18:	9402      	str	r4, [sp, #8]
    4d1a:	9401      	str	r4, [sp, #4]
    4d1c:	9400      	str	r4, [sp, #0]
    4d1e:	4b08      	ldr	r3, [pc, #32]	; (4d40 <enable_logger+0x38>)
    4d20:	f44f 7240 	mov.w	r2, #768	; 0x300
    4d24:	4907      	ldr	r1, [pc, #28]	; (4d44 <enable_logger+0x3c>)
    4d26:	4628      	mov	r0, r5
    4d28:	f009 fe34 	bl	e994 <z_impl_k_thread_create>
K_SYSCALL_DECLARE2_VOID(K_SYSCALL_K_THREAD_NAME_SET, k_thread_name_set, k_tid_t, thread_id, const char *, value)
    4d2c:	4906      	ldr	r1, [pc, #24]	; (4d48 <enable_logger+0x40>)
    4d2e:	4628      	mov	r0, r5
    4d30:	f00b fedd 	bl	10aee <z_impl_k_thread_name_set>
	} else {
		log_init();
	}

	return 0;
}
    4d34:	4620      	mov	r0, r4
    4d36:	b007      	add	sp, #28
    4d38:	bd30      	pop	{r4, r5, pc}
    4d3a:	bf00      	nop
    4d3c:	20000a4c 	.word	0x20000a4c
    4d40:	00005391 	.word	0x00005391
    4d44:	200047e0 	.word	0x200047e0
    4d48:	00011d88 	.word	0x00011d88

00004d4c <log_core_init>:
{
    4d4c:	b508      	push	{r3, lr}
		log_msg_pool_init();
    4d4e:	f000 fb89 	bl	5464 <log_msg_pool_init>
		log_list_init(&list);
    4d52:	4808      	ldr	r0, [pc, #32]	; (4d74 <log_core_init+0x28>)
    4d54:	f00a fe97 	bl	fa86 <log_list_init>
		k_mem_slab_init(&log_strdup_pool, log_strdup_pool_buf,
    4d58:	2304      	movs	r3, #4
    4d5a:	2228      	movs	r2, #40	; 0x28
    4d5c:	4906      	ldr	r1, [pc, #24]	; (4d78 <log_core_init+0x2c>)
    4d5e:	4807      	ldr	r0, [pc, #28]	; (4d7c <log_core_init+0x30>)
    4d60:	f007 fc7e 	bl	c660 <k_mem_slab_init>
	timestamp_func = timestamp_get;
    4d64:	4b06      	ldr	r3, [pc, #24]	; (4d80 <log_core_init+0x34>)
    4d66:	4a07      	ldr	r2, [pc, #28]	; (4d84 <log_core_init+0x38>)
    4d68:	601a      	str	r2, [r3, #0]
	log_output_timestamp_freq_set(freq);
    4d6a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    4d6e:	f000 fe03 	bl	5978 <log_output_timestamp_freq_set>
}
    4d72:	bd08      	pop	{r3, pc}
    4d74:	20000a28 	.word	0x20000a28
    4d78:	20006bc0 	.word	0x20006bc0
    4d7c:	20000a30 	.word	0x20000a30
    4d80:	20007090 	.word	0x20007090
    4d84:	0000fabb 	.word	0x0000fabb

00004d88 <dropped_notify>:
{
    4d88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    4d8c:	4b21      	ldr	r3, [pc, #132]	; (4e14 <dropped_notify+0x8c>)
    4d8e:	2400      	movs	r4, #0
    4d90:	f3bf 8f5b 	dmb	ish
    4d94:	e853 8f00 	ldrex	r8, [r3]
    4d98:	e843 4200 	strex	r2, r4, [r3]
    4d9c:	2a00      	cmp	r2, #0
    4d9e:	d1f9      	bne.n	4d94 <dropped_notify+0xc>
    4da0:	f3bf 8f5b 	dmb	ish
	for (int i = 0; i < log_backend_count_get(); i++) {
    4da4:	e01c      	b.n	4de0 <dropped_notify+0x58>
	__ASSERT_NO_MSG(backend != NULL);
    4da6:	f8df 9080 	ldr.w	r9, [pc, #128]	; 4e28 <dropped_notify+0xa0>
    4daa:	f44f 7385 	mov.w	r3, #266	; 0x10a
    4dae:	464a      	mov	r2, r9
    4db0:	4919      	ldr	r1, [pc, #100]	; (4e18 <dropped_notify+0x90>)
    4db2:	481a      	ldr	r0, [pc, #104]	; (4e1c <dropped_notify+0x94>)
    4db4:	f00a fd63 	bl	f87e <printk>
    4db8:	f44f 7185 	mov.w	r1, #266	; 0x10a
    4dbc:	4648      	mov	r0, r9
    4dbe:	f00a fde4 	bl	f98a <assert_post_action>
    4dc2:	e017      	b.n	4df4 <dropped_notify+0x6c>
	__ASSERT_NO_MSG(backend != NULL);
    4dc4:	f8df 9060 	ldr.w	r9, [pc, #96]	; 4e28 <dropped_notify+0xa0>
    4dc8:	23a1      	movs	r3, #161	; 0xa1
    4dca:	464a      	mov	r2, r9
    4dcc:	4912      	ldr	r1, [pc, #72]	; (4e18 <dropped_notify+0x90>)
    4dce:	4813      	ldr	r0, [pc, #76]	; (4e1c <dropped_notify+0x94>)
    4dd0:	f00a fd55 	bl	f87e <printk>
    4dd4:	21a1      	movs	r1, #161	; 0xa1
    4dd6:	4648      	mov	r0, r9
    4dd8:	f00a fdd7 	bl	f98a <assert_post_action>
    4ddc:	e010      	b.n	4e00 <dropped_notify+0x78>
    4dde:	3401      	adds	r4, #1
    4de0:	4b0f      	ldr	r3, [pc, #60]	; (4e20 <dropped_notify+0x98>)
    4de2:	4a10      	ldr	r2, [pc, #64]	; (4e24 <dropped_notify+0x9c>)
    4de4:	1a9b      	subs	r3, r3, r2
    4de6:	ebb4 1f23 	cmp.w	r4, r3, asr #4
    4dea:	da11      	bge.n	4e10 <dropped_notify+0x88>
	return &__log_backends_start[idx];
    4dec:	0126      	lsls	r6, r4, #4
    4dee:	4d0d      	ldr	r5, [pc, #52]	; (4e24 <dropped_notify+0x9c>)
	__ASSERT_NO_MSG(backend != NULL);
    4df0:	1977      	adds	r7, r6, r5
    4df2:	d0d8      	beq.n	4da6 <dropped_notify+0x1e>
	return backend->cb->active;
    4df4:	687b      	ldr	r3, [r7, #4]
    4df6:	795b      	ldrb	r3, [r3, #5]
		if (log_backend_is_active(backend)) {
    4df8:	2b00      	cmp	r3, #0
    4dfa:	d0f0      	beq.n	4dde <dropped_notify+0x56>
	__ASSERT_NO_MSG(backend != NULL);
    4dfc:	2f00      	cmp	r7, #0
    4dfe:	d0e1      	beq.n	4dc4 <dropped_notify+0x3c>
	if (backend->api->dropped != NULL) {
    4e00:	5973      	ldr	r3, [r6, r5]
    4e02:	68db      	ldr	r3, [r3, #12]
    4e04:	2b00      	cmp	r3, #0
    4e06:	d0ea      	beq.n	4dde <dropped_notify+0x56>
		backend->api->dropped(backend, cnt);
    4e08:	4641      	mov	r1, r8
    4e0a:	4638      	mov	r0, r7
    4e0c:	4798      	blx	r3
    4e0e:	e7e6      	b.n	4dde <dropped_notify+0x56>
}
    4e10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    4e14:	20000a20 	.word	0x20000a20
    4e18:	00011e0c 	.word	0x00011e0c
    4e1c:	00010f8c 	.word	0x00010f8c
    4e20:	00010e34 	.word	0x00010e34
    4e24:	00010e24 	.word	0x00010e24
    4e28:	00011dec 	.word	0x00011dec

00004e2c <log_process>:
{
    4e2c:	b538      	push	{r3, r4, r5, lr}
	if (!backend_attached && !bypass) {
    4e2e:	4b19      	ldr	r3, [pc, #100]	; (4e94 <log_process+0x68>)
    4e30:	781b      	ldrb	r3, [r3, #0]
    4e32:	b903      	cbnz	r3, 4e36 <log_process+0xa>
    4e34:	b348      	cbz	r0, 4e8a <log_process+0x5e>
    4e36:	4604      	mov	r4, r0
	__asm__ volatile(
    4e38:	f04f 0320 	mov.w	r3, #32
    4e3c:	f3ef 8511 	mrs	r5, BASEPRI
    4e40:	f383 8811 	msr	BASEPRI, r3
    4e44:	f3bf 8f6f 	isb	sy
	msg = log_list_head_get(&list);
    4e48:	4813      	ldr	r0, [pc, #76]	; (4e98 <log_process+0x6c>)
    4e4a:	f00a fe2c 	bl	faa6 <log_list_head_get>
	__asm__ volatile(
    4e4e:	f385 8811 	msr	BASEPRI, r5
    4e52:	f3bf 8f6f 	isb	sy
	if (msg != NULL) {
    4e56:	b170      	cbz	r0, 4e76 <log_process+0x4a>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    4e58:	4b10      	ldr	r3, [pc, #64]	; (4e9c <log_process+0x70>)
    4e5a:	f3bf 8f5b 	dmb	ish
    4e5e:	e853 2f00 	ldrex	r2, [r3]
    4e62:	3a01      	subs	r2, #1
    4e64:	e843 2100 	strex	r1, r2, [r3]
    4e68:	2900      	cmp	r1, #0
    4e6a:	d1f8      	bne.n	4e5e <log_process+0x32>
    4e6c:	f3bf 8f5b 	dmb	ish
		msg_process(msg, bypass);
    4e70:	4621      	mov	r1, r4
    4e72:	f7ff fee9 	bl	4c48 <msg_process>
	if (!bypass && dropped_cnt) {
    4e76:	b914      	cbnz	r4, 4e7e <log_process+0x52>
    4e78:	4b09      	ldr	r3, [pc, #36]	; (4ea0 <log_process+0x74>)
    4e7a:	681b      	ldr	r3, [r3, #0]
    4e7c:	b933      	cbnz	r3, 4e8c <log_process+0x60>
	return (log_list_head_peek(&list) != NULL);
    4e7e:	4806      	ldr	r0, [pc, #24]	; (4e98 <log_process+0x6c>)
    4e80:	f00a fe0f 	bl	faa2 <log_list_head_peek>
    4e84:	3000      	adds	r0, #0
    4e86:	bf18      	it	ne
    4e88:	2001      	movne	r0, #1
}
    4e8a:	bd38      	pop	{r3, r4, r5, pc}
		dropped_notify();
    4e8c:	f7ff ff7c 	bl	4d88 <dropped_notify>
    4e90:	e7f5      	b.n	4e7e <log_process+0x52>
    4e92:	bf00      	nop
    4e94:	200027cc 	.word	0x200027cc
    4e98:	20000a28 	.word	0x20000a28
    4e9c:	20000a1c 	.word	0x20000a1c
    4ea0:	20000a20 	.word	0x20000a20

00004ea4 <log_printk>:
{
    4ea4:	b570      	push	{r4, r5, r6, lr}
    4ea6:	b0a0      	sub	sp, #128	; 0x80
		struct log_msg_ids src_level = {
    4ea8:	2500      	movs	r5, #0
			length = vsnprintk(formatted_str,
    4eaa:	460b      	mov	r3, r1
    4eac:	4602      	mov	r2, r0
    4eae:	2180      	movs	r1, #128	; 0x80
    4eb0:	4668      	mov	r0, sp
    4eb2:	f7fc fa19 	bl	12e8 <vsnprintk>
			length = MIN(length, sizeof(formatted_str));
    4eb6:	4602      	mov	r2, r0
    4eb8:	2880      	cmp	r0, #128	; 0x80
    4eba:	bf28      	it	cs
    4ebc:	2280      	movcs	r2, #128	; 0x80
    4ebe:	4616      	mov	r6, r2
			msg = log_msg_hexdump_create(NULL, formatted_str,
    4ec0:	4669      	mov	r1, sp
    4ec2:	4628      	mov	r0, r5
    4ec4:	f000 fb20 	bl	5508 <log_msg_hexdump_create>
			if (msg == NULL) {
    4ec8:	b370      	cbz	r0, 4f28 <log_printk+0x84>
    4eca:	4604      	mov	r4, r0
	msg->hdr.ids = src_level;
    4ecc:	8145      	strh	r5, [r0, #10]
	msg->hdr.timestamp = timestamp_func();
    4ece:	4b1a      	ldr	r3, [pc, #104]	; (4f38 <log_printk+0x94>)
    4ed0:	681b      	ldr	r3, [r3, #0]
    4ed2:	4798      	blx	r3
    4ed4:	60e0      	str	r0, [r4, #12]
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    4ed6:	4b19      	ldr	r3, [pc, #100]	; (4f3c <log_printk+0x98>)
    4ed8:	f3bf 8f5b 	dmb	ish
    4edc:	e853 2f00 	ldrex	r2, [r3]
    4ee0:	3201      	adds	r2, #1
    4ee2:	e843 2100 	strex	r1, r2, [r3]
    4ee6:	2900      	cmp	r1, #0
    4ee8:	d1f8      	bne.n	4edc <log_printk+0x38>
    4eea:	f3bf 8f5b 	dmb	ish
	__asm__ volatile(
    4eee:	f04f 0320 	mov.w	r3, #32
    4ef2:	f3ef 8511 	mrs	r5, BASEPRI
    4ef6:	f383 8811 	msr	BASEPRI, r3
    4efa:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
    4efe:	4621      	mov	r1, r4
    4f00:	480f      	ldr	r0, [pc, #60]	; (4f40 <log_printk+0x9c>)
    4f02:	f00a fdc4 	bl	fa8e <log_list_add_tail>
	__asm__ volatile(
    4f06:	f385 8811 	msr	BASEPRI, r5
    4f0a:	f3bf 8f6f 	isb	sy
	if (panic_mode) {
    4f0e:	4b0d      	ldr	r3, [pc, #52]	; (4f44 <log_printk+0xa0>)
    4f10:	781b      	ldrb	r3, [r3, #0]
    4f12:	b96b      	cbnz	r3, 4f30 <log_printk+0x8c>
		if ((buffered_cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
    4f14:	4b09      	ldr	r3, [pc, #36]	; (4f3c <log_printk+0x98>)
    4f16:	681b      	ldr	r3, [r3, #0]
    4f18:	2b0a      	cmp	r3, #10
    4f1a:	d106      	bne.n	4f2a <log_printk+0x86>
		    (proc_tid != NULL)) {
    4f1c:	4b0a      	ldr	r3, [pc, #40]	; (4f48 <log_printk+0xa4>)
    4f1e:	6818      	ldr	r0, [r3, #0]
		if ((buffered_cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
    4f20:	b118      	cbz	r0, 4f2a <log_printk+0x86>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_WAKEUP, k_wakeup, k_tid_t, thread)
    4f22:	f009 fadf 	bl	e4e4 <z_impl_k_wakeup>
	return length;
    4f26:	e000      	b.n	4f2a <log_printk+0x86>
				return 0;
    4f28:	462e      	mov	r6, r5
}
    4f2a:	4630      	mov	r0, r6
    4f2c:	b020      	add	sp, #128	; 0x80
    4f2e:	bd70      	pop	{r4, r5, r6, pc}
		(void)log_process(false);
    4f30:	2000      	movs	r0, #0
    4f32:	f7ff ff7b 	bl	4e2c <log_process>
    4f36:	e7f8      	b.n	4f2a <log_printk+0x86>
    4f38:	20007090 	.word	0x20007090
    4f3c:	20000a1c 	.word	0x20000a1c
    4f40:	20000a28 	.word	0x20000a28
    4f44:	200027cd 	.word	0x200027cd
    4f48:	20000ab8 	.word	0x20000ab8

00004f4c <log_1>:
{
    4f4c:	b5f0      	push	{r4, r5, r6, r7, lr}
    4f4e:	b083      	sub	sp, #12
    4f50:	4606      	mov	r6, r0
    4f52:	460d      	mov	r5, r1
    4f54:	4617      	mov	r7, r2

union log_msg_chunk *log_msg_no_space_handle(void);

static inline union log_msg_chunk *log_msg_chunk_alloc(void)
{
	union log_msg_chunk *msg = NULL;
    4f56:	2200      	movs	r2, #0
    4f58:	9201      	str	r2, [sp, #4]
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg, K_NO_WAIT);
    4f5a:	a901      	add	r1, sp, #4
    4f5c:	4828      	ldr	r0, [pc, #160]	; (5000 <log_1+0xb4>)
    4f5e:	f007 fbad 	bl	c6bc <k_mem_slab_alloc>

	if (err != 0) {
    4f62:	2800      	cmp	r0, #0
    4f64:	d13d      	bne.n	4fe2 <log_1+0x96>
		msg = log_msg_no_space_handle();
	}

	return msg;
    4f66:	9c01      	ldr	r4, [sp, #4]
 */
static inline struct log_msg *z_log_msg_std_alloc(void)
{
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();

	if (msg != NULL) {
    4f68:	b144      	cbz	r4, 4f7c <log_1+0x30>
		/* all fields reset to 0, reference counter to 1 */
		msg->hdr.ref_cnt = 1;
    4f6a:	2301      	movs	r3, #1
    4f6c:	6063      	str	r3, [r4, #4]
		msg->hdr.params.raw = 0U;
    4f6e:	2200      	movs	r2, #0
    4f70:	8122      	strh	r2, [r4, #8]
		msg->hdr.params.std.type = LOG_MSG_TYPE_STD;
    4f72:	f04f 0300 	mov.w	r3, #0
    4f76:	f362 0300 	bfi	r3, r2, #0, #1
    4f7a:	7223      	strb	r3, [r4, #8]
static inline struct log_msg *log_msg_create_1(const char *str,
					       u32_t arg1)
{
	struct  log_msg *msg = z_log_msg_std_alloc();

	if (msg != NULL) {
    4f7c:	b134      	cbz	r4, 4f8c <log_1+0x40>
		msg->str = str;
    4f7e:	6126      	str	r6, [r4, #16]
		msg->hdr.params.std.nargs = 1U;
    4f80:	7a63      	ldrb	r3, [r4, #9]
    4f82:	2201      	movs	r2, #1
    4f84:	f362 1307 	bfi	r3, r2, #4, #4
    4f88:	7263      	strb	r3, [r4, #9]
		msg->payload.single.args[0] = arg1;
    4f8a:	6165      	str	r5, [r4, #20]
	if (msg == NULL) {
    4f8c:	b33c      	cbz	r4, 4fde <log_1+0x92>
	msg->hdr.ids = src_level;
    4f8e:	8167      	strh	r7, [r4, #10]
	msg->hdr.timestamp = timestamp_func();
    4f90:	4b1c      	ldr	r3, [pc, #112]	; (5004 <log_1+0xb8>)
    4f92:	681b      	ldr	r3, [r3, #0]
    4f94:	4798      	blx	r3
    4f96:	60e0      	str	r0, [r4, #12]
    4f98:	4b1b      	ldr	r3, [pc, #108]	; (5008 <log_1+0xbc>)
    4f9a:	f3bf 8f5b 	dmb	ish
    4f9e:	e853 2f00 	ldrex	r2, [r3]
    4fa2:	3201      	adds	r2, #1
    4fa4:	e843 2100 	strex	r1, r2, [r3]
    4fa8:	2900      	cmp	r1, #0
    4faa:	d1f8      	bne.n	4f9e <log_1+0x52>
    4fac:	f3bf 8f5b 	dmb	ish
	__asm__ volatile(
    4fb0:	f04f 0320 	mov.w	r3, #32
    4fb4:	f3ef 8511 	mrs	r5, BASEPRI
    4fb8:	f383 8811 	msr	BASEPRI, r3
    4fbc:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
    4fc0:	4621      	mov	r1, r4
    4fc2:	4812      	ldr	r0, [pc, #72]	; (500c <log_1+0xc0>)
    4fc4:	f00a fd63 	bl	fa8e <log_list_add_tail>
	__asm__ volatile(
    4fc8:	f385 8811 	msr	BASEPRI, r5
    4fcc:	f3bf 8f6f 	isb	sy
	if (panic_mode) {
    4fd0:	4b0f      	ldr	r3, [pc, #60]	; (5010 <log_1+0xc4>)
    4fd2:	781b      	ldrb	r3, [r3, #0]
    4fd4:	b94b      	cbnz	r3, 4fea <log_1+0x9e>
		if ((buffered_cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
    4fd6:	4b0c      	ldr	r3, [pc, #48]	; (5008 <log_1+0xbc>)
    4fd8:	681b      	ldr	r3, [r3, #0]
    4fda:	2b0a      	cmp	r3, #10
    4fdc:	d009      	beq.n	4ff2 <log_1+0xa6>
}
    4fde:	b003      	add	sp, #12
    4fe0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		msg = log_msg_no_space_handle();
    4fe2:	f000 fa4b 	bl	547c <log_msg_no_space_handle>
    4fe6:	9001      	str	r0, [sp, #4]
    4fe8:	e7bd      	b.n	4f66 <log_1+0x1a>
		(void)log_process(false);
    4fea:	2000      	movs	r0, #0
    4fec:	f7ff ff1e 	bl	4e2c <log_process>
    4ff0:	e7f5      	b.n	4fde <log_1+0x92>
		    (proc_tid != NULL)) {
    4ff2:	4b08      	ldr	r3, [pc, #32]	; (5014 <log_1+0xc8>)
    4ff4:	6818      	ldr	r0, [r3, #0]
		if ((buffered_cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
    4ff6:	2800      	cmp	r0, #0
    4ff8:	d0f1      	beq.n	4fde <log_1+0x92>
    4ffa:	f009 fa73 	bl	e4e4 <z_impl_k_wakeup>
    4ffe:	e7ee      	b.n	4fde <log_1+0x92>
    5000:	20000abc 	.word	0x20000abc
    5004:	20007090 	.word	0x20007090
    5008:	20000a1c 	.word	0x20000a1c
    500c:	20000a28 	.word	0x20000a28
    5010:	200027cd 	.word	0x200027cd
    5014:	20000ab8 	.word	0x20000ab8

00005018 <log_2>:
{
    5018:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    501c:	b082      	sub	sp, #8
    501e:	4680      	mov	r8, r0
    5020:	460e      	mov	r6, r1
    5022:	4615      	mov	r5, r2
    5024:	461f      	mov	r7, r3
	union log_msg_chunk *msg = NULL;
    5026:	2200      	movs	r2, #0
    5028:	9201      	str	r2, [sp, #4]
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg, K_NO_WAIT);
    502a:	a901      	add	r1, sp, #4
    502c:	482a      	ldr	r0, [pc, #168]	; (50d8 <log_2+0xc0>)
    502e:	f007 fb45 	bl	c6bc <k_mem_slab_alloc>
	if (err != 0) {
    5032:	2800      	cmp	r0, #0
    5034:	d140      	bne.n	50b8 <log_2+0xa0>
	return msg;
    5036:	9c01      	ldr	r4, [sp, #4]
	if (msg != NULL) {
    5038:	b144      	cbz	r4, 504c <log_2+0x34>
		msg->hdr.ref_cnt = 1;
    503a:	2301      	movs	r3, #1
    503c:	6063      	str	r3, [r4, #4]
		msg->hdr.params.raw = 0U;
    503e:	2200      	movs	r2, #0
    5040:	8122      	strh	r2, [r4, #8]
		msg->hdr.params.std.type = LOG_MSG_TYPE_STD;
    5042:	f04f 0300 	mov.w	r3, #0
    5046:	f362 0300 	bfi	r3, r2, #0, #1
    504a:	7223      	strb	r3, [r4, #8]
					       u32_t arg1,
					       u32_t arg2)
{
	struct  log_msg *msg = z_log_msg_std_alloc();

	if (msg != NULL) {
    504c:	b144      	cbz	r4, 5060 <log_2+0x48>
		msg->str = str;
    504e:	f8c4 8010 	str.w	r8, [r4, #16]
		msg->hdr.params.std.nargs = 2U;
    5052:	7a63      	ldrb	r3, [r4, #9]
    5054:	2202      	movs	r2, #2
    5056:	f362 1307 	bfi	r3, r2, #4, #4
    505a:	7263      	strb	r3, [r4, #9]
		msg->payload.single.args[0] = arg1;
    505c:	6166      	str	r6, [r4, #20]
		msg->payload.single.args[1] = arg2;
    505e:	61a5      	str	r5, [r4, #24]
	if (msg == NULL) {
    5060:	b33c      	cbz	r4, 50b2 <log_2+0x9a>
	msg->hdr.ids = src_level;
    5062:	8167      	strh	r7, [r4, #10]
	msg->hdr.timestamp = timestamp_func();
    5064:	4b1d      	ldr	r3, [pc, #116]	; (50dc <log_2+0xc4>)
    5066:	681b      	ldr	r3, [r3, #0]
    5068:	4798      	blx	r3
    506a:	60e0      	str	r0, [r4, #12]
    506c:	4b1c      	ldr	r3, [pc, #112]	; (50e0 <log_2+0xc8>)
    506e:	f3bf 8f5b 	dmb	ish
    5072:	e853 2f00 	ldrex	r2, [r3]
    5076:	3201      	adds	r2, #1
    5078:	e843 2100 	strex	r1, r2, [r3]
    507c:	2900      	cmp	r1, #0
    507e:	d1f8      	bne.n	5072 <log_2+0x5a>
    5080:	f3bf 8f5b 	dmb	ish
	__asm__ volatile(
    5084:	f04f 0320 	mov.w	r3, #32
    5088:	f3ef 8511 	mrs	r5, BASEPRI
    508c:	f383 8811 	msr	BASEPRI, r3
    5090:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
    5094:	4621      	mov	r1, r4
    5096:	4813      	ldr	r0, [pc, #76]	; (50e4 <log_2+0xcc>)
    5098:	f00a fcf9 	bl	fa8e <log_list_add_tail>
	__asm__ volatile(
    509c:	f385 8811 	msr	BASEPRI, r5
    50a0:	f3bf 8f6f 	isb	sy
	if (panic_mode) {
    50a4:	4b10      	ldr	r3, [pc, #64]	; (50e8 <log_2+0xd0>)
    50a6:	781b      	ldrb	r3, [r3, #0]
    50a8:	b953      	cbnz	r3, 50c0 <log_2+0xa8>
		if ((buffered_cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
    50aa:	4b0d      	ldr	r3, [pc, #52]	; (50e0 <log_2+0xc8>)
    50ac:	681b      	ldr	r3, [r3, #0]
    50ae:	2b0a      	cmp	r3, #10
    50b0:	d00a      	beq.n	50c8 <log_2+0xb0>
}
    50b2:	b002      	add	sp, #8
    50b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		msg = log_msg_no_space_handle();
    50b8:	f000 f9e0 	bl	547c <log_msg_no_space_handle>
    50bc:	9001      	str	r0, [sp, #4]
    50be:	e7ba      	b.n	5036 <log_2+0x1e>
		(void)log_process(false);
    50c0:	2000      	movs	r0, #0
    50c2:	f7ff feb3 	bl	4e2c <log_process>
    50c6:	e7f4      	b.n	50b2 <log_2+0x9a>
		    (proc_tid != NULL)) {
    50c8:	4b08      	ldr	r3, [pc, #32]	; (50ec <log_2+0xd4>)
    50ca:	6818      	ldr	r0, [r3, #0]
		if ((buffered_cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
    50cc:	2800      	cmp	r0, #0
    50ce:	d0f0      	beq.n	50b2 <log_2+0x9a>
    50d0:	f009 fa08 	bl	e4e4 <z_impl_k_wakeup>
    50d4:	e7ed      	b.n	50b2 <log_2+0x9a>
    50d6:	bf00      	nop
    50d8:	20000abc 	.word	0x20000abc
    50dc:	20007090 	.word	0x20007090
    50e0:	20000a1c 	.word	0x20000a1c
    50e4:	20000a28 	.word	0x20000a28
    50e8:	200027cd 	.word	0x200027cd
    50ec:	20000ab8 	.word	0x20000ab8

000050f0 <log_0>:
{
    50f0:	b570      	push	{r4, r5, r6, lr}
    50f2:	b082      	sub	sp, #8
    50f4:	4605      	mov	r5, r0
    50f6:	460e      	mov	r6, r1
	union log_msg_chunk *msg = NULL;
    50f8:	2200      	movs	r2, #0
    50fa:	9201      	str	r2, [sp, #4]
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg, K_NO_WAIT);
    50fc:	a901      	add	r1, sp, #4
    50fe:	4826      	ldr	r0, [pc, #152]	; (5198 <log_0+0xa8>)
    5100:	f007 fadc 	bl	c6bc <k_mem_slab_alloc>
	if (err != 0) {
    5104:	2800      	cmp	r0, #0
    5106:	d137      	bne.n	5178 <log_0+0x88>
	return msg;
    5108:	9c01      	ldr	r4, [sp, #4]
	if (msg != NULL) {
    510a:	b144      	cbz	r4, 511e <log_0+0x2e>
		msg->hdr.ref_cnt = 1;
    510c:	2301      	movs	r3, #1
    510e:	6063      	str	r3, [r4, #4]
		msg->hdr.params.raw = 0U;
    5110:	2200      	movs	r2, #0
    5112:	8122      	strh	r2, [r4, #8]
		msg->hdr.params.std.type = LOG_MSG_TYPE_STD;
    5114:	f04f 0300 	mov.w	r3, #0
    5118:	f362 0300 	bfi	r3, r2, #0, #1
    511c:	7223      	strb	r3, [r4, #8]
	if (msg != NULL) {
    511e:	b104      	cbz	r4, 5122 <log_0+0x32>
		msg->str = str;
    5120:	6125      	str	r5, [r4, #16]
	if (msg == NULL) {
    5122:	b33c      	cbz	r4, 5174 <log_0+0x84>
	msg->hdr.ids = src_level;
    5124:	8166      	strh	r6, [r4, #10]
	msg->hdr.timestamp = timestamp_func();
    5126:	4b1d      	ldr	r3, [pc, #116]	; (519c <log_0+0xac>)
    5128:	681b      	ldr	r3, [r3, #0]
    512a:	4798      	blx	r3
    512c:	60e0      	str	r0, [r4, #12]
    512e:	4b1c      	ldr	r3, [pc, #112]	; (51a0 <log_0+0xb0>)
    5130:	f3bf 8f5b 	dmb	ish
    5134:	e853 2f00 	ldrex	r2, [r3]
    5138:	3201      	adds	r2, #1
    513a:	e843 2100 	strex	r1, r2, [r3]
    513e:	2900      	cmp	r1, #0
    5140:	d1f8      	bne.n	5134 <log_0+0x44>
    5142:	f3bf 8f5b 	dmb	ish
	__asm__ volatile(
    5146:	f04f 0320 	mov.w	r3, #32
    514a:	f3ef 8511 	mrs	r5, BASEPRI
    514e:	f383 8811 	msr	BASEPRI, r3
    5152:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
    5156:	4621      	mov	r1, r4
    5158:	4812      	ldr	r0, [pc, #72]	; (51a4 <log_0+0xb4>)
    515a:	f00a fc98 	bl	fa8e <log_list_add_tail>
	__asm__ volatile(
    515e:	f385 8811 	msr	BASEPRI, r5
    5162:	f3bf 8f6f 	isb	sy
	if (panic_mode) {
    5166:	4b10      	ldr	r3, [pc, #64]	; (51a8 <log_0+0xb8>)
    5168:	781b      	ldrb	r3, [r3, #0]
    516a:	b94b      	cbnz	r3, 5180 <log_0+0x90>
		if ((buffered_cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
    516c:	4b0c      	ldr	r3, [pc, #48]	; (51a0 <log_0+0xb0>)
    516e:	681b      	ldr	r3, [r3, #0]
    5170:	2b0a      	cmp	r3, #10
    5172:	d009      	beq.n	5188 <log_0+0x98>
}
    5174:	b002      	add	sp, #8
    5176:	bd70      	pop	{r4, r5, r6, pc}
		msg = log_msg_no_space_handle();
    5178:	f000 f980 	bl	547c <log_msg_no_space_handle>
    517c:	9001      	str	r0, [sp, #4]
    517e:	e7c3      	b.n	5108 <log_0+0x18>
		(void)log_process(false);
    5180:	2000      	movs	r0, #0
    5182:	f7ff fe53 	bl	4e2c <log_process>
    5186:	e7f5      	b.n	5174 <log_0+0x84>
		    (proc_tid != NULL)) {
    5188:	4b08      	ldr	r3, [pc, #32]	; (51ac <log_0+0xbc>)
    518a:	6818      	ldr	r0, [r3, #0]
		if ((buffered_cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
    518c:	2800      	cmp	r0, #0
    518e:	d0f1      	beq.n	5174 <log_0+0x84>
    5190:	f009 f9a8 	bl	e4e4 <z_impl_k_wakeup>
    5194:	e7ee      	b.n	5174 <log_0+0x84>
    5196:	bf00      	nop
    5198:	20000abc 	.word	0x20000abc
    519c:	20007090 	.word	0x20007090
    51a0:	20000a1c 	.word	0x20000a1c
    51a4:	20000a28 	.word	0x20000a28
    51a8:	200027cd 	.word	0x200027cd
    51ac:	20000ab8 	.word	0x20000ab8

000051b0 <log_dropped>:
    51b0:	4b06      	ldr	r3, [pc, #24]	; (51cc <log_dropped+0x1c>)
    51b2:	f3bf 8f5b 	dmb	ish
    51b6:	e853 2f00 	ldrex	r2, [r3]
    51ba:	3201      	adds	r2, #1
    51bc:	e843 2100 	strex	r1, r2, [r3]
    51c0:	2900      	cmp	r1, #0
    51c2:	d1f8      	bne.n	51b6 <log_dropped+0x6>
    51c4:	f3bf 8f5b 	dmb	ish
}
    51c8:	4770      	bx	lr
    51ca:	bf00      	nop
    51cc:	20000a20 	.word	0x20000a20

000051d0 <log_source_name_get>:
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
    51d0:	4b05      	ldr	r3, [pc, #20]	; (51e8 <log_source_name_get+0x18>)
    51d2:	4a06      	ldr	r2, [pc, #24]	; (51ec <log_source_name_get+0x1c>)
    51d4:	1a9b      	subs	r3, r3, r2
    51d6:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
    51da:	d202      	bcs.n	51e2 <log_source_name_get+0x12>
 * @param source_id Source ID.
 * @return Name.
 */
static inline const char *log_name_get(u32_t source_id)
{
	return __log_const_start[source_id].name;
    51dc:	f852 0031 	ldr.w	r0, [r2, r1, lsl #3]
    51e0:	4770      	bx	lr
    51e2:	2000      	movs	r0, #0
}
    51e4:	4770      	bx	lr
    51e6:	bf00      	nop
    51e8:	00010e24 	.word	0x00010e24
    51ec:	00010dd4 	.word	0x00010dd4

000051f0 <log_backend_enable>:
{
    51f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    51f2:	4605      	mov	r5, r0
    51f4:	460e      	mov	r6, r1
	id += backend - log_backend_get(0);
    51f6:	4c14      	ldr	r4, [pc, #80]	; (5248 <log_backend_enable+0x58>)
    51f8:	1b04      	subs	r4, r0, r4
    51fa:	1124      	asrs	r4, r4, #4
    51fc:	3401      	adds	r4, #1
	log_backend_id_set(backend, id);
    51fe:	b2e4      	uxtb	r4, r4
	__ASSERT_NO_MSG(backend != NULL);
    5200:	b150      	cbz	r0, 5218 <log_backend_enable+0x28>
	backend->cb->id = id;
    5202:	686b      	ldr	r3, [r5, #4]
    5204:	711c      	strb	r4, [r3, #4]
	__ASSERT_NO_MSG(backend != NULL);
    5206:	b19d      	cbz	r5, 5230 <log_backend_enable+0x40>
	backend->cb->ctx = ctx;
    5208:	686b      	ldr	r3, [r5, #4]
    520a:	601e      	str	r6, [r3, #0]
	backend->cb->active = true;
    520c:	686a      	ldr	r2, [r5, #4]
    520e:	2301      	movs	r3, #1
    5210:	7153      	strb	r3, [r2, #5]
	backend_attached = true;
    5212:	4a0e      	ldr	r2, [pc, #56]	; (524c <log_backend_enable+0x5c>)
    5214:	7013      	strb	r3, [r2, #0]
}
    5216:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	__ASSERT_NO_MSG(backend != NULL);
    5218:	4f0d      	ldr	r7, [pc, #52]	; (5250 <log_backend_enable+0x60>)
    521a:	23be      	movs	r3, #190	; 0xbe
    521c:	463a      	mov	r2, r7
    521e:	490d      	ldr	r1, [pc, #52]	; (5254 <log_backend_enable+0x64>)
    5220:	480d      	ldr	r0, [pc, #52]	; (5258 <log_backend_enable+0x68>)
    5222:	f00a fb2c 	bl	f87e <printk>
    5226:	21be      	movs	r1, #190	; 0xbe
    5228:	4638      	mov	r0, r7
    522a:	f00a fbae 	bl	f98a <assert_post_action>
    522e:	e7e8      	b.n	5202 <log_backend_enable+0x12>
	__ASSERT_NO_MSG(backend != NULL);
    5230:	4c07      	ldr	r4, [pc, #28]	; (5250 <log_backend_enable+0x60>)
    5232:	23ef      	movs	r3, #239	; 0xef
    5234:	4622      	mov	r2, r4
    5236:	4907      	ldr	r1, [pc, #28]	; (5254 <log_backend_enable+0x64>)
    5238:	4807      	ldr	r0, [pc, #28]	; (5258 <log_backend_enable+0x68>)
    523a:	f00a fb20 	bl	f87e <printk>
    523e:	21ef      	movs	r1, #239	; 0xef
    5240:	4620      	mov	r0, r4
    5242:	f00a fba2 	bl	f98a <assert_post_action>
    5246:	e7df      	b.n	5208 <log_backend_enable+0x18>
    5248:	00010e24 	.word	0x00010e24
    524c:	200027cc 	.word	0x200027cc
    5250:	00011dec 	.word	0x00011dec
    5254:	00011e0c 	.word	0x00011e0c
    5258:	00010f8c 	.word	0x00010f8c

0000525c <log_init>:
{
    525c:	b570      	push	{r4, r5, r6, lr}
	return __log_backends_end - __log_backends_start;
    525e:	4b1d      	ldr	r3, [pc, #116]	; (52d4 <log_init+0x78>)
    5260:	4a1d      	ldr	r2, [pc, #116]	; (52d8 <log_init+0x7c>)
    5262:	1a9b      	subs	r3, r3, r2
    5264:	111e      	asrs	r6, r3, #4
	assert(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);
    5266:	2b90      	cmp	r3, #144	; 0x90
    5268:	dc0e      	bgt.n	5288 <log_init+0x2c>
    526a:	4b1c      	ldr	r3, [pc, #112]	; (52dc <log_init+0x80>)
    526c:	f3bf 8f5b 	dmb	ish
    5270:	e853 2f00 	ldrex	r2, [r3]
    5274:	1c51      	adds	r1, r2, #1
    5276:	e843 1000 	strex	r0, r1, [r3]
    527a:	2800      	cmp	r0, #0
    527c:	d1f8      	bne.n	5270 <log_init+0x14>
    527e:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&initialized) != 0) {
    5282:	bb2a      	cbnz	r2, 52d0 <log_init+0x74>
	for (i = 0; i < log_backend_count_get(); i++) {
    5284:	2400      	movs	r4, #0
    5286:	e013      	b.n	52b0 <log_init+0x54>
	assert(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);
    5288:	4c15      	ldr	r4, [pc, #84]	; (52e0 <log_init+0x84>)
    528a:	f240 134d 	movw	r3, #333	; 0x14d
    528e:	4622      	mov	r2, r4
    5290:	4914      	ldr	r1, [pc, #80]	; (52e4 <log_init+0x88>)
    5292:	4815      	ldr	r0, [pc, #84]	; (52e8 <log_init+0x8c>)
    5294:	f00a faf3 	bl	f87e <printk>
    5298:	f240 114d 	movw	r1, #333	; 0x14d
    529c:	4620      	mov	r0, r4
    529e:	f00a fb74 	bl	f98a <assert_post_action>
    52a2:	e7e2      	b.n	526a <log_init+0xe>
			log_backend_enable(backend, NULL, CONFIG_LOG_MAX_LEVEL);
    52a4:	2204      	movs	r2, #4
    52a6:	2100      	movs	r1, #0
    52a8:	4628      	mov	r0, r5
    52aa:	f7ff ffa1 	bl	51f0 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
    52ae:	3401      	adds	r4, #1
    52b0:	42b4      	cmp	r4, r6
    52b2:	da0d      	bge.n	52d0 <log_init+0x74>
	return &__log_backends_start[idx];
    52b4:	4d08      	ldr	r5, [pc, #32]	; (52d8 <log_init+0x7c>)
    52b6:	eb05 1504 	add.w	r5, r5, r4, lsl #4
		if (backend->autostart) {
    52ba:	7b2b      	ldrb	r3, [r5, #12]
    52bc:	2b00      	cmp	r3, #0
    52be:	d0f6      	beq.n	52ae <log_init+0x52>
			if (backend->api->init != NULL) {
    52c0:	0123      	lsls	r3, r4, #4
    52c2:	4a05      	ldr	r2, [pc, #20]	; (52d8 <log_init+0x7c>)
    52c4:	58d3      	ldr	r3, [r2, r3]
    52c6:	695b      	ldr	r3, [r3, #20]
    52c8:	2b00      	cmp	r3, #0
    52ca:	d0eb      	beq.n	52a4 <log_init+0x48>
				backend->api->init();
    52cc:	4798      	blx	r3
    52ce:	e7e9      	b.n	52a4 <log_init+0x48>
}
    52d0:	bd70      	pop	{r4, r5, r6, pc}
    52d2:	bf00      	nop
    52d4:	00010e34 	.word	0x00010e34
    52d8:	00010e24 	.word	0x00010e24
    52dc:	20000a24 	.word	0x20000a24
    52e0:	00011dd0 	.word	0x00011dd0
    52e4:	00011d90 	.word	0x00011d90
    52e8:	00010f8c 	.word	0x00010f8c

000052ec <log_panic>:
	if (panic_mode) {
    52ec:	4b22      	ldr	r3, [pc, #136]	; (5378 <log_panic+0x8c>)
    52ee:	781b      	ldrb	r3, [r3, #0]
    52f0:	b103      	cbz	r3, 52f4 <log_panic+0x8>
    52f2:	4770      	bx	lr
{
    52f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	log_init();
    52f8:	f7ff ffb0 	bl	525c <log_init>
	for (int i = 0; i < log_backend_count_get(); i++) {
    52fc:	2400      	movs	r4, #0
    52fe:	e013      	b.n	5328 <log_panic+0x3c>
	__ASSERT_NO_MSG(backend != NULL);
    5300:	f8df 8088 	ldr.w	r8, [pc, #136]	; 538c <log_panic+0xa0>
    5304:	f44f 7385 	mov.w	r3, #266	; 0x10a
    5308:	4642      	mov	r2, r8
    530a:	491c      	ldr	r1, [pc, #112]	; (537c <log_panic+0x90>)
    530c:	481c      	ldr	r0, [pc, #112]	; (5380 <log_panic+0x94>)
    530e:	f00a fab6 	bl	f87e <printk>
    5312:	f44f 7185 	mov.w	r1, #266	; 0x10a
    5316:	4640      	mov	r0, r8
    5318:	f00a fb37 	bl	f98a <assert_post_action>
    531c:	e00e      	b.n	533c <log_panic+0x50>
	backend->api->panic(backend);
    531e:	5973      	ldr	r3, [r6, r5]
    5320:	691b      	ldr	r3, [r3, #16]
    5322:	4638      	mov	r0, r7
    5324:	4798      	blx	r3
    5326:	3401      	adds	r4, #1
    5328:	4b16      	ldr	r3, [pc, #88]	; (5384 <log_panic+0x98>)
    532a:	4a17      	ldr	r2, [pc, #92]	; (5388 <log_panic+0x9c>)
    532c:	1a9b      	subs	r3, r3, r2
    532e:	ebb4 1f23 	cmp.w	r4, r3, asr #4
    5332:	da16      	bge.n	5362 <log_panic+0x76>
	return &__log_backends_start[idx];
    5334:	0126      	lsls	r6, r4, #4
    5336:	4d14      	ldr	r5, [pc, #80]	; (5388 <log_panic+0x9c>)
	__ASSERT_NO_MSG(backend != NULL);
    5338:	1977      	adds	r7, r6, r5
    533a:	d0e1      	beq.n	5300 <log_panic+0x14>
	return backend->cb->active;
    533c:	687b      	ldr	r3, [r7, #4]
    533e:	795b      	ldrb	r3, [r3, #5]
		if (log_backend_is_active(backend)) {
    5340:	2b00      	cmp	r3, #0
    5342:	d0f0      	beq.n	5326 <log_panic+0x3a>
	__ASSERT_NO_MSG(backend != NULL);
    5344:	2f00      	cmp	r7, #0
    5346:	d1ea      	bne.n	531e <log_panic+0x32>
    5348:	f8df 8040 	ldr.w	r8, [pc, #64]	; 538c <log_panic+0xa0>
    534c:	23af      	movs	r3, #175	; 0xaf
    534e:	4642      	mov	r2, r8
    5350:	490a      	ldr	r1, [pc, #40]	; (537c <log_panic+0x90>)
    5352:	480b      	ldr	r0, [pc, #44]	; (5380 <log_panic+0x94>)
    5354:	f00a fa93 	bl	f87e <printk>
    5358:	21af      	movs	r1, #175	; 0xaf
    535a:	4640      	mov	r0, r8
    535c:	f00a fb15 	bl	f98a <assert_post_action>
    5360:	e7dd      	b.n	531e <log_panic+0x32>
		while (log_process(false) == true) {
    5362:	2000      	movs	r0, #0
    5364:	f7ff fd62 	bl	4e2c <log_process>
    5368:	2800      	cmp	r0, #0
    536a:	d1fa      	bne.n	5362 <log_panic+0x76>
	panic_mode = true;
    536c:	4b02      	ldr	r3, [pc, #8]	; (5378 <log_panic+0x8c>)
    536e:	2201      	movs	r2, #1
    5370:	701a      	strb	r2, [r3, #0]
}
    5372:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5376:	bf00      	nop
    5378:	200027cd 	.word	0x200027cd
    537c:	00011e0c 	.word	0x00011e0c
    5380:	00010f8c 	.word	0x00010f8c
    5384:	00010e34 	.word	0x00010e34
    5388:	00010e24 	.word	0x00010e24
    538c:	00011dec 	.word	0x00011dec

00005390 <log_process_thread_func>:
{
    5390:	b508      	push	{r3, lr}
	return __log_backends_end - __log_backends_start;
    5392:	4b12      	ldr	r3, [pc, #72]	; (53dc <log_process_thread_func+0x4c>)
    5394:	4a12      	ldr	r2, [pc, #72]	; (53e0 <log_process_thread_func+0x50>)
    5396:	1a9b      	subs	r3, r3, r2
	__ASSERT_NO_MSG(log_backend_count_get() > 0);
    5398:	2b00      	cmp	r3, #0
    539a:	dd06      	ble.n	53aa <log_process_thread_func+0x1a>
	log_init();
    539c:	f7ff ff5e 	bl	525c <log_init>
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t)
    53a0:	f009 f8e0 	bl	e564 <z_impl_k_current_get>
	thread_set(k_current_get());
    53a4:	f7ff fc40 	bl	4c28 <thread_set>
    53a8:	e011      	b.n	53ce <log_process_thread_func+0x3e>
	__ASSERT_NO_MSG(log_backend_count_get() > 0);
    53aa:	4c0e      	ldr	r4, [pc, #56]	; (53e4 <log_process_thread_func+0x54>)
    53ac:	f240 23a9 	movw	r3, #681	; 0x2a9
    53b0:	4622      	mov	r2, r4
    53b2:	490d      	ldr	r1, [pc, #52]	; (53e8 <log_process_thread_func+0x58>)
    53b4:	480d      	ldr	r0, [pc, #52]	; (53ec <log_process_thread_func+0x5c>)
    53b6:	f00a fa62 	bl	f87e <printk>
    53ba:	f240 21a9 	movw	r1, #681	; 0x2a9
    53be:	4620      	mov	r0, r4
    53c0:	f00a fae3 	bl	f98a <assert_post_action>
    53c4:	e7ea      	b.n	539c <log_process_thread_func+0xc>
K_SYSCALL_DECLARE1(K_SYSCALL_K_SLEEP, k_sleep, s32_t, s32_t, duration)
    53c6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    53ca:	f008 ff91 	bl	e2f0 <z_impl_k_sleep>
		if (log_process(false) == false) {
    53ce:	2000      	movs	r0, #0
    53d0:	f7ff fd2c 	bl	4e2c <log_process>
    53d4:	2800      	cmp	r0, #0
    53d6:	d1fa      	bne.n	53ce <log_process_thread_func+0x3e>
    53d8:	e7f5      	b.n	53c6 <log_process_thread_func+0x36>
    53da:	bf00      	nop
    53dc:	00010e34 	.word	0x00010e34
    53e0:	00010e24 	.word	0x00010e24
    53e4:	00011dd0 	.word	0x00011dd0
    53e8:	00011db4 	.word	0x00011db4
    53ec:	00010f8c 	.word	0x00010f8c

000053f0 <log_is_strdup>:
	return ((char *)buf >= pool_first->buf) &&
    53f0:	4b05      	ldr	r3, [pc, #20]	; (5408 <log_is_strdup+0x18>)
    53f2:	4298      	cmp	r0, r3
    53f4:	d304      	bcc.n	5400 <log_is_strdup+0x10>
    53f6:	3378      	adds	r3, #120	; 0x78
    53f8:	4298      	cmp	r0, r3
    53fa:	d903      	bls.n	5404 <log_is_strdup+0x14>
    53fc:	2000      	movs	r0, #0
    53fe:	4770      	bx	lr
    5400:	2000      	movs	r0, #0
    5402:	4770      	bx	lr
    5404:	2001      	movs	r0, #1
}
    5406:	4770      	bx	lr
    5408:	20006bc4 	.word	0x20006bc4

0000540c <log_free>:
{
    540c:	b500      	push	{lr}
    540e:	b083      	sub	sp, #12
	struct log_strdup_buf *dup = CONTAINER_OF(str, struct log_strdup_buf,
    5410:	3804      	subs	r0, #4
    5412:	9001      	str	r0, [sp, #4]
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    5414:	f3bf 8f5b 	dmb	ish
    5418:	e850 3f00 	ldrex	r3, [r0]
    541c:	1e5a      	subs	r2, r3, #1
    541e:	e840 2100 	strex	r1, r2, [r0]
    5422:	2900      	cmp	r1, #0
    5424:	d1f8      	bne.n	5418 <log_free+0xc>
    5426:	f3bf 8f5b 	dmb	ish
	if (atomic_dec(&dup->refcount) == 1) {
    542a:	2b01      	cmp	r3, #1
    542c:	d002      	beq.n	5434 <log_free+0x28>
}
    542e:	b003      	add	sp, #12
    5430:	f85d fb04 	ldr.w	pc, [sp], #4
		k_mem_slab_free(&log_strdup_pool, (void **)&dup);
    5434:	a901      	add	r1, sp, #4
    5436:	4802      	ldr	r0, [pc, #8]	; (5440 <log_free+0x34>)
    5438:	f007 f9c8 	bl	c7cc <k_mem_slab_free>
}
    543c:	e7f7      	b.n	542e <log_free+0x22>
    543e:	bf00      	nop
    5440:	20000a30 	.word	0x20000a30

00005444 <cont_free>:
{
	atomic_inc(&msg->hdr.ref_cnt);
}

static void cont_free(struct log_msg_cont *cont)
{
    5444:	b510      	push	{r4, lr}
    5446:	b082      	sub	sp, #8
    5448:	9001      	str	r0, [sp, #4]
	struct log_msg_cont *next;

	while (cont != NULL) {
    544a:	9b01      	ldr	r3, [sp, #4]
    544c:	b133      	cbz	r3, 545c <cont_free+0x18>
		next = cont->next;
    544e:	681c      	ldr	r4, [r3, #0]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
    5450:	a901      	add	r1, sp, #4
    5452:	4803      	ldr	r0, [pc, #12]	; (5460 <cont_free+0x1c>)
    5454:	f007 f9ba 	bl	c7cc <k_mem_slab_free>
		cont = next;
    5458:	9401      	str	r4, [sp, #4]
    545a:	e7f6      	b.n	544a <cont_free+0x6>
	}
}
    545c:	b002      	add	sp, #8
    545e:	bd10      	pop	{r4, pc}
    5460:	20000abc 	.word	0x20000abc

00005464 <log_msg_pool_init>:
{
    5464:	b508      	push	{r3, lr}
	k_mem_slab_init(&log_msg_pool, log_msg_pool_buf, MSG_SIZE, NUM_OF_MSGS);
    5466:	2320      	movs	r3, #32
    5468:	461a      	mov	r2, r3
    546a:	4902      	ldr	r1, [pc, #8]	; (5474 <log_msg_pool_init+0x10>)
    546c:	4802      	ldr	r0, [pc, #8]	; (5478 <log_msg_pool_init+0x14>)
    546e:	f007 f8f7 	bl	c660 <k_mem_slab_init>
}
    5472:	bd08      	pop	{r3, pc}
    5474:	20006c60 	.word	0x20006c60
    5478:	20000abc 	.word	0x20000abc

0000547c <log_msg_no_space_handle>:

	k_mem_slab_free(&log_msg_pool, (void **)&msg);
}

union log_msg_chunk *log_msg_no_space_handle(void)
{
    547c:	b510      	push	{r4, lr}
    547e:	b082      	sub	sp, #8
	union log_msg_chunk *msg = NULL;
    5480:	2300      	movs	r3, #0
    5482:	9301      	str	r3, [sp, #4]
	bool more;
	int err;

	if (IS_ENABLED(CONFIG_LOG_MODE_OVERFLOW)) {
		do {
			more = log_process(true);
    5484:	2001      	movs	r0, #1
    5486:	f7ff fcd1 	bl	4e2c <log_process>
    548a:	4604      	mov	r4, r0
			log_dropped();
    548c:	f7ff fe90 	bl	51b0 <log_dropped>
			err = k_mem_slab_alloc(&log_msg_pool,
    5490:	2200      	movs	r2, #0
    5492:	a901      	add	r1, sp, #4
    5494:	4804      	ldr	r0, [pc, #16]	; (54a8 <log_msg_no_space_handle+0x2c>)
    5496:	f007 f911 	bl	c6bc <k_mem_slab_alloc>
					       (void **)&msg,
					       K_NO_WAIT);
		} while ((err != 0) && more);
    549a:	b108      	cbz	r0, 54a0 <log_msg_no_space_handle+0x24>
    549c:	2c00      	cmp	r4, #0
    549e:	d1f1      	bne.n	5484 <log_msg_no_space_handle+0x8>
	} else {
		log_dropped();
	}
	return msg;

}
    54a0:	9801      	ldr	r0, [sp, #4]
    54a2:	b002      	add	sp, #8
    54a4:	bd10      	pop	{r4, pc}
    54a6:	bf00      	nop
    54a8:	20000abc 	.word	0x20000abc

000054ac <msg_free>:
{
    54ac:	b570      	push	{r4, r5, r6, lr}
    54ae:	b082      	sub	sp, #8
    54b0:	9001      	str	r0, [sp, #4]
	u32_t nargs = msg->hdr.params.std.nargs;
    54b2:	7a45      	ldrb	r5, [r0, #9]
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    54b4:	7a03      	ldrb	r3, [r0, #8]
	if (log_msg_is_std(msg) && nargs) {
    54b6:	f013 0f01 	tst.w	r3, #1
    54ba:	d101      	bne.n	54c0 <msg_free+0x14>
    54bc:	092d      	lsrs	r5, r5, #4
    54be:	b9d5      	cbnz	r5, 54f6 <msg_free+0x4a>
	if (msg->hdr.params.generic.ext == 1) {
    54c0:	9b01      	ldr	r3, [sp, #4]
    54c2:	7a1a      	ldrb	r2, [r3, #8]
    54c4:	f012 0f02 	tst.w	r2, #2
    54c8:	d117      	bne.n	54fa <msg_free+0x4e>
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
    54ca:	a901      	add	r1, sp, #4
    54cc:	480d      	ldr	r0, [pc, #52]	; (5504 <msg_free+0x58>)
    54ce:	f007 f97d 	bl	c7cc <k_mem_slab_free>
}
    54d2:	b002      	add	sp, #8
    54d4:	bd70      	pop	{r4, r5, r6, pc}
				log_free(buf);
    54d6:	4630      	mov	r0, r6
    54d8:	f7ff ff98 	bl	540c <log_free>
		for (i = 0; i < nargs; i++) {
    54dc:	3401      	adds	r4, #1
    54de:	42ac      	cmp	r4, r5
    54e0:	d2ee      	bcs.n	54c0 <msg_free+0x14>
			void *buf = (void *)log_msg_arg_get(msg, i);
    54e2:	4621      	mov	r1, r4
    54e4:	9801      	ldr	r0, [sp, #4]
    54e6:	f00a fb6a 	bl	fbbe <log_msg_arg_get>
    54ea:	4606      	mov	r6, r0
			if (log_is_strdup(buf)) {
    54ec:	f7ff ff80 	bl	53f0 <log_is_strdup>
    54f0:	2800      	cmp	r0, #0
    54f2:	d0f3      	beq.n	54dc <msg_free+0x30>
    54f4:	e7ef      	b.n	54d6 <msg_free+0x2a>
		for (i = 0; i < nargs; i++) {
    54f6:	2400      	movs	r4, #0
    54f8:	e7f1      	b.n	54de <msg_free+0x32>
		cont_free(msg->payload.ext.next);
    54fa:	6958      	ldr	r0, [r3, #20]
    54fc:	f7ff ffa2 	bl	5444 <cont_free>
    5500:	e7e3      	b.n	54ca <msg_free+0x1e>
    5502:	bf00      	nop
    5504:	20000abc 	.word	0x20000abc

00005508 <log_msg_hexdump_create>:
}

struct log_msg *log_msg_hexdump_create(const char *str,
				       const u8_t *data,
				       u32_t length)
{
    5508:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    550c:	b083      	sub	sp, #12
    550e:	4606      	mov	r6, r0
    5510:	460f      	mov	r7, r1
    5512:	4614      	mov	r4, r2
	struct log_msg_cont *cont;
	struct log_msg *msg;
	u32_t chunk_length;

	/* Saturate length. */
	length = (length > LOG_MSG_HEXDUMP_MAX_LENGTH) ?
    5514:	f643 75ff 	movw	r5, #16383	; 0x3fff
    5518:	4295      	cmp	r5, r2
    551a:	bf28      	it	cs
    551c:	4615      	movcs	r5, r2
	union log_msg_chunk *msg = NULL;
    551e:	2200      	movs	r2, #0
    5520:	9201      	str	r2, [sp, #4]
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg, K_NO_WAIT);
    5522:	a901      	add	r1, sp, #4
    5524:	4834      	ldr	r0, [pc, #208]	; (55f8 <log_msg_hexdump_create+0xf0>)
    5526:	f007 f8c9 	bl	c6bc <k_mem_slab_alloc>
	if (err != 0) {
    552a:	bb58      	cbnz	r0, 5584 <log_msg_hexdump_create+0x7c>
	return msg;
    552c:	f8dd 9004 	ldr.w	r9, [sp, #4]
		 LOG_MSG_HEXDUMP_MAX_LENGTH : length;

	msg = (struct log_msg *)log_msg_chunk_alloc();
	if (msg == NULL) {
    5530:	f1b9 0f00 	cmp.w	r9, #0
    5534:	d05b      	beq.n	55ee <log_msg_hexdump_create+0xe6>
		return NULL;
	}

	/* all fields reset to 0, reference counter to 1 */
	msg->hdr.ref_cnt = 1;
    5536:	2301      	movs	r3, #1
    5538:	f8c9 3004 	str.w	r3, [r9, #4]
	msg->hdr.params.hexdump.type = LOG_MSG_TYPE_HEXDUMP;
    553c:	f899 3008 	ldrb.w	r3, [r9, #8]
    5540:	f043 0301 	orr.w	r3, r3, #1
    5544:	f889 3008 	strb.w	r3, [r9, #8]
	msg->hdr.params.hexdump.length = length;
    5548:	f8b9 3008 	ldrh.w	r3, [r9, #8]
    554c:	f365 038f 	bfi	r3, r5, #2, #14
    5550:	f8a9 3008 	strh.w	r3, [r9, #8]
	msg->str = str;
    5554:	f8c9 6010 	str.w	r6, [r9, #16]


	if (length > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
    5558:	2c0c      	cmp	r4, #12
    555a:	d917      	bls.n	558c <log_msg_hexdump_create+0x84>
		(void)memcpy(msg->payload.ext.data.bytes,
    555c:	2208      	movs	r2, #8
    555e:	4639      	mov	r1, r7
    5560:	f109 0018 	add.w	r0, r9, #24
    5564:	f00a ffe4 	bl	10530 <memcpy>
		       data,
		       LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK);
		msg->payload.ext.next = NULL;
    5568:	2300      	movs	r3, #0
    556a:	f8c9 3014 	str.w	r3, [r9, #20]
		msg->hdr.params.generic.ext = 1;
    556e:	f899 3008 	ldrb.w	r3, [r9, #8]
    5572:	f043 0302 	orr.w	r3, r3, #2
    5576:	f889 3008 	strb.w	r3, [r9, #8]

		data += LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
    557a:	3708      	adds	r7, #8
		length -= LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
    557c:	3d08      	subs	r5, #8
		(void)memcpy(msg->payload.single.bytes, data, length);
		msg->hdr.params.generic.ext = 0;
		length = 0U;
	}

	prev_cont = &msg->payload.ext.next;
    557e:	f109 0814 	add.w	r8, r9, #20

	while (length > 0) {
    5582:	e026      	b.n	55d2 <log_msg_hexdump_create+0xca>
		msg = log_msg_no_space_handle();
    5584:	f7ff ff7a 	bl	547c <log_msg_no_space_handle>
    5588:	9001      	str	r0, [sp, #4]
    558a:	e7cf      	b.n	552c <log_msg_hexdump_create+0x24>
		(void)memcpy(msg->payload.single.bytes, data, length);
    558c:	462a      	mov	r2, r5
    558e:	4639      	mov	r1, r7
    5590:	f109 0014 	add.w	r0, r9, #20
    5594:	f00a ffcc 	bl	10530 <memcpy>
		msg->hdr.params.generic.ext = 0;
    5598:	f899 3008 	ldrb.w	r3, [r9, #8]
    559c:	f36f 0341 	bfc	r3, #1, #1
    55a0:	f889 3008 	strb.w	r3, [r9, #8]
		length = 0U;
    55a4:	2500      	movs	r5, #0
    55a6:	e7ea      	b.n	557e <log_msg_hexdump_create+0x76>
    55a8:	f7ff ff68 	bl	547c <log_msg_no_space_handle>
    55ac:	9001      	str	r0, [sp, #4]
	return msg;
    55ae:	9c01      	ldr	r4, [sp, #4]
		cont = (struct log_msg_cont *)log_msg_chunk_alloc();
		if (cont == NULL) {
    55b0:	b1cc      	cbz	r4, 55e6 <log_msg_hexdump_create+0xde>
			msg_free(msg);
			return NULL;
		}

		*prev_cont = cont;
    55b2:	f8c8 4000 	str.w	r4, [r8]
		cont->next = NULL;
    55b6:	2300      	movs	r3, #0
    55b8:	6023      	str	r3, [r4, #0]
		prev_cont = &cont->next;
    55ba:	46a0      	mov	r8, r4

		chunk_length = (length > HEXDUMP_BYTES_CONT_MSG) ?
    55bc:	462e      	mov	r6, r5
    55be:	2d1c      	cmp	r5, #28
    55c0:	bf28      	it	cs
    55c2:	261c      	movcs	r6, #28
			       HEXDUMP_BYTES_CONT_MSG : length;

		(void)memcpy(cont->payload.bytes, data, chunk_length);
    55c4:	4632      	mov	r2, r6
    55c6:	4639      	mov	r1, r7
    55c8:	1d20      	adds	r0, r4, #4
    55ca:	f00a ffb1 	bl	10530 <memcpy>
		data += chunk_length;
    55ce:	4437      	add	r7, r6
		length -= chunk_length;
    55d0:	1bad      	subs	r5, r5, r6
	while (length > 0) {
    55d2:	b165      	cbz	r5, 55ee <log_msg_hexdump_create+0xe6>
	union log_msg_chunk *msg = NULL;
    55d4:	2200      	movs	r2, #0
    55d6:	9201      	str	r2, [sp, #4]
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg, K_NO_WAIT);
    55d8:	a901      	add	r1, sp, #4
    55da:	4807      	ldr	r0, [pc, #28]	; (55f8 <log_msg_hexdump_create+0xf0>)
    55dc:	f007 f86e 	bl	c6bc <k_mem_slab_alloc>
	if (err != 0) {
    55e0:	2800      	cmp	r0, #0
    55e2:	d0e4      	beq.n	55ae <log_msg_hexdump_create+0xa6>
    55e4:	e7e0      	b.n	55a8 <log_msg_hexdump_create+0xa0>
			msg_free(msg);
    55e6:	4648      	mov	r0, r9
    55e8:	f7ff ff60 	bl	54ac <msg_free>
			return NULL;
    55ec:	46a1      	mov	r9, r4
	}

	return msg;
}
    55ee:	4648      	mov	r0, r9
    55f0:	b003      	add	sp, #12
    55f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    55f6:	bf00      	nop
    55f8:	20000abc 	.word	0x20000abc

000055fc <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *log_output,
			   const char *fmt, ...)
{
    55fc:	b40e      	push	{r1, r2, r3}
    55fe:	b500      	push	{lr}
    5600:	b082      	sub	sp, #8
    5602:	ab03      	add	r3, sp, #12
    5604:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
    5608:	9301      	str	r3, [sp, #4]
#if !defined(CONFIG_NEWLIB_LIBC) && !defined(CONFIG_ARCH_POSIX) && \
    defined(CONFIG_LOG_ENABLE_FANCY_OUTPUT_FORMATTING)
	length = z_prf(out_func, (void *)log_output, (char *)fmt, args);
#else
	z_vprintk(out_func, (void *)log_output, fmt, args);
    560a:	4601      	mov	r1, r0
    560c:	4804      	ldr	r0, [pc, #16]	; (5620 <print_formatted+0x24>)
    560e:	f7fb fcab 	bl	f68 <z_vprintk>
#endif
	va_end(args);

	return length;
}
    5612:	2000      	movs	r0, #0
    5614:	b002      	add	sp, #8
    5616:	f85d eb04 	ldr.w	lr, [sp], #4
    561a:	b003      	add	sp, #12
    561c:	4770      	bx	lr
    561e:	bf00      	nop
    5620:	00005845 	.word	0x00005845

00005624 <timestamp_print>:
	log_output->control_block->offset = 0;
}

static int timestamp_print(const struct log_output *log_output,
			   u32_t flags, u32_t timestamp)
{
    5624:	b5f0      	push	{r4, r5, r6, r7, lr}
    5626:	b085      	sub	sp, #20
	bool format =
		(flags & LOG_OUTPUT_FLAG_FORMAT_TIMESTAMP) |
		(flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG);


	if (!format) {
    5628:	f011 0f44 	tst.w	r1, #68	; 0x44
    562c:	d005      	beq.n	563a <timestamp_print+0x16>
		length = print_formatted(log_output, "[%08lu] ", timestamp);
	} else if (freq != 0U) {
    562e:	4b1a      	ldr	r3, [pc, #104]	; (5698 <timestamp_print+0x74>)
    5630:	6819      	ldr	r1, [r3, #0]
    5632:	b931      	cbnz	r1, 5642 <timestamp_print+0x1e>
			length = print_formatted(log_output,
						 "[%02d:%02d:%02d.%03d,%03d] ",
						 hours, mins, seconds, ms, us);
		}
	} else {
		length = 0;
    5634:	2000      	movs	r0, #0
	}

	return length;
}
    5636:	b005      	add	sp, #20
    5638:	bdf0      	pop	{r4, r5, r6, r7, pc}
		length = print_formatted(log_output, "[%08lu] ", timestamp);
    563a:	4918      	ldr	r1, [pc, #96]	; (569c <timestamp_print+0x78>)
    563c:	f7ff ffde 	bl	55fc <print_formatted>
    5640:	e7f9      	b.n	5636 <timestamp_print+0x12>
		timestamp /= timestamp_div;
    5642:	4b17      	ldr	r3, [pc, #92]	; (56a0 <timestamp_print+0x7c>)
    5644:	681d      	ldr	r5, [r3, #0]
    5646:	fbb2 f5f5 	udiv	r5, r2, r5
		seconds = timestamp / freq;
    564a:	fbb5 f4f1 	udiv	r4, r5, r1
		hours = seconds / 3600U;
    564e:	4a15      	ldr	r2, [pc, #84]	; (56a4 <timestamp_print+0x80>)
    5650:	fba2 3204 	umull	r3, r2, r2, r4
    5654:	0ad2      	lsrs	r2, r2, #11
		seconds -= hours * 3600U;
    5656:	f44f 6661 	mov.w	r6, #3600	; 0xe10
    565a:	fb06 4612 	mls	r6, r6, r2, r4
		mins = seconds / 60U;
    565e:	4b12      	ldr	r3, [pc, #72]	; (56a8 <timestamp_print+0x84>)
    5660:	fba3 7306 	umull	r7, r3, r3, r6
    5664:	095b      	lsrs	r3, r3, #5
		remainder = timestamp % freq;
    5666:	fb01 5414 	mls	r4, r1, r4, r5
		ms = (remainder * 1000U) / freq;
    566a:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
    566e:	fb05 f404 	mul.w	r4, r5, r4
    5672:	fbb4 f7f1 	udiv	r7, r4, r1
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    5676:	fb07 4411 	mls	r4, r7, r1, r4
    567a:	fb05 f404 	mul.w	r4, r5, r4
    567e:	fbb4 f1f1 	udiv	r1, r4, r1
			length = print_formatted(log_output,
    5682:	9102      	str	r1, [sp, #8]
    5684:	9701      	str	r7, [sp, #4]
    5686:	ebc3 1403 	rsb	r4, r3, r3, lsl #4
    568a:	00a1      	lsls	r1, r4, #2
    568c:	1a71      	subs	r1, r6, r1
    568e:	9100      	str	r1, [sp, #0]
    5690:	4906      	ldr	r1, [pc, #24]	; (56ac <timestamp_print+0x88>)
    5692:	f7ff ffb3 	bl	55fc <print_formatted>
    5696:	e7ce      	b.n	5636 <timestamp_print+0x12>
    5698:	20000ad8 	.word	0x20000ad8
    569c:	00011f44 	.word	0x00011f44
    56a0:	20000adc 	.word	0x20000adc
    56a4:	91a2b3c5 	.word	0x91a2b3c5
    56a8:	88888889 	.word	0x88888889
    56ac:	00011f50 	.word	0x00011f50

000056b0 <color_print>:

static void color_print(const struct log_output *log_output,
			bool color, bool start, u32_t level)
{
	if (color) {
    56b0:	b161      	cbz	r1, 56cc <color_print+0x1c>
{
    56b2:	b508      	push	{r3, lr}
		const char *color = start && (colors[level] != NULL) ?
				colors[level] : LOG_COLOR_CODE_DEFAULT;
    56b4:	b12a      	cbz	r2, 56c2 <color_print+0x12>
		const char *color = start && (colors[level] != NULL) ?
    56b6:	4a06      	ldr	r2, [pc, #24]	; (56d0 <color_print+0x20>)
    56b8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    56bc:	b912      	cbnz	r2, 56c4 <color_print+0x14>
				colors[level] : LOG_COLOR_CODE_DEFAULT;
    56be:	4a05      	ldr	r2, [pc, #20]	; (56d4 <color_print+0x24>)
    56c0:	e000      	b.n	56c4 <color_print+0x14>
    56c2:	4a04      	ldr	r2, [pc, #16]	; (56d4 <color_print+0x24>)
		print_formatted(log_output, "%s", color);
    56c4:	4904      	ldr	r1, [pc, #16]	; (56d8 <color_print+0x28>)
    56c6:	f7ff ff99 	bl	55fc <print_formatted>
	}
}
    56ca:	bd08      	pop	{r3, pc}
    56cc:	4770      	bx	lr
    56ce:	bf00      	nop
    56d0:	00011e40 	.word	0x00011e40
    56d4:	00011e38 	.word	0x00011e38
    56d8:	00011144 	.word	0x00011144

000056dc <newline_print>:
	if (IS_ENABLED(CONFIG_LOG_BACKEND_NET) &&
	    flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) {
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    56dc:	f011 0f10 	tst.w	r1, #16
    56e0:	d10b      	bne.n	56fa <newline_print+0x1e>
{
    56e2:	b508      	push	{r3, lr}
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    56e4:	f011 0f20 	tst.w	r1, #32
    56e8:	d003      	beq.n	56f2 <newline_print+0x16>
		print_formatted(ctx, "\n");
    56ea:	4904      	ldr	r1, [pc, #16]	; (56fc <newline_print+0x20>)
    56ec:	f7ff ff86 	bl	55fc <print_formatted>
	} else {
		print_formatted(ctx, "\r\n");
	}
}
    56f0:	bd08      	pop	{r3, pc}
		print_formatted(ctx, "\r\n");
    56f2:	4903      	ldr	r1, [pc, #12]	; (5700 <newline_print+0x24>)
    56f4:	f7ff ff82 	bl	55fc <print_formatted>
    56f8:	e7fa      	b.n	56f0 <newline_print+0x14>
    56fa:	4770      	bx	lr
    56fc:	00013600 	.word	0x00013600
    5700:	00011e7c 	.word	0x00011e7c

00005704 <hexdump_line_print>:
}

static void hexdump_line_print(const struct log_output *log_output,
			       const u8_t *data, u32_t length,
			       int prefix_offset, u32_t flags)
{
    5704:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5708:	4605      	mov	r5, r0
    570a:	460f      	mov	r7, r1
    570c:	4616      	mov	r6, r2
    570e:	4698      	mov	r8, r3
	newline_print(log_output, flags);
    5710:	9906      	ldr	r1, [sp, #24]
    5712:	f7ff ffe3 	bl	56dc <newline_print>

	for (int i = 0; i < prefix_offset; i++) {
    5716:	2400      	movs	r4, #0
    5718:	4544      	cmp	r4, r8
    571a:	da05      	bge.n	5728 <hexdump_line_print+0x24>
		print_formatted(log_output, " ");
    571c:	4919      	ldr	r1, [pc, #100]	; (5784 <hexdump_line_print+0x80>)
    571e:	4628      	mov	r0, r5
    5720:	f7ff ff6c 	bl	55fc <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    5724:	3401      	adds	r4, #1
    5726:	e7f7      	b.n	5718 <hexdump_line_print+0x14>
	}

	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    5728:	2400      	movs	r4, #0
    572a:	e004      	b.n	5736 <hexdump_line_print+0x32>
		if (i < length) {
			print_formatted(log_output, "%02x ", data[i]);
		} else {
			print_formatted(log_output, "   ");
    572c:	4916      	ldr	r1, [pc, #88]	; (5788 <hexdump_line_print+0x84>)
    572e:	4628      	mov	r0, r5
    5730:	f7ff ff64 	bl	55fc <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    5734:	3401      	adds	r4, #1
    5736:	2c07      	cmp	r4, #7
    5738:	dc07      	bgt.n	574a <hexdump_line_print+0x46>
		if (i < length) {
    573a:	42b4      	cmp	r4, r6
    573c:	d2f6      	bcs.n	572c <hexdump_line_print+0x28>
			print_formatted(log_output, "%02x ", data[i]);
    573e:	5d3a      	ldrb	r2, [r7, r4]
    5740:	4912      	ldr	r1, [pc, #72]	; (578c <hexdump_line_print+0x88>)
    5742:	4628      	mov	r0, r5
    5744:	f7ff ff5a 	bl	55fc <print_formatted>
    5748:	e7f4      	b.n	5734 <hexdump_line_print+0x30>
		}
	}

	print_formatted(log_output, "|");
    574a:	4911      	ldr	r1, [pc, #68]	; (5790 <hexdump_line_print+0x8c>)
    574c:	4628      	mov	r0, r5
    574e:	f7ff ff55 	bl	55fc <print_formatted>

	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    5752:	2400      	movs	r4, #0
    5754:	e004      	b.n	5760 <hexdump_line_print+0x5c>
		if (i < length) {
			char c = (char)data[i];

			print_formatted(log_output, "%c",
    5756:	490f      	ldr	r1, [pc, #60]	; (5794 <hexdump_line_print+0x90>)
    5758:	4628      	mov	r0, r5
    575a:	f7ff ff4f 	bl	55fc <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    575e:	3401      	adds	r4, #1
    5760:	2c07      	cmp	r4, #7
    5762:	dc0d      	bgt.n	5780 <hexdump_line_print+0x7c>
		if (i < length) {
    5764:	42b4      	cmp	r4, r6
    5766:	d206      	bcs.n	5776 <hexdump_line_print+0x72>
			char c = (char)data[i];
    5768:	5d3a      	ldrb	r2, [r7, r4]
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isprint(int c)
{
	return (int)((((unsigned)c) >= ' ') &&
    576a:	f1a2 0320 	sub.w	r3, r2, #32
			print_formatted(log_output, "%c",
    576e:	2b5e      	cmp	r3, #94	; 0x5e
    5770:	d9f1      	bls.n	5756 <hexdump_line_print+0x52>
    5772:	222e      	movs	r2, #46	; 0x2e
    5774:	e7ef      	b.n	5756 <hexdump_line_print+0x52>
			      isprint((int)c) ? c : '.');
		} else {
			print_formatted(log_output, " ");
    5776:	4903      	ldr	r1, [pc, #12]	; (5784 <hexdump_line_print+0x80>)
    5778:	4628      	mov	r0, r5
    577a:	f7ff ff3f 	bl	55fc <print_formatted>
    577e:	e7ee      	b.n	575e <hexdump_line_print+0x5a>
		}
	}
}
    5780:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5784:	00011e78 	.word	0x00011e78
    5788:	00011e5c 	.word	0x00011e5c
    578c:	00011e54 	.word	0x00011e54
    5790:	00011e60 	.word	0x00011e60
    5794:	00011e64 	.word	0x00011e64

00005798 <ids_print>:
{
    5798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    579a:	4604      	mov	r4, r0
    579c:	4616      	mov	r6, r2
    579e:	461f      	mov	r7, r3
	if (level_on) {
    57a0:	b949      	cbnz	r1, 57b6 <ids_print+0x1e>
	int total = 0;
    57a2:	2500      	movs	r5, #0
	total += print_formatted(log_output,
    57a4:	b186      	cbz	r6, 57c8 <ids_print+0x30>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
    57a6:	2301      	movs	r3, #1
    57a8:	9a07      	ldr	r2, [sp, #28]
    57aa:	4093      	lsls	r3, r2
				(func_on &&
    57ac:	f013 0f10 	tst.w	r3, #16
    57b0:	d116      	bne.n	57e0 <ids_print+0x48>
	total += print_formatted(log_output,
    57b2:	4e0c      	ldr	r6, [pc, #48]	; (57e4 <ids_print+0x4c>)
    57b4:	e009      	b.n	57ca <ids_print+0x32>
		total += print_formatted(log_output, "<%s> ", severity[level]);
    57b6:	4b0c      	ldr	r3, [pc, #48]	; (57e8 <ids_print+0x50>)
    57b8:	9a07      	ldr	r2, [sp, #28]
    57ba:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    57be:	490b      	ldr	r1, [pc, #44]	; (57ec <ids_print+0x54>)
    57c0:	f7ff ff1c 	bl	55fc <print_formatted>
    57c4:	4605      	mov	r5, r0
    57c6:	e7ed      	b.n	57a4 <ids_print+0xc>
	total += print_formatted(log_output,
    57c8:	4e06      	ldr	r6, [pc, #24]	; (57e4 <ids_print+0x4c>)
    57ca:	9906      	ldr	r1, [sp, #24]
    57cc:	4638      	mov	r0, r7
    57ce:	f7ff fcff 	bl	51d0 <log_source_name_get>
    57d2:	4602      	mov	r2, r0
    57d4:	4631      	mov	r1, r6
    57d6:	4620      	mov	r0, r4
    57d8:	f7ff ff10 	bl	55fc <print_formatted>
}
    57dc:	4428      	add	r0, r5
    57de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	total += print_formatted(log_output,
    57e0:	4e03      	ldr	r6, [pc, #12]	; (57f0 <ids_print+0x58>)
    57e2:	e7f2      	b.n	57ca <ids_print+0x32>
    57e4:	00011e68 	.word	0x00011e68
    57e8:	00011f10 	.word	0x00011f10
    57ec:	00011e74 	.word	0x00011e74
    57f0:	00011e70 	.word	0x00011e70

000057f4 <hexdump_print>:

static void hexdump_print(struct log_msg *msg,
			  const struct log_output *log_output,
			  int prefix_offset, u32_t flags)
{
    57f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    57f8:	b086      	sub	sp, #24
    57fa:	4606      	mov	r6, r0
    57fc:	460d      	mov	r5, r1
    57fe:	4690      	mov	r8, r2
    5800:	461f      	mov	r7, r3
	u32_t offset = 0U;
	u8_t buf[HEXDUMP_BYTES_IN_LINE];
	size_t length;

	print_formatted(log_output, "%s", log_msg_str_get(msg));
    5802:	f00a fa00 	bl	fc06 <log_msg_str_get>
    5806:	4602      	mov	r2, r0
    5808:	490d      	ldr	r1, [pc, #52]	; (5840 <hexdump_print+0x4c>)
    580a:	4628      	mov	r0, r5
    580c:	f7ff fef6 	bl	55fc <print_formatted>
	u32_t offset = 0U;
    5810:	2400      	movs	r4, #0

	do {
		length = sizeof(buf);
    5812:	2308      	movs	r3, #8
    5814:	9303      	str	r3, [sp, #12]
		log_msg_hexdump_data_get(msg, buf, &length, offset);
    5816:	4623      	mov	r3, r4
    5818:	aa03      	add	r2, sp, #12
    581a:	a904      	add	r1, sp, #16
    581c:	4630      	mov	r0, r6
    581e:	f00a f9f4 	bl	fc0a <log_msg_hexdump_data_get>

		if (length) {
    5822:	9a03      	ldr	r2, [sp, #12]
    5824:	b142      	cbz	r2, 5838 <hexdump_print+0x44>
			hexdump_line_print(log_output, buf, length,
    5826:	9700      	str	r7, [sp, #0]
    5828:	4643      	mov	r3, r8
    582a:	a904      	add	r1, sp, #16
    582c:	4628      	mov	r0, r5
    582e:	f7ff ff69 	bl	5704 <hexdump_line_print>
					   prefix_offset, flags);
			offset += length;
    5832:	9b03      	ldr	r3, [sp, #12]
    5834:	441c      	add	r4, r3
		length = sizeof(buf);
    5836:	e7ec      	b.n	5812 <hexdump_print+0x1e>
		} else {
			break;
		}
	} while (true);
}
    5838:	b006      	add	sp, #24
    583a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    583e:	bf00      	nop
    5840:	00011144 	.word	0x00011144

00005844 <out_func>:
{
    5844:	b538      	push	{r3, r4, r5, lr}
    5846:	460c      	mov	r4, r1
	out_ctx->buf[out_ctx->control_block->offset] = (u8_t)c;
    5848:	688a      	ldr	r2, [r1, #8]
    584a:	684b      	ldr	r3, [r1, #4]
    584c:	681b      	ldr	r3, [r3, #0]
    584e:	54d0      	strb	r0, [r2, r3]
	out_ctx->control_block->offset++;
    5850:	684a      	ldr	r2, [r1, #4]
    5852:	6813      	ldr	r3, [r2, #0]
    5854:	3301      	adds	r3, #1
    5856:	6013      	str	r3, [r2, #0]
	__ASSERT_NO_MSG(out_ctx->control_block->offset <= out_ctx->size);
    5858:	684b      	ldr	r3, [r1, #4]
    585a:	681a      	ldr	r2, [r3, #0]
    585c:	68cb      	ldr	r3, [r1, #12]
    585e:	429a      	cmp	r2, r3
    5860:	d806      	bhi.n	5870 <out_func+0x2c>
	if (out_ctx->control_block->offset == out_ctx->size) {
    5862:	6863      	ldr	r3, [r4, #4]
    5864:	681a      	ldr	r2, [r3, #0]
    5866:	68e3      	ldr	r3, [r4, #12]
    5868:	429a      	cmp	r2, r3
    586a:	d00d      	beq.n	5888 <out_func+0x44>
}
    586c:	2000      	movs	r0, #0
    586e:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT_NO_MSG(out_ctx->control_block->offset <= out_ctx->size);
    5870:	4d07      	ldr	r5, [pc, #28]	; (5890 <out_func+0x4c>)
    5872:	2365      	movs	r3, #101	; 0x65
    5874:	462a      	mov	r2, r5
    5876:	4907      	ldr	r1, [pc, #28]	; (5894 <out_func+0x50>)
    5878:	4807      	ldr	r0, [pc, #28]	; (5898 <out_func+0x54>)
    587a:	f00a f800 	bl	f87e <printk>
    587e:	2165      	movs	r1, #101	; 0x65
    5880:	4628      	mov	r0, r5
    5882:	f00a f882 	bl	f98a <assert_post_action>
    5886:	e7ec      	b.n	5862 <out_func+0x1e>
		log_output_flush(out_ctx);
    5888:	4620      	mov	r0, r4
    588a:	f00a fb6d 	bl	ff68 <log_output_flush>
    588e:	e7ed      	b.n	586c <out_func+0x28>
    5890:	00011e80 	.word	0x00011e80
    5894:	00011ea0 	.word	0x00011ea0
    5898:	00010f8c 	.word	0x00010f8c

0000589c <raw_string_print>:

static void raw_string_print(struct log_msg *msg,
			     const struct log_output *log_output)
{
    589c:	b5f0      	push	{r4, r5, r6, r7, lr}
    589e:	b083      	sub	sp, #12
    58a0:	4606      	mov	r6, r0
    58a2:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(log_output->size);
    58a4:	68cb      	ldr	r3, [r1, #12]
    58a6:	b113      	cbz	r3, 58ae <raw_string_print+0x12>
{
    58a8:	2700      	movs	r7, #0
    58aa:	463d      	mov	r5, r7
    58ac:	e013      	b.n	58d6 <raw_string_print+0x3a>
	__ASSERT_NO_MSG(log_output->size);
    58ae:	4d19      	ldr	r5, [pc, #100]	; (5914 <raw_string_print+0x78>)
    58b0:	f240 13a1 	movw	r3, #417	; 0x1a1
    58b4:	462a      	mov	r2, r5
    58b6:	4918      	ldr	r1, [pc, #96]	; (5918 <raw_string_print+0x7c>)
    58b8:	4818      	ldr	r0, [pc, #96]	; (591c <raw_string_print+0x80>)
    58ba:	f009 ffe0 	bl	f87e <printk>
    58be:	f240 11a1 	movw	r1, #417	; 0x1a1
    58c2:	4628      	mov	r0, r5
    58c4:	f00a f861 	bl	f98a <assert_post_action>
    58c8:	e7ee      	b.n	58a8 <raw_string_print+0xc>

		if (length != 0) {
			eol = (log_output->buf[length - 1] == '\n');
		}

		log_output_flush(log_output);
    58ca:	4620      	mov	r0, r4
    58cc:	f00a fb4c 	bl	ff68 <log_output_flush>
		offset += length;
    58d0:	9b01      	ldr	r3, [sp, #4]
    58d2:	441d      	add	r5, r3
	} while (length > 0);
    58d4:	b1ab      	cbz	r3, 5902 <raw_string_print+0x66>
		length = log_output->size;
    58d6:	68e3      	ldr	r3, [r4, #12]
    58d8:	9301      	str	r3, [sp, #4]
		log_msg_hexdump_data_get(msg, log_output->buf, &length, offset);
    58da:	462b      	mov	r3, r5
    58dc:	aa01      	add	r2, sp, #4
    58de:	68a1      	ldr	r1, [r4, #8]
    58e0:	4630      	mov	r0, r6
    58e2:	f00a f992 	bl	fc0a <log_msg_hexdump_data_get>
		log_output->control_block->offset = length;
    58e6:	6862      	ldr	r2, [r4, #4]
    58e8:	9b01      	ldr	r3, [sp, #4]
    58ea:	6013      	str	r3, [r2, #0]
		if (length != 0) {
    58ec:	2b00      	cmp	r3, #0
    58ee:	d0ec      	beq.n	58ca <raw_string_print+0x2e>
			eol = (log_output->buf[length - 1] == '\n');
    58f0:	68a2      	ldr	r2, [r4, #8]
    58f2:	4413      	add	r3, r2
    58f4:	f813 3c01 	ldrb.w	r3, [r3, #-1]
    58f8:	2b0a      	cmp	r3, #10
    58fa:	bf14      	ite	ne
    58fc:	2700      	movne	r7, #0
    58fe:	2701      	moveq	r7, #1
    5900:	e7e3      	b.n	58ca <raw_string_print+0x2e>

	if (eol) {
    5902:	b90f      	cbnz	r7, 5908 <raw_string_print+0x6c>
		print_formatted(log_output, "\r");
	}
}
    5904:	b003      	add	sp, #12
    5906:	bdf0      	pop	{r4, r5, r6, r7, pc}
		print_formatted(log_output, "\r");
    5908:	4905      	ldr	r1, [pc, #20]	; (5920 <raw_string_print+0x84>)
    590a:	4620      	mov	r0, r4
    590c:	f7ff fe76 	bl	55fc <print_formatted>
}
    5910:	e7f8      	b.n	5904 <raw_string_print+0x68>
    5912:	bf00      	nop
    5914:	00011e80 	.word	0x00011e80
    5918:	00011ef8 	.word	0x00011ef8
    591c:	00010f8c 	.word	0x00010f8c
    5920:	00011f0c 	.word	0x00011f0c

00005924 <log_output_dropped_process>:
	postfix_print(log_output, flags, level);
	log_output_flush(log_output);
}

void log_output_dropped_process(const struct log_output *log_output, u32_t cnt)
{
    5924:	b570      	push	{r4, r5, r6, lr}
    5926:	b082      	sub	sp, #8
	char buf[5];
	int len;
	static const char prefix[] = DROPPED_COLOR_PREFIX "--- ";
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = log_output->func;
    5928:	6804      	ldr	r4, [r0, #0]
	struct device *dev = (struct device *)log_output->control_block->ctx;
    592a:	6843      	ldr	r3, [r0, #4]
    592c:	685d      	ldr	r5, [r3, #4]

	cnt = MIN(cnt, 9999);
	len = snprintf(buf, sizeof(buf), "%d", cnt);
    592e:	f242 730f 	movw	r3, #9999	; 0x270f
    5932:	428b      	cmp	r3, r1
    5934:	bf28      	it	cs
    5936:	460b      	movcs	r3, r1
    5938:	4a0c      	ldr	r2, [pc, #48]	; (596c <log_output_dropped_process+0x48>)
    593a:	2105      	movs	r1, #5
    593c:	4668      	mov	r0, sp
    593e:	f004 fdfd 	bl	a53c <snprintf>
    5942:	4606      	mov	r6, r0

	buffer_write(outf, (u8_t *)prefix, sizeof(prefix) - 1, dev);
    5944:	462b      	mov	r3, r5
    5946:	220b      	movs	r2, #11
    5948:	4909      	ldr	r1, [pc, #36]	; (5970 <log_output_dropped_process+0x4c>)
    594a:	4620      	mov	r0, r4
    594c:	f00a f965 	bl	fc1a <buffer_write>
	buffer_write(outf, buf, len, dev);
    5950:	462b      	mov	r3, r5
    5952:	4632      	mov	r2, r6
    5954:	4669      	mov	r1, sp
    5956:	4620      	mov	r0, r4
    5958:	f00a f95f 	bl	fc1a <buffer_write>
	buffer_write(outf, (u8_t *)postfix, sizeof(postfix) - 1, dev);
    595c:	462b      	mov	r3, r5
    595e:	221b      	movs	r2, #27
    5960:	4904      	ldr	r1, [pc, #16]	; (5974 <log_output_dropped_process+0x50>)
    5962:	4620      	mov	r0, r4
    5964:	f00a f959 	bl	fc1a <buffer_write>
}
    5968:	b002      	add	sp, #8
    596a:	bd70      	pop	{r4, r5, r6, pc}
    596c:	0001267c 	.word	0x0001267c
    5970:	00011eec 	.word	0x00011eec
    5974:	00011ed0 	.word	0x00011ed0

00005978 <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(u32_t frequency)
{
	timestamp_div = 1U;
    5978:	4b07      	ldr	r3, [pc, #28]	; (5998 <log_output_timestamp_freq_set+0x20>)
    597a:	2201      	movs	r2, #1
    597c:	601a      	str	r2, [r3, #0]
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    597e:	4b07      	ldr	r3, [pc, #28]	; (599c <log_output_timestamp_freq_set+0x24>)
    5980:	4298      	cmp	r0, r3
    5982:	d905      	bls.n	5990 <log_output_timestamp_freq_set+0x18>
		frequency /= 2U;
    5984:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    5986:	4a04      	ldr	r2, [pc, #16]	; (5998 <log_output_timestamp_freq_set+0x20>)
    5988:	6813      	ldr	r3, [r2, #0]
    598a:	005b      	lsls	r3, r3, #1
    598c:	6013      	str	r3, [r2, #0]
    598e:	e7f6      	b.n	597e <log_output_timestamp_freq_set+0x6>
	}

	freq = frequency;
    5990:	4b03      	ldr	r3, [pc, #12]	; (59a0 <log_output_timestamp_freq_set+0x28>)
    5992:	6018      	str	r0, [r3, #0]
}
    5994:	4770      	bx	lr
    5996:	bf00      	nop
    5998:	20000adc 	.word	0x20000adc
    599c:	000f4240 	.word	0x000f4240
    59a0:	20000ad8 	.word	0x20000ad8

000059a4 <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	host_present = true;
    59a4:	4b03      	ldr	r3, [pc, #12]	; (59b4 <log_backend_rtt_init+0x10>)
    59a6:	2201      	movs	r2, #1
    59a8:	701a      	strb	r2, [r3, #0]
	sync_mode = IS_ENABLED(CONFIG_LOG_IMMEDIATE) ? true : false;
    59aa:	4b03      	ldr	r3, [pc, #12]	; (59b8 <log_backend_rtt_init+0x14>)
    59ac:	2200      	movs	r2, #0
    59ae:	701a      	strb	r2, [r3, #0]
	line_pos = line_buf;
}
    59b0:	4770      	bx	lr
    59b2:	bf00      	nop
    59b4:	200027ce 	.word	0x200027ce
    59b8:	200027cf 	.word	0x200027cf

000059bc <panic>:

static void panic(struct log_backend const *const backend)
{
    59bc:	b508      	push	{r3, lr}
	log_output_flush(&log_output);
    59be:	4803      	ldr	r0, [pc, #12]	; (59cc <panic+0x10>)
    59c0:	f00a fad2 	bl	ff68 <log_output_flush>
	sync_mode = true;
    59c4:	4b02      	ldr	r3, [pc, #8]	; (59d0 <panic+0x14>)
    59c6:	2201      	movs	r2, #1
    59c8:	701a      	strb	r2, [r3, #0]
}
    59ca:	bd08      	pop	{r3, pc}
    59cc:	00011f84 	.word	0x00011f84
    59d0:	200027cf 	.word	0x200027cf

000059d4 <on_failed_write>:
{
    59d4:	b508      	push	{r3, lr}
	if (retry_cnt == 0) {
    59d6:	b918      	cbnz	r0, 59e0 <on_failed_write+0xc>
		host_present = false;
    59d8:	4b07      	ldr	r3, [pc, #28]	; (59f8 <on_failed_write+0x24>)
    59da:	2200      	movs	r2, #0
    59dc:	701a      	strb	r2, [r3, #0]
}
    59de:	bd08      	pop	{r3, pc}
	} else if (sync_mode) {
    59e0:	4b06      	ldr	r3, [pc, #24]	; (59fc <on_failed_write+0x28>)
    59e2:	781b      	ldrb	r3, [r3, #0]
    59e4:	b123      	cbz	r3, 59f0 <on_failed_write+0x1c>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_BUSY_WAIT, k_busy_wait, u32_t, usec_to_wait)
    59e6:	f241 3088 	movw	r0, #5000	; 0x1388
    59ea:	f008 fef9 	bl	e7e0 <z_impl_k_busy_wait>
    59ee:	e7f6      	b.n	59de <on_failed_write+0xa>
K_SYSCALL_DECLARE1(K_SYSCALL_K_SLEEP, k_sleep, s32_t, s32_t, duration)
    59f0:	2005      	movs	r0, #5
    59f2:	f008 fc7d 	bl	e2f0 <z_impl_k_sleep>
}
    59f6:	e7f2      	b.n	59de <on_failed_write+0xa>
    59f8:	200027ce 	.word	0x200027ce
    59fc:	200027cf 	.word	0x200027cf

00005a00 <on_write>:
{
    5a00:	b538      	push	{r3, r4, r5, lr}
    5a02:	4604      	mov	r4, r0
	host_present = true;
    5a04:	4b0a      	ldr	r3, [pc, #40]	; (5a30 <on_write+0x30>)
    5a06:	2201      	movs	r2, #1
    5a08:	701a      	strb	r2, [r3, #0]
	if (sync_mode) {
    5a0a:	4b0a      	ldr	r3, [pc, #40]	; (5a34 <on_write+0x34>)
    5a0c:	781b      	ldrb	r3, [r3, #0]
    5a0e:	b903      	cbnz	r3, 5a12 <on_write+0x12>
}
    5a10:	bd38      	pop	{r3, r4, r5, pc}
		while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER) &&
    5a12:	2000      	movs	r0, #0
    5a14:	f7ff f8f8 	bl	4c08 <SEGGER_RTT_HasDataUp>
    5a18:	2800      	cmp	r0, #0
    5a1a:	d0f9      	beq.n	5a10 <on_write+0x10>
    5a1c:	4b04      	ldr	r3, [pc, #16]	; (5a30 <on_write+0x30>)
    5a1e:	781b      	ldrb	r3, [r3, #0]
    5a20:	2b00      	cmp	r3, #0
    5a22:	d0f5      	beq.n	5a10 <on_write+0x10>
			on_failed_write(retry_cnt--);
    5a24:	1e65      	subs	r5, r4, #1
    5a26:	4620      	mov	r0, r4
    5a28:	f7ff ffd4 	bl	59d4 <on_failed_write>
    5a2c:	462c      	mov	r4, r5
    5a2e:	e7f0      	b.n	5a12 <on_write+0x12>
    5a30:	200027ce 	.word	0x200027ce
    5a34:	200027cf 	.word	0x200027cf

00005a38 <data_out_block_mode>:
{
    5a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5a3a:	4606      	mov	r6, r0
    5a3c:	460d      	mov	r5, r1
	int retry_cnt = CONFIG_LOG_BACKEND_RTT_RETRY_CNT;
    5a3e:	2704      	movs	r7, #4
    5a40:	e010      	b.n	5a64 <data_out_block_mode+0x2c>
K_SYSCALL_DECLARE2(K_SYSCALL_K_MUTEX_LOCK, k_mutex_lock, int, struct k_mutex *, mutex, s32_t, timeout)
    5a42:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    5a46:	4815      	ldr	r0, [pc, #84]	; (5a9c <data_out_block_mode+0x64>)
    5a48:	f007 f856 	bl	caf8 <z_impl_k_mutex_lock>
    5a4c:	e00e      	b.n	5a6c <data_out_block_mode+0x34>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_UNLOCK, k_mutex_unlock, struct k_mutex *, mutex)
    5a4e:	4813      	ldr	r0, [pc, #76]	; (5a9c <data_out_block_mode+0x64>)
    5a50:	f007 f958 	bl	cd04 <z_impl_k_mutex_unlock>
    5a54:	e014      	b.n	5a80 <data_out_block_mode+0x48>
			on_write(retry_cnt);
    5a56:	4638      	mov	r0, r7
    5a58:	f7ff ffd2 	bl	5a00 <on_write>
	} while ((ret == 0) && host_present);
    5a5c:	b9dc      	cbnz	r4, 5a96 <data_out_block_mode+0x5e>
    5a5e:	4b10      	ldr	r3, [pc, #64]	; (5aa0 <data_out_block_mode+0x68>)
    5a60:	781b      	ldrb	r3, [r3, #0]
    5a62:	b1c3      	cbz	r3, 5a96 <data_out_block_mode+0x5e>
		if (!sync_mode) {
    5a64:	4b0f      	ldr	r3, [pc, #60]	; (5aa4 <data_out_block_mode+0x6c>)
    5a66:	781b      	ldrb	r3, [r3, #0]
    5a68:	2b00      	cmp	r3, #0
    5a6a:	d0ea      	beq.n	5a42 <data_out_block_mode+0xa>
		ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    5a6c:	462a      	mov	r2, r5
    5a6e:	4631      	mov	r1, r6
    5a70:	2000      	movs	r0, #0
    5a72:	f7ff f801 	bl	4a78 <SEGGER_RTT_WriteSkipNoLock>
    5a76:	4604      	mov	r4, r0
		if (!sync_mode) {
    5a78:	4b0a      	ldr	r3, [pc, #40]	; (5aa4 <data_out_block_mode+0x6c>)
    5a7a:	781b      	ldrb	r3, [r3, #0]
    5a7c:	2b00      	cmp	r3, #0
    5a7e:	d0e6      	beq.n	5a4e <data_out_block_mode+0x16>
		if (ret) {
    5a80:	2c00      	cmp	r4, #0
    5a82:	d1e8      	bne.n	5a56 <data_out_block_mode+0x1e>
		} else if (host_present) {
    5a84:	4b06      	ldr	r3, [pc, #24]	; (5aa0 <data_out_block_mode+0x68>)
    5a86:	781b      	ldrb	r3, [r3, #0]
    5a88:	2b00      	cmp	r3, #0
    5a8a:	d0e7      	beq.n	5a5c <data_out_block_mode+0x24>
			retry_cnt--;
    5a8c:	3f01      	subs	r7, #1
			on_failed_write(retry_cnt);
    5a8e:	4638      	mov	r0, r7
    5a90:	f7ff ffa0 	bl	59d4 <on_failed_write>
    5a94:	e7e2      	b.n	5a5c <data_out_block_mode+0x24>
}
    5a96:	4628      	mov	r0, r5
    5a98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5a9a:	bf00      	nop
    5a9c:	20007490 	.word	0x20007490
    5aa0:	200027ce 	.word	0x200027ce
    5aa4:	200027cf 	.word	0x200027cf

00005aa8 <dropped>:

static void dropped(const struct log_backend *const backend, u32_t cnt)
{
    5aa8:	b508      	push	{r3, lr}
	ARG_UNUSED(backend);

	log_output_dropped_process(&log_output, cnt);
    5aaa:	4802      	ldr	r0, [pc, #8]	; (5ab4 <dropped+0xc>)
    5aac:	f7ff ff3a 	bl	5924 <log_output_dropped_process>
}
    5ab0:	bd08      	pop	{r3, pc}
    5ab2:	bf00      	nop
    5ab4:	00011f84 	.word	0x00011f84

00005ab8 <put>:
{
    5ab8:	b510      	push	{r4, lr}
    5aba:	460c      	mov	r4, r1
	log_msg_get(msg);
    5abc:	4608      	mov	r0, r1
    5abe:	f00a f86e 	bl	fb9e <log_msg_get>
	log_output_msg_process(&log_output, msg, flags);
    5ac2:	220f      	movs	r2, #15
    5ac4:	4621      	mov	r1, r4
    5ac6:	4803      	ldr	r0, [pc, #12]	; (5ad4 <put+0x1c>)
    5ac8:	f00a fa5b 	bl	ff82 <log_output_msg_process>
	log_msg_put(msg);
    5acc:	4620      	mov	r0, r4
    5ace:	f00a f887 	bl	fbe0 <log_msg_put>
}
    5ad2:	bd10      	pop	{r4, pc}
    5ad4:	00011f84 	.word	0x00011f84

00005ad8 <usb_handle_request>:
 *
 * @return true if the request was handles successfully
 */
static bool usb_handle_request(struct usb_setup_packet *setup,
			       s32_t *len, u8_t **data)
{
    5ad8:	b510      	push	{r4, lr}
	u32_t type = REQTYPE_GET_TYPE(setup->bmRequestType);
    5ada:	7803      	ldrb	r3, [r0, #0]
    5adc:	f3c3 1341 	ubfx	r3, r3, #5, #2
	usb_request_handler handler = usb_dev.req_handlers[type];
    5ae0:	3308      	adds	r3, #8
    5ae2:	4c07      	ldr	r4, [pc, #28]	; (5b00 <usb_handle_request+0x28>)
    5ae4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    5ae8:	685b      	ldr	r3, [r3, #4]
	if (type >= MAX_NUM_REQ_HANDLERS) {
		LOG_DBG("Error Incorrect iType %d", type);
		return false;
	}

	if (handler == NULL) {
    5aea:	b123      	cbz	r3, 5af6 <usb_handle_request+0x1e>
		LOG_DBG("No handler for reqtype %d", type);
		return false;
	}

	if ((*handler)(setup, len, data) < 0) {
    5aec:	4798      	blx	r3
    5aee:	2800      	cmp	r0, #0
    5af0:	db03      	blt.n	5afa <usb_handle_request+0x22>
		LOG_DBG("Handler Error %d", type);
		usb_print_setup(setup);
		return false;
	}

	return true;
    5af2:	2001      	movs	r0, #1
}
    5af4:	bd10      	pop	{r4, pc}
		return false;
    5af6:	2000      	movs	r0, #0
    5af8:	e7fc      	b.n	5af4 <usb_handle_request+0x1c>
		return false;
    5afa:	2000      	movs	r0, #0
    5afc:	e7fa      	b.n	5af4 <usb_handle_request+0x1c>
    5afe:	bf00      	nop
    5b00:	20000b04 	.word	0x20000b04

00005b04 <usb_register_request_handler>:
 * @return N/A
 */
static void usb_register_request_handler(s32_t type,
					 usb_request_handler handler,
					 u8_t *data_store)
{
    5b04:	b410      	push	{r4}
	usb_dev.req_handlers[type] = handler;
    5b06:	4b06      	ldr	r3, [pc, #24]	; (5b20 <usb_register_request_handler+0x1c>)
    5b08:	f100 0408 	add.w	r4, r0, #8
    5b0c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    5b10:	6061      	str	r1, [r4, #4]
	usb_dev.data_store[type] = data_store;
    5b12:	300c      	adds	r0, #12
    5b14:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    5b18:	605a      	str	r2, [r3, #4]
}
    5b1a:	bc10      	pop	{r4}
    5b1c:	4770      	bx	lr
    5b1e:	bf00      	nop
    5b20:	20000b04 	.word	0x20000b04

00005b24 <usb_register_descriptors>:
 *
 * @param [in] usb_descriptors The descriptor byte array
 */
static void usb_register_descriptors(const u8_t *usb_descriptors)
{
	usb_dev.descriptors = usb_descriptors;
    5b24:	4b01      	ldr	r3, [pc, #4]	; (5b2c <usb_register_descriptors+0x8>)
    5b26:	6218      	str	r0, [r3, #32]
}
    5b28:	4770      	bx	lr
    5b2a:	bf00      	nop
    5b2c:	20000b04 	.word	0x20000b04

00005b30 <usb_get_descriptor>:
 *
 * @return true if the descriptor was found, false otherwise
 */
static bool usb_get_descriptor(u16_t type_index, u16_t lang_id,
		s32_t *len, u8_t **data)
{
    5b30:	b4f0      	push	{r4, r5, r6, r7}
	bool found = false;

	/*Avoid compiler warning until this is used for something*/
	ARG_UNUSED(lang_id);

	type = GET_DESC_TYPE(type_index);
    5b32:	0a06      	lsrs	r6, r0, #8

	/*
	 * Invalid types of descriptors,
	 * see USB Spec. Revision 2.0, 9.4.3 Get Descriptor
	 */
	if ((type == DESC_INTERFACE) || (type == DESC_ENDPOINT) ||
    5b34:	1f31      	subs	r1, r6, #4
    5b36:	b2c9      	uxtb	r1, r1
    5b38:	2901      	cmp	r1, #1
    5b3a:	d920      	bls.n	5b7e <usb_get_descriptor+0x4e>
    5b3c:	b2c0      	uxtb	r0, r0
    5b3e:	2e07      	cmp	r6, #7
    5b40:	d820      	bhi.n	5b84 <usb_get_descriptor+0x54>
	    (type > DESC_OTHER_SPEED)) {
		return false;
	}

	p = (u8_t *)usb_dev.descriptors;
    5b42:	4911      	ldr	r1, [pc, #68]	; (5b88 <usb_get_descriptor+0x58>)
    5b44:	6a09      	ldr	r1, [r1, #32]
	cur_index = 0;
    5b46:	2700      	movs	r7, #0

	while (p[DESC_bLength] != 0U) {
    5b48:	e000      	b.n	5b4c <usb_get_descriptor+0x1c>
				break;
			}
			cur_index++;
		}
		/* skip to next descriptor */
		p += p[DESC_bLength];
    5b4a:	4421      	add	r1, r4
	while (p[DESC_bLength] != 0U) {
    5b4c:	780c      	ldrb	r4, [r1, #0]
    5b4e:	b134      	cbz	r4, 5b5e <usb_get_descriptor+0x2e>
		if (p[DESC_bDescriptorType] == type) {
    5b50:	784d      	ldrb	r5, [r1, #1]
    5b52:	42b5      	cmp	r5, r6
    5b54:	d1f9      	bne.n	5b4a <usb_get_descriptor+0x1a>
			if (cur_index == index) {
    5b56:	42b8      	cmp	r0, r7
    5b58:	d009      	beq.n	5b6e <usb_get_descriptor+0x3e>
			cur_index++;
    5b5a:	3701      	adds	r7, #1
    5b5c:	e7f5      	b.n	5b4a <usb_get_descriptor+0x1a>
	bool found = false;
    5b5e:	2000      	movs	r0, #0
	}

	if (found) {
    5b60:	b170      	cbz	r0, 5b80 <usb_get_descriptor+0x50>
		/* set data pointer */
		*data = p;
    5b62:	6019      	str	r1, [r3, #0]
		/* get length from structure */
		if (type == DESC_CONFIGURATION) {
    5b64:	2e02      	cmp	r6, #2
    5b66:	d004      	beq.n	5b72 <usb_get_descriptor+0x42>
			 */
			*len = (p[CONF_DESC_wTotalLength]) |
			    (p[CONF_DESC_wTotalLength + 1] << 8);
		} else {
			/* normally length is at offset 0 */
			*len = p[DESC_bLength];
    5b68:	780b      	ldrb	r3, [r1, #0]
    5b6a:	6013      	str	r3, [r2, #0]
    5b6c:	e008      	b.n	5b80 <usb_get_descriptor+0x50>
				found = true;
    5b6e:	2001      	movs	r0, #1
    5b70:	e7f6      	b.n	5b60 <usb_get_descriptor+0x30>
			*len = (p[CONF_DESC_wTotalLength]) |
    5b72:	788b      	ldrb	r3, [r1, #2]
			    (p[CONF_DESC_wTotalLength + 1] << 8);
    5b74:	78c9      	ldrb	r1, [r1, #3]
			*len = (p[CONF_DESC_wTotalLength]) |
    5b76:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    5b7a:	6013      	str	r3, [r2, #0]
    5b7c:	e000      	b.n	5b80 <usb_get_descriptor+0x50>
		return false;
    5b7e:	2000      	movs	r0, #0
	} else {
		/* nothing found */
		LOG_DBG("Desc %x not found!", type_index);
	}
	return found;
}
    5b80:	bcf0      	pop	{r4, r5, r6, r7}
    5b82:	4770      	bx	lr
		return false;
    5b84:	2000      	movs	r0, #0
    5b86:	e7fb      	b.n	5b80 <usb_get_descriptor+0x50>
    5b88:	20000b04 	.word	0x20000b04

00005b8c <usb_handle_vendor_request>:
	return rc;
}

static int usb_handle_vendor_request(struct usb_setup_packet *setup,
				     s32_t *len, u8_t **data_buf)
{
    5b8c:	b508      	push	{r3, lr}
		if (!usb_handle_os_desc_feature(setup, len, data_buf)) {
			return 0;
		}
	}

	if (usb_dev.vendor_req_handler) {
    5b8e:	4b04      	ldr	r3, [pc, #16]	; (5ba0 <usb_handle_vendor_request+0x14>)
    5b90:	699b      	ldr	r3, [r3, #24]
    5b92:	b10b      	cbz	r3, 5b98 <usb_handle_vendor_request+0xc>
		return usb_dev.vendor_req_handler(setup, len, data_buf);
    5b94:	4798      	blx	r3
	}

	return -ENOTSUP;
}
    5b96:	bd08      	pop	{r3, pc}
	return -ENOTSUP;
    5b98:	f06f 0022 	mvn.w	r0, #34	; 0x22
    5b9c:	e7fb      	b.n	5b96 <usb_handle_vendor_request+0xa>
    5b9e:	bf00      	nop
    5ba0:	20000b04 	.word	0x20000b04

00005ba4 <usb_register_custom_req_handler>:
 *
 * @param [in] handler Callback function pointer
 */
static void usb_register_custom_req_handler(usb_request_handler handler)
{
	usb_dev.custom_req_handler = handler;
    5ba4:	4b01      	ldr	r3, [pc, #4]	; (5bac <usb_register_custom_req_handler+0x8>)
    5ba6:	6158      	str	r0, [r3, #20]
}
    5ba8:	4770      	bx	lr
    5baa:	bf00      	nop
    5bac:	20000b04 	.word	0x20000b04

00005bb0 <usb_register_status_callback>:
 *
 * @param [in] cb Callback function pointer
 */
static void usb_register_status_callback(usb_dc_status_callback cb)
{
	usb_dev.status_callback = cb;
    5bb0:	4b01      	ldr	r3, [pc, #4]	; (5bb8 <usb_register_status_callback+0x8>)
    5bb2:	61d8      	str	r0, [r3, #28]
}
    5bb4:	4770      	bx	lr
    5bb6:	bf00      	nop
    5bb8:	20000b04 	.word	0x20000b04

00005bbc <forward_status_cb>:

static void forward_status_cb(enum usb_dc_status_code status, const u8_t *param)
{
    5bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5bbe:	4607      	mov	r7, r0
    5bc0:	460e      	mov	r6, r1
	size_t size = (__usb_data_end - __usb_data_start);
    5bc2:	4d0c      	ldr	r5, [pc, #48]	; (5bf4 <forward_status_cb+0x38>)
    5bc4:	4b0c      	ldr	r3, [pc, #48]	; (5bf8 <forward_status_cb+0x3c>)
    5bc6:	1aed      	subs	r5, r5, r3
    5bc8:	10ab      	asrs	r3, r5, #2
    5bca:	4d0c      	ldr	r5, [pc, #48]	; (5bfc <forward_status_cb+0x40>)
    5bcc:	fb05 f503 	mul.w	r5, r5, r3

	for (size_t i = 0; i < size; i++) {
    5bd0:	2400      	movs	r4, #0
    5bd2:	e000      	b.n	5bd6 <forward_status_cb+0x1a>
    5bd4:	3401      	adds	r4, #1
    5bd6:	42ac      	cmp	r4, r5
    5bd8:	d20a      	bcs.n	5bf0 <forward_status_cb+0x34>
		struct usb_cfg_data *cfg = &__usb_data_start[i];
    5bda:	202c      	movs	r0, #44	; 0x2c
    5bdc:	4b06      	ldr	r3, [pc, #24]	; (5bf8 <forward_status_cb+0x3c>)
    5bde:	fb00 3004 	mla	r0, r0, r4, r3

		if (cfg->cb_usb_status) {
    5be2:	68c3      	ldr	r3, [r0, #12]
    5be4:	2b00      	cmp	r3, #0
    5be6:	d0f5      	beq.n	5bd4 <forward_status_cb+0x18>
			cfg->cb_usb_status(cfg, status, param);
    5be8:	4632      	mov	r2, r6
    5bea:	4639      	mov	r1, r7
    5bec:	4798      	blx	r3
    5bee:	e7f1      	b.n	5bd4 <forward_status_cb+0x18>
		}
	}
}
    5bf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5bf2:	bf00      	nop
    5bf4:	20007590 	.word	0x20007590
    5bf8:	20007564 	.word	0x20007564
    5bfc:	ba2e8ba3 	.word	0xba2e8ba3

00005c00 <usb_set_configuration>:
{
    5c00:	b5f0      	push	{r4, r5, r6, r7, lr}
    5c02:	b085      	sub	sp, #20
    5c04:	f88d 0007 	strb.w	r0, [sp, #7]
	if (config_index == 0U) {
    5c08:	2800      	cmp	r0, #0
    5c0a:	d034      	beq.n	5c76 <usb_set_configuration+0x76>
    5c0c:	460f      	mov	r7, r1
	p = (u8_t *)usb_dev.descriptors;
    5c0e:	4b1b      	ldr	r3, [pc, #108]	; (5c7c <usb_set_configuration+0x7c>)
    5c10:	6a1c      	ldr	r4, [r3, #32]
	cur_alt_setting = 0xFF;
    5c12:	26ff      	movs	r6, #255	; 0xff
	cur_config = 0xFF;
    5c14:	4635      	mov	r5, r6
	while (p[DESC_bLength] != 0U) {
    5c16:	e002      	b.n	5c1e <usb_set_configuration+0x1e>
			cur_alt_setting =
    5c18:	78e6      	ldrb	r6, [r4, #3]
		p += p[DESC_bLength];
    5c1a:	7823      	ldrb	r3, [r4, #0]
    5c1c:	441c      	add	r4, r3
	while (p[DESC_bLength] != 0U) {
    5c1e:	7823      	ldrb	r3, [r4, #0]
    5c20:	b313      	cbz	r3, 5c68 <usb_set_configuration+0x68>
		switch (p[DESC_bDescriptorType]) {
    5c22:	7863      	ldrb	r3, [r4, #1]
    5c24:	2b04      	cmp	r3, #4
    5c26:	d0f7      	beq.n	5c18 <usb_set_configuration+0x18>
    5c28:	2b05      	cmp	r3, #5
    5c2a:	d003      	beq.n	5c34 <usb_set_configuration+0x34>
    5c2c:	2b02      	cmp	r3, #2
    5c2e:	d1f4      	bne.n	5c1a <usb_set_configuration+0x1a>
			cur_config = p[CONF_DESC_bConfigurationValue];
    5c30:	7965      	ldrb	r5, [r4, #5]
			break;
    5c32:	e7f2      	b.n	5c1a <usb_set_configuration+0x1a>
			if ((cur_config == config_index) &&
    5c34:	f89d 3007 	ldrb.w	r3, [sp, #7]
    5c38:	429d      	cmp	r5, r3
    5c3a:	d1ee      	bne.n	5c1a <usb_set_configuration+0x1a>
    5c3c:	42be      	cmp	r6, r7
    5c3e:	d1ec      	bne.n	5c1a <usb_set_configuration+0x1a>
				    p[ENDP_DESC_bmAttributes];
    5c40:	78e3      	ldrb	r3, [r4, #3]
				ep_cfg.ep_type =
    5c42:	f88d 300c 	strb.w	r3, [sp, #12]
				    (p[ENDP_DESC_wMaxPacketSize]) |
    5c46:	7923      	ldrb	r3, [r4, #4]
				    (p[ENDP_DESC_wMaxPacketSize + 1]
    5c48:	7962      	ldrb	r2, [r4, #5]
				    (p[ENDP_DESC_wMaxPacketSize]) |
    5c4a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
				ep_cfg.ep_mps =
    5c4e:	f8ad 300a 	strh.w	r3, [sp, #10]
				ep_cfg.ep_addr =
    5c52:	78a3      	ldrb	r3, [r4, #2]
    5c54:	f88d 3008 	strb.w	r3, [sp, #8]
				usb_dc_ep_configure(&ep_cfg);
    5c58:	a802      	add	r0, sp, #8
    5c5a:	f002 fd25 	bl	86a8 <usb_dc_ep_configure>
				usb_dc_ep_enable(ep_cfg.ep_addr);
    5c5e:	f89d 0008 	ldrb.w	r0, [sp, #8]
    5c62:	f002 fddb 	bl	881c <usb_dc_ep_enable>
    5c66:	e7d8      	b.n	5c1a <usb_set_configuration+0x1a>
	if (usb_dev.status_callback) {
    5c68:	4b04      	ldr	r3, [pc, #16]	; (5c7c <usb_set_configuration+0x7c>)
    5c6a:	69db      	ldr	r3, [r3, #28]
    5c6c:	b11b      	cbz	r3, 5c76 <usb_set_configuration+0x76>
		usb_dev.status_callback(USB_DC_CONFIGURED, &config_index);
    5c6e:	f10d 0107 	add.w	r1, sp, #7
    5c72:	2003      	movs	r0, #3
    5c74:	4798      	blx	r3
}
    5c76:	2001      	movs	r0, #1
    5c78:	b005      	add	sp, #20
    5c7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5c7c:	20000b04 	.word	0x20000b04

00005c80 <usb_handle_std_device_req>:
{
    5c80:	b570      	push	{r4, r5, r6, lr}
	u16_t value = sys_le16_to_cpu(setup->wValue);
    5c82:	8845      	ldrh	r5, [r0, #2]
	u16_t index = sys_le16_to_cpu(setup->wIndex);
    5c84:	8886      	ldrh	r6, [r0, #4]
	u8_t *data = *data_buf;
    5c86:	6813      	ldr	r3, [r2, #0]
	switch (setup->bRequest) {
    5c88:	7844      	ldrb	r4, [r0, #1]
    5c8a:	2c09      	cmp	r4, #9
    5c8c:	d849      	bhi.n	5d22 <usb_handle_std_device_req+0xa2>
    5c8e:	e8df f004 	tbb	[pc, r4]
    5c92:	3505      	.short	0x3505
    5c94:	15483f48 	.word	0x15483f48
    5c98:	2922481a 	.word	0x2922481a
		data[0] = 0U;
    5c9c:	2200      	movs	r2, #0
    5c9e:	701a      	strb	r2, [r3, #0]
		data[1] = 0U;
    5ca0:	705a      	strb	r2, [r3, #1]
			data[0] |= (usb_dev.remote_wakeup ?
    5ca2:	4a21      	ldr	r2, [pc, #132]	; (5d28 <usb_handle_std_device_req+0xa8>)
    5ca4:	f892 204e 	ldrb.w	r2, [r2, #78]	; 0x4e
    5ca8:	b132      	cbz	r2, 5cb8 <usb_handle_std_device_req+0x38>
    5caa:	2202      	movs	r2, #2
    5cac:	701a      	strb	r2, [r3, #0]
		*len = 2;
    5cae:	2302      	movs	r3, #2
    5cb0:	600b      	str	r3, [r1, #0]
	bool ret = true;
    5cb2:	2301      	movs	r3, #1
}
    5cb4:	4618      	mov	r0, r3
    5cb6:	bd70      	pop	{r4, r5, r6, pc}
			data[0] |= (usb_dev.remote_wakeup ?
    5cb8:	2200      	movs	r2, #0
    5cba:	e7f7      	b.n	5cac <usb_handle_std_device_req+0x2c>
		usb_dc_set_address(value);
    5cbc:	b2e8      	uxtb	r0, r5
    5cbe:	f002 fc67 	bl	8590 <usb_dc_set_address>
	bool ret = true;
    5cc2:	2301      	movs	r3, #1
		break;
    5cc4:	e7f6      	b.n	5cb4 <usb_handle_std_device_req+0x34>
		ret = usb_get_descriptor(value, index, len, data_buf);
    5cc6:	4613      	mov	r3, r2
    5cc8:	460a      	mov	r2, r1
    5cca:	4631      	mov	r1, r6
    5ccc:	4628      	mov	r0, r5
    5cce:	f7ff ff2f 	bl	5b30 <usb_get_descriptor>
    5cd2:	4603      	mov	r3, r0
		break;
    5cd4:	e7ee      	b.n	5cb4 <usb_handle_std_device_req+0x34>
		data[0] = usb_dev.configuration;
    5cd6:	4a14      	ldr	r2, [pc, #80]	; (5d28 <usb_handle_std_device_req+0xa8>)
    5cd8:	f892 204d 	ldrb.w	r2, [r2, #77]	; 0x4d
    5cdc:	701a      	strb	r2, [r3, #0]
		*len = 1;
    5cde:	2301      	movs	r3, #1
    5ce0:	600b      	str	r3, [r1, #0]
		break;
    5ce2:	e7e7      	b.n	5cb4 <usb_handle_std_device_req+0x34>
		if (!usb_set_configuration(value, 0)) {
    5ce4:	b2ed      	uxtb	r5, r5
    5ce6:	2100      	movs	r1, #0
    5ce8:	4628      	mov	r0, r5
    5cea:	f7ff ff89 	bl	5c00 <usb_set_configuration>
    5cee:	4603      	mov	r3, r0
    5cf0:	2800      	cmp	r0, #0
    5cf2:	d0df      	beq.n	5cb4 <usb_handle_std_device_req+0x34>
			usb_dev.configuration = value;
    5cf4:	4a0c      	ldr	r2, [pc, #48]	; (5d28 <usb_handle_std_device_req+0xa8>)
    5cf6:	f882 504d 	strb.w	r5, [r2, #77]	; 0x4d
    5cfa:	e7db      	b.n	5cb4 <usb_handle_std_device_req+0x34>
			if (value == FEA_REMOTE_WAKEUP) {
    5cfc:	2d01      	cmp	r5, #1
    5cfe:	d001      	beq.n	5d04 <usb_handle_std_device_req+0x84>
		ret = false;
    5d00:	2300      	movs	r3, #0
    5d02:	e7d7      	b.n	5cb4 <usb_handle_std_device_req+0x34>
				usb_dev.remote_wakeup = false;
    5d04:	4b08      	ldr	r3, [pc, #32]	; (5d28 <usb_handle_std_device_req+0xa8>)
    5d06:	2200      	movs	r2, #0
    5d08:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
				ret = true;
    5d0c:	2301      	movs	r3, #1
    5d0e:	e7d1      	b.n	5cb4 <usb_handle_std_device_req+0x34>
			if (value == FEA_REMOTE_WAKEUP) {
    5d10:	2d01      	cmp	r5, #1
    5d12:	d001      	beq.n	5d18 <usb_handle_std_device_req+0x98>
		ret = false;
    5d14:	2300      	movs	r3, #0
    5d16:	e7cd      	b.n	5cb4 <usb_handle_std_device_req+0x34>
				usb_dev.remote_wakeup = true;
    5d18:	2301      	movs	r3, #1
    5d1a:	4a03      	ldr	r2, [pc, #12]	; (5d28 <usb_handle_std_device_req+0xa8>)
    5d1c:	f882 304e 	strb.w	r3, [r2, #78]	; 0x4e
				ret = true;
    5d20:	e7c8      	b.n	5cb4 <usb_handle_std_device_req+0x34>
		ret = false;
    5d22:	2300      	movs	r3, #0
    5d24:	e7c6      	b.n	5cb4 <usb_handle_std_device_req+0x34>
    5d26:	bf00      	nop
    5d28:	20000b04 	.word	0x20000b04

00005d2c <usb_set_interface>:
{
    5d2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5d30:	b082      	sub	sp, #8
    5d32:	4606      	mov	r6, r0
    5d34:	4689      	mov	r9, r1
	const u8_t *p = usb_dev.descriptors;
    5d36:	4b1e      	ldr	r3, [pc, #120]	; (5db0 <usb_set_interface+0x84>)
    5d38:	6a1c      	ldr	r4, [r3, #32]
	bool found = false;
    5d3a:	f04f 0800 	mov.w	r8, #0
	u8_t cur_iface = 0xFF;
    5d3e:	25ff      	movs	r5, #255	; 0xff
	u8_t cur_alt_setting = 0xFF;
    5d40:	462f      	mov	r7, r5
	const u8_t *if_desc = NULL;
    5d42:	46c2      	mov	sl, r8
    5d44:	e005      	b.n	5d52 <usb_set_interface+0x26>
			cur_alt_setting = p[INTF_DESC_bAlternateSetting];
    5d46:	78e7      	ldrb	r7, [r4, #3]
			cur_iface = p[INTF_DESC_bInterfaceNumber];
    5d48:	78a5      	ldrb	r5, [r4, #2]
			if (cur_iface == iface &&
    5d4a:	42b5      	cmp	r5, r6
    5d4c:	d022      	beq.n	5d94 <usb_set_interface+0x68>
		p += p[DESC_bLength];
    5d4e:	7823      	ldrb	r3, [r4, #0]
    5d50:	441c      	add	r4, r3
	while (p[DESC_bLength] != 0U) {
    5d52:	7823      	ldrb	r3, [r4, #0]
    5d54:	b313      	cbz	r3, 5d9c <usb_set_interface+0x70>
		switch (p[DESC_bDescriptorType]) {
    5d56:	7863      	ldrb	r3, [r4, #1]
    5d58:	2b04      	cmp	r3, #4
    5d5a:	d0f4      	beq.n	5d46 <usb_set_interface+0x1a>
    5d5c:	2b05      	cmp	r3, #5
    5d5e:	d1f6      	bne.n	5d4e <usb_set_interface+0x22>
			if ((cur_iface != iface) ||
    5d60:	42ae      	cmp	r6, r5
    5d62:	d1f4      	bne.n	5d4e <usb_set_interface+0x22>
    5d64:	45b9      	cmp	r9, r7
    5d66:	d1f2      	bne.n	5d4e <usb_set_interface+0x22>
			ep_cfg.ep_type = p[ENDP_DESC_bmAttributes];
    5d68:	78e3      	ldrb	r3, [r4, #3]
    5d6a:	f88d 3004 	strb.w	r3, [sp, #4]
			ep_cfg.ep_mps = (p[ENDP_DESC_wMaxPacketSize]) |
    5d6e:	7923      	ldrb	r3, [r4, #4]
				(p[ENDP_DESC_wMaxPacketSize + 1] << 8);
    5d70:	7962      	ldrb	r2, [r4, #5]
			ep_cfg.ep_mps = (p[ENDP_DESC_wMaxPacketSize]) |
    5d72:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    5d76:	f8ad 3002 	strh.w	r3, [sp, #2]
			ep_cfg.ep_addr = p[ENDP_DESC_bEndpointAddress];
    5d7a:	78a3      	ldrb	r3, [r4, #2]
    5d7c:	f88d 3000 	strb.w	r3, [sp]
			usb_dc_ep_configure(&ep_cfg);
    5d80:	4668      	mov	r0, sp
    5d82:	f002 fc91 	bl	86a8 <usb_dc_ep_configure>
			usb_dc_ep_enable(ep_cfg.ep_addr);
    5d86:	f89d 0000 	ldrb.w	r0, [sp]
    5d8a:	f002 fd47 	bl	881c <usb_dc_ep_enable>
			found = true;
    5d8e:	f04f 0801 	mov.w	r8, #1
    5d92:	e7dc      	b.n	5d4e <usb_set_interface+0x22>
			if (cur_iface == iface &&
    5d94:	454f      	cmp	r7, r9
    5d96:	d1da      	bne.n	5d4e <usb_set_interface+0x22>
				if_desc = (void *)p;
    5d98:	46a2      	mov	sl, r4
    5d9a:	e7d8      	b.n	5d4e <usb_set_interface+0x22>
	if (usb_dev.status_callback) {
    5d9c:	4b04      	ldr	r3, [pc, #16]	; (5db0 <usb_set_interface+0x84>)
    5d9e:	69db      	ldr	r3, [r3, #28]
    5da0:	b113      	cbz	r3, 5da8 <usb_set_interface+0x7c>
		usb_dev.status_callback(USB_DC_INTERFACE, if_desc);
    5da2:	4651      	mov	r1, sl
    5da4:	2007      	movs	r0, #7
    5da6:	4798      	blx	r3
}
    5da8:	4640      	mov	r0, r8
    5daa:	b002      	add	sp, #8
    5dac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5db0:	20000b04 	.word	0x20000b04

00005db4 <usb_handle_std_endpoint_req>:
{
    5db4:	b570      	push	{r4, r5, r6, lr}
    5db6:	b082      	sub	sp, #8
	u8_t ep = sys_le16_to_cpu(setup->wIndex);
    5db8:	7904      	ldrb	r4, [r0, #4]
    5dba:	f88d 4007 	strb.w	r4, [sp, #7]
	u8_t *data = *data_buf;
    5dbe:	6815      	ldr	r5, [r2, #0]
	switch (setup->bRequest) {
    5dc0:	7843      	ldrb	r3, [r0, #1]
    5dc2:	2b01      	cmp	r3, #1
    5dc4:	d011      	beq.n	5dea <usb_handle_std_endpoint_req+0x36>
    5dc6:	460e      	mov	r6, r1
    5dc8:	b25a      	sxtb	r2, r3
    5dca:	b122      	cbz	r2, 5dd6 <usb_handle_std_endpoint_req+0x22>
    5dcc:	2b03      	cmp	r3, #3
    5dce:	d02f      	beq.n	5e30 <usb_handle_std_endpoint_req+0x7c>
		return false;
    5dd0:	2000      	movs	r0, #0
}
    5dd2:	b002      	add	sp, #8
    5dd4:	bd70      	pop	{r4, r5, r6, pc}
		usb_dc_ep_is_stalled(ep, &data[0]);
    5dd6:	4629      	mov	r1, r5
    5dd8:	4620      	mov	r0, r4
    5dda:	f002 fd01 	bl	87e0 <usb_dc_ep_is_stalled>
		data[1] = 0U;
    5dde:	2300      	movs	r3, #0
    5de0:	706b      	strb	r3, [r5, #1]
		*len = 2;
    5de2:	2302      	movs	r3, #2
    5de4:	6033      	str	r3, [r6, #0]
	return true;
    5de6:	2001      	movs	r0, #1
		break;
    5de8:	e7f3      	b.n	5dd2 <usb_handle_std_endpoint_req+0x1e>
		if (sys_le16_to_cpu(setup->wValue) == FEA_ENDPOINT_HALT) {
    5dea:	8843      	ldrh	r3, [r0, #2]
    5dec:	b10b      	cbz	r3, 5df2 <usb_handle_std_endpoint_req+0x3e>
		return false;
    5dee:	2000      	movs	r0, #0
    5df0:	e7ef      	b.n	5dd2 <usb_handle_std_endpoint_req+0x1e>
			LOG_INF("... EP clear halt %x", ep);
    5df2:	f04f 0200 	mov.w	r2, #0
    5df6:	2303      	movs	r3, #3
    5df8:	f363 0202 	bfi	r2, r3, #0, #3
    5dfc:	f36f 02c5 	bfc	r2, #3, #3
    5e00:	4b1f      	ldr	r3, [pc, #124]	; (5e80 <usb_handle_std_endpoint_req+0xcc>)
    5e02:	4920      	ldr	r1, [pc, #128]	; (5e84 <usb_handle_std_endpoint_req+0xd0>)
    5e04:	1a5b      	subs	r3, r3, r1
    5e06:	f3c3 03c9 	ubfx	r3, r3, #3, #10
    5e0a:	f363 128f 	bfi	r2, r3, #6, #10
    5e0e:	4621      	mov	r1, r4
    5e10:	481d      	ldr	r0, [pc, #116]	; (5e88 <usb_handle_std_endpoint_req+0xd4>)
    5e12:	f7ff f89b 	bl	4f4c <log_1>
			usb_dc_ep_clear_stall(ep);
    5e16:	f89d 0007 	ldrb.w	r0, [sp, #7]
    5e1a:	f002 fcc5 	bl	87a8 <usb_dc_ep_clear_stall>
			if (usb_dev.status_callback) {
    5e1e:	4b1b      	ldr	r3, [pc, #108]	; (5e8c <usb_handle_std_endpoint_req+0xd8>)
    5e20:	69db      	ldr	r3, [r3, #28]
    5e22:	b343      	cbz	r3, 5e76 <usb_handle_std_endpoint_req+0xc2>
				usb_dev.status_callback(USB_DC_CLEAR_HALT, &ep);
    5e24:	f10d 0107 	add.w	r1, sp, #7
    5e28:	2009      	movs	r0, #9
    5e2a:	4798      	blx	r3
	return true;
    5e2c:	2001      	movs	r0, #1
    5e2e:	e7d0      	b.n	5dd2 <usb_handle_std_endpoint_req+0x1e>
		if (sys_le16_to_cpu(setup->wValue) == FEA_ENDPOINT_HALT) {
    5e30:	8843      	ldrh	r3, [r0, #2]
    5e32:	b10b      	cbz	r3, 5e38 <usb_handle_std_endpoint_req+0x84>
		return false;
    5e34:	2000      	movs	r0, #0
    5e36:	e7cc      	b.n	5dd2 <usb_handle_std_endpoint_req+0x1e>
			LOG_INF("--- EP SET halt %x", ep);
    5e38:	f04f 0200 	mov.w	r2, #0
    5e3c:	2303      	movs	r3, #3
    5e3e:	f363 0202 	bfi	r2, r3, #0, #3
    5e42:	f36f 02c5 	bfc	r2, #3, #3
    5e46:	4b0e      	ldr	r3, [pc, #56]	; (5e80 <usb_handle_std_endpoint_req+0xcc>)
    5e48:	490e      	ldr	r1, [pc, #56]	; (5e84 <usb_handle_std_endpoint_req+0xd0>)
    5e4a:	1a5b      	subs	r3, r3, r1
    5e4c:	f3c3 03c9 	ubfx	r3, r3, #3, #10
    5e50:	f363 128f 	bfi	r2, r3, #6, #10
    5e54:	4621      	mov	r1, r4
    5e56:	480e      	ldr	r0, [pc, #56]	; (5e90 <usb_handle_std_endpoint_req+0xdc>)
    5e58:	f7ff f878 	bl	4f4c <log_1>
			usb_dc_ep_set_stall(ep);
    5e5c:	f89d 0007 	ldrb.w	r0, [sp, #7]
    5e60:	f002 fc5e 	bl	8720 <usb_dc_ep_set_stall>
			if (usb_dev.status_callback) {
    5e64:	4b09      	ldr	r3, [pc, #36]	; (5e8c <usb_handle_std_endpoint_req+0xd8>)
    5e66:	69db      	ldr	r3, [r3, #28]
    5e68:	b13b      	cbz	r3, 5e7a <usb_handle_std_endpoint_req+0xc6>
				usb_dev.status_callback(USB_DC_SET_HALT, &ep);
    5e6a:	f10d 0107 	add.w	r1, sp, #7
    5e6e:	2008      	movs	r0, #8
    5e70:	4798      	blx	r3
	return true;
    5e72:	2001      	movs	r0, #1
    5e74:	e7ad      	b.n	5dd2 <usb_handle_std_endpoint_req+0x1e>
    5e76:	2001      	movs	r0, #1
    5e78:	e7ab      	b.n	5dd2 <usb_handle_std_endpoint_req+0x1e>
    5e7a:	2001      	movs	r0, #1
    5e7c:	e7a9      	b.n	5dd2 <usb_handle_std_endpoint_req+0x1e>
    5e7e:	bf00      	nop
    5e80:	00010e14 	.word	0x00010e14
    5e84:	00010dd4 	.word	0x00010dd4
    5e88:	00011fcc 	.word	0x00011fcc
    5e8c:	20000b04 	.word	0x20000b04
    5e90:	00011fe4 	.word	0x00011fe4

00005e94 <usb_handle_standard_request>:
{
    5e94:	b570      	push	{r4, r5, r6, lr}
    5e96:	4604      	mov	r4, r0
    5e98:	460d      	mov	r5, r1
    5e9a:	4616      	mov	r6, r2
	if (usb_dev.custom_req_handler &&
    5e9c:	4b19      	ldr	r3, [pc, #100]	; (5f04 <usb_handle_standard_request+0x70>)
    5e9e:	695b      	ldr	r3, [r3, #20]
    5ea0:	b113      	cbz	r3, 5ea8 <usb_handle_standard_request+0x14>
	    !usb_dev.custom_req_handler(setup, len, data_buf)) {
    5ea2:	4798      	blx	r3
	if (usb_dev.custom_req_handler &&
    5ea4:	4603      	mov	r3, r0
    5ea6:	b150      	cbz	r0, 5ebe <usb_handle_standard_request+0x2a>
	switch (REQTYPE_GET_RECIP(setup->bmRequestType)) {
    5ea8:	7823      	ldrb	r3, [r4, #0]
    5eaa:	f003 031f 	and.w	r3, r3, #31
    5eae:	2b01      	cmp	r3, #1
    5eb0:	d00f      	beq.n	5ed2 <usb_handle_standard_request+0x3e>
    5eb2:	b25a      	sxtb	r2, r3
    5eb4:	b12a      	cbz	r2, 5ec2 <usb_handle_standard_request+0x2e>
    5eb6:	2b02      	cmp	r3, #2
    5eb8:	d013      	beq.n	5ee2 <usb_handle_standard_request+0x4e>
		rc = -EINVAL;
    5eba:	f06f 0315 	mvn.w	r3, #21
}
    5ebe:	4618      	mov	r0, r3
    5ec0:	bd70      	pop	{r4, r5, r6, pc}
		if (usb_handle_std_device_req(setup, len, data_buf) == false)
    5ec2:	4632      	mov	r2, r6
    5ec4:	4629      	mov	r1, r5
    5ec6:	4620      	mov	r0, r4
    5ec8:	f7ff feda 	bl	5c80 <usb_handle_std_device_req>
    5ecc:	b188      	cbz	r0, 5ef2 <usb_handle_standard_request+0x5e>
	int rc = 0;
    5ece:	2300      	movs	r3, #0
    5ed0:	e7f5      	b.n	5ebe <usb_handle_standard_request+0x2a>
		if (usb_handle_std_interface_req(setup, len, data_buf) == false)
    5ed2:	4632      	mov	r2, r6
    5ed4:	4629      	mov	r1, r5
    5ed6:	4620      	mov	r0, r4
    5ed8:	f00a f893 	bl	10002 <usb_handle_std_interface_req>
    5edc:	b160      	cbz	r0, 5ef8 <usb_handle_standard_request+0x64>
	int rc = 0;
    5ede:	2300      	movs	r3, #0
    5ee0:	e7ed      	b.n	5ebe <usb_handle_standard_request+0x2a>
		if (usb_handle_std_endpoint_req(setup, len, data_buf) == false)
    5ee2:	4632      	mov	r2, r6
    5ee4:	4629      	mov	r1, r5
    5ee6:	4620      	mov	r0, r4
    5ee8:	f7ff ff64 	bl	5db4 <usb_handle_std_endpoint_req>
    5eec:	b138      	cbz	r0, 5efe <usb_handle_standard_request+0x6a>
	int rc = 0;
    5eee:	2300      	movs	r3, #0
    5ef0:	e7e5      	b.n	5ebe <usb_handle_standard_request+0x2a>
			rc = -EINVAL;
    5ef2:	f06f 0315 	mvn.w	r3, #21
    5ef6:	e7e2      	b.n	5ebe <usb_handle_standard_request+0x2a>
			rc = -EINVAL;
    5ef8:	f06f 0315 	mvn.w	r3, #21
    5efc:	e7df      	b.n	5ebe <usb_handle_standard_request+0x2a>
			rc = -EINVAL;
    5efe:	f06f 0315 	mvn.w	r3, #21
    5f02:	e7dc      	b.n	5ebe <usb_handle_standard_request+0x2a>
    5f04:	20000b04 	.word	0x20000b04

00005f08 <usb_data_to_host>:
{
    5f08:	b510      	push	{r4, lr}
    5f0a:	b082      	sub	sp, #8
	u32_t chunk = usb_dev.data_buf_residue;
    5f0c:	4c08      	ldr	r4, [pc, #32]	; (5f30 <usb_data_to_host+0x28>)
    5f0e:	68e2      	ldr	r2, [r4, #12]
    5f10:	9201      	str	r2, [sp, #4]
	usb_dc_ep_write(0x80, usb_dev.data_buf, chunk, &chunk);
    5f12:	ab01      	add	r3, sp, #4
    5f14:	68a1      	ldr	r1, [r4, #8]
    5f16:	2080      	movs	r0, #128	; 0x80
    5f18:	f002 fca2 	bl	8860 <usb_dc_ep_write>
	usb_dev.data_buf += chunk;
    5f1c:	9901      	ldr	r1, [sp, #4]
    5f1e:	68a2      	ldr	r2, [r4, #8]
    5f20:	440a      	add	r2, r1
    5f22:	60a2      	str	r2, [r4, #8]
	usb_dev.data_buf_residue -= chunk;
    5f24:	68e3      	ldr	r3, [r4, #12]
    5f26:	1a5b      	subs	r3, r3, r1
    5f28:	60e3      	str	r3, [r4, #12]
}
    5f2a:	b002      	add	sp, #8
    5f2c:	bd10      	pop	{r4, pc}
    5f2e:	bf00      	nop
    5f30:	20000b04 	.word	0x20000b04

00005f34 <usb_transfer_work>:

	return NULL;
}

static void usb_transfer_work(struct k_work *item)
{
    5f34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5f38:	b082      	sub	sp, #8
    5f3a:	4604      	mov	r4, r0
	int ret = 0;
	u32_t bytes;
	u8_t ep;

	trans = CONTAINER_OF(item, struct usb_transfer_data, work);
	ep = trans->ep;
    5f3c:	f810 5c2c 	ldrb.w	r5, [r0, #-44]

	if (trans->status != -EBUSY) {
    5f40:	f850 3c28 	ldr.w	r3, [r0, #-40]
    5f44:	f113 0f10 	cmn.w	r3, #16
    5f48:	d10c      	bne.n	5f64 <usb_transfer_work+0x30>
		/* transfer cancelled or already completed */
		goto done;
	}

	if (trans->flags & USB_TRANS_WRITE) {
    5f4a:	68c3      	ldr	r3, [r0, #12]
    5f4c:	f013 0f02 	tst.w	r3, #2
    5f50:	d04a      	beq.n	5fe8 <usb_transfer_work+0xb4>
		if (!trans->bsize) {
    5f52:	f850 2c20 	ldr.w	r2, [r0, #-32]
    5f56:	bb52      	cbnz	r2, 5fae <usb_transfer_work+0x7a>
			if (!(trans->flags & USB_TRANS_NO_ZLP)) {
    5f58:	f013 0f04 	tst.w	r3, #4
    5f5c:	d020      	beq.n	5fa0 <usb_transfer_work+0x6c>
				usb_dc_ep_write(ep, NULL, 0, NULL);
			}
			trans->status = 0;
    5f5e:	2300      	movs	r3, #0
    5f60:	f844 3c28 	str.w	r3, [r4, #-40]
		/* we expect mote data, clear NAK */
		usb_dc_ep_read_continue(ep);
	}

done:
	if (trans->status != -EBUSY && trans->cb) { /* Transfer complete */
    5f64:	f854 3c28 	ldr.w	r3, [r4, #-40]
    5f68:	f113 0f10 	cmn.w	r3, #16
    5f6c:	f000 8081 	beq.w	6072 <usb_transfer_work+0x13e>
    5f70:	f854 6c18 	ldr.w	r6, [r4, #-24]
    5f74:	2e00      	cmp	r6, #0
    5f76:	d07c      	beq.n	6072 <usb_transfer_work+0x13e>
		usb_transfer_callback cb = trans->cb;
		int tsize = trans->tsize;
    5f78:	f854 7c1c 	ldr.w	r7, [r4, #-28]
		void *priv = trans->priv;
    5f7c:	f854 8c14 	ldr.w	r8, [r4, #-20]

		if (k_is_in_isr()) {
    5f80:	f008 fc12 	bl	e7a8 <k_is_in_isr>
    5f84:	2800      	cmp	r0, #0
    5f86:	d163      	bne.n	6050 <usb_transfer_work+0x11c>
		}

		LOG_DBG("transfer done, ep=%02x, status=%d, size=%u",
			trans->ep, trans->status, trans->tsize);

		trans->cb = NULL;
    5f88:	2300      	movs	r3, #0
    5f8a:	f844 3c18 	str.w	r3, [r4, #-24]
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem)
    5f8e:	f1a4 0010 	sub.w	r0, r4, #16
    5f92:	f008 fb23 	bl	e5dc <z_impl_k_sem_give>
		k_sem_give(&trans->sem);

		/* Transfer completion callback */
		cb(ep, tsize, priv);
    5f96:	4642      	mov	r2, r8
    5f98:	4639      	mov	r1, r7
    5f9a:	4628      	mov	r0, r5
    5f9c:	47b0      	blx	r6
    5f9e:	e068      	b.n	6072 <usb_transfer_work+0x13e>
				usb_dc_ep_write(ep, NULL, 0, NULL);
    5fa0:	2300      	movs	r3, #0
    5fa2:	461a      	mov	r2, r3
    5fa4:	4619      	mov	r1, r3
    5fa6:	4628      	mov	r0, r5
    5fa8:	f002 fc5a 	bl	8860 <usb_dc_ep_write>
    5fac:	e7d7      	b.n	5f5e <usb_transfer_work+0x2a>
		ret = usb_dc_ep_write(ep, trans->buffer, trans->bsize, &bytes);
    5fae:	ab01      	add	r3, sp, #4
    5fb0:	f850 1c24 	ldr.w	r1, [r0, #-36]
    5fb4:	4628      	mov	r0, r5
    5fb6:	f002 fc53 	bl	8860 <usb_dc_ep_write>
		if (ret) {
    5fba:	b980      	cbnz	r0, 5fde <usb_transfer_work+0xaa>
		trans->buffer += bytes;
    5fbc:	f854 3c24 	ldr.w	r3, [r4, #-36]
    5fc0:	9a01      	ldr	r2, [sp, #4]
    5fc2:	4413      	add	r3, r2
    5fc4:	f844 3c24 	str.w	r3, [r4, #-36]
		trans->bsize -= bytes;
    5fc8:	f854 3c20 	ldr.w	r3, [r4, #-32]
    5fcc:	1a9b      	subs	r3, r3, r2
    5fce:	f844 3c20 	str.w	r3, [r4, #-32]
		trans->tsize += bytes;
    5fd2:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    5fd6:	4413      	add	r3, r2
    5fd8:	f844 3c1c 	str.w	r3, [r4, #-28]
    5fdc:	e7c2      	b.n	5f64 <usb_transfer_work+0x30>
			trans->status = -EINVAL;
    5fde:	f06f 0315 	mvn.w	r3, #21
    5fe2:	f844 3c28 	str.w	r3, [r4, #-40]
			goto done;
    5fe6:	e7bd      	b.n	5f64 <usb_transfer_work+0x30>
		ret = usb_dc_ep_read_wait(ep, trans->buffer, trans->bsize,
    5fe8:	ab01      	add	r3, sp, #4
    5fea:	f850 2c20 	ldr.w	r2, [r0, #-32]
    5fee:	f850 1c24 	ldr.w	r1, [r0, #-36]
    5ff2:	4628      	mov	r0, r5
    5ff4:	f002 fcc2 	bl	897c <usb_dc_ep_read_wait>
		if (ret) {
    5ff8:	b9a0      	cbnz	r0, 6024 <usb_transfer_work+0xf0>
		trans->buffer += bytes;
    5ffa:	f854 3c24 	ldr.w	r3, [r4, #-36]
    5ffe:	9e01      	ldr	r6, [sp, #4]
    6000:	4433      	add	r3, r6
    6002:	f844 3c24 	str.w	r3, [r4, #-36]
		trans->bsize -= bytes;
    6006:	f854 3c20 	ldr.w	r3, [r4, #-32]
    600a:	1b9b      	subs	r3, r3, r6
    600c:	f844 3c20 	str.w	r3, [r4, #-32]
		trans->tsize += bytes;
    6010:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    6014:	4433      	add	r3, r6
    6016:	f844 3c1c 	str.w	r3, [r4, #-28]
		if (!bytes || (bytes % usb_dc_ep_mps(ep)) || !trans->bsize) {
    601a:	b946      	cbnz	r6, 602e <usb_transfer_work+0xfa>
			trans->status = 0;
    601c:	2300      	movs	r3, #0
    601e:	f844 3c28 	str.w	r3, [r4, #-40]
			goto done;
    6022:	e79f      	b.n	5f64 <usb_transfer_work+0x30>
			trans->status = -EINVAL;
    6024:	f06f 0315 	mvn.w	r3, #21
    6028:	f844 3c28 	str.w	r3, [r4, #-40]
			goto done;
    602c:	e79a      	b.n	5f64 <usb_transfer_work+0x30>
		if (!bytes || (bytes % usb_dc_ep_mps(ep)) || !trans->bsize) {
    602e:	4628      	mov	r0, r5
    6030:	f002 fdfe 	bl	8c30 <usb_dc_ep_mps>
    6034:	fbb6 f3f0 	udiv	r3, r6, r0
    6038:	fb00 6613 	mls	r6, r0, r3, r6
    603c:	2e00      	cmp	r6, #0
    603e:	d1ed      	bne.n	601c <usb_transfer_work+0xe8>
    6040:	f854 3c20 	ldr.w	r3, [r4, #-32]
    6044:	2b00      	cmp	r3, #0
    6046:	d0e9      	beq.n	601c <usb_transfer_work+0xe8>
		usb_dc_ep_read_continue(ep);
    6048:	4628      	mov	r0, r5
    604a:	f002 fceb 	bl	8a24 <usb_dc_ep_read_continue>
    604e:	e789      	b.n	5f64 <usb_transfer_work+0x30>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    6050:	f104 0308 	add.w	r3, r4, #8
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    6054:	f3bf 8f5b 	dmb	ish
    6058:	e853 2f00 	ldrex	r2, [r3]
    605c:	f042 0101 	orr.w	r1, r2, #1
    6060:	e843 1000 	strex	r0, r1, [r3]
    6064:	2800      	cmp	r0, #0
    6066:	d1f7      	bne.n	6058 <usb_transfer_work+0x124>
    6068:	f3bf 8f5b 	dmb	ish
    606c:	f012 0f01 	tst.w	r2, #1
    6070:	d002      	beq.n	6078 <usb_transfer_work+0x144>
	}
}
    6072:	b002      	add	sp, #8
    6074:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		k_queue_append(&work_q->queue, work);
    6078:	4621      	mov	r1, r4
    607a:	4802      	ldr	r0, [pc, #8]	; (6084 <usb_transfer_work+0x150>)
    607c:	f00a fcdd 	bl	10a3a <k_queue_append>
			return;
    6080:	e7f7      	b.n	6072 <usb_transfer_work+0x13e>
    6082:	bf00      	nop
    6084:	20002738 	.word	0x20002738

00006088 <usb_handle_control_transfer>:
{
    6088:	b510      	push	{r4, lr}
    608a:	b082      	sub	sp, #8
	u32_t chunk = 0U;
    608c:	2300      	movs	r3, #0
    608e:	9301      	str	r3, [sp, #4]
	if (ep == USB_CONTROL_OUT_EP0 && ep_status == USB_DC_EP_SETUP) {
    6090:	4604      	mov	r4, r0
    6092:	b900      	cbnz	r0, 6096 <usb_handle_control_transfer+0xe>
    6094:	b351      	cbz	r1, 60ec <usb_handle_control_transfer+0x64>
	} else if (ep == USB_CONTROL_OUT_EP0) {
    6096:	2c00      	cmp	r4, #0
    6098:	d177      	bne.n	618a <usb_handle_control_transfer+0x102>
		if (usb_dev.data_buf_residue <= 0) {
    609a:	4b47      	ldr	r3, [pc, #284]	; (61b8 <usb_handle_control_transfer+0x130>)
    609c:	68da      	ldr	r2, [r3, #12]
    609e:	2a00      	cmp	r2, #0
    60a0:	dd5b      	ble.n	615a <usb_handle_control_transfer+0xd2>
		if (usb_dc_ep_read(USB_CONTROL_OUT_EP0,
    60a2:	ab01      	add	r3, sp, #4
    60a4:	4944      	ldr	r1, [pc, #272]	; (61b8 <usb_handle_control_transfer+0x130>)
    60a6:	6889      	ldr	r1, [r1, #8]
    60a8:	2000      	movs	r0, #0
    60aa:	f00a f980 	bl	103ae <usb_dc_ep_read>
    60ae:	2800      	cmp	r0, #0
    60b0:	db60      	blt.n	6174 <usb_handle_control_transfer+0xec>
		usb_dev.data_buf += chunk;
    60b2:	9801      	ldr	r0, [sp, #4]
    60b4:	4a40      	ldr	r2, [pc, #256]	; (61b8 <usb_handle_control_transfer+0x130>)
    60b6:	6891      	ldr	r1, [r2, #8]
    60b8:	4401      	add	r1, r0
    60ba:	6091      	str	r1, [r2, #8]
		usb_dev.data_buf_residue -= chunk;
    60bc:	68d3      	ldr	r3, [r2, #12]
    60be:	1a1b      	subs	r3, r3, r0
    60c0:	60d3      	str	r3, [r2, #12]
		if (usb_dev.data_buf_residue == 0) {
    60c2:	2b00      	cmp	r3, #0
    60c4:	d176      	bne.n	61b4 <usb_handle_control_transfer+0x12c>
			type = REQTYPE_GET_TYPE(setup->bmRequestType);
    60c6:	4610      	mov	r0, r2
    60c8:	7813      	ldrb	r3, [r2, #0]
    60ca:	f3c3 1341 	ubfx	r3, r3, #5, #2
			usb_dev.data_buf = usb_dev.data_store[type];
    60ce:	330c      	adds	r3, #12
    60d0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    60d4:	685b      	ldr	r3, [r3, #4]
    60d6:	f842 3f08 	str.w	r3, [r2, #8]!
			if (!usb_handle_request(setup,
    60da:	f100 0110 	add.w	r1, r0, #16
    60de:	f7ff fcfb 	bl	5ad8 <usb_handle_request>
    60e2:	2800      	cmp	r0, #0
    60e4:	d04d      	beq.n	6182 <usb_handle_control_transfer+0xfa>
			usb_data_to_host();
    60e6:	f7ff ff0f 	bl	5f08 <usb_data_to_host>
    60ea:	e063      	b.n	61b4 <usb_handle_control_transfer+0x12c>
		if (usb_dc_ep_read(ep,
    60ec:	2208      	movs	r2, #8
    60ee:	4932      	ldr	r1, [pc, #200]	; (61b8 <usb_handle_control_transfer+0x130>)
    60f0:	f00a f95d 	bl	103ae <usb_dc_ep_read>
    60f4:	2800      	cmp	r0, #0
    60f6:	db21      	blt.n	613c <usb_handle_control_transfer+0xb4>
		length = sys_le16_to_cpu(setup->wLength);
    60f8:	4a2f      	ldr	r2, [pc, #188]	; (61b8 <usb_handle_control_transfer+0x130>)
    60fa:	88d4      	ldrh	r4, [r2, #6]
		type = REQTYPE_GET_TYPE(setup->bmRequestType);
    60fc:	7811      	ldrb	r1, [r2, #0]
    60fe:	f3c1 1341 	ubfx	r3, r1, #5, #2
		usb_dev.data_buf = usb_dev.data_store[type];
    6102:	330c      	adds	r3, #12
    6104:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    6108:	685b      	ldr	r3, [r3, #4]
    610a:	6093      	str	r3, [r2, #8]
		if (!usb_dev.data_buf) {
    610c:	b1d3      	cbz	r3, 6144 <usb_handle_control_transfer+0xbc>
		usb_dev.data_buf_residue = length;
    610e:	4b2a      	ldr	r3, [pc, #168]	; (61b8 <usb_handle_control_transfer+0x130>)
    6110:	60dc      	str	r4, [r3, #12]
		usb_dev.data_buf_len = length;
    6112:	611c      	str	r4, [r3, #16]
		if (length &&
    6114:	b10c      	cbz	r4, 611a <usb_handle_control_transfer+0x92>
    6116:	09cb      	lsrs	r3, r1, #7
    6118:	d04c      	beq.n	61b4 <usb_handle_control_transfer+0x12c>
		if (!usb_handle_request(setup,
    611a:	4827      	ldr	r0, [pc, #156]	; (61b8 <usb_handle_control_transfer+0x130>)
    611c:	f100 0208 	add.w	r2, r0, #8
    6120:	f100 0110 	add.w	r1, r0, #16
    6124:	f7ff fcd8 	bl	5ad8 <usb_handle_request>
    6128:	b198      	cbz	r0, 6152 <usb_handle_control_transfer+0xca>
		usb_dev.data_buf_residue = MIN(usb_dev.data_buf_len, length);
    612a:	4b23      	ldr	r3, [pc, #140]	; (61b8 <usb_handle_control_transfer+0x130>)
    612c:	691a      	ldr	r2, [r3, #16]
    612e:	4294      	cmp	r4, r2
    6130:	bfa8      	it	ge
    6132:	4614      	movge	r4, r2
    6134:	60dc      	str	r4, [r3, #12]
		usb_data_to_host();
    6136:	f7ff fee7 	bl	5f08 <usb_data_to_host>
	if (ep == USB_CONTROL_OUT_EP0 && ep_status == USB_DC_EP_SETUP) {
    613a:	e03b      	b.n	61b4 <usb_handle_control_transfer+0x12c>
			usb_dc_ep_set_stall(USB_CONTROL_IN_EP0);
    613c:	2080      	movs	r0, #128	; 0x80
    613e:	f002 faef 	bl	8720 <usb_dc_ep_set_stall>
			return;
    6142:	e037      	b.n	61b4 <usb_handle_control_transfer+0x12c>
			usb_dc_ep_set_stall(USB_CONTROL_OUT_EP0);
    6144:	2000      	movs	r0, #0
    6146:	f002 faeb 	bl	8720 <usb_dc_ep_set_stall>
			usb_dc_ep_set_stall(USB_CONTROL_IN_EP0);
    614a:	2080      	movs	r0, #128	; 0x80
    614c:	f002 fae8 	bl	8720 <usb_dc_ep_set_stall>
			return;
    6150:	e030      	b.n	61b4 <usb_handle_control_transfer+0x12c>
			usb_dc_ep_set_stall(USB_CONTROL_IN_EP0);
    6152:	2080      	movs	r0, #128	; 0x80
    6154:	f002 fae4 	bl	8720 <usb_dc_ep_set_stall>
			return;
    6158:	e02c      	b.n	61b4 <usb_handle_control_transfer+0x12c>
			if (usb_dc_ep_read(USB_CONTROL_OUT_EP0,
    615a:	ab01      	add	r3, sp, #4
    615c:	2200      	movs	r2, #0
    615e:	4916      	ldr	r1, [pc, #88]	; (61b8 <usb_handle_control_transfer+0x130>)
    6160:	6889      	ldr	r1, [r1, #8]
    6162:	4610      	mov	r0, r2
    6164:	f00a f923 	bl	103ae <usb_dc_ep_read>
    6168:	2800      	cmp	r0, #0
    616a:	da23      	bge.n	61b4 <usb_handle_control_transfer+0x12c>
				usb_dc_ep_set_stall(USB_CONTROL_IN_EP0);
    616c:	2080      	movs	r0, #128	; 0x80
    616e:	f002 fad7 	bl	8720 <usb_dc_ep_set_stall>
			return;
    6172:	e01f      	b.n	61b4 <usb_handle_control_transfer+0x12c>
			usb_dc_ep_set_stall(USB_CONTROL_IN_EP0);
    6174:	2080      	movs	r0, #128	; 0x80
    6176:	f002 fad3 	bl	8720 <usb_dc_ep_set_stall>
			usb_dc_ep_set_stall(USB_CONTROL_OUT_EP0);
    617a:	2000      	movs	r0, #0
    617c:	f002 fad0 	bl	8720 <usb_dc_ep_set_stall>
			return;
    6180:	e018      	b.n	61b4 <usb_handle_control_transfer+0x12c>
				usb_dc_ep_set_stall(USB_CONTROL_IN_EP0);
    6182:	2080      	movs	r0, #128	; 0x80
    6184:	f002 facc 	bl	8720 <usb_dc_ep_set_stall>
				return;
    6188:	e014      	b.n	61b4 <usb_handle_control_transfer+0x12c>
	} else if (ep == USB_CONTROL_IN_EP0) {
    618a:	2c80      	cmp	r4, #128	; 0x80
    618c:	d105      	bne.n	619a <usb_handle_control_transfer+0x112>
		if (usb_dev.data_buf_residue != 0) {
    618e:	4b0a      	ldr	r3, [pc, #40]	; (61b8 <usb_handle_control_transfer+0x130>)
    6190:	68db      	ldr	r3, [r3, #12]
    6192:	b17b      	cbz	r3, 61b4 <usb_handle_control_transfer+0x12c>
			usb_data_to_host();
    6194:	f7ff feb8 	bl	5f08 <usb_data_to_host>
    6198:	e00c      	b.n	61b4 <usb_handle_control_transfer+0x12c>
		__ASSERT_NO_MSG(false);
    619a:	4c08      	ldr	r4, [pc, #32]	; (61bc <usb_handle_control_transfer+0x134>)
    619c:	f44f 73b2 	mov.w	r3, #356	; 0x164
    61a0:	4622      	mov	r2, r4
    61a2:	4907      	ldr	r1, [pc, #28]	; (61c0 <usb_handle_control_transfer+0x138>)
    61a4:	4807      	ldr	r0, [pc, #28]	; (61c4 <usb_handle_control_transfer+0x13c>)
    61a6:	f009 fb6a 	bl	f87e <printk>
    61aa:	f44f 71b2 	mov.w	r1, #356	; 0x164
    61ae:	4620      	mov	r0, r4
    61b0:	f009 fbeb 	bl	f98a <assert_post_action>
}
    61b4:	b002      	add	sp, #8
    61b6:	bd10      	pop	{r4, pc}
    61b8:	20000b04 	.word	0x20000b04
    61bc:	00011fb0 	.word	0x00011fb0
    61c0:	00012ff0 	.word	0x00012ff0
    61c4:	00010f8c 	.word	0x00010f8c

000061c8 <usb_set_config>:
	if (!config)
    61c8:	b300      	cbz	r0, 620c <usb_set_config+0x44>
{
    61ca:	b510      	push	{r4, lr}
    61cc:	4604      	mov	r4, r0
	usb_register_descriptors(config->usb_device_description);
    61ce:	6800      	ldr	r0, [r0, #0]
    61d0:	f7ff fca8 	bl	5b24 <usb_register_descriptors>
	usb_register_request_handler(REQTYPE_TYPE_STANDARD,
    61d4:	4a10      	ldr	r2, [pc, #64]	; (6218 <usb_set_config+0x50>)
    61d6:	4911      	ldr	r1, [pc, #68]	; (621c <usb_set_config+0x54>)
    61d8:	2000      	movs	r0, #0
    61da:	f7ff fc93 	bl	5b04 <usb_register_request_handler>
	if (config->interface.class_handler != NULL) {
    61de:	6921      	ldr	r1, [r4, #16]
    61e0:	b119      	cbz	r1, 61ea <usb_set_config+0x22>
		usb_register_request_handler(REQTYPE_TYPE_CLASS,
    61e2:	69e2      	ldr	r2, [r4, #28]
    61e4:	2001      	movs	r0, #1
    61e6:	f7ff fc8d 	bl	5b04 <usb_register_request_handler>
	if (config->interface.vendor_handler || usb_os_desc_enabled()) {
    61ea:	6963      	ldr	r3, [r4, #20]
    61ec:	b143      	cbz	r3, 6200 <usb_set_config+0x38>
		usb_register_request_handler(REQTYPE_TYPE_VENDOR,
    61ee:	6a22      	ldr	r2, [r4, #32]
    61f0:	490b      	ldr	r1, [pc, #44]	; (6220 <usb_set_config+0x58>)
    61f2:	2002      	movs	r0, #2
    61f4:	f7ff fc86 	bl	5b04 <usb_register_request_handler>
		if (config->interface.vendor_handler) {
    61f8:	6963      	ldr	r3, [r4, #20]
    61fa:	b10b      	cbz	r3, 6200 <usb_set_config+0x38>
			usb_dev.vendor_req_handler =
    61fc:	4a09      	ldr	r2, [pc, #36]	; (6224 <usb_set_config+0x5c>)
    61fe:	6193      	str	r3, [r2, #24]
	if (config->interface.custom_handler != NULL) {
    6200:	69a0      	ldr	r0, [r4, #24]
    6202:	b130      	cbz	r0, 6212 <usb_set_config+0x4a>
		usb_register_custom_req_handler(
    6204:	f7ff fcce 	bl	5ba4 <usb_register_custom_req_handler>
	return 0;
    6208:	2000      	movs	r0, #0
}
    620a:	bd10      	pop	{r4, pc}
		return -EINVAL;
    620c:	f06f 0015 	mvn.w	r0, #21
}
    6210:	4770      	bx	lr
	return 0;
    6212:	2000      	movs	r0, #0
    6214:	e7f9      	b.n	620a <usb_set_config+0x42>
    6216:	bf00      	nop
    6218:	20000b48 	.word	0x20000b48
    621c:	00005e95 	.word	0x00005e95
    6220:	00005b8d 	.word	0x00005b8d
    6224:	20000b04 	.word	0x20000b04

00006228 <usb_enable>:
	if (true == usb_dev.enabled) {
    6228:	4b3c      	ldr	r3, [pc, #240]	; (631c <usb_enable+0xf4>)
    622a:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
    622e:	2b00      	cmp	r3, #0
    6230:	d171      	bne.n	6316 <usb_enable+0xee>
{
    6232:	b530      	push	{r4, r5, lr}
    6234:	b083      	sub	sp, #12
    6236:	4604      	mov	r4, r0
	ret = usb_vbus_set(true);
    6238:	2001      	movs	r0, #1
    623a:	f009 fee0 	bl	fffe <usb_vbus_set>
	if (ret < 0)
    623e:	2800      	cmp	r0, #0
    6240:	db67      	blt.n	6312 <usb_enable+0xea>
	usb_register_status_callback(forward_status_cb);
    6242:	4d37      	ldr	r5, [pc, #220]	; (6320 <usb_enable+0xf8>)
    6244:	4628      	mov	r0, r5
    6246:	f7ff fcb3 	bl	5bb0 <usb_register_status_callback>
	ret = usb_dc_set_status_callback(forward_status_cb);
    624a:	4628      	mov	r0, r5
    624c:	f002 fcea 	bl	8c24 <usb_dc_set_status_callback>
	if (ret < 0) {
    6250:	2800      	cmp	r0, #0
    6252:	db5e      	blt.n	6312 <usb_enable+0xea>
	ret = usb_dc_attach();
    6254:	f002 f940 	bl	84d8 <usb_dc_attach>
	if (ret < 0)
    6258:	2800      	cmp	r0, #0
    625a:	db5a      	blt.n	6312 <usb_enable+0xea>
	ep0_cfg.ep_mps = USB_MAX_CTRL_MPS;
    625c:	2340      	movs	r3, #64	; 0x40
    625e:	f8ad 3002 	strh.w	r3, [sp, #2]
	ep0_cfg.ep_type = USB_DC_EP_CONTROL;
    6262:	2300      	movs	r3, #0
    6264:	f88d 3004 	strb.w	r3, [sp, #4]
	ep0_cfg.ep_addr = USB_CONTROL_OUT_EP0;
    6268:	f88d 3000 	strb.w	r3, [sp]
	ret = usb_dc_ep_configure(&ep0_cfg);
    626c:	4668      	mov	r0, sp
    626e:	f002 fa1b 	bl	86a8 <usb_dc_ep_configure>
	if (ret < 0)
    6272:	2800      	cmp	r0, #0
    6274:	db4d      	blt.n	6312 <usb_enable+0xea>
	ep0_cfg.ep_addr = USB_CONTROL_IN_EP0;
    6276:	2380      	movs	r3, #128	; 0x80
    6278:	f88d 3000 	strb.w	r3, [sp]
	ret = usb_dc_ep_configure(&ep0_cfg);
    627c:	4668      	mov	r0, sp
    627e:	f002 fa13 	bl	86a8 <usb_dc_ep_configure>
	if (ret < 0)
    6282:	2800      	cmp	r0, #0
    6284:	db45      	blt.n	6312 <usb_enable+0xea>
	ret = usb_dc_ep_set_callback(USB_CONTROL_OUT_EP0,
    6286:	4927      	ldr	r1, [pc, #156]	; (6324 <usb_enable+0xfc>)
    6288:	2000      	movs	r0, #0
    628a:	f002 fcb7 	bl	8bfc <usb_dc_ep_set_callback>
	if (ret < 0)
    628e:	2800      	cmp	r0, #0
    6290:	db3f      	blt.n	6312 <usb_enable+0xea>
	ret = usb_dc_ep_set_callback(USB_CONTROL_IN_EP0,
    6292:	4924      	ldr	r1, [pc, #144]	; (6324 <usb_enable+0xfc>)
    6294:	2080      	movs	r0, #128	; 0x80
    6296:	f002 fcb1 	bl	8bfc <usb_dc_ep_set_callback>
	if (ret < 0)
    629a:	2800      	cmp	r0, #0
    629c:	db39      	blt.n	6312 <usb_enable+0xea>
	for (i = 0U; i < config->num_endpoints; i++) {
    629e:	2500      	movs	r5, #0
    62a0:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
    62a4:	42ab      	cmp	r3, r5
    62a6:	d90b      	bls.n	62c0 <usb_enable+0x98>
		ret = usb_dc_ep_set_callback(config->endpoint[i].ep_addr,
    62a8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    62aa:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
    62ae:	f853 1035 	ldr.w	r1, [r3, r5, lsl #3]
    62b2:	7910      	ldrb	r0, [r2, #4]
    62b4:	f002 fca2 	bl	8bfc <usb_dc_ep_set_callback>
		if (ret < 0)
    62b8:	2800      	cmp	r0, #0
    62ba:	db2a      	blt.n	6312 <usb_enable+0xea>
	for (i = 0U; i < config->num_endpoints; i++) {
    62bc:	3501      	adds	r5, #1
    62be:	e7ef      	b.n	62a0 <usb_enable+0x78>
	for (i = 0U; i < MAX_NUM_TRANSFERS; i++) {
    62c0:	2400      	movs	r4, #0
    62c2:	e015      	b.n	62f0 <usb_enable+0xc8>
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
    62c4:	4815      	ldr	r0, [pc, #84]	; (631c <usb_enable+0xf4>)
    62c6:	0122      	lsls	r2, r4, #4
    62c8:	1b11      	subs	r1, r2, r4
    62ca:	008b      	lsls	r3, r1, #2
    62cc:	4403      	add	r3, r0
    62ce:	2100      	movs	r1, #0
    62d0:	67d9      	str	r1, [r3, #124]	; 0x7c
    62d2:	4d15      	ldr	r5, [pc, #84]	; (6328 <usb_enable+0x100>)
    62d4:	f8c3 5080 	str.w	r5, [r3, #128]	; 0x80
    62d8:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
		k_sem_init(&usb_dev.transfer[i].sem, 1, 1);
    62dc:	1b13      	subs	r3, r2, r4
    62de:	009a      	lsls	r2, r3, #2
    62e0:	3268      	adds	r2, #104	; 0x68
    62e2:	4410      	add	r0, r2
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit)
    62e4:	2201      	movs	r2, #1
    62e6:	4611      	mov	r1, r2
    62e8:	3004      	adds	r0, #4
    62ea:	f008 f941 	bl	e570 <z_impl_k_sem_init>
	for (i = 0U; i < MAX_NUM_TRANSFERS; i++) {
    62ee:	3401      	adds	r4, #1
    62f0:	2c03      	cmp	r4, #3
    62f2:	d9e7      	bls.n	62c4 <usb_enable+0x9c>
	ret = usb_dc_ep_enable(USB_CONTROL_OUT_EP0);
    62f4:	2000      	movs	r0, #0
    62f6:	f002 fa91 	bl	881c <usb_dc_ep_enable>
	if (ret < 0)
    62fa:	2800      	cmp	r0, #0
    62fc:	db09      	blt.n	6312 <usb_enable+0xea>
	ret = usb_dc_ep_enable(USB_CONTROL_IN_EP0);
    62fe:	2080      	movs	r0, #128	; 0x80
    6300:	f002 fa8c 	bl	881c <usb_dc_ep_enable>
	if (ret < 0)
    6304:	2800      	cmp	r0, #0
    6306:	db04      	blt.n	6312 <usb_enable+0xea>
	usb_dev.enabled = true;
    6308:	4b04      	ldr	r3, [pc, #16]	; (631c <usb_enable+0xf4>)
    630a:	2201      	movs	r2, #1
    630c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	return 0;
    6310:	2000      	movs	r0, #0
}
    6312:	b003      	add	sp, #12
    6314:	bd30      	pop	{r4, r5, pc}
		return 0;
    6316:	2000      	movs	r0, #0
}
    6318:	4770      	bx	lr
    631a:	bf00      	nop
    631c:	20000b04 	.word	0x20000b04
    6320:	00005bbd 	.word	0x00005bbd
    6324:	00006089 	.word	0x00006089
    6328:	00005f35 	.word	0x00005f35

0000632c <usb_get_cfg_data>:
 * The interface descriptor of a USB function must be assigned to the
 * usb_cfg_data so that usb_ep_cfg_data and matching endpoint descriptor
 * can be found.
 */
static struct usb_cfg_data *usb_get_cfg_data(struct usb_if_descriptor *iface)
{
    632c:	b410      	push	{r4}
	size_t length = (__usb_data_end - __usb_data_start);
    632e:	4c0d      	ldr	r4, [pc, #52]	; (6364 <usb_get_cfg_data+0x38>)
    6330:	4b0d      	ldr	r3, [pc, #52]	; (6368 <usb_get_cfg_data+0x3c>)
    6332:	1ae4      	subs	r4, r4, r3
    6334:	10a3      	asrs	r3, r4, #2
    6336:	4c0d      	ldr	r4, [pc, #52]	; (636c <usb_get_cfg_data+0x40>)
    6338:	fb04 f403 	mul.w	r4, r4, r3

	for (size_t i = 0; i < length; i++) {
    633c:	2300      	movs	r3, #0
    633e:	42a3      	cmp	r3, r4
    6340:	d20c      	bcs.n	635c <usb_get_cfg_data+0x30>
		if (__usb_data_start[i].interface_descriptor == iface) {
    6342:	4909      	ldr	r1, [pc, #36]	; (6368 <usb_get_cfg_data+0x3c>)
    6344:	222c      	movs	r2, #44	; 0x2c
    6346:	fb02 1203 	mla	r2, r2, r3, r1
    634a:	6852      	ldr	r2, [r2, #4]
    634c:	4282      	cmp	r2, r0
    634e:	d001      	beq.n	6354 <usb_get_cfg_data+0x28>
	for (size_t i = 0; i < length; i++) {
    6350:	3301      	adds	r3, #1
    6352:	e7f4      	b.n	633e <usb_get_cfg_data+0x12>
			return &__usb_data_start[i];
    6354:	222c      	movs	r2, #44	; 0x2c
    6356:	fb02 1003 	mla	r0, r2, r3, r1
    635a:	e000      	b.n	635e <usb_get_cfg_data+0x32>
		}
	}

	return NULL;
    635c:	2000      	movs	r0, #0
}
    635e:	bc10      	pop	{r4}
    6360:	4770      	bx	lr
    6362:	bf00      	nop
    6364:	20007590 	.word	0x20007590
    6368:	20007564 	.word	0x20007564
    636c:	ba2e8ba3 	.word	0xba2e8ba3

00006370 <ascii7_to_utf16le>:
{
    6370:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int idx_max = USB_BSTRING_UTF16LE_IDX_MAX(str_descr->bLength);
    6374:	4606      	mov	r6, r0
    6376:	f816 5b02 	ldrb.w	r5, [r6], #2
    637a:	1eec      	subs	r4, r5, #3
	int ascii_idx_max = USB_BSTRING_ASCII_IDX_MAX(str_descr->bLength);
    637c:	086d      	lsrs	r5, r5, #1
    637e:	3d02      	subs	r5, #2
	for (int i = idx_max; i >= 0; i -= 2) {
    6380:	e015      	b.n	63ae <ascii7_to_utf16le+0x3e>
		__ASSERT(buf[ascii_idx_max] > 0x1F && buf[ascii_idx_max] < 0x7F,
    6382:	f8df 804c 	ldr.w	r8, [pc, #76]	; 63d0 <ascii7_to_utf16le+0x60>
    6386:	23b1      	movs	r3, #177	; 0xb1
    6388:	4642      	mov	r2, r8
    638a:	490e      	ldr	r1, [pc, #56]	; (63c4 <ascii7_to_utf16le+0x54>)
    638c:	480e      	ldr	r0, [pc, #56]	; (63c8 <ascii7_to_utf16le+0x58>)
    638e:	f009 fa76 	bl	f87e <printk>
    6392:	480e      	ldr	r0, [pc, #56]	; (63cc <ascii7_to_utf16le+0x5c>)
    6394:	f009 fa73 	bl	f87e <printk>
    6398:	21b1      	movs	r1, #177	; 0xb1
    639a:	4640      	mov	r0, r8
    639c:	f009 faf5 	bl	f98a <assert_post_action>
		buf[i] = 0U;
    63a0:	2300      	movs	r3, #0
    63a2:	5533      	strb	r3, [r6, r4]
		buf[i - 1] = buf[ascii_idx_max--];
    63a4:	3d01      	subs	r5, #1
    63a6:	1e63      	subs	r3, r4, #1
    63a8:	783a      	ldrb	r2, [r7, #0]
    63aa:	54f2      	strb	r2, [r6, r3]
	for (int i = idx_max; i >= 0; i -= 2) {
    63ac:	3c02      	subs	r4, #2
    63ae:	2c00      	cmp	r4, #0
    63b0:	db06      	blt.n	63c0 <ascii7_to_utf16le+0x50>
		__ASSERT(buf[ascii_idx_max] > 0x1F && buf[ascii_idx_max] < 0x7F,
    63b2:	1977      	adds	r7, r6, r5
    63b4:	5d73      	ldrb	r3, [r6, r5]
    63b6:	3b20      	subs	r3, #32
    63b8:	b2db      	uxtb	r3, r3
    63ba:	2b5e      	cmp	r3, #94	; 0x5e
    63bc:	d9f0      	bls.n	63a0 <ascii7_to_utf16le+0x30>
    63be:	e7e0      	b.n	6382 <ascii7_to_utf16le+0x12>
}
    63c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    63c4:	00012018 	.word	0x00012018
    63c8:	00010f8c 	.word	0x00010f8c
    63cc:	00012050 	.word	0x00012050
    63d0:	00011ff8 	.word	0x00011ff8

000063d4 <usb_fix_ascii_sn_string_descriptor>:
	return NULL;
}

static void
usb_fix_ascii_sn_string_descriptor(struct usb_sn_descriptor *sn)
{
    63d4:	b570      	push	{r4, r5, r6, lr}
    63d6:	4606      	mov	r6, r0
	u8_t *runtime_sn =  usb_update_sn_string_descriptor();
    63d8:	f009 fe9b 	bl	10112 <usb_update_sn_string_descriptor>
	int runtime_sn_len, default_sn_len;

	if (!runtime_sn) {
    63dc:	b1c8      	cbz	r0, 6412 <usb_fix_ascii_sn_string_descriptor+0x3e>
    63de:	4604      	mov	r4, r0
		return;
	}

	runtime_sn_len = strlen(runtime_sn);
    63e0:	f00a f87e 	bl	104e0 <strlen>
    63e4:	4605      	mov	r5, r0
	default_sn_len = strlen(CONFIG_USB_DEVICE_SN);
    63e6:	480e      	ldr	r0, [pc, #56]	; (6420 <usb_fix_ascii_sn_string_descriptor+0x4c>)
    63e8:	f00a f87a 	bl	104e0 <strlen>

	if (runtime_sn_len != default_sn_len) {
    63ec:	4285      	cmp	r5, r0
    63ee:	d011      	beq.n	6414 <usb_fix_ascii_sn_string_descriptor+0x40>
		LOG_ERR("the new SN descriptor doesn't has the same "
    63f0:	f04f 0100 	mov.w	r1, #0
    63f4:	2301      	movs	r3, #1
    63f6:	f363 0102 	bfi	r1, r3, #0, #3
    63fa:	f36f 01c5 	bfc	r1, #3, #3
    63fe:	4b09      	ldr	r3, [pc, #36]	; (6424 <usb_fix_ascii_sn_string_descriptor+0x50>)
    6400:	4a09      	ldr	r2, [pc, #36]	; (6428 <usb_fix_ascii_sn_string_descriptor+0x54>)
    6402:	1a9b      	subs	r3, r3, r2
    6404:	f3c3 03c9 	ubfx	r3, r3, #3, #10
    6408:	f363 118f 	bfi	r1, r3, #6, #10
    640c:	4807      	ldr	r0, [pc, #28]	; (642c <usb_fix_ascii_sn_string_descriptor+0x58>)
    640e:	f7fe fe6f 	bl	50f0 <log_0>
			"length as CONFIG_USB_DEVICE_SN");
		return;
	}

	memcpy(sn->bString, runtime_sn, runtime_sn_len);
}
    6412:	bd70      	pop	{r4, r5, r6, pc}
	memcpy(sn->bString, runtime_sn, runtime_sn_len);
    6414:	462a      	mov	r2, r5
    6416:	4621      	mov	r1, r4
    6418:	1cb0      	adds	r0, r6, #2
    641a:	f00a f889 	bl	10530 <memcpy>
    641e:	e7f8      	b.n	6412 <usb_fix_ascii_sn_string_descriptor+0x3e>
    6420:	000120ac 	.word	0x000120ac
    6424:	00010e0c 	.word	0x00010e0c
    6428:	00010dd4 	.word	0x00010dd4
    642c:	000120b4 	.word	0x000120b4

00006430 <usb_fix_descriptor>:
 * Restrictions:
 * - just one device configuration (there is only one)
 * - string descriptor must be present
 */
static int usb_fix_descriptor(struct usb_desc_header *head)
{
    6430:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6434:	b082      	sub	sp, #8
    6436:	4604      	mov	r4, r0
	struct usb_if_descriptor *if_descr = NULL;
	struct usb_cfg_data *cfg_data = NULL;
	struct usb_ep_descriptor *ep_descr = NULL;
	u8_t numof_ifaces = 0U;
	u8_t str_descr_idx = 0U;
	u32_t requested_ep = BIT(16) | BIT(0);
    6438:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    643c:	9301      	str	r3, [sp, #4]
	u8_t str_descr_idx = 0U;
    643e:	2500      	movs	r5, #0
	u8_t numof_ifaces = 0U;
    6440:	462f      	mov	r7, r5
	struct usb_cfg_data *cfg_data = NULL;
    6442:	46a8      	mov	r8, r5
	struct usb_cfg_descriptor *cfg_descr = NULL;
    6444:	462e      	mov	r6, r5

	while (head->bLength != 0U) {
    6446:	e06d      	b.n	6524 <usb_fix_descriptor+0xf4>
			LOG_DBG("Association descriptor %p", head);
			break;
		case USB_INTERFACE_DESC:
			if_descr = (struct usb_if_descriptor *)head;
			LOG_DBG("Interface descriptor %p", head);
			if (if_descr->bAlternateSetting) {
    6448:	78e3      	ldrb	r3, [r4, #3]
    644a:	2b00      	cmp	r3, #0
    644c:	d168      	bne.n	6520 <usb_fix_descriptor+0xf0>
				LOG_DBG("Skip alternate interface");
				break;
			}

			if (if_descr->bInterfaceNumber == 0U) {
    644e:	78a3      	ldrb	r3, [r4, #2]
    6450:	b94b      	cbnz	r3, 6466 <usb_fix_descriptor+0x36>
				cfg_data = usb_get_cfg_data(if_descr);
    6452:	4620      	mov	r0, r4
    6454:	f7ff ff6a 	bl	632c <usb_get_cfg_data>
				if (!cfg_data) {
    6458:	4680      	mov	r8, r0
    645a:	b138      	cbz	r0, 646c <usb_fix_descriptor+0x3c>
					LOG_ERR("There is no usb_cfg_data "
						"for %p", head);
					return -1;
				}

				if (cfg_data->interface_config) {
    645c:	6883      	ldr	r3, [r0, #8]
    645e:	b113      	cbz	r3, 6466 <usb_fix_descriptor+0x36>
					cfg_data->interface_config(head,
    6460:	4639      	mov	r1, r7
    6462:	4620      	mov	r0, r4
    6464:	4798      	blx	r3
							numof_ifaces);
				}
			}

			numof_ifaces++;
    6466:	3701      	adds	r7, #1
    6468:	b2ff      	uxtb	r7, r7
			break;
    646a:	e059      	b.n	6520 <usb_fix_descriptor+0xf0>
					LOG_ERR("There is no usb_cfg_data "
    646c:	f04f 0200 	mov.w	r2, #0
    6470:	2301      	movs	r3, #1
    6472:	f363 0202 	bfi	r2, r3, #0, #3
    6476:	f36f 02c5 	bfc	r2, #3, #3
    647a:	4b3a      	ldr	r3, [pc, #232]	; (6564 <usb_fix_descriptor+0x134>)
    647c:	493a      	ldr	r1, [pc, #232]	; (6568 <usb_fix_descriptor+0x138>)
    647e:	1a5b      	subs	r3, r3, r1
    6480:	f3c3 03c9 	ubfx	r3, r3, #3, #10
    6484:	f363 128f 	bfi	r2, r3, #6, #10
    6488:	4621      	mov	r1, r4
    648a:	4838      	ldr	r0, [pc, #224]	; (656c <usb_fix_descriptor+0x13c>)
    648c:	f7fe fd5e 	bl	4f4c <log_1>
					return -1;
    6490:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    6494:	e05f      	b.n	6556 <usb_fix_descriptor+0x126>
		case USB_ENDPOINT_DESC:
			LOG_DBG("Endpoint descriptor %p", head);
			ep_descr = (struct usb_ep_descriptor *)head;
			if (usb_validate_ep_cfg_data(ep_descr,
    6496:	aa01      	add	r2, sp, #4
    6498:	4641      	mov	r1, r8
    649a:	4620      	mov	r0, r4
    649c:	f009 fdd7 	bl	1004e <usb_validate_ep_cfg_data>
    64a0:	2800      	cmp	r0, #0
    64a2:	d03d      	beq.n	6520 <usb_fix_descriptor+0xf0>
						     cfg_data,
						     &requested_ep)) {
				LOG_ERR("Failed to validate endpoints");
    64a4:	f04f 0100 	mov.w	r1, #0
    64a8:	2301      	movs	r3, #1
    64aa:	f363 0102 	bfi	r1, r3, #0, #3
    64ae:	f36f 01c5 	bfc	r1, #3, #3
    64b2:	4b2c      	ldr	r3, [pc, #176]	; (6564 <usb_fix_descriptor+0x134>)
    64b4:	4a2c      	ldr	r2, [pc, #176]	; (6568 <usb_fix_descriptor+0x138>)
    64b6:	1a9b      	subs	r3, r3, r2
    64b8:	f3c3 03c9 	ubfx	r3, r3, #3, #10
    64bc:	f363 118f 	bfi	r1, r3, #6, #10
    64c0:	482b      	ldr	r0, [pc, #172]	; (6570 <usb_fix_descriptor+0x140>)
    64c2:	f7fe fe15 	bl	50f0 <log_0>
				return -1;
    64c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    64ca:	e044      	b.n	6556 <usb_fix_descriptor+0x126>
		case 0:
		case USB_STRING_DESC:
			/*
			 * Copy runtime SN string descriptor first, if has
			 */
			if (str_descr_idx == USB_DESC_SERIAL_NUMBER_IDX) {
    64cc:	2d03      	cmp	r5, #3
    64ce:	d00a      	beq.n	64e6 <usb_fix_descriptor+0xb6>
			}
			/*
			 * Skip language descriptor but correct
			 * wTotalLength and bNumInterfaces once.
			 */
			if (str_descr_idx) {
    64d0:	b96d      	cbnz	r5, 64ee <usb_fix_descriptor+0xbe>
				ascii7_to_utf16le(head);
			} else {
				if (!cfg_descr) {
    64d2:	b186      	cbz	r6, 64f6 <usb_fix_descriptor+0xc6>
					return -1;
				}

				LOG_DBG("Now the wTotalLength is %d",
					(u8_t *)head - (u8_t *)cfg_descr);
				sys_put_le16((u8_t *)head - (u8_t *)cfg_descr,
    64d4:	1ba3      	subs	r3, r4, r6
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(u16_t val, u8_t dst[2])
{
	dst[0] = val;
    64d6:	70b3      	strb	r3, [r6, #2]
	dst[1] = val >> 8;
    64d8:	f3c3 2307 	ubfx	r3, r3, #8, #8
    64dc:	70f3      	strb	r3, [r6, #3]
					     (u8_t *)&cfg_descr->wTotalLength);
				cfg_descr->bNumInterfaces = numof_ifaces;
    64de:	7137      	strb	r7, [r6, #4]
			}

			str_descr_idx += 1U;
    64e0:	3501      	adds	r5, #1
    64e2:	b2ed      	uxtb	r5, r5

			break;
    64e4:	e01c      	b.n	6520 <usb_fix_descriptor+0xf0>
				usb_fix_ascii_sn_string_descriptor(sn);
    64e6:	4620      	mov	r0, r4
    64e8:	f7ff ff74 	bl	63d4 <usb_fix_ascii_sn_string_descriptor>
    64ec:	e7f0      	b.n	64d0 <usb_fix_descriptor+0xa0>
				ascii7_to_utf16le(head);
    64ee:	4620      	mov	r0, r4
    64f0:	f7ff ff3e 	bl	6370 <ascii7_to_utf16le>
    64f4:	e7f4      	b.n	64e0 <usb_fix_descriptor+0xb0>
					LOG_ERR("Incomplete device descriptor");
    64f6:	f04f 0100 	mov.w	r1, #0
    64fa:	2301      	movs	r3, #1
    64fc:	f363 0102 	bfi	r1, r3, #0, #3
    6500:	f36f 01c5 	bfc	r1, #3, #3
    6504:	4b17      	ldr	r3, [pc, #92]	; (6564 <usb_fix_descriptor+0x134>)
    6506:	4a18      	ldr	r2, [pc, #96]	; (6568 <usb_fix_descriptor+0x138>)
    6508:	1a9b      	subs	r3, r3, r2
    650a:	f3c3 03c9 	ubfx	r3, r3, #3, #10
    650e:	f363 118f 	bfi	r1, r3, #6, #10
    6512:	4818      	ldr	r0, [pc, #96]	; (6574 <usb_fix_descriptor+0x144>)
    6514:	f7fe fdec 	bl	50f0 <log_0>
					return -1;
    6518:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    651c:	e01b      	b.n	6556 <usb_fix_descriptor+0x126>
			cfg_descr = (struct usb_cfg_descriptor *)head;
    651e:	4626      	mov	r6, r4
		default:
			break;
		}

		/* Move to next descriptor */
		head = (struct usb_desc_header *)((u8_t *)head + head->bLength);
    6520:	7823      	ldrb	r3, [r4, #0]
    6522:	441c      	add	r4, r3
	while (head->bLength != 0U) {
    6524:	7823      	ldrb	r3, [r4, #0]
    6526:	b18b      	cbz	r3, 654c <usb_fix_descriptor+0x11c>
		switch (head->bDescriptorType) {
    6528:	7863      	ldrb	r3, [r4, #1]
    652a:	2b05      	cmp	r3, #5
    652c:	d8f8      	bhi.n	6520 <usb_fix_descriptor+0xf0>
    652e:	a201      	add	r2, pc, #4	; (adr r2, 6534 <usb_fix_descriptor+0x104>)
    6530:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    6534:	000064cd 	.word	0x000064cd
    6538:	00006521 	.word	0x00006521
    653c:	0000651f 	.word	0x0000651f
    6540:	000064cd 	.word	0x000064cd
    6544:	00006449 	.word	0x00006449
    6548:	00006497 	.word	0x00006497
	}

	if ((head + 1) != __usb_descriptor_end) {
    654c:	1ca0      	adds	r0, r4, #2
    654e:	4b0a      	ldr	r3, [pc, #40]	; (6578 <usb_fix_descriptor+0x148>)
    6550:	4298      	cmp	r0, r3
    6552:	d103      	bne.n	655c <usb_fix_descriptor+0x12c>
		LOG_DBG("try to fix next descriptor at %p", head + 1);
		return usb_fix_descriptor(head + 1);
	}

	return 0;
    6554:	2000      	movs	r0, #0
}
    6556:	b002      	add	sp, #8
    6558:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return usb_fix_descriptor(head + 1);
    655c:	f7ff ff68 	bl	6430 <usb_fix_descriptor>
    6560:	e7f9      	b.n	6556 <usb_fix_descriptor+0x126>
    6562:	bf00      	nop
    6564:	00010e0c 	.word	0x00010e0c
    6568:	00010dd4 	.word	0x00010dd4
    656c:	00012100 	.word	0x00012100
    6570:	00012120 	.word	0x00012120
    6574:	00012140 	.word	0x00012140
    6578:	20007563 	.word	0x20007563

0000657c <usb_get_device_descriptor>:


u8_t *usb_get_device_descriptor(void)
{
    657c:	b508      	push	{r3, lr}
	LOG_DBG("__usb_descriptor_start %p", __usb_descriptor_start);
	LOG_DBG("__usb_descriptor_end %p", __usb_descriptor_end);

	if (usb_fix_descriptor(__usb_descriptor_start)) {
    657e:	480c      	ldr	r0, [pc, #48]	; (65b0 <usb_get_device_descriptor+0x34>)
    6580:	f7ff ff56 	bl	6430 <usb_fix_descriptor>
    6584:	b908      	cbnz	r0, 658a <usb_get_device_descriptor+0xe>
		LOG_ERR("Failed to fixup USB descriptor");
		return NULL;
	}

	return (u8_t *) __usb_descriptor_start;
    6586:	480a      	ldr	r0, [pc, #40]	; (65b0 <usb_get_device_descriptor+0x34>)
}
    6588:	bd08      	pop	{r3, pc}
		LOG_ERR("Failed to fixup USB descriptor");
    658a:	f04f 0100 	mov.w	r1, #0
    658e:	2301      	movs	r3, #1
    6590:	f363 0102 	bfi	r1, r3, #0, #3
    6594:	f36f 01c5 	bfc	r1, #3, #3
    6598:	4b06      	ldr	r3, [pc, #24]	; (65b4 <usb_get_device_descriptor+0x38>)
    659a:	4a07      	ldr	r2, [pc, #28]	; (65b8 <usb_get_device_descriptor+0x3c>)
    659c:	1a9b      	subs	r3, r3, r2
    659e:	f3c3 03c9 	ubfx	r3, r3, #3, #10
    65a2:	f363 118f 	bfi	r1, r3, #6, #10
    65a6:	4805      	ldr	r0, [pc, #20]	; (65bc <usb_get_device_descriptor+0x40>)
    65a8:	f7fe fda2 	bl	50f0 <log_0>
		return NULL;
    65ac:	2000      	movs	r0, #0
    65ae:	e7eb      	b.n	6588 <usb_get_device_descriptor+0xc>
    65b0:	200074e0 	.word	0x200074e0
    65b4:	00010e0c 	.word	0x00010e0c
    65b8:	00010dd4 	.word	0x00010dd4
    65bc:	00012160 	.word	0x00012160

000065c0 <cdc_acm_class_handle_req>:
 *
 * @return  0 on success, negative errno code on fail.
 */
int cdc_acm_class_handle_req(struct usb_setup_packet *pSetup,
			     s32_t *len, u8_t **data)
{
    65c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    65c2:	4604      	mov	r4, r0
    65c4:	460f      	mov	r7, r1
    65c6:	4616      	mov	r6, r2
	struct cdc_acm_dev_data_t *dev_data;
	struct usb_dev_data *common;

	common = usb_get_dev_data_by_iface(&cdc_acm_data_devlist,
    65c8:	7901      	ldrb	r1, [r0, #4]
    65ca:	481b      	ldr	r0, [pc, #108]	; (6638 <cdc_acm_class_handle_req+0x78>)
    65cc:	f009 fdb6 	bl	1013c <usb_get_dev_data_by_iface>
					   sys_le16_to_cpu(pSetup->wIndex));
	if (common == NULL) {
    65d0:	b148      	cbz	r0, 65e6 <cdc_acm_class_handle_req+0x26>
		return -ENODEV;
	}

	dev_data = CONTAINER_OF(common, struct cdc_acm_dev_data_t, common);

	switch (pSetup->bRequest) {
    65d2:	7863      	ldrb	r3, [r4, #1]
    65d4:	2b21      	cmp	r3, #33	; 0x21
    65d6:	d027      	beq.n	6628 <cdc_acm_class_handle_req+0x68>
    65d8:	2b22      	cmp	r3, #34	; 0x22
    65da:	d020      	beq.n	661e <cdc_acm_class_handle_req+0x5e>
    65dc:	2b20      	cmp	r3, #32
    65de:	d017      	beq.n	6610 <cdc_acm_class_handle_req+0x50>
		break;

	default:
		LOG_DBG("CDC ACM request 0x%x, value 0x%x",
			pSetup->bRequest, pSetup->wValue);
		return -EINVAL;
    65e0:	f06f 0015 	mvn.w	r0, #21
	}

	return 0;
}
    65e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		LOG_WRN("Device data not found for interface %u",
    65e6:	f04f 0200 	mov.w	r2, #0
    65ea:	2302      	movs	r3, #2
    65ec:	f363 0202 	bfi	r2, r3, #0, #3
    65f0:	f36f 02c5 	bfc	r2, #3, #3
    65f4:	4b11      	ldr	r3, [pc, #68]	; (663c <cdc_acm_class_handle_req+0x7c>)
    65f6:	4912      	ldr	r1, [pc, #72]	; (6640 <cdc_acm_class_handle_req+0x80>)
    65f8:	1a5b      	subs	r3, r3, r1
    65fa:	f3c3 03c9 	ubfx	r3, r3, #3, #10
    65fe:	f363 128f 	bfi	r2, r3, #6, #10
    6602:	88a1      	ldrh	r1, [r4, #4]
    6604:	480f      	ldr	r0, [pc, #60]	; (6644 <cdc_acm_class_handle_req+0x84>)
    6606:	f7fe fca1 	bl	4f4c <log_1>
		return -ENODEV;
    660a:	f06f 0012 	mvn.w	r0, #18
    660e:	e7e9      	b.n	65e4 <cdc_acm_class_handle_req+0x24>
		memcpy(&dev_data->line_coding,
    6610:	2207      	movs	r2, #7
    6612:	6831      	ldr	r1, [r6, #0]
    6614:	380c      	subs	r0, #12
    6616:	f009 ff8b 	bl	10530 <memcpy>
	return 0;
    661a:	2000      	movs	r0, #0
    661c:	e7e2      	b.n	65e4 <cdc_acm_class_handle_req+0x24>
		dev_data->line_state = (u8_t)sys_le16_to_cpu(pSetup->wValue);
    661e:	78a3      	ldrb	r3, [r4, #2]
    6620:	f800 3c05 	strb.w	r3, [r0, #-5]
	return 0;
    6624:	2000      	movs	r0, #0
    6626:	e7dd      	b.n	65e4 <cdc_acm_class_handle_req+0x24>
		*data = (u8_t *)(&dev_data->line_coding);
    6628:	f1a0 050c 	sub.w	r5, r0, #12
    662c:	6035      	str	r5, [r6, #0]
		*len = sizeof(dev_data->line_coding);
    662e:	2307      	movs	r3, #7
    6630:	603b      	str	r3, [r7, #0]
	return 0;
    6632:	2000      	movs	r0, #0
    6634:	e7d6      	b.n	65e4 <cdc_acm_class_handle_req+0x24>
    6636:	bf00      	nop
    6638:	20001044 	.word	0x20001044
    663c:	00010e04 	.word	0x00010e04
    6640:	00010dd4 	.word	0x00010dd4
    6644:	00012194 	.word	0x00012194

00006648 <cdc_acm_int_in>:
 * @param ep_status Endpoint status code.
 *
 * @return  N/A.
 */
static void cdc_acm_int_in(u8_t ep, enum usb_dc_ep_cb_status_code ep_status)
{
    6648:	b510      	push	{r4, lr}
    664a:	4604      	mov	r4, r0
	struct cdc_acm_dev_data_t *dev_data;
	struct usb_dev_data *common;

	ARG_UNUSED(ep_status);

	common = usb_get_dev_data_by_ep(&cdc_acm_data_devlist, ep);
    664c:	4601      	mov	r1, r0
    664e:	480d      	ldr	r0, [pc, #52]	; (6684 <cdc_acm_int_in+0x3c>)
    6650:	f009 fd89 	bl	10166 <usb_get_dev_data_by_ep>
	if (common == NULL) {
    6654:	b118      	cbz	r0, 665e <cdc_acm_int_in+0x16>
		return;
	}

	dev_data = CONTAINER_OF(common, struct cdc_acm_dev_data_t, common);

	dev_data->notification_sent = 1U;
    6656:	2201      	movs	r2, #1
    6658:	f800 2c03 	strb.w	r2, [r0, #-3]
	LOG_DBG("CDC_IntIN EP[%x]\r", ep);
}
    665c:	bd10      	pop	{r4, pc}
		LOG_WRN("Device data not found for endpoint %u", ep);
    665e:	f04f 0200 	mov.w	r2, #0
    6662:	2302      	movs	r3, #2
    6664:	f363 0202 	bfi	r2, r3, #0, #3
    6668:	f36f 02c5 	bfc	r2, #3, #3
    666c:	4b06      	ldr	r3, [pc, #24]	; (6688 <cdc_acm_int_in+0x40>)
    666e:	4907      	ldr	r1, [pc, #28]	; (668c <cdc_acm_int_in+0x44>)
    6670:	1a5b      	subs	r3, r3, r1
    6672:	f3c3 03c9 	ubfx	r3, r3, #3, #10
    6676:	f363 128f 	bfi	r2, r3, #6, #10
    667a:	4621      	mov	r1, r4
    667c:	4804      	ldr	r0, [pc, #16]	; (6690 <cdc_acm_int_in+0x48>)
    667e:	f7fe fc65 	bl	4f4c <log_1>
		return;
    6682:	e7eb      	b.n	665c <cdc_acm_int_in+0x14>
    6684:	20001044 	.word	0x20001044
    6688:	00010e04 	.word	0x00010e04
    668c:	00010dd4 	.word	0x00010dd4
    6690:	00012264 	.word	0x00012264

00006694 <cdc_acm_bulk_out>:
{
    6694:	b570      	push	{r4, r5, r6, lr}
    6696:	b082      	sub	sp, #8
    6698:	4606      	mov	r6, r0
	common = usb_get_dev_data_by_ep(&cdc_acm_data_devlist, ep);
    669a:	4601      	mov	r1, r0
    669c:	4831      	ldr	r0, [pc, #196]	; (6764 <cdc_acm_bulk_out+0xd0>)
    669e:	f009 fd62 	bl	10166 <usb_get_dev_data_by_ep>
	if (common == NULL) {
    66a2:	b318      	cbz	r0, 66ec <cdc_acm_bulk_out+0x58>
    66a4:	4604      	mov	r4, r0
	usb_read(ep, NULL, 0, &read);
    66a6:	ab01      	add	r3, sp, #4
    66a8:	2200      	movs	r2, #0
    66aa:	4611      	mov	r1, r2
    66ac:	4630      	mov	r0, r6
    66ae:	f009 fcca 	bl	10046 <usb_read>
	usb_read(ep, dev_data->rx_buf, bytes_to_read, &read);
    66b2:	f1a4 0598 	sub.w	r5, r4, #152	; 0x98
    66b6:	ab01      	add	r3, sp, #4
    66b8:	9a01      	ldr	r2, [sp, #4]
    66ba:	2a80      	cmp	r2, #128	; 0x80
    66bc:	bf28      	it	cs
    66be:	2280      	movcs	r2, #128	; 0x80
    66c0:	4629      	mov	r1, r5
    66c2:	4630      	mov	r0, r6
    66c4:	f009 fcbf 	bl	10046 <usb_read>
	if (!ring_buf_put(dev_data->rx_ringbuf, dev_data->rx_buf, read)) {
    66c8:	9a01      	ldr	r2, [sp, #4]
    66ca:	4629      	mov	r1, r5
    66cc:	f854 0c18 	ldr.w	r0, [r4, #-24]
    66d0:	f7fa fe20 	bl	1314 <ring_buf_put>
    66d4:	b1e8      	cbz	r0, 6712 <cdc_acm_bulk_out+0x7e>
	dev_data->rx_ready = true;
    66d6:	2301      	movs	r3, #1
    66d8:	f804 3c9b 	strb.w	r3, [r4, #-155]
	if (dev_data->cb && dev_data->rx_irq_ena) {
    66dc:	f854 3cb0 	ldr.w	r3, [r4, #-176]
    66e0:	b113      	cbz	r3, 66e8 <cdc_acm_bulk_out+0x54>
    66e2:	f814 3c99 	ldrb.w	r3, [r4, #-153]
    66e6:	bb33      	cbnz	r3, 6736 <cdc_acm_bulk_out+0xa2>
}
    66e8:	b002      	add	sp, #8
    66ea:	bd70      	pop	{r4, r5, r6, pc}
		LOG_WRN("Device data not found for endpoint %u", ep);
    66ec:	f04f 0200 	mov.w	r2, #0
    66f0:	2302      	movs	r3, #2
    66f2:	f363 0202 	bfi	r2, r3, #0, #3
    66f6:	f36f 02c5 	bfc	r2, #3, #3
    66fa:	4b1b      	ldr	r3, [pc, #108]	; (6768 <cdc_acm_bulk_out+0xd4>)
    66fc:	491b      	ldr	r1, [pc, #108]	; (676c <cdc_acm_bulk_out+0xd8>)
    66fe:	1a5b      	subs	r3, r3, r1
    6700:	f3c3 03c9 	ubfx	r3, r3, #3, #10
    6704:	f363 128f 	bfi	r2, r3, #6, #10
    6708:	4631      	mov	r1, r6
    670a:	4819      	ldr	r0, [pc, #100]	; (6770 <cdc_acm_bulk_out+0xdc>)
    670c:	f7fe fc1e 	bl	4f4c <log_1>
		return;
    6710:	e7ea      	b.n	66e8 <cdc_acm_bulk_out+0x54>
		LOG_ERR("Ring buffer full");
    6712:	f04f 0100 	mov.w	r1, #0
    6716:	2301      	movs	r3, #1
    6718:	f363 0102 	bfi	r1, r3, #0, #3
    671c:	f36f 01c5 	bfc	r1, #3, #3
    6720:	4b11      	ldr	r3, [pc, #68]	; (6768 <cdc_acm_bulk_out+0xd4>)
    6722:	4a12      	ldr	r2, [pc, #72]	; (676c <cdc_acm_bulk_out+0xd8>)
    6724:	1a9b      	subs	r3, r3, r2
    6726:	f3c3 03c9 	ubfx	r3, r3, #3, #10
    672a:	f363 118f 	bfi	r1, r3, #6, #10
    672e:	4811      	ldr	r0, [pc, #68]	; (6774 <cdc_acm_bulk_out+0xe0>)
    6730:	f7fe fcde 	bl	50f0 <log_0>
    6734:	e7cf      	b.n	66d6 <cdc_acm_bulk_out+0x42>
		k_work_submit(&dev_data->cb_work);
    6736:	f1a4 01a8 	sub.w	r1, r4, #168	; 0xa8
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    673a:	3ca0      	subs	r4, #160	; 0xa0
    673c:	f3bf 8f5b 	dmb	ish
    6740:	e854 3f00 	ldrex	r3, [r4]
    6744:	f043 0201 	orr.w	r2, r3, #1
    6748:	e844 2000 	strex	r0, r2, [r4]
    674c:	2800      	cmp	r0, #0
    674e:	d1f7      	bne.n	6740 <cdc_acm_bulk_out+0xac>
    6750:	f3bf 8f5b 	dmb	ish
    6754:	f013 0f01 	tst.w	r3, #1
    6758:	d1c6      	bne.n	66e8 <cdc_acm_bulk_out+0x54>
		k_queue_append(&work_q->queue, work);
    675a:	4807      	ldr	r0, [pc, #28]	; (6778 <cdc_acm_bulk_out+0xe4>)
    675c:	f00a f96d 	bl	10a3a <k_queue_append>
    6760:	e7c2      	b.n	66e8 <cdc_acm_bulk_out+0x54>
    6762:	bf00      	nop
    6764:	20001044 	.word	0x20001044
    6768:	00010e04 	.word	0x00010e04
    676c:	00010dd4 	.word	0x00010dd4
    6770:	00012264 	.word	0x00012264
    6774:	00012180 	.word	0x00012180
    6778:	20002738 	.word	0x20002738

0000677c <cdc_acm_dev_status_cb>:
}

static void cdc_acm_dev_status_cb(struct usb_cfg_data *cfg,
				  enum usb_dc_status_code status,
				  const u8_t *param)
{
    677c:	b570      	push	{r4, r5, r6, lr}
    677e:	4604      	mov	r4, r0
    6780:	460d      	mov	r5, r1
    6782:	4616      	mov	r6, r2
	struct cdc_acm_dev_data_t *dev_data;
	struct usb_dev_data *common;

	LOG_DBG("cfg %p status %d", cfg, status);

	common = usb_get_dev_data_by_cfg(&cdc_acm_data_devlist, cfg);
    6784:	4601      	mov	r1, r0
    6786:	480e      	ldr	r0, [pc, #56]	; (67c0 <cdc_acm_dev_status_cb+0x44>)
    6788:	f009 fcc5 	bl	10116 <usb_get_dev_data_by_cfg>
	if (common == NULL) {
    678c:	b128      	cbz	r0, 679a <cdc_acm_dev_status_cb+0x1e>
		return;
	}

	dev_data = CONTAINER_OF(common, struct cdc_acm_dev_data_t, common);

	cdc_acm_do_cb(dev_data, status, param);
    678e:	4632      	mov	r2, r6
    6790:	4629      	mov	r1, r5
    6792:	38b4      	subs	r0, #180	; 0xb4
    6794:	f009 fd09 	bl	101aa <cdc_acm_do_cb>
}
    6798:	bd70      	pop	{r4, r5, r6, pc}
		LOG_WRN("Device data not found for cfg %p", cfg);
    679a:	f04f 0200 	mov.w	r2, #0
    679e:	2302      	movs	r3, #2
    67a0:	f363 0202 	bfi	r2, r3, #0, #3
    67a4:	f36f 02c5 	bfc	r2, #3, #3
    67a8:	4b06      	ldr	r3, [pc, #24]	; (67c4 <cdc_acm_dev_status_cb+0x48>)
    67aa:	4907      	ldr	r1, [pc, #28]	; (67c8 <cdc_acm_dev_status_cb+0x4c>)
    67ac:	1a5b      	subs	r3, r3, r1
    67ae:	f3c3 03c9 	ubfx	r3, r3, #3, #10
    67b2:	f363 128f 	bfi	r2, r3, #6, #10
    67b6:	4621      	mov	r1, r4
    67b8:	4804      	ldr	r0, [pc, #16]	; (67cc <cdc_acm_dev_status_cb+0x50>)
    67ba:	f7fe fbc7 	bl	4f4c <log_1>
		return;
    67be:	e7eb      	b.n	6798 <cdc_acm_dev_status_cb+0x1c>
    67c0:	20001044 	.word	0x20001044
    67c4:	00010e04 	.word	0x00010e04
    67c8:	00010dd4 	.word	0x00010dd4
    67cc:	000121bc 	.word	0x000121bc

000067d0 <cdc_acm_init>:
 * @param dev CDC ACM device struct.
 *
 * @return 0 always.
 */
static int cdc_acm_init(struct device *dev)
{
    67d0:	b570      	push	{r4, r5, r6, lr}
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
    67d2:	6884      	ldr	r4, [r0, #8]
	int ret = 0;

	dev_data->common.dev = dev;
    67d4:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
	sys_slist_append(&cdc_acm_data_devlist, &dev_data->common.node);
    67d8:	f104 03b8 	add.w	r3, r4, #184	; 0xb8
	return node->next;
}

static inline void z_snode_next_set(sys_snode_t *parent, sys_snode_t *child)
{
	parent->next = child;
    67dc:	2200      	movs	r2, #0
    67de:	f8c4 20b8 	str.w	r2, [r4, #184]	; 0xb8
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
    67e2:	4a26      	ldr	r2, [pc, #152]	; (687c <cdc_acm_init+0xac>)
    67e4:	6852      	ldr	r2, [r2, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    67e6:	b30a      	cbz	r2, 682c <cdc_acm_init+0x5c>
	parent->next = child;
    67e8:	6013      	str	r3, [r2, #0]
	list->tail = node;
    67ea:	4a24      	ldr	r2, [pc, #144]	; (687c <cdc_acm_init+0xac>)
    67ec:	6053      	str	r3, [r2, #4]

	LOG_DBG("Device dev %p dev_data %p cfg %p added to devlist %p",
		dev, dev_data, dev->config->config_info, &cdc_acm_data_devlist);

#ifndef CONFIG_USB_COMPOSITE_DEVICE
	struct usb_cfg_data *cfg = (void *)dev->config->config_info;
    67ee:	6803      	ldr	r3, [r0, #0]
    67f0:	689d      	ldr	r5, [r3, #8]

	cfg->interface.payload_data = dev_data->interface_data;
    67f2:	f104 03a0 	add.w	r3, r4, #160	; 0xa0
    67f6:	61eb      	str	r3, [r5, #28]
	cfg->usb_device_description = usb_get_device_descriptor();
    67f8:	f7ff fec0 	bl	657c <usb_get_device_descriptor>
    67fc:	6028      	str	r0, [r5, #0]

	/* Initialize the USB driver with the right configuration */
	ret = usb_set_config(cfg);
    67fe:	4628      	mov	r0, r5
    6800:	f7ff fce2 	bl	61c8 <usb_set_config>
	if (ret < 0) {
    6804:	1e06      	subs	r6, r0, #0
    6806:	db15      	blt.n	6834 <cdc_acm_init+0x64>
		LOG_ERR("Failed to config USB");
		return ret;
	}

	/* Enable USB driver */
	ret = usb_enable(cfg);
    6808:	4628      	mov	r0, r5
    680a:	f7ff fd0d 	bl	6228 <usb_enable>
	if (ret < 0) {
    680e:	1e06      	subs	r6, r0, #0
    6810:	db22      	blt.n	6858 <cdc_acm_init+0x88>
    6812:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    6816:	2100      	movs	r1, #0
    6818:	4819      	ldr	r0, [pc, #100]	; (6880 <cdc_acm_init+0xb0>)
    681a:	f007 fea9 	bl	e570 <z_impl_k_sem_init>
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
    681e:	2300      	movs	r3, #0
    6820:	60e3      	str	r3, [r4, #12]
    6822:	4a18      	ldr	r2, [pc, #96]	; (6884 <cdc_acm_init+0xb4>)
    6824:	6122      	str	r2, [r4, #16]
    6826:	6163      	str	r3, [r4, #20]
#endif
	k_sem_init(&poll_wait_sem, 0, UINT_MAX);
	k_work_init(&dev_data->cb_work, cdc_acm_irq_callback_work_handler);

	return ret;
}
    6828:	4630      	mov	r0, r6
    682a:	bd70      	pop	{r4, r5, r6, pc}
    682c:	4a13      	ldr	r2, [pc, #76]	; (687c <cdc_acm_init+0xac>)
    682e:	6053      	str	r3, [r2, #4]
	list->head = node;
    6830:	6013      	str	r3, [r2, #0]
    6832:	e7dc      	b.n	67ee <cdc_acm_init+0x1e>
		LOG_ERR("Failed to config USB");
    6834:	f04f 0100 	mov.w	r1, #0
    6838:	2301      	movs	r3, #1
    683a:	f363 0102 	bfi	r1, r3, #0, #3
    683e:	f36f 01c5 	bfc	r1, #3, #3
    6842:	4b11      	ldr	r3, [pc, #68]	; (6888 <cdc_acm_init+0xb8>)
    6844:	4a11      	ldr	r2, [pc, #68]	; (688c <cdc_acm_init+0xbc>)
    6846:	1a9b      	subs	r3, r3, r2
    6848:	f3c3 03c9 	ubfx	r3, r3, #3, #10
    684c:	f363 118f 	bfi	r1, r3, #6, #10
    6850:	480f      	ldr	r0, [pc, #60]	; (6890 <cdc_acm_init+0xc0>)
    6852:	f7fe fc4d 	bl	50f0 <log_0>
		return ret;
    6856:	e7e7      	b.n	6828 <cdc_acm_init+0x58>
		LOG_ERR("Failed to enable USB");
    6858:	f04f 0100 	mov.w	r1, #0
    685c:	2301      	movs	r3, #1
    685e:	f363 0102 	bfi	r1, r3, #0, #3
    6862:	f36f 01c5 	bfc	r1, #3, #3
    6866:	4b08      	ldr	r3, [pc, #32]	; (6888 <cdc_acm_init+0xb8>)
    6868:	4a08      	ldr	r2, [pc, #32]	; (688c <cdc_acm_init+0xbc>)
    686a:	1a9b      	subs	r3, r3, r2
    686c:	f3c3 03c9 	ubfx	r3, r3, #3, #10
    6870:	f363 118f 	bfi	r1, r3, #6, #10
    6874:	4807      	ldr	r0, [pc, #28]	; (6894 <cdc_acm_init+0xc4>)
    6876:	f7fe fc3b 	bl	50f0 <log_0>
		return ret;
    687a:	e7d5      	b.n	6828 <cdc_acm_init+0x58>
    687c:	20001044 	.word	0x20001044
    6880:	2000104c 	.word	0x2000104c
    6884:	000101d5 	.word	0x000101d5
    6888:	00010e04 	.word	0x00010e04
    688c:	00010dd4 	.word	0x00010dd4
    6890:	00012234 	.word	0x00012234
    6894:	0001224c 	.word	0x0001224c

00006898 <cdc_acm_send_notification>:
 * @param ep_status Endpoint status code.
 *
 * @return  N/A.
 */
static int cdc_acm_send_notification(struct device *dev, u16_t serial_state)
{
    6898:	b530      	push	{r4, r5, lr}
    689a:	b085      	sub	sp, #20
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
    689c:	6885      	ldr	r5, [r0, #8]
	struct usb_cfg_data * const cfg = (void *)dev->config->config_info;
    689e:	6803      	ldr	r3, [r0, #0]
    68a0:	689b      	ldr	r3, [r3, #8]
	struct cdc_acm_notification notification;
	u32_t cnt = 0U;

	notification.bmRequestType = 0xA1;
    68a2:	22a1      	movs	r2, #161	; 0xa1
    68a4:	f88d 2004 	strb.w	r2, [sp, #4]
	notification.bNotificationType = 0x20;
    68a8:	2220      	movs	r2, #32
    68aa:	f88d 2005 	strb.w	r2, [sp, #5]
	notification.wValue = 0U;
    68ae:	2400      	movs	r4, #0
    68b0:	f8ad 4006 	strh.w	r4, [sp, #6]
	notification.wIndex = 0U;
    68b4:	f8ad 4008 	strh.w	r4, [sp, #8]
	notification.wLength = sys_cpu_to_le16(sizeof(serial_state));
    68b8:	2202      	movs	r2, #2
    68ba:	f8ad 200a 	strh.w	r2, [sp, #10]
	notification.data = sys_cpu_to_le16(serial_state);
    68be:	f8ad 100c 	strh.w	r1, [sp, #12]

	dev_data->notification_sent = 0U;
    68c2:	f885 40b1 	strb.w	r4, [r5, #177]	; 0xb1

	usb_write(cfg->endpoint[ACM_INT_EP_IDX].ep_addr,
    68c6:	6a98      	ldr	r0, [r3, #40]	; 0x28
    68c8:	4623      	mov	r3, r4
    68ca:	220a      	movs	r2, #10
    68cc:	a901      	add	r1, sp, #4
    68ce:	7900      	ldrb	r0, [r0, #4]
    68d0:	f009 fbb5 	bl	1003e <usb_write>
		  (const u8_t *)&notification, sizeof(notification), NULL);

	/* Wait for notification to be sent */
	while (!((volatile u8_t)dev_data->notification_sent)) {
    68d4:	f895 30b1 	ldrb.w	r3, [r5, #177]	; 0xb1
    68d8:	b94b      	cbnz	r3, 68ee <cdc_acm_send_notification+0x56>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_BUSY_WAIT, k_busy_wait, u32_t, usec_to_wait)
    68da:	2001      	movs	r0, #1
    68dc:	f007 ff80 	bl	e7e0 <z_impl_k_busy_wait>
		k_busy_wait(1);

		if (++cnt > CDC_CONTROL_SERIAL_STATE_TIMEOUT_US) {
    68e0:	3401      	adds	r4, #1
    68e2:	4b04      	ldr	r3, [pc, #16]	; (68f4 <cdc_acm_send_notification+0x5c>)
    68e4:	429c      	cmp	r4, r3
    68e6:	d9f5      	bls.n	68d4 <cdc_acm_send_notification+0x3c>
			LOG_DBG("CDC ACM notification timeout!");
			return -EIO;
    68e8:	f06f 0004 	mvn.w	r0, #4
    68ec:	e000      	b.n	68f0 <cdc_acm_send_notification+0x58>
		}
	}

	return 0;
    68ee:	2000      	movs	r0, #0
}
    68f0:	b005      	add	sp, #20
    68f2:	bd30      	pop	{r4, r5, pc}
    68f4:	000186a0 	.word	0x000186a0

000068f8 <cdc_acm_poll_out>:
 * The UART poll method for USB UART is simulated by waiting till
 * we get the next BULK In upcall from the USB device controller or 100 ms.
 */
static void cdc_acm_poll_out(struct device *dev,
				      unsigned char c)
{
    68f8:	b500      	push	{lr}
    68fa:	b083      	sub	sp, #12
    68fc:	f88d 1007 	strb.w	r1, [sp, #7]
	cdc_acm_fifo_fill(dev, &c, 1);
    6900:	2201      	movs	r2, #1
    6902:	f10d 0107 	add.w	r1, sp, #7
    6906:	f009 fcb9 	bl	1027c <cdc_acm_fifo_fill>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout)
    690a:	2164      	movs	r1, #100	; 0x64
    690c:	4802      	ldr	r0, [pc, #8]	; (6918 <cdc_acm_poll_out+0x20>)
    690e:	f007 fe99 	bl	e644 <z_impl_k_sem_take>
	k_sem_take(&poll_wait_sem, K_MSEC(100));
}
    6912:	b003      	add	sp, #12
    6914:	f85d fb04 	ldr.w	pc, [sp], #4
    6918:	2000104c 	.word	0x2000104c

0000691c <cdc_acm_irq_rx_enable>:
{
    691c:	b508      	push	{r3, lr}
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
    691e:	6883      	ldr	r3, [r0, #8]
	dev_data->rx_irq_ena = true;
    6920:	2201      	movs	r2, #1
    6922:	76da      	strb	r2, [r3, #27]
	if (dev_data->cb && dev_data->rx_ready) {
    6924:	685a      	ldr	r2, [r3, #4]
    6926:	b10a      	cbz	r2, 692c <cdc_acm_irq_rx_enable+0x10>
    6928:	7e5a      	ldrb	r2, [r3, #25]
    692a:	b902      	cbnz	r2, 692e <cdc_acm_irq_rx_enable+0x12>
}
    692c:	bd08      	pop	{r3, pc}
		k_work_submit(&dev_data->cb_work);
    692e:	f103 010c 	add.w	r1, r3, #12
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    6932:	3314      	adds	r3, #20
    6934:	f3bf 8f5b 	dmb	ish
    6938:	e853 2f00 	ldrex	r2, [r3]
    693c:	f042 0001 	orr.w	r0, r2, #1
    6940:	e843 0c00 	strex	ip, r0, [r3]
    6944:	f1bc 0f00 	cmp.w	ip, #0
    6948:	d1f6      	bne.n	6938 <cdc_acm_irq_rx_enable+0x1c>
    694a:	f3bf 8f5b 	dmb	ish
    694e:	f012 0f01 	tst.w	r2, #1
    6952:	d1eb      	bne.n	692c <cdc_acm_irq_rx_enable+0x10>
		k_queue_append(&work_q->queue, work);
    6954:	4801      	ldr	r0, [pc, #4]	; (695c <cdc_acm_irq_rx_enable+0x40>)
    6956:	f00a f870 	bl	10a3a <k_queue_append>
}
    695a:	e7e7      	b.n	692c <cdc_acm_irq_rx_enable+0x10>
    695c:	20002738 	.word	0x20002738

00006960 <cdc_acm_irq_tx_enable>:
{
    6960:	b508      	push	{r3, lr}
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
    6962:	6883      	ldr	r3, [r0, #8]
	dev_data->tx_irq_ena = true;
    6964:	2201      	movs	r2, #1
    6966:	769a      	strb	r2, [r3, #26]
	if (dev_data->cb && dev_data->tx_ready) {
    6968:	685a      	ldr	r2, [r3, #4]
    696a:	b10a      	cbz	r2, 6970 <cdc_acm_irq_tx_enable+0x10>
    696c:	7e1a      	ldrb	r2, [r3, #24]
    696e:	b902      	cbnz	r2, 6972 <cdc_acm_irq_tx_enable+0x12>
}
    6970:	bd08      	pop	{r3, pc}
		k_work_submit(&dev_data->cb_work);
    6972:	f103 010c 	add.w	r1, r3, #12
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    6976:	3314      	adds	r3, #20
    6978:	f3bf 8f5b 	dmb	ish
    697c:	e853 2f00 	ldrex	r2, [r3]
    6980:	f042 0001 	orr.w	r0, r2, #1
    6984:	e843 0c00 	strex	ip, r0, [r3]
    6988:	f1bc 0f00 	cmp.w	ip, #0
    698c:	d1f6      	bne.n	697c <cdc_acm_irq_tx_enable+0x1c>
    698e:	f3bf 8f5b 	dmb	ish
    6992:	f012 0f01 	tst.w	r2, #1
    6996:	d1eb      	bne.n	6970 <cdc_acm_irq_tx_enable+0x10>
		k_queue_append(&work_q->queue, work);
    6998:	4801      	ldr	r0, [pc, #4]	; (69a0 <cdc_acm_irq_tx_enable+0x40>)
    699a:	f00a f84e 	bl	10a3a <k_queue_append>
}
    699e:	e7e7      	b.n	6970 <cdc_acm_irq_tx_enable+0x10>
    69a0:	20002738 	.word	0x20002738

000069a4 <cdc_acm_bulk_in>:
{
    69a4:	b538      	push	{r3, r4, r5, lr}
    69a6:	4605      	mov	r5, r0
	common = usb_get_dev_data_by_ep(&cdc_acm_data_devlist, ep);
    69a8:	4601      	mov	r1, r0
    69aa:	481d      	ldr	r0, [pc, #116]	; (6a20 <cdc_acm_bulk_in+0x7c>)
    69ac:	f009 fbdb 	bl	10166 <usb_get_dev_data_by_ep>
	if (common == NULL) {
    69b0:	b168      	cbz	r0, 69ce <cdc_acm_bulk_in+0x2a>
    69b2:	4604      	mov	r4, r0
	dev_data->tx_ready = true;
    69b4:	2301      	movs	r3, #1
    69b6:	f800 3c9c 	strb.w	r3, [r0, #-156]
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem)
    69ba:	481a      	ldr	r0, [pc, #104]	; (6a24 <cdc_acm_bulk_in+0x80>)
    69bc:	f007 fe0e 	bl	e5dc <z_impl_k_sem_give>
	if (dev_data->cb && dev_data->tx_irq_ena) {
    69c0:	f854 3cb0 	ldr.w	r3, [r4, #-176]
    69c4:	b113      	cbz	r3, 69cc <cdc_acm_bulk_in+0x28>
    69c6:	f814 3c9a 	ldrb.w	r3, [r4, #-154]
    69ca:	b99b      	cbnz	r3, 69f4 <cdc_acm_bulk_in+0x50>
}
    69cc:	bd38      	pop	{r3, r4, r5, pc}
		LOG_WRN("Device data not found for endpoint %u", ep);
    69ce:	f04f 0200 	mov.w	r2, #0
    69d2:	2302      	movs	r3, #2
    69d4:	f363 0202 	bfi	r2, r3, #0, #3
    69d8:	f36f 02c5 	bfc	r2, #3, #3
    69dc:	4b12      	ldr	r3, [pc, #72]	; (6a28 <cdc_acm_bulk_in+0x84>)
    69de:	4913      	ldr	r1, [pc, #76]	; (6a2c <cdc_acm_bulk_in+0x88>)
    69e0:	1a5b      	subs	r3, r3, r1
    69e2:	f3c3 03c9 	ubfx	r3, r3, #3, #10
    69e6:	f363 128f 	bfi	r2, r3, #6, #10
    69ea:	4629      	mov	r1, r5
    69ec:	4810      	ldr	r0, [pc, #64]	; (6a30 <cdc_acm_bulk_in+0x8c>)
    69ee:	f7fe faad 	bl	4f4c <log_1>
		return;
    69f2:	e7eb      	b.n	69cc <cdc_acm_bulk_in+0x28>
		k_work_submit(&dev_data->cb_work);
    69f4:	f1a4 01a8 	sub.w	r1, r4, #168	; 0xa8
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    69f8:	3ca0      	subs	r4, #160	; 0xa0
    69fa:	f3bf 8f5b 	dmb	ish
    69fe:	e854 3f00 	ldrex	r3, [r4]
    6a02:	f043 0201 	orr.w	r2, r3, #1
    6a06:	e844 2000 	strex	r0, r2, [r4]
    6a0a:	2800      	cmp	r0, #0
    6a0c:	d1f7      	bne.n	69fe <cdc_acm_bulk_in+0x5a>
    6a0e:	f3bf 8f5b 	dmb	ish
    6a12:	f013 0f01 	tst.w	r3, #1
    6a16:	d1d9      	bne.n	69cc <cdc_acm_bulk_in+0x28>
		k_queue_append(&work_q->queue, work);
    6a18:	4806      	ldr	r0, [pc, #24]	; (6a34 <cdc_acm_bulk_in+0x90>)
    6a1a:	f00a f80e 	bl	10a3a <k_queue_append>
    6a1e:	e7d5      	b.n	69cc <cdc_acm_bulk_in+0x28>
    6a20:	20001044 	.word	0x20001044
    6a24:	2000104c 	.word	0x2000104c
    6a28:	00010e04 	.word	0x00010e04
    6a2c:	00010dd4 	.word	0x00010dd4
    6a30:	00012264 	.word	0x00012264
    6a34:	20002738 	.word	0x20002738

00006a38 <rtt_console_init>:

	return character;
}

static int rtt_console_init(struct device *d)
{
    6a38:	b510      	push	{r4, lr}
	ARG_UNUSED(d);

	__printk_hook_install(rtt_console_out);
    6a3a:	4c04      	ldr	r4, [pc, #16]	; (6a4c <rtt_console_init+0x14>)
    6a3c:	4620      	mov	r0, r4
    6a3e:	f7fa fa8d 	bl	f5c <__printk_hook_install>
	__stdout_hook_install(rtt_console_out);
    6a42:	4620      	mov	r0, r4
    6a44:	f003 fd74 	bl	a530 <__stdout_hook_install>

	return 0;
}
    6a48:	2000      	movs	r0, #0
    6a4a:	bd10      	pop	{r4, pc}
    6a4c:	00006a51 	.word	0x00006a51

00006a50 <rtt_console_out>:
{
    6a50:	b5f0      	push	{r4, r5, r6, r7, lr}
    6a52:	b083      	sub	sp, #12
    6a54:	4607      	mov	r7, r0
	char c = (char)character;
    6a56:	f88d 0007 	strb.w	r0, [sp, #7]
	int max_cnt = CONFIG_RTT_TX_RETRY_CNT;
    6a5a:	2502      	movs	r5, #2
    6a5c:	e006      	b.n	6a6c <rtt_console_out+0x1c>
			host_present = true;
    6a5e:	4b12      	ldr	r3, [pc, #72]	; (6aa8 <rtt_console_out+0x58>)
    6a60:	2201      	movs	r2, #1
    6a62:	701a      	strb	r2, [r3, #0]
    6a64:	e01c      	b.n	6aa0 <rtt_console_out+0x50>
				wait();
    6a66:	f009 fc64 	bl	10332 <wait>
				max_cnt--;
    6a6a:	3d01      	subs	r5, #1
K_SYSCALL_DECLARE2(K_SYSCALL_K_MUTEX_LOCK, k_mutex_lock, int, struct k_mutex *, mutex, s32_t, timeout)
    6a6c:	4c0f      	ldr	r4, [pc, #60]	; (6aac <rtt_console_out+0x5c>)
    6a6e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    6a72:	4620      	mov	r0, r4
    6a74:	f006 f840 	bl	caf8 <z_impl_k_mutex_lock>
		cnt = SEGGER_RTT_WriteNoLock(0, &c, 1);
    6a78:	2201      	movs	r2, #1
    6a7a:	f10d 0107 	add.w	r1, sp, #7
    6a7e:	2000      	movs	r0, #0
    6a80:	f7fe f88a 	bl	4b98 <SEGGER_RTT_WriteNoLock>
    6a84:	4606      	mov	r6, r0
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_UNLOCK, k_mutex_unlock, struct k_mutex *, mutex)
    6a86:	4620      	mov	r0, r4
    6a88:	f006 f93c 	bl	cd04 <z_impl_k_mutex_unlock>
		if (cnt) {
    6a8c:	2e00      	cmp	r6, #0
    6a8e:	d1e6      	bne.n	6a5e <rtt_console_out+0xe>
		} else if (host_present) {
    6a90:	4b05      	ldr	r3, [pc, #20]	; (6aa8 <rtt_console_out+0x58>)
    6a92:	781b      	ldrb	r3, [r3, #0]
    6a94:	b123      	cbz	r3, 6aa0 <rtt_console_out+0x50>
			if (max_cnt) {
    6a96:	2d00      	cmp	r5, #0
    6a98:	d1e5      	bne.n	6a66 <rtt_console_out+0x16>
				host_present = false;
    6a9a:	4b03      	ldr	r3, [pc, #12]	; (6aa8 <rtt_console_out+0x58>)
    6a9c:	2200      	movs	r2, #0
    6a9e:	701a      	strb	r2, [r3, #0]
}
    6aa0:	4638      	mov	r0, r7
    6aa2:	b003      	add	sp, #12
    6aa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6aa6:	bf00      	nop
    6aa8:	200027d0 	.word	0x200027d0
    6aac:	20007490 	.word	0x20007490

00006ab0 <m16src_stop>:
	__asm__ volatile(
    6ab0:	f04f 0320 	mov.w	r3, #32
    6ab4:	f3ef 8111 	mrs	r1, BASEPRI
    6ab8:	f383 8811 	msr	BASEPRI, r3
    6abc:	f3bf 8f6f 	isb	sy
	/* Test for started resource, if so, decrement reference and acquire
	 * resource guard.
	 */
	imask = irq_lock();

	if (!m16src_ref) {
    6ac0:	4b16      	ldr	r3, [pc, #88]	; (6b1c <m16src_stop+0x6c>)
    6ac2:	781a      	ldrb	r2, [r3, #0]
    6ac4:	b19a      	cbz	r2, 6aee <m16src_stop+0x3e>
		irq_unlock(imask);
		return -EALREADY;
	}

	if (--m16src_ref) {
    6ac6:	1e53      	subs	r3, r2, #1
    6ac8:	b2db      	uxtb	r3, r3
    6aca:	4814      	ldr	r0, [pc, #80]	; (6b1c <m16src_stop+0x6c>)
    6acc:	7003      	strb	r3, [r0, #0]
    6ace:	b9ab      	cbnz	r3, 6afc <m16src_stop+0x4c>
		irq_unlock(imask);
		return -EBUSY;
	}

	if (m16src_grd) {
    6ad0:	4b13      	ldr	r3, [pc, #76]	; (6b20 <m16src_stop+0x70>)
    6ad2:	781b      	ldrb	r3, [r3, #0]
    6ad4:	b9cb      	cbnz	r3, 6b0a <m16src_stop+0x5a>
		m16src_ref++;
		irq_unlock(imask);
		return -EAGAIN;
	}

	m16src_grd = 1U;
    6ad6:	4b12      	ldr	r3, [pc, #72]	; (6b20 <m16src_stop+0x70>)
    6ad8:	2201      	movs	r2, #1
    6ada:	701a      	strb	r2, [r3, #0]
	__asm__ volatile(
    6adc:	f381 8811 	msr	BASEPRI, r1
    6ae0:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)NRF_CLOCK + task)) = 0x1UL;
    6ae4:	490f      	ldr	r1, [pc, #60]	; (6b24 <m16src_stop+0x74>)
    6ae6:	600a      	str	r2, [r1, #0]
	/* re-entrancy and mult-context safe, and reference count is zero, */

	nrf_clock_task_trigger(NRF_CLOCK_TASK_HFCLKSTOP);

	/* release resource guard */
	m16src_grd = 0U;
    6ae8:	2000      	movs	r0, #0
    6aea:	7018      	strb	r0, [r3, #0]

	return 0;
}
    6aec:	4770      	bx	lr
    6aee:	f381 8811 	msr	BASEPRI, r1
    6af2:	f3bf 8f6f 	isb	sy
		return -EALREADY;
    6af6:	f06f 0044 	mvn.w	r0, #68	; 0x44
    6afa:	4770      	bx	lr
    6afc:	f381 8811 	msr	BASEPRI, r1
    6b00:	f3bf 8f6f 	isb	sy
		return -EBUSY;
    6b04:	f06f 000f 	mvn.w	r0, #15
    6b08:	4770      	bx	lr
		m16src_ref++;
    6b0a:	4b04      	ldr	r3, [pc, #16]	; (6b1c <m16src_stop+0x6c>)
    6b0c:	701a      	strb	r2, [r3, #0]
    6b0e:	f381 8811 	msr	BASEPRI, r1
    6b12:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
    6b16:	f06f 000a 	mvn.w	r0, #10
    6b1a:	4770      	bx	lr
    6b1c:	200027d3 	.word	0x200027d3
    6b20:	200027d2 	.word	0x200027d2
    6b24:	40000004 	.word	0x40000004

00006b28 <m16src_start>:
{
    6b28:	b510      	push	{r4, lr}
	__asm__ volatile(
    6b2a:	f04f 0320 	mov.w	r3, #32
    6b2e:	f3ef 8411 	mrs	r4, BASEPRI
    6b32:	f383 8811 	msr	BASEPRI, r3
    6b36:	f3bf 8f6f 	isb	sy
	if (m16src_ref++) {
    6b3a:	4a38      	ldr	r2, [pc, #224]	; (6c1c <m16src_start+0xf4>)
    6b3c:	7813      	ldrb	r3, [r2, #0]
    6b3e:	1c58      	adds	r0, r3, #1
    6b40:	7010      	strb	r0, [r2, #0]
    6b42:	bb13      	cbnz	r3, 6b8a <m16src_start+0x62>
	if (m16src_grd) {
    6b44:	4a36      	ldr	r2, [pc, #216]	; (6c20 <m16src_start+0xf8>)
    6b46:	7812      	ldrb	r2, [r2, #0]
    6b48:	bb22      	cbnz	r2, 6b94 <m16src_start+0x6c>
	m16src_grd = 1U;
    6b4a:	4b35      	ldr	r3, [pc, #212]	; (6c20 <m16src_start+0xf8>)
    6b4c:	2201      	movs	r2, #1
    6b4e:	701a      	strb	r2, [r3, #0]
	__asm__ volatile(
    6b50:	f384 8811 	msr	BASEPRI, r4
    6b54:	f3bf 8f6f 	isb	sy
	if (blocking) {
    6b58:	2900      	cmp	r1, #0
    6b5a:	d047      	beq.n	6bec <m16src_start+0xc4>
		irq_disable(DT_NORDIC_NRF_CLOCK_0_IRQ_0);
    6b5c:	2000      	movs	r0, #0
    6b5e:	f002 fcb3 	bl	94c8 <z_arch_irq_disable>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    6b62:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6b66:	2200      	movs	r2, #0
    6b68:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
		intenset = NRF_CLOCK->INTENSET;
    6b6c:	f8d3 1304 	ldr.w	r1, [r3, #772]	; 0x304
    NRF_CLOCK->INTENSET = int_mask;
    6b70:	2201      	movs	r2, #1
    6b72:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)NRF_CLOCK + task)) = 0x1UL;
    6b76:	601a      	str	r2, [r3, #0]
		while (NRF_CLOCK->EVENTS_HFCLKSTARTED == 0) {
    6b78:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6b7c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    6b80:	b98b      	cbnz	r3, 6ba6 <m16src_start+0x7e>
			__WFE();
    6b82:	bf20      	wfe
			__SEV();
    6b84:	bf40      	sev
			__WFE();
    6b86:	bf20      	wfe
    6b88:	e7f6      	b.n	6b78 <m16src_start+0x50>
    6b8a:	f384 8811 	msr	BASEPRI, r4
    6b8e:	f3bf 8f6f 	isb	sy
		goto hf_already_started;
    6b92:	e01d      	b.n	6bd0 <m16src_start+0xa8>
		m16src_ref--;
    6b94:	4a21      	ldr	r2, [pc, #132]	; (6c1c <m16src_start+0xf4>)
    6b96:	7013      	strb	r3, [r2, #0]
    6b98:	f384 8811 	msr	BASEPRI, r4
    6b9c:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
    6ba0:	f06f 000a 	mvn.w	r0, #10
    6ba4:	e021      	b.n	6bea <m16src_start+0xc2>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    6ba6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6baa:	2200      	movs	r2, #0
    6bac:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
		if (!(intenset & CLOCK_INTENSET_HFCLKSTARTED_Msk)) {
    6bb0:	f011 0f01 	tst.w	r1, #1
    6bb4:	d102      	bne.n	6bbc <m16src_start+0x94>
    NRF_CLOCK->INTENCLR = int_mask;
    6bb6:	2201      	movs	r2, #1
    6bb8:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    6bbc:	4b19      	ldr	r3, [pc, #100]	; (6c24 <m16src_start+0xfc>)
    6bbe:	2201      	movs	r2, #1
    6bc0:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
		irq_enable(DT_NORDIC_NRF_CLOCK_0_IRQ_0);
    6bc4:	2000      	movs	r0, #0
    6bc6:	f002 fc6f 	bl	94a8 <z_arch_irq_enable>
	m16src_grd = 0U;
    6bca:	4b15      	ldr	r3, [pc, #84]	; (6c20 <m16src_start+0xf8>)
    6bcc:	2200      	movs	r2, #0
    6bce:	701a      	strb	r2, [r3, #0]
	__ASSERT_NO_MSG(m16src_ref);
    6bd0:	4b12      	ldr	r3, [pc, #72]	; (6c1c <m16src_start+0xf4>)
    6bd2:	781b      	ldrb	r3, [r3, #0]
    6bd4:	b193      	cbz	r3, 6bfc <m16src_start+0xd4>
	if ((NRF_CLOCK->HFCLKSTAT & stat) == stat) {
    6bd6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6bda:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
    6bde:	f003 1301 	and.w	r3, r3, #65537	; 0x10001
    6be2:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
    6be6:	d115      	bne.n	6c14 <m16src_start+0xec>
		return 0;
    6be8:	2000      	movs	r0, #0
}
    6bea:	bd10      	pop	{r4, pc}
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    6bec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6bf0:	2200      	movs	r2, #0
    6bf2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)NRF_CLOCK + task)) = 0x1UL;
    6bf6:	2201      	movs	r2, #1
    6bf8:	601a      	str	r2, [r3, #0]
    6bfa:	e7e6      	b.n	6bca <m16src_start+0xa2>
	__ASSERT_NO_MSG(m16src_ref);
    6bfc:	4c0a      	ldr	r4, [pc, #40]	; (6c28 <m16src_start+0x100>)
    6bfe:	2360      	movs	r3, #96	; 0x60
    6c00:	4622      	mov	r2, r4
    6c02:	490a      	ldr	r1, [pc, #40]	; (6c2c <m16src_start+0x104>)
    6c04:	480a      	ldr	r0, [pc, #40]	; (6c30 <m16src_start+0x108>)
    6c06:	f008 fe3a 	bl	f87e <printk>
    6c0a:	2160      	movs	r1, #96	; 0x60
    6c0c:	4620      	mov	r0, r4
    6c0e:	f008 febc 	bl	f98a <assert_post_action>
    6c12:	e7e0      	b.n	6bd6 <m16src_start+0xae>
		return -EINPROGRESS;
    6c14:	f06f 0043 	mvn.w	r0, #67	; 0x43
    6c18:	e7e7      	b.n	6bea <m16src_start+0xc2>
    6c1a:	bf00      	nop
    6c1c:	200027d3 	.word	0x200027d3
    6c20:	200027d2 	.word	0x200027d2
    6c24:	e000e100 	.word	0xe000e100
    6c28:	000122c4 	.word	0x000122c4
    6c2c:	000122f0 	.word	0x000122f0
    6c30:	00010f8c 	.word	0x00010f8c

00006c34 <k32src_start>:

static int k32src_start(struct device *dev, clock_control_subsys_t sub_system)
{
    6c34:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    6c36:	f04f 0220 	mov.w	r2, #32
    6c3a:	f3ef 8311 	mrs	r3, BASEPRI
    6c3e:	f382 8811 	msr	BASEPRI, r2
    6c42:	f3bf 8f6f 	isb	sy
	 * initialized flag.
	 */

	imask = irq_lock();

	if (k32src_initialized) {
    6c46:	4a31      	ldr	r2, [pc, #196]	; (6d0c <k32src_start+0xd8>)
    6c48:	7812      	ldrb	r2, [r2, #0]
    6c4a:	bb62      	cbnz	r2, 6ca6 <k32src_start+0x72>
		irq_unlock(imask);
		goto lf_already_started;
	}

	k32src_initialized = 1U;
    6c4c:	2401      	movs	r4, #1
    6c4e:	4a2f      	ldr	r2, [pc, #188]	; (6d0c <k32src_start+0xd8>)
    6c50:	7014      	strb	r4, [r2, #0]
	__asm__ volatile(
    6c52:	f383 8811 	msr	BASEPRI, r3
    6c56:	f3bf 8f6f 	isb	sy

	irq_unlock(imask);

	/* Clear events if any */
	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    6c5a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6c5e:	2200      	movs	r2, #0
    6c60:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104

	/* Set LF Clock Source */
	lf_clk_src = POINTER_TO_UINT(sub_system);
	NRF_CLOCK->LFCLKSRC = lf_clk_src;
    6c64:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
    NRF_CLOCK->INTENSET = int_mask;
    6c68:	2502      	movs	r5, #2
    6c6a:	f8c3 5304 	str.w	r5, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)NRF_CLOCK + task)) = 0x1UL;
    6c6e:	4d28      	ldr	r5, [pc, #160]	; (6d10 <k32src_start+0xdc>)
    6c70:	602c      	str	r4, [r5, #0]
    NRF_CLOCK->INTENCLR = int_mask;
    6c72:	2418      	movs	r4, #24
    6c74:	f8c3 4308 	str.w	r4, [r3, #776]	; 0x308
	/* If RC selected, calibrate and start timer for consecutive
	 * calibrations.
	 */
	nrf_clock_int_disable(NRF_CLOCK_INT_DONE_MASK |
			      NRF_CLOCK_INT_CTTO_MASK);
	NRF_CLOCK->EVENTS_DONE = 0;
    6c78:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	NRF_CLOCK->EVENTS_CTTO = 0;
    6c7c:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110

	if ((lf_clk_src & CLOCK_LFCLKSRC_SRC_Msk) == CLOCK_LFCLKSRC_SRC_RC) {
    6c80:	f011 0f03 	tst.w	r1, #3
    6c84:	d113      	bne.n	6cae <k32src_start+0x7a>
		int err;

		/* Set the Calibration Timer Initial Value */
		NRF_CLOCK->CTIV = 16;	/* 4s in 0.25s units */
    6c86:	2210      	movs	r2, #16
    6c88:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    NRF_CLOCK->INTENSET = int_mask;
    6c8c:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
		/* Enable DONE and CTTO IRQs */
		nrf_clock_int_enable(NRF_CLOCK_INT_DONE_MASK |
				     NRF_CLOCK_INT_CTTO_MASK);

		/* If non-blocking LF clock start, then start HF clock in ISR */
		if ((NRF_CLOCK->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk) == 0) {
    6c90:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
    6c94:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    6c98:	d117      	bne.n	6cca <k32src_start+0x96>
    6c9a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6c9e:	2202      	movs	r2, #2
    6ca0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
			nrf_clock_int_enable(NRF_CLOCK_INT_LF_STARTED_MASK);
			goto lf_already_started;
    6ca4:	e003      	b.n	6cae <k32src_start+0x7a>
    6ca6:	f383 8811 	msr	BASEPRI, r3
    6caa:	f3bf 8f6f 	isb	sy
		}
	}
#endif /* NRF_CLOCK_HAS_CALIBRATION */

lf_already_started:
	stat = (NRF_CLOCK->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk) |
    6cae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    6cb2:	f8d2 341c 	ldr.w	r3, [r2, #1052]	; 0x41c
    6cb6:	f003 0303 	and.w	r3, r3, #3
    6cba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
	       CLOCK_LFCLKSTAT_STATE_Msk;
	if ((NRF_CLOCK->LFCLKSTAT & stat) == stat) {
    6cbe:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
    6cc2:	4393      	bics	r3, r2
    6cc4:	d11e      	bne.n	6d04 <k32src_start+0xd0>
		return 0;
    6cc6:	2000      	movs	r0, #0
	} else {
		return -EINPROGRESS;
	}
}
    6cc8:	bd38      	pop	{r3, r4, r5, pc}
    6cca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6cce:	2201      	movs	r2, #1
    6cd0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		err = m16src_start(dev, false);
    6cd4:	2100      	movs	r1, #0
    6cd6:	f7ff ff27 	bl	6b28 <m16src_start>
		if (!err) {
    6cda:	b920      	cbnz	r0, 6ce6 <k32src_start+0xb2>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6cdc:	4b0d      	ldr	r3, [pc, #52]	; (6d14 <k32src_start+0xe0>)
    6cde:	2201      	movs	r2, #1
    6ce0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    6ce4:	e7e3      	b.n	6cae <k32src_start+0x7a>
			__ASSERT_NO_MSG(err == -EINPROGRESS);
    6ce6:	f110 0f44 	cmn.w	r0, #68	; 0x44
    6cea:	d0e0      	beq.n	6cae <k32src_start+0x7a>
    6cec:	4c0a      	ldr	r4, [pc, #40]	; (6d18 <k32src_start+0xe4>)
    6cee:	23ff      	movs	r3, #255	; 0xff
    6cf0:	4622      	mov	r2, r4
    6cf2:	490a      	ldr	r1, [pc, #40]	; (6d1c <k32src_start+0xe8>)
    6cf4:	480a      	ldr	r0, [pc, #40]	; (6d20 <k32src_start+0xec>)
    6cf6:	f008 fdc2 	bl	f87e <printk>
    6cfa:	21ff      	movs	r1, #255	; 0xff
    6cfc:	4620      	mov	r0, r4
    6cfe:	f008 fe44 	bl	f98a <assert_post_action>
    6d02:	e7d4      	b.n	6cae <k32src_start+0x7a>
		return -EINPROGRESS;
    6d04:	f06f 0043 	mvn.w	r0, #67	; 0x43
    6d08:	e7de      	b.n	6cc8 <k32src_start+0x94>
    6d0a:	bf00      	nop
    6d0c:	200027d1 	.word	0x200027d1
    6d10:	40000008 	.word	0x40000008
    6d14:	e000e100 	.word	0xe000e100
    6d18:	000122c4 	.word	0x000122c4
    6d1c:	000122b8 	.word	0x000122b8
    6d20:	00010f8c 	.word	0x00010f8c

00006d24 <nrf_power_clock_isr>:
 * probably better abstract that at some point (e.g. query and reset
 * it by pointer at runtime, maybe?) so we don't have this leaky
 * symbol.
 */
void nrf_power_clock_isr(void *arg)
{
    6d24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6d28:	b089      	sub	sp, #36	; 0x24
    6d2a:	9002      	str	r0, [sp, #8]
#endif
#if defined(CONFIG_USB) && defined(CONFIG_SOC_NRF52840)
	bool usb_detected, usb_pwr_rdy, usb_removed;
#endif

	pof = (NRF_POWER->EVENTS_POFWARN != 0);
    6d2c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6d30:	f8d3 6108 	ldr.w	r6, [r3, #264]	; 0x108

	hf_intenset = ((NRF_CLOCK->INTENSET &
    6d34:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
    6d38:	f004 0401 	and.w	r4, r4, #1
		       CLOCK_INTENSET_HFCLKSTARTED_Msk) != 0);
	hf = (NRF_CLOCK->EVENTS_HFCLKSTARTED != 0);
    6d3c:	f8d3 5100 	ldr.w	r5, [r3, #256]	; 0x100

	lf_intenset = ((NRF_CLOCK->INTENSET &
    6d40:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
    6d44:	f002 0202 	and.w	r2, r2, #2
    6d48:	9203      	str	r2, [sp, #12]
		       CLOCK_INTENSET_LFCLKSTARTED_Msk) != 0);
	lf = (NRF_CLOCK->EVENTS_LFCLKSTARTED != 0);
    6d4a:	f8d3 8104 	ldr.w	r8, [r3, #260]	; 0x104

#if NRF_CLOCK_HAS_CALIBRATION
	done = (NRF_CLOCK->EVENTS_DONE != 0);
    6d4e:	f8d3 910c 	ldr.w	r9, [r3, #268]	; 0x10c
	ctto = (NRF_CLOCK->EVENTS_CTTO != 0);
    6d52:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
    6d56:	1c1f      	adds	r7, r3, #0
    6d58:	bf18      	it	ne
    6d5a:	2701      	movne	r7, #1
    return (bool)*(volatile uint32_t *)((uint8_t *)NRF_POWER + (uint32_t)event);
    6d5c:	4a68      	ldr	r2, [pc, #416]	; (6f00 <nrf_power_clock_isr+0x1dc>)
    6d5e:	f8d2 a000 	ldr.w	sl, [r2]
    6d62:	3208      	adds	r2, #8
    6d64:	f8d2 b000 	ldr.w	fp, [r2]
    6d68:	3a04      	subs	r2, #4
    6d6a:	6812      	ldr	r2, [r2, #0]
    6d6c:	9201      	str	r2, [sp, #4]
	usb_detected = nrf_power_event_check(NRF_POWER_EVENT_USBDETECTED);
	usb_pwr_rdy = nrf_power_event_check(NRF_POWER_EVENT_USBPWRRDY);
	usb_removed = nrf_power_event_check(NRF_POWER_EVENT_USBREMOVED);
#endif

	__ASSERT_NO_MSG(pof || hf || hf_intenset || lf
    6d6e:	b986      	cbnz	r6, 6d92 <nrf_power_clock_isr+0x6e>
    6d70:	b97d      	cbnz	r5, 6d92 <nrf_power_clock_isr+0x6e>
    6d72:	b974      	cbnz	r4, 6d92 <nrf_power_clock_isr+0x6e>
    6d74:	f1b8 0f00 	cmp.w	r8, #0
    6d78:	d10b      	bne.n	6d92 <nrf_power_clock_isr+0x6e>
    6d7a:	f1b9 0f00 	cmp.w	r9, #0
    6d7e:	d108      	bne.n	6d92 <nrf_power_clock_isr+0x6e>
    6d80:	b93b      	cbnz	r3, 6d92 <nrf_power_clock_isr+0x6e>
    6d82:	f1ba 0f00 	cmp.w	sl, #0
    6d86:	d104      	bne.n	6d92 <nrf_power_clock_isr+0x6e>
    6d88:	f1bb 0f00 	cmp.w	fp, #0
    6d8c:	d101      	bne.n	6d92 <nrf_power_clock_isr+0x6e>
    6d8e:	2a00      	cmp	r2, #0
    6d90:	d045      	beq.n	6e1e <nrf_power_clock_isr+0xfa>
#if defined(CONFIG_USB) && defined(CONFIG_SOC_NRF52840)
			|| usb_detected || usb_pwr_rdy || usb_removed
#endif
	);

	if (pof) {
    6d92:	b126      	cbz	r6, 6d9e <nrf_power_clock_isr+0x7a>
		NRF_POWER->EVENTS_POFWARN = 0;
    6d94:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6d98:	2200      	movs	r2, #0
    6d9a:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	}

	if (hf) {
    6d9e:	b125      	cbz	r5, 6daa <nrf_power_clock_isr+0x86>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    6da0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6da4:	2200      	movs	r2, #0
    6da6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	}

	if (hf_intenset && (hf || ((NRF_CLOCK->HFCLKSTAT &
    6daa:	b194      	cbz	r4, 6dd2 <nrf_power_clock_isr+0xae>
    6dac:	b945      	cbnz	r5, 6dc0 <nrf_power_clock_isr+0x9c>
    6dae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6db2:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
    6db6:	f003 1301 	and.w	r3, r3, #65537	; 0x10001
    6dba:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
    6dbe:	d108      	bne.n	6dd2 <nrf_power_clock_isr+0xae>
				   (CLOCK_HFCLKSTAT_STATE_Msk |
				    CLOCK_HFCLKSTAT_SRC_Msk)))){
		/* INTENSET is used as state flag to start calibration,
		 * hence clear it here.
		 */
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_HFCLKSTARTED_Msk;
    6dc0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6dc4:	2201      	movs	r2, #1
    6dc6:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
#if defined(CONFIG_SOC_SERIES_NRF52X)
		/* NOTE: Errata [192] CLOCK: LFRC frequency offset after
		 * calibration.
		 * Calibration start, workaround.
		 */
		*(volatile u32_t *)0x40000C34 = 0x00000002;
    6dca:	494e      	ldr	r1, [pc, #312]	; (6f04 <nrf_power_clock_isr+0x1e0>)
    6dcc:	2002      	movs	r0, #2
    6dce:	6008      	str	r0, [r1, #0]
#endif /* CONFIG_SOC_SERIES_NRF52X */

#if NRF_CLOCK_HAS_CALIBRATION
		/* Start Calibration */
		NRF_CLOCK->TASKS_CAL = 1;
    6dd0:	611a      	str	r2, [r3, #16]
#endif
	}

	if (lf) {
    6dd2:	f1b8 0f00 	cmp.w	r8, #0
    6dd6:	d011      	beq.n	6dfc <nrf_power_clock_isr+0xd8>
		NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    6dd8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6ddc:	2200      	movs	r2, #0
    6dde:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104

		if (lf_intenset) {
    6de2:	9b03      	ldr	r3, [sp, #12]
    6de4:	b153      	cbz	r3, 6dfc <nrf_power_clock_isr+0xd8>
			/* INTENSET is used as state flag to start calibration,
			 * hence clear it here.
			 */
			NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_LFCLKSTARTED_Msk;
    6de6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6dea:	2202      	movs	r2, #2
    6dec:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308

#if NRF_CLOCK_HAS_CALIBRATION
			/* Start HF Clock if LF RC is used. */
			if ((NRF_CLOCK->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk) ==
    6df0:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    6df4:	f013 0f03 	tst.w	r3, #3
    6df8:	d100      	bne.n	6dfc <nrf_power_clock_isr+0xd8>
			    CLOCK_LFCLKSRCCOPY_SRC_RC) {
				ctto = 1U;
    6dfa:	2701      	movs	r7, #1
#endif
		}
	}

#if NRF_CLOCK_HAS_CALIBRATION
	if (done) {
    6dfc:	f1b9 0f00 	cmp.w	r9, #0
    6e00:	d11a      	bne.n	6e38 <nrf_power_clock_isr+0x114>

		/* Start timer for next calibration. */
		NRF_CLOCK->TASKS_CTSTART = 1;
	}

	if (ctto) {
    6e02:	2f00      	cmp	r7, #0
    6e04:	d139      	bne.n	6e7a <nrf_power_clock_isr+0x156>
		}
	}
#endif /* NRF_CLOCK_HAS_CALIBRATION */

#if defined(CONFIG_USB) && defined(CONFIG_SOC_NRF52840)
	if (usb_detected) {
    6e06:	f1ba 0f00 	cmp.w	sl, #0
    6e0a:	d158      	bne.n	6ebe <nrf_power_clock_isr+0x19a>
		nrf_power_event_clear(NRF_POWER_EVENT_USBDETECTED);
		power_event_cb(NRF_POWER_EVENT_USBDETECTED);
	}

	if (usb_pwr_rdy) {
    6e0c:	f1bb 0f00 	cmp.w	fp, #0
    6e10:	d160      	bne.n	6ed4 <nrf_power_clock_isr+0x1b0>
		nrf_power_event_clear(NRF_POWER_EVENT_USBPWRRDY);
		power_event_cb(NRF_POWER_EVENT_USBPWRRDY);
	}

	if (usb_removed) {
    6e12:	9b01      	ldr	r3, [sp, #4]
    6e14:	2b00      	cmp	r3, #0
    6e16:	d168      	bne.n	6eea <nrf_power_clock_isr+0x1c6>
		nrf_power_event_clear(NRF_POWER_EVENT_USBREMOVED);
		power_event_cb(NRF_POWER_EVENT_USBREMOVED);
	}
#endif
}
    6e18:	b009      	add	sp, #36	; 0x24
    6e1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	__ASSERT_NO_MSG(pof || hf || hf_intenset || lf
    6e1e:	f240 1345 	movw	r3, #325	; 0x145
    6e22:	4a39      	ldr	r2, [pc, #228]	; (6f08 <nrf_power_clock_isr+0x1e4>)
    6e24:	4939      	ldr	r1, [pc, #228]	; (6f0c <nrf_power_clock_isr+0x1e8>)
    6e26:	483a      	ldr	r0, [pc, #232]	; (6f10 <nrf_power_clock_isr+0x1ec>)
    6e28:	f008 fd29 	bl	f87e <printk>
    6e2c:	f240 1145 	movw	r1, #325	; 0x145
    6e30:	4835      	ldr	r0, [pc, #212]	; (6f08 <nrf_power_clock_isr+0x1e4>)
    6e32:	f008 fdaa 	bl	f98a <assert_post_action>
    6e36:	e7ac      	b.n	6d92 <nrf_power_clock_isr+0x6e>
		*(volatile u32_t *)0x40000C34 = 0x00000000;
    6e38:	2100      	movs	r1, #0
    6e3a:	4b32      	ldr	r3, [pc, #200]	; (6f04 <nrf_power_clock_isr+0x1e0>)
    6e3c:	6019      	str	r1, [r3, #0]
		NRF_CLOCK->EVENTS_DONE = 0;
    6e3e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6e42:	f8c3 110c 	str.w	r1, [r3, #268]	; 0x10c
		err = m16src_stop(dev, NULL);
    6e46:	9802      	ldr	r0, [sp, #8]
    6e48:	f7ff fe32 	bl	6ab0 <m16src_stop>
		__ASSERT_NO_MSG(!err || err == -EBUSY);
    6e4c:	b110      	cbz	r0, 6e54 <nrf_power_clock_isr+0x130>
    6e4e:	f110 0f10 	cmn.w	r0, #16
    6e52:	d104      	bne.n	6e5e <nrf_power_clock_isr+0x13a>
		NRF_CLOCK->TASKS_CTSTART = 1;
    6e54:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6e58:	2201      	movs	r2, #1
    6e5a:	615a      	str	r2, [r3, #20]
    6e5c:	e7d1      	b.n	6e02 <nrf_power_clock_isr+0xde>
		__ASSERT_NO_MSG(!err || err == -EBUSY);
    6e5e:	4c2a      	ldr	r4, [pc, #168]	; (6f08 <nrf_power_clock_isr+0x1e4>)
    6e60:	f44f 73c5 	mov.w	r3, #394	; 0x18a
    6e64:	4622      	mov	r2, r4
    6e66:	492b      	ldr	r1, [pc, #172]	; (6f14 <nrf_power_clock_isr+0x1f0>)
    6e68:	4829      	ldr	r0, [pc, #164]	; (6f10 <nrf_power_clock_isr+0x1ec>)
    6e6a:	f008 fd08 	bl	f87e <printk>
    6e6e:	f44f 71c5 	mov.w	r1, #394	; 0x18a
    6e72:	4620      	mov	r0, r4
    6e74:	f008 fd89 	bl	f98a <assert_post_action>
    6e78:	e7ec      	b.n	6e54 <nrf_power_clock_isr+0x130>
		NRF_CLOCK->EVENTS_CTTO = 0;
    6e7a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6e7e:	2100      	movs	r1, #0
    6e80:	f8c3 1110 	str.w	r1, [r3, #272]	; 0x110
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    6e84:	2201      	movs	r2, #1
    6e86:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		err = m16src_start(dev, false);
    6e8a:	9802      	ldr	r0, [sp, #8]
    6e8c:	f7ff fe4c 	bl	6b28 <m16src_start>
		if (!err) {
    6e90:	b920      	cbnz	r0, 6e9c <nrf_power_clock_isr+0x178>
    6e92:	4b21      	ldr	r3, [pc, #132]	; (6f18 <nrf_power_clock_isr+0x1f4>)
    6e94:	2201      	movs	r2, #1
    6e96:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    6e9a:	e7b4      	b.n	6e06 <nrf_power_clock_isr+0xe2>
			__ASSERT_NO_MSG(err == -EINPROGRESS);
    6e9c:	f110 0f44 	cmn.w	r0, #68	; 0x44
    6ea0:	d0b1      	beq.n	6e06 <nrf_power_clock_isr+0xe2>
    6ea2:	4c19      	ldr	r4, [pc, #100]	; (6f08 <nrf_power_clock_isr+0x1e4>)
    6ea4:	f240 139f 	movw	r3, #415	; 0x19f
    6ea8:	4622      	mov	r2, r4
    6eaa:	491c      	ldr	r1, [pc, #112]	; (6f1c <nrf_power_clock_isr+0x1f8>)
    6eac:	4818      	ldr	r0, [pc, #96]	; (6f10 <nrf_power_clock_isr+0x1ec>)
    6eae:	f008 fce6 	bl	f87e <printk>
    6eb2:	f240 119f 	movw	r1, #415	; 0x19f
    6eb6:	4620      	mov	r0, r4
    6eb8:	f008 fd67 	bl	f98a <assert_post_action>
    6ebc:	e7a3      	b.n	6e06 <nrf_power_clock_isr+0xe2>
    *((volatile uint32_t *)((uint8_t *)NRF_POWER + (uint32_t)event)) = 0x0UL;
    6ebe:	4b10      	ldr	r3, [pc, #64]	; (6f00 <nrf_power_clock_isr+0x1dc>)
    6ec0:	2200      	movs	r2, #0
    6ec2:	601a      	str	r2, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)NRF_POWER + (uint32_t)event));
    6ec4:	681b      	ldr	r3, [r3, #0]
    6ec6:	9305      	str	r3, [sp, #20]
    (void)dummy;
    6ec8:	9b05      	ldr	r3, [sp, #20]
	usb_dc_nrfx_power_event_callback(event);
    6eca:	f44f 708e 	mov.w	r0, #284	; 0x11c
    6ece:	f001 fa2b 	bl	8328 <usb_dc_nrfx_power_event_callback>
    6ed2:	e79b      	b.n	6e0c <nrf_power_clock_isr+0xe8>
    *((volatile uint32_t *)((uint8_t *)NRF_POWER + (uint32_t)event)) = 0x0UL;
    6ed4:	4b12      	ldr	r3, [pc, #72]	; (6f20 <nrf_power_clock_isr+0x1fc>)
    6ed6:	2200      	movs	r2, #0
    6ed8:	601a      	str	r2, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)NRF_POWER + (uint32_t)event));
    6eda:	681b      	ldr	r3, [r3, #0]
    6edc:	9306      	str	r3, [sp, #24]
    (void)dummy;
    6ede:	9b06      	ldr	r3, [sp, #24]
    6ee0:	f44f 7092 	mov.w	r0, #292	; 0x124
    6ee4:	f001 fa20 	bl	8328 <usb_dc_nrfx_power_event_callback>
    6ee8:	e793      	b.n	6e12 <nrf_power_clock_isr+0xee>
    *((volatile uint32_t *)((uint8_t *)NRF_POWER + (uint32_t)event)) = 0x0UL;
    6eea:	4b0e      	ldr	r3, [pc, #56]	; (6f24 <nrf_power_clock_isr+0x200>)
    6eec:	2200      	movs	r2, #0
    6eee:	601a      	str	r2, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)NRF_POWER + (uint32_t)event));
    6ef0:	681b      	ldr	r3, [r3, #0]
    6ef2:	9307      	str	r3, [sp, #28]
    (void)dummy;
    6ef4:	9b07      	ldr	r3, [sp, #28]
    6ef6:	f44f 7090 	mov.w	r0, #288	; 0x120
    6efa:	f001 fa15 	bl	8328 <usb_dc_nrfx_power_event_callback>
}
    6efe:	e78b      	b.n	6e18 <nrf_power_clock_isr+0xf4>
    6f00:	4000011c 	.word	0x4000011c
    6f04:	40000c34 	.word	0x40000c34
    6f08:	000122c4 	.word	0x000122c4
    6f0c:	000122fc 	.word	0x000122fc
    6f10:	00010f8c 	.word	0x00010f8c
    6f14:	0001235c 	.word	0x0001235c
    6f18:	e000e100 	.word	0xe000e100
    6f1c:	000122b8 	.word	0x000122b8
    6f20:	40000124 	.word	0x40000124
    6f24:	40000120 	.word	0x40000120

00006f28 <endpoint_ctx>:
	if (!ep_is_valid(ep)) {
		return NULL;
	}

	ctx = get_usbd_ctx();
	ep_num = NRF_USBD_EP_NR_GET(ep);
    6f28:	f000 030f 	and.w	r3, r0, #15

	if (NRF_USBD_EPIN_CHECK(ep)) {
    6f2c:	f010 0f80 	tst.w	r0, #128	; 0x80
    6f30:	d10b      	bne.n	6f4a <endpoint_ctx+0x22>
			return &ctx->ep_ctx[EP_ISOIN_INDEX];
		} else {
			return &ctx->ep_ctx[ep_num];
		}
	} else {
		if (unlikely(NRF_USBD_EPISO_CHECK(ep))) {
    6f32:	f010 0f08 	tst.w	r0, #8
    6f36:	d115      	bne.n	6f64 <endpoint_ctx+0x3c>
			return &ctx->ep_ctx[EP_ISOOUT_INDEX];
		} else {
			return &ctx->ep_ctx[CFG_EPIN_CNT +
					    CFG_EP_ISOIN_CNT +
    6f38:	3309      	adds	r3, #9
			return &ctx->ep_ctx[CFG_EPIN_CNT +
    6f3a:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
    6f3e:	0098      	lsls	r0, r3, #2
    6f40:	f100 0328 	add.w	r3, r0, #40	; 0x28
    6f44:	4808      	ldr	r0, [pc, #32]	; (6f68 <endpoint_ctx+0x40>)
    6f46:	4418      	add	r0, r3
    6f48:	4770      	bx	lr
		if (unlikely(NRF_USBD_EPISO_CHECK(ep))) {
    6f4a:	f010 0f08 	tst.w	r0, #8
    6f4e:	d107      	bne.n	6f60 <endpoint_ctx+0x38>
			return &ctx->ep_ctx[ep_num];
    6f50:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
    6f54:	0098      	lsls	r0, r3, #2
    6f56:	f100 0328 	add.w	r3, r0, #40	; 0x28
    6f5a:	4803      	ldr	r0, [pc, #12]	; (6f68 <endpoint_ctx+0x40>)
    6f5c:	4418      	add	r0, r3
    6f5e:	4770      	bx	lr
			return &ctx->ep_ctx[EP_ISOIN_INDEX];
    6f60:	4802      	ldr	r0, [pc, #8]	; (6f6c <endpoint_ctx+0x44>)
    6f62:	4770      	bx	lr
			return &ctx->ep_ctx[EP_ISOOUT_INDEX];
    6f64:	4802      	ldr	r0, [pc, #8]	; (6f70 <endpoint_ctx+0x48>)
					    ep_num];
		}
	}

	return NULL;
}
    6f66:	4770      	bx	lr
    6f68:	20001fbc 	.word	0x20001fbc
    6f6c:	20002104 	.word	0x20002104
    6f70:	20002248 	.word	0x20002248

00006f74 <eps_ctx_init>:
 * Endpoint buffers are allocated during the first call of this function.
 * This function may also be called again on every USB reset event
 * to reinitialize the state of all endpoints.
 */
static int eps_ctx_init(void)
{
    6f74:	b570      	push	{r4, r5, r6, lr}
	struct nrf_usbd_ep_ctx *ep_ctx;
	int err;
	u32_t i;

	for (i = 0U; i < CFG_EPIN_CNT; i++) {
    6f76:	2400      	movs	r4, #0
    6f78:	e011      	b.n	6f9e <eps_ctx_init+0x2a>
		ep_ctx = in_endpoint_ctx(i);
		__ASSERT_NO_MSG(ep_ctx);
    6f7a:	4e71      	ldr	r6, [pc, #452]	; (7140 <eps_ctx_init+0x1cc>)
    6f7c:	f44f 7325 	mov.w	r3, #660	; 0x294
    6f80:	4632      	mov	r2, r6
    6f82:	4970      	ldr	r1, [pc, #448]	; (7144 <eps_ctx_init+0x1d0>)
    6f84:	4870      	ldr	r0, [pc, #448]	; (7148 <eps_ctx_init+0x1d4>)
    6f86:	f008 fc7a 	bl	f87e <printk>
    6f8a:	f44f 7125 	mov.w	r1, #660	; 0x294
    6f8e:	4630      	mov	r0, r6
    6f90:	f008 fcfb 	bl	f98a <assert_post_action>
    6f94:	e00b      	b.n	6fae <eps_ctx_init+0x3a>
				LOG_ERR("EP buffer alloc failed for EPIN%d", i);
				return -ENOMEM;
			}
		}

		ep_ctx_reset(ep_ctx);
    6f96:	4628      	mov	r0, r5
    6f98:	f009 f9fc 	bl	10394 <ep_ctx_reset>
	for (i = 0U; i < CFG_EPIN_CNT; i++) {
    6f9c:	3401      	adds	r4, #1
    6f9e:	2c07      	cmp	r4, #7
    6fa0:	d825      	bhi.n	6fee <eps_ctx_init+0x7a>
		ep_ctx = in_endpoint_ctx(i);
    6fa2:	b2e0      	uxtb	r0, r4
    6fa4:	f009 f9ec 	bl	10380 <in_endpoint_ctx>
		__ASSERT_NO_MSG(ep_ctx);
    6fa8:	4605      	mov	r5, r0
    6faa:	2800      	cmp	r0, #0
    6fac:	d0e5      	beq.n	6f7a <eps_ctx_init+0x6>
		if (!ep_ctx->buf.block.data) {
    6fae:	692b      	ldr	r3, [r5, #16]
    6fb0:	2b00      	cmp	r3, #0
    6fb2:	d1f0      	bne.n	6f96 <eps_ctx_init+0x22>
			err = k_mem_pool_alloc(&ep_buf_pool, &ep_ctx->buf.block,
    6fb4:	2240      	movs	r2, #64	; 0x40
    6fb6:	f105 0110 	add.w	r1, r5, #16
    6fba:	4864      	ldr	r0, [pc, #400]	; (714c <eps_ctx_init+0x1d8>)
    6fbc:	f005 fc98 	bl	c8f0 <k_mem_pool_alloc>
			if (err < 0) {
    6fc0:	2800      	cmp	r0, #0
    6fc2:	dae8      	bge.n	6f96 <eps_ctx_init+0x22>
				LOG_ERR("EP buffer alloc failed for EPIN%d", i);
    6fc4:	f04f 0200 	mov.w	r2, #0
    6fc8:	2301      	movs	r3, #1
    6fca:	f363 0202 	bfi	r2, r3, #0, #3
    6fce:	f36f 02c5 	bfc	r2, #3, #3
    6fd2:	4b5f      	ldr	r3, [pc, #380]	; (7150 <eps_ctx_init+0x1dc>)
    6fd4:	495f      	ldr	r1, [pc, #380]	; (7154 <eps_ctx_init+0x1e0>)
    6fd6:	1a5b      	subs	r3, r3, r1
    6fd8:	f3c3 03c9 	ubfx	r3, r3, #3, #10
    6fdc:	f363 128f 	bfi	r2, r3, #6, #10
    6fe0:	4621      	mov	r1, r4
    6fe2:	485d      	ldr	r0, [pc, #372]	; (7158 <eps_ctx_init+0x1e4>)
    6fe4:	f7fd ffb2 	bl	4f4c <log_1>
				return -ENOMEM;
    6fe8:	f06f 000b 	mvn.w	r0, #11
    6fec:	e051      	b.n	7092 <eps_ctx_init+0x11e>
	}

	for (i = 0U; i < CFG_EPOUT_CNT; i++) {
    6fee:	2400      	movs	r4, #0
    6ff0:	e011      	b.n	7016 <eps_ctx_init+0xa2>
		ep_ctx = out_endpoint_ctx(i);
		__ASSERT_NO_MSG(ep_ctx);
    6ff2:	4e53      	ldr	r6, [pc, #332]	; (7140 <eps_ctx_init+0x1cc>)
    6ff4:	f44f 7329 	mov.w	r3, #676	; 0x2a4
    6ff8:	4632      	mov	r2, r6
    6ffa:	4952      	ldr	r1, [pc, #328]	; (7144 <eps_ctx_init+0x1d0>)
    6ffc:	4852      	ldr	r0, [pc, #328]	; (7148 <eps_ctx_init+0x1d4>)
    6ffe:	f008 fc3e 	bl	f87e <printk>
    7002:	f44f 7129 	mov.w	r1, #676	; 0x2a4
    7006:	4630      	mov	r0, r6
    7008:	f008 fcbf 	bl	f98a <assert_post_action>
    700c:	e00b      	b.n	7026 <eps_ctx_init+0xb2>
				LOG_ERR("EP buffer alloc failed for EPOUT%d", i);
				return -ENOMEM;
			}
		}

		ep_ctx_reset(ep_ctx);
    700e:	4628      	mov	r0, r5
    7010:	f009 f9c0 	bl	10394 <ep_ctx_reset>
	for (i = 0U; i < CFG_EPOUT_CNT; i++) {
    7014:	3401      	adds	r4, #1
    7016:	2c07      	cmp	r4, #7
    7018:	d825      	bhi.n	7066 <eps_ctx_init+0xf2>
		ep_ctx = out_endpoint_ctx(i);
    701a:	b2e0      	uxtb	r0, r4
    701c:	f009 f9b6 	bl	1038c <out_endpoint_ctx>
		__ASSERT_NO_MSG(ep_ctx);
    7020:	4605      	mov	r5, r0
    7022:	2800      	cmp	r0, #0
    7024:	d0e5      	beq.n	6ff2 <eps_ctx_init+0x7e>
		if (!ep_ctx->buf.block.data) {
    7026:	692b      	ldr	r3, [r5, #16]
    7028:	2b00      	cmp	r3, #0
    702a:	d1f0      	bne.n	700e <eps_ctx_init+0x9a>
			err = k_mem_pool_alloc(&ep_buf_pool, &ep_ctx->buf.block,
    702c:	2240      	movs	r2, #64	; 0x40
    702e:	f105 0110 	add.w	r1, r5, #16
    7032:	4846      	ldr	r0, [pc, #280]	; (714c <eps_ctx_init+0x1d8>)
    7034:	f005 fc5c 	bl	c8f0 <k_mem_pool_alloc>
			if (err < 0) {
    7038:	2800      	cmp	r0, #0
    703a:	dae8      	bge.n	700e <eps_ctx_init+0x9a>
				LOG_ERR("EP buffer alloc failed for EPOUT%d", i);
    703c:	f04f 0200 	mov.w	r2, #0
    7040:	2301      	movs	r3, #1
    7042:	f363 0202 	bfi	r2, r3, #0, #3
    7046:	f36f 02c5 	bfc	r2, #3, #3
    704a:	4b41      	ldr	r3, [pc, #260]	; (7150 <eps_ctx_init+0x1dc>)
    704c:	4941      	ldr	r1, [pc, #260]	; (7154 <eps_ctx_init+0x1e0>)
    704e:	1a5b      	subs	r3, r3, r1
    7050:	f3c3 03c9 	ubfx	r3, r3, #3, #10
    7054:	f363 128f 	bfi	r2, r3, #6, #10
    7058:	4621      	mov	r1, r4
    705a:	4840      	ldr	r0, [pc, #256]	; (715c <eps_ctx_init+0x1e8>)
    705c:	f7fd ff76 	bl	4f4c <log_1>
				return -ENOMEM;
    7060:	f06f 000b 	mvn.w	r0, #11
    7064:	e015      	b.n	7092 <eps_ctx_init+0x11e>
	}

	if (CFG_EP_ISOIN_CNT) {
		ep_ctx = in_endpoint_ctx(NRF_USBD_EPIN(8));
    7066:	2088      	movs	r0, #136	; 0x88
    7068:	f009 f98a 	bl	10380 <in_endpoint_ctx>
		__ASSERT_NO_MSG(ep_ctx);
    706c:	4604      	mov	r4, r0
    706e:	b188      	cbz	r0, 7094 <eps_ctx_init+0x120>

		if (!ep_ctx->buf.block.data) {
    7070:	6923      	ldr	r3, [r4, #16]
    7072:	b1eb      	cbz	r3, 70b0 <eps_ctx_init+0x13c>
				LOG_ERR("EP buffer alloc failed for ISOIN");
				return -ENOMEM;
			}
		}

		ep_ctx_reset(ep_ctx);
    7074:	4620      	mov	r0, r4
    7076:	f009 f98d 	bl	10394 <ep_ctx_reset>
	}

	if (CFG_EP_ISOOUT_CNT) {
		ep_ctx = out_endpoint_ctx(NRF_USBD_EPOUT(8));
    707a:	2008      	movs	r0, #8
    707c:	f009 f986 	bl	1038c <out_endpoint_ctx>
		__ASSERT_NO_MSG(ep_ctx);
    7080:	4604      	mov	r4, r0
    7082:	b390      	cbz	r0, 70ea <eps_ctx_init+0x176>

		if (!ep_ctx->buf.block.data) {
    7084:	6923      	ldr	r3, [r4, #16]
    7086:	2b00      	cmp	r3, #0
    7088:	d03d      	beq.n	7106 <eps_ctx_init+0x192>
				LOG_ERR("EP buffer alloc failed for ISOOUT");
				return -ENOMEM;
			}
		}

		ep_ctx_reset(ep_ctx);
    708a:	4620      	mov	r0, r4
    708c:	f009 f982 	bl	10394 <ep_ctx_reset>
	}

	return 0;
    7090:	2000      	movs	r0, #0
}
    7092:	bd70      	pop	{r4, r5, r6, pc}
		__ASSERT_NO_MSG(ep_ctx);
    7094:	4d2a      	ldr	r5, [pc, #168]	; (7140 <eps_ctx_init+0x1cc>)
    7096:	f44f 732d 	mov.w	r3, #692	; 0x2b4
    709a:	462a      	mov	r2, r5
    709c:	4929      	ldr	r1, [pc, #164]	; (7144 <eps_ctx_init+0x1d0>)
    709e:	482a      	ldr	r0, [pc, #168]	; (7148 <eps_ctx_init+0x1d4>)
    70a0:	f008 fbed 	bl	f87e <printk>
    70a4:	f44f 712d 	mov.w	r1, #692	; 0x2b4
    70a8:	4628      	mov	r0, r5
    70aa:	f008 fc6e 	bl	f98a <assert_post_action>
    70ae:	e7df      	b.n	7070 <eps_ctx_init+0xfc>
			err = k_mem_pool_alloc(&ep_buf_pool, &ep_ctx->buf.block,
    70b0:	f44f 6280 	mov.w	r2, #1024	; 0x400
    70b4:	f104 0110 	add.w	r1, r4, #16
    70b8:	4824      	ldr	r0, [pc, #144]	; (714c <eps_ctx_init+0x1d8>)
    70ba:	f005 fc19 	bl	c8f0 <k_mem_pool_alloc>
			if (err < 0) {
    70be:	2800      	cmp	r0, #0
    70c0:	dad8      	bge.n	7074 <eps_ctx_init+0x100>
				LOG_ERR("EP buffer alloc failed for ISOIN");
    70c2:	f04f 0100 	mov.w	r1, #0
    70c6:	2301      	movs	r3, #1
    70c8:	f363 0102 	bfi	r1, r3, #0, #3
    70cc:	f36f 01c5 	bfc	r1, #3, #3
    70d0:	4b1f      	ldr	r3, [pc, #124]	; (7150 <eps_ctx_init+0x1dc>)
    70d2:	4a20      	ldr	r2, [pc, #128]	; (7154 <eps_ctx_init+0x1e0>)
    70d4:	1a9b      	subs	r3, r3, r2
    70d6:	f3c3 03c9 	ubfx	r3, r3, #3, #10
    70da:	f363 118f 	bfi	r1, r3, #6, #10
    70de:	4820      	ldr	r0, [pc, #128]	; (7160 <eps_ctx_init+0x1ec>)
    70e0:	f7fe f806 	bl	50f0 <log_0>
				return -ENOMEM;
    70e4:	f06f 000b 	mvn.w	r0, #11
    70e8:	e7d3      	b.n	7092 <eps_ctx_init+0x11e>
		__ASSERT_NO_MSG(ep_ctx);
    70ea:	4d15      	ldr	r5, [pc, #84]	; (7140 <eps_ctx_init+0x1cc>)
    70ec:	f44f 7331 	mov.w	r3, #708	; 0x2c4
    70f0:	462a      	mov	r2, r5
    70f2:	4914      	ldr	r1, [pc, #80]	; (7144 <eps_ctx_init+0x1d0>)
    70f4:	4814      	ldr	r0, [pc, #80]	; (7148 <eps_ctx_init+0x1d4>)
    70f6:	f008 fbc2 	bl	f87e <printk>
    70fa:	f44f 7131 	mov.w	r1, #708	; 0x2c4
    70fe:	4628      	mov	r0, r5
    7100:	f008 fc43 	bl	f98a <assert_post_action>
    7104:	e7be      	b.n	7084 <eps_ctx_init+0x110>
			err = k_mem_pool_alloc(&ep_buf_pool, &ep_ctx->buf.block,
    7106:	f44f 6280 	mov.w	r2, #1024	; 0x400
    710a:	f104 0110 	add.w	r1, r4, #16
    710e:	480f      	ldr	r0, [pc, #60]	; (714c <eps_ctx_init+0x1d8>)
    7110:	f005 fbee 	bl	c8f0 <k_mem_pool_alloc>
			if (err < 0) {
    7114:	2800      	cmp	r0, #0
    7116:	dab8      	bge.n	708a <eps_ctx_init+0x116>
				LOG_ERR("EP buffer alloc failed for ISOOUT");
    7118:	f04f 0100 	mov.w	r1, #0
    711c:	2301      	movs	r3, #1
    711e:	f363 0102 	bfi	r1, r3, #0, #3
    7122:	f36f 01c5 	bfc	r1, #3, #3
    7126:	4b0a      	ldr	r3, [pc, #40]	; (7150 <eps_ctx_init+0x1dc>)
    7128:	4a0a      	ldr	r2, [pc, #40]	; (7154 <eps_ctx_init+0x1e0>)
    712a:	1a9b      	subs	r3, r3, r2
    712c:	f3c3 03c9 	ubfx	r3, r3, #3, #10
    7130:	f363 118f 	bfi	r1, r3, #6, #10
    7134:	480b      	ldr	r0, [pc, #44]	; (7164 <eps_ctx_init+0x1f0>)
    7136:	f7fd ffdb 	bl	50f0 <log_0>
				return -ENOMEM;
    713a:	f06f 000b 	mvn.w	r0, #11
    713e:	e7a8      	b.n	7092 <eps_ctx_init+0x11e>
    7140:	00012388 	.word	0x00012388
    7144:	000123ac 	.word	0x000123ac
    7148:	00010f8c 	.word	0x00010f8c
    714c:	20007404 	.word	0x20007404
    7150:	00010e1c 	.word	0x00010e1c
    7154:	00010dd4 	.word	0x00010dd4
    7158:	000123b4 	.word	0x000123b4
    715c:	000123d8 	.word	0x000123d8
    7160:	000123fc 	.word	0x000123fc
    7164:	00012420 	.word	0x00012420

00007168 <usbd_enable_endpoints>:
{
    7168:	b570      	push	{r4, r5, r6, lr}
	for (i = 0; i < CFG_EPIN_CNT; i++) {
    716a:	2400      	movs	r4, #0
    716c:	e011      	b.n	7192 <usbd_enable_endpoints+0x2a>
		__ASSERT_NO_MSG(ep_ctx);
    716e:	4e38      	ldr	r6, [pc, #224]	; (7250 <usbd_enable_endpoints+0xe8>)
    7170:	f44f 7314 	mov.w	r3, #592	; 0x250
    7174:	4632      	mov	r2, r6
    7176:	4937      	ldr	r1, [pc, #220]	; (7254 <usbd_enable_endpoints+0xec>)
    7178:	4837      	ldr	r0, [pc, #220]	; (7258 <usbd_enable_endpoints+0xf0>)
    717a:	f008 fb80 	bl	f87e <printk>
    717e:	f44f 7114 	mov.w	r1, #592	; 0x250
    7182:	4630      	mov	r0, r6
    7184:	f008 fc01 	bl	f98a <assert_post_action>
    7188:	e00b      	b.n	71a2 <usbd_enable_endpoints+0x3a>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
    718a:	7a68      	ldrb	r0, [r5, #9]
    718c:	f7fd f906 	bl	439c <nrfx_usbd_ep_enable>
	for (i = 0; i < CFG_EPIN_CNT; i++) {
    7190:	3401      	adds	r4, #1
    7192:	2c07      	cmp	r4, #7
    7194:	dc09      	bgt.n	71aa <usbd_enable_endpoints+0x42>
		ep_ctx = in_endpoint_ctx(i);
    7196:	b2e0      	uxtb	r0, r4
    7198:	f009 f8f2 	bl	10380 <in_endpoint_ctx>
		__ASSERT_NO_MSG(ep_ctx);
    719c:	4605      	mov	r5, r0
    719e:	2800      	cmp	r0, #0
    71a0:	d0e5      	beq.n	716e <usbd_enable_endpoints+0x6>
		if (ep_ctx->cfg.en) {
    71a2:	7a2b      	ldrb	r3, [r5, #8]
    71a4:	2b00      	cmp	r3, #0
    71a6:	d0f3      	beq.n	7190 <usbd_enable_endpoints+0x28>
    71a8:	e7ef      	b.n	718a <usbd_enable_endpoints+0x22>
		ep_ctx = in_endpoint_ctx(NRF_USBD_EPIN(8));
    71aa:	2088      	movs	r0, #136	; 0x88
    71ac:	f009 f8e8 	bl	10380 <in_endpoint_ctx>
		__ASSERT_NO_MSG(ep_ctx);
    71b0:	4604      	mov	r4, r0
    71b2:	b118      	cbz	r0, 71bc <usbd_enable_endpoints+0x54>
		if (ep_ctx->cfg.en) {
    71b4:	7a23      	ldrb	r3, [r4, #8]
    71b6:	b97b      	cbnz	r3, 71d8 <usbd_enable_endpoints+0x70>
	for (i = 0; i < CFG_EPIN_CNT; i++) {
    71b8:	2400      	movs	r4, #0
    71ba:	e023      	b.n	7204 <usbd_enable_endpoints+0x9c>
		__ASSERT_NO_MSG(ep_ctx);
    71bc:	4d24      	ldr	r5, [pc, #144]	; (7250 <usbd_enable_endpoints+0xe8>)
    71be:	f240 2359 	movw	r3, #601	; 0x259
    71c2:	462a      	mov	r2, r5
    71c4:	4923      	ldr	r1, [pc, #140]	; (7254 <usbd_enable_endpoints+0xec>)
    71c6:	4824      	ldr	r0, [pc, #144]	; (7258 <usbd_enable_endpoints+0xf0>)
    71c8:	f008 fb59 	bl	f87e <printk>
    71cc:	f240 2159 	movw	r1, #601	; 0x259
    71d0:	4628      	mov	r0, r5
    71d2:	f008 fbda 	bl	f98a <assert_post_action>
    71d6:	e7ed      	b.n	71b4 <usbd_enable_endpoints+0x4c>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
    71d8:	7a60      	ldrb	r0, [r4, #9]
    71da:	f7fd f8df 	bl	439c <nrfx_usbd_ep_enable>
    71de:	e7eb      	b.n	71b8 <usbd_enable_endpoints+0x50>
		__ASSERT_NO_MSG(ep_ctx);
    71e0:	4e1b      	ldr	r6, [pc, #108]	; (7250 <usbd_enable_endpoints+0xe8>)
    71e2:	f240 2362 	movw	r3, #610	; 0x262
    71e6:	4632      	mov	r2, r6
    71e8:	491a      	ldr	r1, [pc, #104]	; (7254 <usbd_enable_endpoints+0xec>)
    71ea:	481b      	ldr	r0, [pc, #108]	; (7258 <usbd_enable_endpoints+0xf0>)
    71ec:	f008 fb47 	bl	f87e <printk>
    71f0:	f240 2162 	movw	r1, #610	; 0x262
    71f4:	4630      	mov	r0, r6
    71f6:	f008 fbc8 	bl	f98a <assert_post_action>
    71fa:	e00b      	b.n	7214 <usbd_enable_endpoints+0xac>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
    71fc:	7a68      	ldrb	r0, [r5, #9]
    71fe:	f7fd f8cd 	bl	439c <nrfx_usbd_ep_enable>
	for (i = 0; i < CFG_EPOUT_CNT; i++) {
    7202:	3401      	adds	r4, #1
    7204:	2c07      	cmp	r4, #7
    7206:	dc09      	bgt.n	721c <usbd_enable_endpoints+0xb4>
		ep_ctx = out_endpoint_ctx(i);
    7208:	b2e0      	uxtb	r0, r4
    720a:	f009 f8bf 	bl	1038c <out_endpoint_ctx>
		__ASSERT_NO_MSG(ep_ctx);
    720e:	4605      	mov	r5, r0
    7210:	2800      	cmp	r0, #0
    7212:	d0e5      	beq.n	71e0 <usbd_enable_endpoints+0x78>
		if (ep_ctx->cfg.en) {
    7214:	7a2b      	ldrb	r3, [r5, #8]
    7216:	2b00      	cmp	r3, #0
    7218:	d0f3      	beq.n	7202 <usbd_enable_endpoints+0x9a>
    721a:	e7ef      	b.n	71fc <usbd_enable_endpoints+0x94>
		ep_ctx = out_endpoint_ctx(NRF_USBD_EPOUT(8));
    721c:	2008      	movs	r0, #8
    721e:	f009 f8b5 	bl	1038c <out_endpoint_ctx>
		__ASSERT_NO_MSG(ep_ctx);
    7222:	4604      	mov	r4, r0
    7224:	b110      	cbz	r0, 722c <usbd_enable_endpoints+0xc4>
		if (ep_ctx->cfg.en) {
    7226:	7a23      	ldrb	r3, [r4, #8]
    7228:	b973      	cbnz	r3, 7248 <usbd_enable_endpoints+0xe0>
}
    722a:	bd70      	pop	{r4, r5, r6, pc}
		__ASSERT_NO_MSG(ep_ctx);
    722c:	4d08      	ldr	r5, [pc, #32]	; (7250 <usbd_enable_endpoints+0xe8>)
    722e:	f240 236b 	movw	r3, #619	; 0x26b
    7232:	462a      	mov	r2, r5
    7234:	4907      	ldr	r1, [pc, #28]	; (7254 <usbd_enable_endpoints+0xec>)
    7236:	4808      	ldr	r0, [pc, #32]	; (7258 <usbd_enable_endpoints+0xf0>)
    7238:	f008 fb21 	bl	f87e <printk>
    723c:	f240 216b 	movw	r1, #619	; 0x26b
    7240:	4628      	mov	r0, r5
    7242:	f008 fba2 	bl	f98a <assert_post_action>
    7246:	e7ee      	b.n	7226 <usbd_enable_endpoints+0xbe>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
    7248:	7a60      	ldrb	r0, [r4, #9]
    724a:	f7fd f8a7 	bl	439c <nrfx_usbd_ep_enable>
}
    724e:	e7ec      	b.n	722a <usbd_enable_endpoints+0xc2>
    7250:	00012388 	.word	0x00012388
    7254:	000123ac 	.word	0x000123ac
    7258:	00010f8c 	.word	0x00010f8c

0000725c <hf_clock_enable>:
{
    725c:	b570      	push	{r4, r5, r6, lr}
    725e:	4605      	mov	r5, r0
    7260:	460e      	mov	r6, r1
    7262:	482a      	ldr	r0, [pc, #168]	; (730c <hf_clock_enable+0xb0>)
    7264:	f005 f8c2 	bl	c3ec <z_impl_device_get_binding>
	if (!clock) {
    7268:	b328      	cbz	r0, 72b6 <hf_clock_enable+0x5a>
	if (on) {
    726a:	2d00      	cmp	r5, #0
    726c:	d037      	beq.n	72de <hf_clock_enable+0x82>
		if (clock_requested) {
    726e:	4a28      	ldr	r2, [pc, #160]	; (7310 <hf_clock_enable+0xb4>)
    7270:	7812      	ldrb	r2, [r2, #0]
    7272:	2a00      	cmp	r2, #0
    7274:	d145      	bne.n	7302 <hf_clock_enable+0xa6>
 * @param sys A pointer to an opaque data representing the sub-system
 */
static inline int clock_control_on(struct device *dev,
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api = dev->driver_api;
    7276:	6842      	ldr	r2, [r0, #4]

	return api->on(dev, sys);
    7278:	6812      	ldr	r2, [r2, #0]
    727a:	4631      	mov	r1, r6
    727c:	4790      	blx	r2
    727e:	4604      	mov	r4, r0
	if (ret && (blocking || (ret != -EINPROGRESS))) {
    7280:	2c00      	cmp	r4, #0
    7282:	d037      	beq.n	72f4 <hf_clock_enable+0x98>
    7284:	b916      	cbnz	r6, 728c <hf_clock_enable+0x30>
    7286:	f114 0f44 	cmn.w	r4, #68	; 0x44
    728a:	d033      	beq.n	72f4 <hf_clock_enable+0x98>
		LOG_ERR("HF clock %s fail: %d",
    728c:	f04f 0300 	mov.w	r3, #0
    7290:	2201      	movs	r2, #1
    7292:	f362 0302 	bfi	r3, r2, #0, #3
    7296:	f36f 03c5 	bfc	r3, #3, #3
    729a:	4a1e      	ldr	r2, [pc, #120]	; (7314 <hf_clock_enable+0xb8>)
    729c:	491e      	ldr	r1, [pc, #120]	; (7318 <hf_clock_enable+0xbc>)
    729e:	1a52      	subs	r2, r2, r1
    72a0:	f3c2 02c9 	ubfx	r2, r2, #3, #10
    72a4:	f362 138f 	bfi	r3, r2, #6, #10
    72a8:	b34d      	cbz	r5, 72fe <hf_clock_enable+0xa2>
    72aa:	491c      	ldr	r1, [pc, #112]	; (731c <hf_clock_enable+0xc0>)
    72ac:	4622      	mov	r2, r4
    72ae:	481c      	ldr	r0, [pc, #112]	; (7320 <hf_clock_enable+0xc4>)
    72b0:	f7fd feb2 	bl	5018 <log_2>
		return ret;
    72b4:	e021      	b.n	72fa <hf_clock_enable+0x9e>
		LOG_ERR("NRF HF Clock device not found!");
    72b6:	f04f 0100 	mov.w	r1, #0
    72ba:	2301      	movs	r3, #1
    72bc:	f363 0102 	bfi	r1, r3, #0, #3
    72c0:	f36f 01c5 	bfc	r1, #3, #3
    72c4:	4b13      	ldr	r3, [pc, #76]	; (7314 <hf_clock_enable+0xb8>)
    72c6:	4a14      	ldr	r2, [pc, #80]	; (7318 <hf_clock_enable+0xbc>)
    72c8:	1a9b      	subs	r3, r3, r2
    72ca:	f3c3 03c9 	ubfx	r3, r3, #3, #10
    72ce:	f363 118f 	bfi	r1, r3, #6, #10
    72d2:	4814      	ldr	r0, [pc, #80]	; (7324 <hf_clock_enable+0xc8>)
    72d4:	f7fd ff0c 	bl	50f0 <log_0>
		return ret;
    72d8:	f06f 0412 	mvn.w	r4, #18
    72dc:	e00d      	b.n	72fa <hf_clock_enable+0x9e>
		if (!clock_requested) {
    72de:	4a0c      	ldr	r2, [pc, #48]	; (7310 <hf_clock_enable+0xb4>)
    72e0:	7812      	ldrb	r2, [r2, #0]
    72e2:	b182      	cbz	r2, 7306 <hf_clock_enable+0xaa>
 * @param sys A pointer to an opaque data representing the sub-system
 */
static inline int clock_control_off(struct device *dev,
				    clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api = dev->driver_api;
    72e4:	6842      	ldr	r2, [r0, #4]

	return api->off(dev, sys);
    72e6:	6852      	ldr	r2, [r2, #4]
    72e8:	4631      	mov	r1, r6
    72ea:	4790      	blx	r2
    72ec:	4604      	mov	r4, r0
		if (ret == -EBUSY) {
    72ee:	f110 0f10 	cmn.w	r0, #16
    72f2:	d1c5      	bne.n	7280 <hf_clock_enable+0x24>
	clock_requested = on;
    72f4:	4b06      	ldr	r3, [pc, #24]	; (7310 <hf_clock_enable+0xb4>)
    72f6:	701d      	strb	r5, [r3, #0]
	return 0;
    72f8:	2400      	movs	r4, #0
}
    72fa:	4620      	mov	r0, r4
    72fc:	bd70      	pop	{r4, r5, r6, pc}
		LOG_ERR("HF clock %s fail: %d",
    72fe:	490a      	ldr	r1, [pc, #40]	; (7328 <hf_clock_enable+0xcc>)
    7300:	e7d4      	b.n	72ac <hf_clock_enable+0x50>
			return 0;
    7302:	2400      	movs	r4, #0
    7304:	e7f9      	b.n	72fa <hf_clock_enable+0x9e>
			return 0;
    7306:	2400      	movs	r4, #0
    7308:	e7f7      	b.n	72fa <hf_clock_enable+0x9e>
    730a:	bf00      	nop
    730c:	0001237c 	.word	0x0001237c
    7310:	200027d4 	.word	0x200027d4
    7314:	00010e1c 	.word	0x00010e1c
    7318:	00010dd4 	.word	0x00010dd4
    731c:	00012464 	.word	0x00012464
    7320:	00012474 	.word	0x00012474
    7324:	00012444 	.word	0x00012444
    7328:	0001246c 	.word	0x0001246c

0000732c <usbd_work_handler>:
}


/* Work handler */
static void usbd_work_handler(struct k_work *item)
{
    732c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7330:	b085      	sub	sp, #20
    7332:	4606      	mov	r6, r0
	struct nrf_usbd_ctx *ctx;
	struct usbd_event *ev;

	ctx = CONTAINER_OF(item, struct nrf_usbd_ctx, usb_work);

	while ((ev = usbd_evt_get()) != NULL) {
    7334:	e152      	b.n	75dc <usbd_work_handler+0x2b0>
			continue;
		}

		switch (ev->evt_type) {
		case USBD_EVT_EP:
			if (!ctx->attached) {
    7336:	f816 3c04 	ldrb.w	r3, [r6, #-4]
    733a:	b163      	cbz	r3, 7356 <usbd_work_handler+0x2a>
				LOG_ERR("EP %d event dropped (not attached).",
					(u32_t)ev->evt.ep_evt.ep->cfg.addr);
			}
			usbd_work_process_ep_events(&ev->evt.ep_evt);
    733c:	f104 080c 	add.w	r8, r4, #12
	struct nrf_usbd_ep_ctx *ep_ctx = ep_evt->ep;
    7340:	68e5      	ldr	r5, [r4, #12]
	__ASSERT_NO_MSG(ep_ctx);
    7342:	b1dd      	cbz	r5, 737c <usbd_work_handler+0x50>
	switch (ep_evt->evt_type) {
    7344:	f898 3004 	ldrb.w	r3, [r8, #4]
    7348:	2b03      	cmp	r3, #3
    734a:	f200 8144 	bhi.w	75d6 <usbd_work_handler+0x2aa>
    734e:	e8df f003 	tbb	[pc, r3]
    7352:	9122      	.short	0x9122
    7354:	cec9      	.short	0xcec9
				LOG_ERR("EP %d event dropped (not attached).",
    7356:	2301      	movs	r3, #1
    7358:	f363 0902 	bfi	r9, r3, #0, #3
    735c:	f36f 09c5 	bfc	r9, #3, #3
    7360:	4bb1      	ldr	r3, [pc, #708]	; (7628 <usbd_work_handler+0x2fc>)
    7362:	4ab2      	ldr	r2, [pc, #712]	; (762c <usbd_work_handler+0x300>)
    7364:	1a9b      	subs	r3, r3, r2
    7366:	f3c3 03c9 	ubfx	r3, r3, #3, #10
    736a:	f363 198f 	bfi	r9, r3, #6, #10
    736e:	68e3      	ldr	r3, [r4, #12]
    7370:	464a      	mov	r2, r9
    7372:	7a59      	ldrb	r1, [r3, #9]
    7374:	48ae      	ldr	r0, [pc, #696]	; (7630 <usbd_work_handler+0x304>)
    7376:	f7fd fde9 	bl	4f4c <log_1>
    737a:	e7df      	b.n	733c <usbd_work_handler+0x10>
	__ASSERT_NO_MSG(ep_ctx);
    737c:	f240 3381 	movw	r3, #897	; 0x381
    7380:	4aac      	ldr	r2, [pc, #688]	; (7634 <usbd_work_handler+0x308>)
    7382:	49ad      	ldr	r1, [pc, #692]	; (7638 <usbd_work_handler+0x30c>)
    7384:	48ad      	ldr	r0, [pc, #692]	; (763c <usbd_work_handler+0x310>)
    7386:	f008 fa7a 	bl	f87e <printk>
    738a:	f240 3181 	movw	r1, #897	; 0x381
    738e:	48a9      	ldr	r0, [pc, #676]	; (7634 <usbd_work_handler+0x308>)
    7390:	f008 fafb 	bl	f98a <assert_post_action>
    7394:	e7d6      	b.n	7344 <usbd_work_handler+0x18>
	__ASSERT_NO_MSG(ep_ctx);
    7396:	2d00      	cmp	r5, #0
    7398:	d042      	beq.n	7420 <usbd_work_handler+0xf4>
	__ASSERT(ep_ctx->cfg.type == USB_DC_EP_CONTROL,
    739a:	7aab      	ldrb	r3, [r5, #10]
    739c:	2b00      	cmp	r3, #0
    739e:	d14e      	bne.n	743e <usbd_work_handler+0x112>
	usbd_setup = (struct usb_setup_packet *)ep_ctx->buf.data;
    73a0:	f8d5 8018 	ldr.w	r8, [r5, #24]
	memset(usbd_setup, 0, sizeof(struct usb_setup_packet));
    73a4:	2208      	movs	r2, #8
    73a6:	2100      	movs	r1, #0
    73a8:	4640      	mov	r0, r8
    73aa:	f009 f8e4 	bl	10576 <memset>
    return (uint8_t)(NRF_USBD->BMREQUESTTYPE);
    73ae:	4ba4      	ldr	r3, [pc, #656]	; (7640 <usbd_work_handler+0x314>)
    73b0:	f8d3 2480 	ldr.w	r2, [r3, #1152]	; 0x480
	usbd_setup->bmRequestType = nrf_usbd_setup_bmrequesttype_get();
    73b4:	f888 2000 	strb.w	r2, [r8]
    return (uint8_t)(NRF_USBD->BREQUEST);
    73b8:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
	usbd_setup->bRequest = nrf_usbd_setup_brequest_get();
    73bc:	f888 2001 	strb.w	r2, [r8, #1]
    const uint16_t val = NRF_USBD->WVALUEL;
    73c0:	f8d3 2488 	ldr.w	r2, [r3, #1160]	; 0x488
    73c4:	b292      	uxth	r2, r2
    return (uint16_t)(val | ((NRF_USBD->WVALUEH) << 8));
    73c6:	f8d3 148c 	ldr.w	r1, [r3, #1164]	; 0x48c
    73ca:	0209      	lsls	r1, r1, #8
    73cc:	b289      	uxth	r1, r1
    73ce:	430a      	orrs	r2, r1
	usbd_setup->wValue = nrf_usbd_setup_wvalue_get();
    73d0:	f8a8 2002 	strh.w	r2, [r8, #2]
    const uint16_t val = NRF_USBD->WINDEXL;
    73d4:	f8d3 2490 	ldr.w	r2, [r3, #1168]	; 0x490
    73d8:	b292      	uxth	r2, r2
    return (uint16_t)(val | ((NRF_USBD->WINDEXH) << 8));
    73da:	f8d3 1494 	ldr.w	r1, [r3, #1172]	; 0x494
    73de:	0209      	lsls	r1, r1, #8
    73e0:	b289      	uxth	r1, r1
    73e2:	430a      	orrs	r2, r1
	usbd_setup->wIndex = nrf_usbd_setup_windex_get();
    73e4:	f8a8 2004 	strh.w	r2, [r8, #4]
    const uint16_t val = NRF_USBD->WLENGTHL;
    73e8:	f8d3 2498 	ldr.w	r2, [r3, #1176]	; 0x498
    73ec:	b292      	uxth	r2, r2
    return (uint16_t)(val | ((NRF_USBD->WLENGTHH) << 8));
    73ee:	f8d3 349c 	ldr.w	r3, [r3, #1180]	; 0x49c
    73f2:	021b      	lsls	r3, r3, #8
    73f4:	b29b      	uxth	r3, r3
    73f6:	4313      	orrs	r3, r2
	usbd_setup->wLength = nrf_usbd_setup_wlength_get();
    73f8:	f8a8 3006 	strh.w	r3, [r8, #6]
	ep_ctx->buf.len = sizeof(struct usb_setup_packet);
    73fc:	2308      	movs	r3, #8
    73fe:	60eb      	str	r3, [r5, #12]
	ep_ctx->cfg.cb(ep_ctx->cfg.addr, USB_DC_EP_SETUP);
    7400:	682b      	ldr	r3, [r5, #0]
    7402:	2100      	movs	r1, #0
    7404:	7a68      	ldrb	r0, [r5, #9]
    7406:	4798      	blx	r3
	     == USB_BMREQUESTTYPE_DIR_HOSTTODEVICE_MASK)
    7408:	f998 3000 	ldrsb.w	r3, [r8]
	if (((usbd_setup->bmRequestType & USB_BMREQUESTTYPE_DIR_MASK)
    740c:	2b00      	cmp	r3, #0
    740e:	db02      	blt.n	7416 <usbd_work_handler+0xea>
	    && (usbd_setup->wLength)) {
    7410:	f8b8 3006 	ldrh.w	r3, [r8, #6]
    7414:	bb2b      	cbnz	r3, 7462 <usbd_work_handler+0x136>
		ctx->ctrl_read_len = 0U;
    7416:	4b8b      	ldr	r3, [pc, #556]	; (7644 <usbd_work_handler+0x318>)
    7418:	2200      	movs	r2, #0
    741a:	f8a3 22b0 	strh.w	r2, [r3, #688]	; 0x2b0
    741e:	e0da      	b.n	75d6 <usbd_work_handler+0x2aa>
	__ASSERT_NO_MSG(ep_ctx);
    7420:	f8df 8210 	ldr.w	r8, [pc, #528]	; 7634 <usbd_work_handler+0x308>
    7424:	f44f 734e 	mov.w	r3, #824	; 0x338
    7428:	4642      	mov	r2, r8
    742a:	4983      	ldr	r1, [pc, #524]	; (7638 <usbd_work_handler+0x30c>)
    742c:	4883      	ldr	r0, [pc, #524]	; (763c <usbd_work_handler+0x310>)
    742e:	f008 fa26 	bl	f87e <printk>
    7432:	f44f 714e 	mov.w	r1, #824	; 0x338
    7436:	4640      	mov	r0, r8
    7438:	f008 faa7 	bl	f98a <assert_post_action>
    743c:	e7ad      	b.n	739a <usbd_work_handler+0x6e>
	__ASSERT(ep_ctx->cfg.type == USB_DC_EP_CONTROL,
    743e:	f8df 81f4 	ldr.w	r8, [pc, #500]	; 7634 <usbd_work_handler+0x308>
    7442:	f240 333a 	movw	r3, #826	; 0x33a
    7446:	4642      	mov	r2, r8
    7448:	497f      	ldr	r1, [pc, #508]	; (7648 <usbd_work_handler+0x31c>)
    744a:	487c      	ldr	r0, [pc, #496]	; (763c <usbd_work_handler+0x310>)
    744c:	f008 fa17 	bl	f87e <printk>
    7450:	487e      	ldr	r0, [pc, #504]	; (764c <usbd_work_handler+0x320>)
    7452:	f008 fa14 	bl	f87e <printk>
    7456:	f240 313a 	movw	r1, #826	; 0x33a
    745a:	4640      	mov	r0, r8
    745c:	f008 fa95 	bl	f98a <assert_post_action>
    7460:	e79e      	b.n	73a0 <usbd_work_handler+0x74>
		ctx->ctrl_read_len -= usbd_setup->wLength;
    7462:	4978      	ldr	r1, [pc, #480]	; (7644 <usbd_work_handler+0x318>)
    7464:	f8b1 22b0 	ldrh.w	r2, [r1, #688]	; 0x2b0
    7468:	1ad3      	subs	r3, r2, r3
    746a:	f8a1 32b0 	strh.w	r3, [r1, #688]	; 0x2b0
		nrfx_usbd_setup_data_clear();
    746e:	f7fc fba7 	bl	3bc0 <nrfx_usbd_setup_data_clear>
    7472:	e0b0      	b.n	75d6 <usbd_work_handler+0x2aa>
	if (!ep_ctx->read_pending) {
    7474:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
    7478:	2b00      	cmp	r3, #0
    747a:	f000 80ac 	beq.w	75d6 <usbd_work_handler+0x2aa>
	if (!ep_ctx->read_complete) {
    747e:	f895 3020 	ldrb.w	r3, [r5, #32]
    7482:	2b00      	cmp	r3, #0
    7484:	f000 80a7 	beq.w	75d6 <usbd_work_handler+0x2aa>
	ep_ctx->read_pending = false;
    7488:	f04f 0800 	mov.w	r8, #0
    748c:	f885 8021 	strb.w	r8, [r5, #33]	; 0x21
	ep_ctx->read_complete = false;
    7490:	f885 8020 	strb.w	r8, [r5, #32]
K_SYSCALL_DECLARE2(K_SYSCALL_K_MUTEX_LOCK, k_mutex_lock, int, struct k_mutex *, mutex, s32_t, timeout)
    7494:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    7498:	486d      	ldr	r0, [pc, #436]	; (7650 <usbd_work_handler+0x324>)
    749a:	f005 fb2d 	bl	caf8 <z_impl_k_mutex_lock>
	NRFX_USBD_TRANSFER_OUT(transfer, ep_ctx->buf.data,
    749e:	69ab      	ldr	r3, [r5, #24]
    74a0:	9301      	str	r3, [sp, #4]
    74a2:	686b      	ldr	r3, [r5, #4]
    74a4:	9302      	str	r3, [sp, #8]
    74a6:	f8cd 800c 	str.w	r8, [sp, #12]
	nrfx_err_t err = nrfx_usbd_ep_transfer(
    74aa:	a901      	add	r1, sp, #4
    74ac:	7a68      	ldrb	r0, [r5, #9]
    74ae:	f7fb fc87 	bl	2dc0 <nrfx_usbd_ep_transfer>
	if (err != NRFX_SUCCESS) {
    74b2:	4b68      	ldr	r3, [pc, #416]	; (7654 <usbd_work_handler+0x328>)
    74b4:	4298      	cmp	r0, r3
    74b6:	d103      	bne.n	74c0 <usbd_work_handler+0x194>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_UNLOCK, k_mutex_unlock, struct k_mutex *, mutex)
    74b8:	4865      	ldr	r0, [pc, #404]	; (7650 <usbd_work_handler+0x324>)
    74ba:	f005 fc23 	bl	cd04 <z_impl_k_mutex_unlock>
    74be:	e08a      	b.n	75d6 <usbd_work_handler+0x2aa>
		LOG_ERR("nRF USBD transfer error (OUT): %d.", err);
    74c0:	2301      	movs	r3, #1
    74c2:	f363 0b02 	bfi	fp, r3, #0, #3
    74c6:	f36f 0bc5 	bfc	fp, #3, #3
    74ca:	4b57      	ldr	r3, [pc, #348]	; (7628 <usbd_work_handler+0x2fc>)
    74cc:	4a57      	ldr	r2, [pc, #348]	; (762c <usbd_work_handler+0x300>)
    74ce:	1a9b      	subs	r3, r3, r2
    74d0:	f3c3 03c9 	ubfx	r3, r3, #3, #10
    74d4:	f363 1b8f 	bfi	fp, r3, #6, #10
    74d8:	465a      	mov	r2, fp
    74da:	4601      	mov	r1, r0
    74dc:	485e      	ldr	r0, [pc, #376]	; (7658 <usbd_work_handler+0x32c>)
    74de:	f7fd fd35 	bl	4f4c <log_1>
    74e2:	e7e9      	b.n	74b8 <usbd_work_handler+0x18c>
		ep_ctx->cfg.cb(ep_ctx->cfg.addr,
    74e4:	682b      	ldr	r3, [r5, #0]
    74e6:	2101      	movs	r1, #1
    74e8:	7a68      	ldrb	r0, [r5, #9]
    74ea:	4798      	blx	r3
		break;
    74ec:	e073      	b.n	75d6 <usbd_work_handler+0x2aa>
		if ((ep_ctx->cfg.type == USB_DC_EP_CONTROL)
    74ee:	7aab      	ldrb	r3, [r5, #10]
    74f0:	b913      	cbnz	r3, 74f8 <usbd_work_handler+0x1cc>
		    && (!ep_ctx->write_fragmented)) {
    74f2:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
    74f6:	b123      	cbz	r3, 7502 <usbd_work_handler+0x1d6>
		ep_ctx->cfg.cb(ep_ctx->cfg.addr,
    74f8:	682b      	ldr	r3, [r5, #0]
    74fa:	2102      	movs	r1, #2
    74fc:	7a68      	ldrb	r0, [r5, #9]
    74fe:	4798      	blx	r3
		break;
    7500:	e069      	b.n	75d6 <usbd_work_handler+0x2aa>
K_SYSCALL_DECLARE2(K_SYSCALL_K_MUTEX_LOCK, k_mutex_lock, int, struct k_mutex *, mutex, s32_t, timeout)
    7502:	f8df 814c 	ldr.w	r8, [pc, #332]	; 7650 <usbd_work_handler+0x324>
    7506:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    750a:	4640      	mov	r0, r8
    750c:	f005 faf4 	bl	caf8 <z_impl_k_mutex_lock>
			nrfx_usbd_setup_clear();
    7510:	f7fc fbc8 	bl	3ca4 <nrfx_usbd_setup_clear>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_UNLOCK, k_mutex_unlock, struct k_mutex *, mutex)
    7514:	4640      	mov	r0, r8
    7516:	f005 fbf5 	bl	cd04 <z_impl_k_mutex_unlock>
    751a:	e7ed      	b.n	74f8 <usbd_work_handler+0x1cc>
	switch (pwr_evt->state) {
    751c:	7b23      	ldrb	r3, [r4, #12]
    751e:	2b04      	cmp	r3, #4
    7520:	d859      	bhi.n	75d6 <usbd_work_handler+0x2aa>
    7522:	e8df f003 	tbb	[pc, r3]
    7526:	031e      	.short	0x031e
    7528:	300e      	.short	0x300e
    752a:	3c          	.byte	0x3c
    752b:	00          	.byte	0x00
		if (!nrfx_usbd_is_enabled()) {
    752c:	f7fb fb4c 	bl	2bc8 <nrfx_usbd_is_enabled>
    7530:	2800      	cmp	r0, #0
    7532:	d150      	bne.n	75d6 <usbd_work_handler+0x2aa>
			nrfx_usbd_enable();
    7534:	f7fb f9f8 	bl	2928 <nrfx_usbd_enable>
			(void) hf_clock_enable(true, false);
    7538:	2100      	movs	r1, #0
    753a:	2001      	movs	r0, #1
    753c:	f7ff fe8e 	bl	725c <hf_clock_enable>
    7540:	e049      	b.n	75d6 <usbd_work_handler+0x2aa>
		usbd_enable_endpoints(ctx);
    7542:	4d40      	ldr	r5, [pc, #256]	; (7644 <usbd_work_handler+0x318>)
    7544:	4628      	mov	r0, r5
    7546:	f7ff fe0f 	bl	7168 <usbd_enable_endpoints>
		nrfx_usbd_start(true);
    754a:	2001      	movs	r0, #1
    754c:	f7fb faf0 	bl	2b30 <nrfx_usbd_start>
		ctx->ready = true;
    7550:	2301      	movs	r3, #1
    7552:	716b      	strb	r3, [r5, #5]
		if (ctx->status_cb) {
    7554:	682b      	ldr	r3, [r5, #0]
    7556:	2b00      	cmp	r3, #0
    7558:	d03d      	beq.n	75d6 <usbd_work_handler+0x2aa>
			ctx->status_cb(USB_DC_CONNECTED, NULL);
    755a:	2100      	movs	r1, #0
    755c:	2002      	movs	r0, #2
    755e:	4798      	blx	r3
    7560:	e039      	b.n	75d6 <usbd_work_handler+0x2aa>
		ctx->ready = false;
    7562:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 7644 <usbd_work_handler+0x318>
    7566:	2500      	movs	r5, #0
    7568:	f888 5005 	strb.w	r5, [r8, #5]
		nrfx_usbd_disable();
    756c:	f7fd f9ee 	bl	494c <nrfx_usbd_disable>
		(void) hf_clock_enable(false, false);
    7570:	4629      	mov	r1, r5
    7572:	4628      	mov	r0, r5
    7574:	f7ff fe72 	bl	725c <hf_clock_enable>
		if (ctx->status_cb) {
    7578:	f8d8 3000 	ldr.w	r3, [r8]
    757c:	b35b      	cbz	r3, 75d6 <usbd_work_handler+0x2aa>
			ctx->status_cb(USB_DC_DISCONNECTED, NULL);
    757e:	4629      	mov	r1, r5
    7580:	2004      	movs	r0, #4
    7582:	4798      	blx	r3
    7584:	e027      	b.n	75d6 <usbd_work_handler+0x2aa>
	return get_usbd_ctx()->ready;
    7586:	4b2f      	ldr	r3, [pc, #188]	; (7644 <usbd_work_handler+0x318>)
    7588:	795b      	ldrb	r3, [r3, #5]
		if (dev_ready()) {
    758a:	b323      	cbz	r3, 75d6 <usbd_work_handler+0x2aa>
			nrfx_usbd_suspend();
    758c:	f7fd fa14 	bl	49b8 <nrfx_usbd_suspend>
			if (ctx->status_cb) {
    7590:	4b2c      	ldr	r3, [pc, #176]	; (7644 <usbd_work_handler+0x318>)
    7592:	681b      	ldr	r3, [r3, #0]
    7594:	b1fb      	cbz	r3, 75d6 <usbd_work_handler+0x2aa>
				ctx->status_cb(USB_DC_SUSPEND, NULL);
    7596:	2100      	movs	r1, #0
    7598:	2005      	movs	r0, #5
    759a:	4798      	blx	r3
    759c:	e01b      	b.n	75d6 <usbd_work_handler+0x2aa>
		if (ctx->status_cb && dev_ready()) {
    759e:	4b29      	ldr	r3, [pc, #164]	; (7644 <usbd_work_handler+0x318>)
    75a0:	681b      	ldr	r3, [r3, #0]
    75a2:	b1c3      	cbz	r3, 75d6 <usbd_work_handler+0x2aa>
	return get_usbd_ctx()->ready;
    75a4:	4a27      	ldr	r2, [pc, #156]	; (7644 <usbd_work_handler+0x318>)
    75a6:	7952      	ldrb	r2, [r2, #5]
		if (ctx->status_cb && dev_ready()) {
    75a8:	b1aa      	cbz	r2, 75d6 <usbd_work_handler+0x2aa>
			ctx->status_cb(USB_DC_RESUME, NULL);
    75aa:	2100      	movs	r1, #0
    75ac:	2006      	movs	r0, #6
    75ae:	4798      	blx	r3
    75b0:	e011      	b.n	75d6 <usbd_work_handler+0x2aa>
		case USBD_EVT_POWER:
			usbd_work_process_pwr_events(&ev->evt.pwr_evt);
			break;
		case USBD_EVT_RESET:
			LOG_DBG("USBD reset event.");
			k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    75b2:	f106 050c 	add.w	r5, r6, #12
K_SYSCALL_DECLARE2(K_SYSCALL_K_MUTEX_LOCK, k_mutex_lock, int, struct k_mutex *, mutex, s32_t, timeout)
    75b6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    75ba:	4628      	mov	r0, r5
    75bc:	f005 fa9c 	bl	caf8 <z_impl_k_mutex_lock>
			eps_ctx_init();
    75c0:	f7ff fcd8 	bl	6f74 <eps_ctx_init>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_UNLOCK, k_mutex_unlock, struct k_mutex *, mutex)
    75c4:	4628      	mov	r0, r5
    75c6:	f005 fb9d 	bl	cd04 <z_impl_k_mutex_unlock>
			k_mutex_unlock(&ctx->drv_lock);

			if (ctx->status_cb) {
    75ca:	f856 3c08 	ldr.w	r3, [r6, #-8]
    75ce:	b113      	cbz	r3, 75d6 <usbd_work_handler+0x2aa>
				ctx->status_cb(USB_DC_RESET, NULL);
    75d0:	2100      	movs	r1, #0
    75d2:	2001      	movs	r0, #1
    75d4:	4798      	blx	r3
	k_mem_pool_free(&ev->block);
    75d6:	1d20      	adds	r0, r4, #4
    75d8:	f009 f9bc 	bl	10954 <k_mem_pool_free>
K_SYSCALL_DECLARE2(K_SYSCALL_K_QUEUE_GET, k_queue_get, void *, struct k_queue *, queue, s32_t, timeout)
    75dc:	2100      	movs	r1, #0
    75de:	481f      	ldr	r0, [pc, #124]	; (765c <usbd_work_handler+0x330>)
    75e0:	f005 fd26 	bl	d030 <z_impl_k_queue_get>
	while ((ev = usbd_evt_get()) != NULL) {
    75e4:	4604      	mov	r4, r0
    75e6:	2800      	cmp	r0, #0
    75e8:	f000 8097 	beq.w	771a <usbd_work_handler+0x3ee>
	return get_usbd_ctx()->ready;
    75ec:	4b15      	ldr	r3, [pc, #84]	; (7644 <usbd_work_handler+0x318>)
    75ee:	795b      	ldrb	r3, [r3, #5]
		if (!dev_ready() && ev->evt_type != USBD_EVT_POWER) {
    75f0:	b913      	cbnz	r3, 75f8 <usbd_work_handler+0x2cc>
    75f2:	7d23      	ldrb	r3, [r4, #20]
    75f4:	2b00      	cmp	r3, #0
    75f6:	d1f1      	bne.n	75dc <usbd_work_handler+0x2b0>
		switch (ev->evt_type) {
    75f8:	7d21      	ldrb	r1, [r4, #20]
    75fa:	2904      	cmp	r1, #4
    75fc:	d87c      	bhi.n	76f8 <usbd_work_handler+0x3cc>
    75fe:	a301      	add	r3, pc, #4	; (adr r3, 7604 <usbd_work_handler+0x2d8>)
    7600:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
    7604:	0000751d 	.word	0x0000751d
    7608:	00007337 	.word	0x00007337
    760c:	000075b3 	.word	0x000075b3
    7610:	00007619 	.word	0x00007619
    7614:	00007661 	.word	0x00007661
			}
			break;
		case USBD_EVT_SOF:
			if (ctx->status_cb) {
    7618:	f856 3c08 	ldr.w	r3, [r6, #-8]
    761c:	2b00      	cmp	r3, #0
    761e:	d0da      	beq.n	75d6 <usbd_work_handler+0x2aa>
				ctx->status_cb(USB_DC_SOF, NULL);
    7620:	2100      	movs	r1, #0
    7622:	200a      	movs	r0, #10
    7624:	4798      	blx	r3
    7626:	e7d6      	b.n	75d6 <usbd_work_handler+0x2aa>
    7628:	00010e1c 	.word	0x00010e1c
    762c:	00010dd4 	.word	0x00010dd4
    7630:	00012680 	.word	0x00012680
    7634:	00012388 	.word	0x00012388
    7638:	000123ac 	.word	0x000123ac
    763c:	00010f8c 	.word	0x00010f8c
    7640:	40027000 	.word	0x40027000
    7644:	20001fbc 	.word	0x20001fbc
    7648:	000126a4 	.word	0x000126a4
    764c:	000126cc 	.word	0x000126cc
    7650:	20001fd0 	.word	0x20001fd0
    7654:	0bad0000 	.word	0x0bad0000
    7658:	000126e8 	.word	0x000126e8
    765c:	200074cc 	.word	0x200074cc
			}
			break;
		case USBD_EVT_REINIT: {
				/* Reinitialize the peripheral after queue overflow. */
				LOG_ERR("USBD event queue full!");
    7660:	2301      	movs	r3, #1
    7662:	f363 0702 	bfi	r7, r3, #0, #3
    7666:	f36f 07c5 	bfc	r7, #3, #3
    766a:	4b2d      	ldr	r3, [pc, #180]	; (7720 <usbd_work_handler+0x3f4>)
    766c:	4a2d      	ldr	r2, [pc, #180]	; (7724 <usbd_work_handler+0x3f8>)
    766e:	1a9b      	subs	r3, r3, r2
    7670:	f3c3 03c9 	ubfx	r3, r3, #3, #10
    7674:	f363 178f 	bfi	r7, r3, #6, #10
    7678:	4639      	mov	r1, r7
    767a:	482b      	ldr	r0, [pc, #172]	; (7728 <usbd_work_handler+0x3fc>)
    767c:	f7fd fd38 	bl	50f0 <log_0>
	nrf5_power_usb_power_int_enable(false);
    7680:	2000      	movs	r0, #0
    7682:	f008 fe6a 	bl	1035a <nrf5_power_usb_power_int_enable>
	nrfx_usbd_disable();
    7686:	f7fd f961 	bl	494c <nrfx_usbd_disable>
	nrfx_usbd_uninit();
    768a:	f7fb f929 	bl	28e0 <nrfx_usbd_uninit>
static inline void usbd_evt_flush(void)
    768e:	e003      	b.n	7698 <usbd_work_handler+0x36c>
	k_mem_pool_free(&ev->block);
    7690:	3004      	adds	r0, #4
    7692:	f009 f95f 	bl	10954 <k_mem_pool_free>
	} while (ev != NULL);
    7696:	b13d      	cbz	r5, 76a8 <usbd_work_handler+0x37c>
    7698:	2100      	movs	r1, #0
    769a:	4824      	ldr	r0, [pc, #144]	; (772c <usbd_work_handler+0x400>)
    769c:	f005 fcc8 	bl	d030 <z_impl_k_queue_get>
		if (ev) {
    76a0:	4605      	mov	r5, r0
    76a2:	2800      	cmp	r0, #0
    76a4:	d1f4      	bne.n	7690 <usbd_work_handler+0x364>
    76a6:	e7f6      	b.n	7696 <usbd_work_handler+0x36a>
	ret = eps_ctx_init();
    76a8:	f7ff fc64 	bl	6f74 <eps_ctx_init>
	__ASSERT_NO_MSG(ret == 0);
    76ac:	b9b0      	cbnz	r0, 76dc <usbd_work_handler+0x3b0>
	nrf5_power_usb_power_int_enable(true);
    76ae:	2001      	movs	r0, #1
    76b0:	f008 fe53 	bl	1035a <nrf5_power_usb_power_int_enable>
	err = nrfx_usbd_init(usbd_event_handler);
    76b4:	481e      	ldr	r0, [pc, #120]	; (7730 <usbd_work_handler+0x404>)
    76b6:	f7fb faf1 	bl	2c9c <nrfx_usbd_init>
	if (err != NRFX_SUCCESS) {
    76ba:	4b1e      	ldr	r3, [pc, #120]	; (7734 <usbd_work_handler+0x408>)
    76bc:	4298      	cmp	r0, r3
    76be:	d08a      	beq.n	75d6 <usbd_work_handler+0x2aa>
		__ASSERT_NO_MSG(0);
    76c0:	4d1d      	ldr	r5, [pc, #116]	; (7738 <usbd_work_handler+0x40c>)
    76c2:	f240 43d2 	movw	r3, #1234	; 0x4d2
    76c6:	462a      	mov	r2, r5
    76c8:	491c      	ldr	r1, [pc, #112]	; (773c <usbd_work_handler+0x410>)
    76ca:	481d      	ldr	r0, [pc, #116]	; (7740 <usbd_work_handler+0x414>)
    76cc:	f008 f8d7 	bl	f87e <printk>
    76d0:	f240 41d2 	movw	r1, #1234	; 0x4d2
    76d4:	4628      	mov	r0, r5
    76d6:	f008 f958 	bl	f98a <assert_post_action>
    76da:	e77c      	b.n	75d6 <usbd_work_handler+0x2aa>
	__ASSERT_NO_MSG(ret == 0);
    76dc:	4d16      	ldr	r5, [pc, #88]	; (7738 <usbd_work_handler+0x40c>)
    76de:	f240 43ca 	movw	r3, #1226	; 0x4ca
    76e2:	462a      	mov	r2, r5
    76e4:	4917      	ldr	r1, [pc, #92]	; (7744 <usbd_work_handler+0x418>)
    76e6:	4816      	ldr	r0, [pc, #88]	; (7740 <usbd_work_handler+0x414>)
    76e8:	f008 f8c9 	bl	f87e <printk>
    76ec:	f240 41ca 	movw	r1, #1226	; 0x4ca
    76f0:	4628      	mov	r0, r5
    76f2:	f008 f94a 	bl	f98a <assert_post_action>
    76f6:	e7da      	b.n	76ae <usbd_work_handler+0x382>
				usbd_reinit();
				break;
			}
		default:
			LOG_ERR("Unknown USBD event: %"PRId16".", ev->evt_type);
    76f8:	2301      	movs	r3, #1
    76fa:	f363 0a02 	bfi	sl, r3, #0, #3
    76fe:	f36f 0ac5 	bfc	sl, #3, #3
    7702:	4b07      	ldr	r3, [pc, #28]	; (7720 <usbd_work_handler+0x3f4>)
    7704:	4a07      	ldr	r2, [pc, #28]	; (7724 <usbd_work_handler+0x3f8>)
    7706:	1a9b      	subs	r3, r3, r2
    7708:	f3c3 03c9 	ubfx	r3, r3, #3, #10
    770c:	f363 1a8f 	bfi	sl, r3, #6, #10
    7710:	4652      	mov	r2, sl
    7712:	480d      	ldr	r0, [pc, #52]	; (7748 <usbd_work_handler+0x41c>)
    7714:	f7fd fc1a 	bl	4f4c <log_1>
    7718:	e75d      	b.n	75d6 <usbd_work_handler+0x2aa>
			break;
		}
		usbd_evt_free(ev);
	}
}
    771a:	b005      	add	sp, #20
    771c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7720:	00010e1c 	.word	0x00010e1c
    7724:	00010dd4 	.word	0x00010dd4
    7728:	0001270c 	.word	0x0001270c
    772c:	200074cc 	.word	0x200074cc
    7730:	0000812d 	.word	0x0000812d
    7734:	0bad0000 	.word	0x0bad0000
    7738:	00012388 	.word	0x00012388
    773c:	00012ff0 	.word	0x00012ff0
    7740:	00010f8c 	.word	0x00010f8c
    7744:	00012724 	.word	0x00012724
    7748:	00012730 	.word	0x00012730

0000774c <usbd_event_transfer_data>:
{
    774c:	b5f0      	push	{r4, r5, r6, r7, lr}
    774e:	b083      	sub	sp, #12
    7750:	4605      	mov	r5, r0
		endpoint_ctx(p_event->data.eptransfer.ep);
    7752:	7884      	ldrb	r4, [r0, #2]
    7754:	4620      	mov	r0, r4
    7756:	f7ff fbe7 	bl	6f28 <endpoint_ctx>
    775a:	4606      	mov	r6, r0
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
    775c:	f014 0f80 	tst.w	r4, #128	; 0x80
    7760:	d13a      	bne.n	77d8 <usbd_event_transfer_data+0x8c>
		switch (p_event->data.eptransfer.status) {
    7762:	78e9      	ldrb	r1, [r5, #3]
    7764:	2900      	cmp	r1, #0
    7766:	f000 8154 	beq.w	7a12 <usbd_event_transfer_data+0x2c6>
    776a:	2901      	cmp	r1, #1
    776c:	f040 8232 	bne.w	7bd4 <usbd_event_transfer_data+0x488>
	ret = k_mem_pool_alloc(&fifo_elem_pool, &block,
    7770:	2300      	movs	r3, #0
    7772:	2218      	movs	r2, #24
    7774:	4669      	mov	r1, sp
    7776:	48c3      	ldr	r0, [pc, #780]	; (7a84 <usbd_event_transfer_data+0x338>)
    7778:	f005 f8ba 	bl	c8f0 <k_mem_pool_alloc>
	if (ret < 0) {
    777c:	2800      	cmp	r0, #0
    777e:	f2c0 80df 	blt.w	7940 <usbd_event_transfer_data+0x1f4>
	ev = (struct usbd_event *)block.data;
    7782:	9c00      	ldr	r4, [sp, #0]
	ev->block = block;
    7784:	1d23      	adds	r3, r4, #4
    7786:	aa02      	add	r2, sp, #8
    7788:	e912 0003 	ldmdb	r2, {r0, r1}
    778c:	e883 0003 	stmia.w	r3, {r0, r1}
			if (!ev) {
    7790:	2c00      	cmp	r4, #0
    7792:	f000 8175 	beq.w	7a80 <usbd_event_transfer_data+0x334>
			ep_ctx->read_pending = true;
    7796:	2301      	movs	r3, #1
    7798:	f886 3021 	strb.w	r3, [r6, #33]	; 0x21
			ev->evt_type = USBD_EVT_EP;
    779c:	7523      	strb	r3, [r4, #20]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
    779e:	7423      	strb	r3, [r4, #16]
			ev->evt.ep_evt.ep = ep_ctx;
    77a0:	60e6      	str	r6, [r4, #12]
	k_fifo_put(&work_queue, ev);
    77a2:	4621      	mov	r1, r4
    77a4:	48b8      	ldr	r0, [pc, #736]	; (7a88 <usbd_event_transfer_data+0x33c>)
    77a6:	f009 f948 	bl	10a3a <k_queue_append>
    77aa:	4bb8      	ldr	r3, [pc, #736]	; (7a8c <usbd_event_transfer_data+0x340>)
    77ac:	f3bf 8f5b 	dmb	ish
    77b0:	e853 2f00 	ldrex	r2, [r3]
    77b4:	f042 0101 	orr.w	r1, r2, #1
    77b8:	e843 1000 	strex	r0, r1, [r3]
    77bc:	2800      	cmp	r0, #0
    77be:	d1f7      	bne.n	77b0 <usbd_event_transfer_data+0x64>
    77c0:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    77c4:	f012 0f01 	tst.w	r2, #1
    77c8:	f040 815a 	bne.w	7a80 <usbd_event_transfer_data+0x334>
		k_queue_append(&work_q->queue, work);
    77cc:	f1a3 0108 	sub.w	r1, r3, #8
    77d0:	48af      	ldr	r0, [pc, #700]	; (7a90 <usbd_event_transfer_data+0x344>)
    77d2:	f009 f932 	bl	10a3a <k_queue_append>
    77d6:	e153      	b.n	7a80 <usbd_event_transfer_data+0x334>
		switch (p_event->data.eptransfer.status) {
    77d8:	78e9      	ldrb	r1, [r5, #3]
    77da:	2900      	cmp	r1, #0
    77dc:	f040 809d 	bne.w	791a <usbd_event_transfer_data+0x1ce>
	ret = k_mem_pool_alloc(&fifo_elem_pool, &block,
    77e0:	2300      	movs	r3, #0
    77e2:	2218      	movs	r2, #24
    77e4:	4669      	mov	r1, sp
    77e6:	48a7      	ldr	r0, [pc, #668]	; (7a84 <usbd_event_transfer_data+0x338>)
    77e8:	f005 f882 	bl	c8f0 <k_mem_pool_alloc>
	if (ret < 0) {
    77ec:	2800      	cmp	r0, #0
    77ee:	db2c      	blt.n	784a <usbd_event_transfer_data+0xfe>
	ev = (struct usbd_event *)block.data;
    77f0:	9c00      	ldr	r4, [sp, #0]
	ev->block = block;
    77f2:	1d23      	adds	r3, r4, #4
    77f4:	aa02      	add	r2, sp, #8
    77f6:	e912 0003 	ldmdb	r2, {r0, r1}
    77fa:	e883 0003 	stmia.w	r3, {r0, r1}
			if (!ev) {
    77fe:	2c00      	cmp	r4, #0
    7800:	f000 813e 	beq.w	7a80 <usbd_event_transfer_data+0x334>
			ep_ctx->write_in_progress = false;
    7804:	2300      	movs	r3, #0
    7806:	f886 3022 	strb.w	r3, [r6, #34]	; 0x22
			ev->evt_type = USBD_EVT_EP;
    780a:	2301      	movs	r3, #1
    780c:	7523      	strb	r3, [r4, #20]
			ev->evt.ep_evt.evt_type = EP_EVT_WRITE_COMPLETE;
    780e:	2303      	movs	r3, #3
    7810:	7423      	strb	r3, [r4, #16]
			ev->evt.ep_evt.ep = ep_ctx;
    7812:	60e6      	str	r6, [r4, #12]
	k_fifo_put(&work_queue, ev);
    7814:	4621      	mov	r1, r4
    7816:	489c      	ldr	r0, [pc, #624]	; (7a88 <usbd_event_transfer_data+0x33c>)
    7818:	f009 f90f 	bl	10a3a <k_queue_append>
    781c:	4b9b      	ldr	r3, [pc, #620]	; (7a8c <usbd_event_transfer_data+0x340>)
    781e:	f3bf 8f5b 	dmb	ish
    7822:	e853 2f00 	ldrex	r2, [r3]
    7826:	f042 0101 	orr.w	r1, r2, #1
    782a:	e843 1000 	strex	r0, r1, [r3]
    782e:	2800      	cmp	r0, #0
    7830:	d1f7      	bne.n	7822 <usbd_event_transfer_data+0xd6>
    7832:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    7836:	f012 0f01 	tst.w	r2, #1
    783a:	f040 8121 	bne.w	7a80 <usbd_event_transfer_data+0x334>
		k_queue_append(&work_q->queue, work);
    783e:	f1a3 0108 	sub.w	r1, r3, #8
    7842:	4893      	ldr	r0, [pc, #588]	; (7a90 <usbd_event_transfer_data+0x344>)
    7844:	f009 f8f9 	bl	10a3a <k_queue_append>
    7848:	e11a      	b.n	7a80 <usbd_event_transfer_data+0x334>
		LOG_ERR("USBD event allocation failed!");
    784a:	f04f 0100 	mov.w	r1, #0
    784e:	2301      	movs	r3, #1
    7850:	f363 0102 	bfi	r1, r3, #0, #3
    7854:	f36f 01c5 	bfc	r1, #3, #3
    7858:	4b8e      	ldr	r3, [pc, #568]	; (7a94 <usbd_event_transfer_data+0x348>)
    785a:	4a8f      	ldr	r2, [pc, #572]	; (7a98 <usbd_event_transfer_data+0x34c>)
    785c:	1a9b      	subs	r3, r3, r2
    785e:	f3c3 03c9 	ubfx	r3, r3, #3, #10
    7862:	f363 118f 	bfi	r1, r3, #6, #10
    7866:	488d      	ldr	r0, [pc, #564]	; (7a9c <usbd_event_transfer_data+0x350>)
    7868:	f7fd fc42 	bl	50f0 <log_0>
static inline void usbd_evt_flush(void)
    786c:	e003      	b.n	7876 <usbd_event_transfer_data+0x12a>
	k_mem_pool_free(&ev->block);
    786e:	3004      	adds	r0, #4
    7870:	f009 f870 	bl	10954 <k_mem_pool_free>
	} while (ev != NULL);
    7874:	b13c      	cbz	r4, 7886 <usbd_event_transfer_data+0x13a>
    7876:	2100      	movs	r1, #0
    7878:	4883      	ldr	r0, [pc, #524]	; (7a88 <usbd_event_transfer_data+0x33c>)
    787a:	f005 fbd9 	bl	d030 <z_impl_k_queue_get>
		if (ev) {
    787e:	4604      	mov	r4, r0
    7880:	2800      	cmp	r0, #0
    7882:	d1f4      	bne.n	786e <usbd_event_transfer_data+0x122>
    7884:	e7f6      	b.n	7874 <usbd_event_transfer_data+0x128>
		ret = k_mem_pool_alloc(&fifo_elem_pool, &block,
    7886:	2300      	movs	r3, #0
    7888:	2218      	movs	r2, #24
    788a:	4669      	mov	r1, sp
    788c:	487d      	ldr	r0, [pc, #500]	; (7a84 <usbd_event_transfer_data+0x338>)
    788e:	f005 f82f 	bl	c8f0 <k_mem_pool_alloc>
		if (ret < 0) {
    7892:	2800      	cmp	r0, #0
    7894:	db22      	blt.n	78dc <usbd_event_transfer_data+0x190>
		ev = (struct usbd_event *)block.data;
    7896:	9b00      	ldr	r3, [sp, #0]
		ev->block = block;
    7898:	1d1a      	adds	r2, r3, #4
    789a:	a902      	add	r1, sp, #8
    789c:	e911 0003 	ldmdb	r1, {r0, r1}
    78a0:	e882 0003 	stmia.w	r2, {r0, r1}
		ev->evt_type = USBD_EVT_REINIT;
    78a4:	2204      	movs	r2, #4
    78a6:	751a      	strb	r2, [r3, #20]
	k_fifo_put(&work_queue, ev);
    78a8:	4619      	mov	r1, r3
    78aa:	4877      	ldr	r0, [pc, #476]	; (7a88 <usbd_event_transfer_data+0x33c>)
    78ac:	f009 f8c5 	bl	10a3a <k_queue_append>
    78b0:	4b76      	ldr	r3, [pc, #472]	; (7a8c <usbd_event_transfer_data+0x340>)
    78b2:	f3bf 8f5b 	dmb	ish
    78b6:	e853 2f00 	ldrex	r2, [r3]
    78ba:	f042 0101 	orr.w	r1, r2, #1
    78be:	e843 1000 	strex	r0, r1, [r3]
    78c2:	2800      	cmp	r0, #0
    78c4:	d1f7      	bne.n	78b6 <usbd_event_transfer_data+0x16a>
    78c6:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    78ca:	f012 0f01 	tst.w	r2, #1
    78ce:	d196      	bne.n	77fe <usbd_event_transfer_data+0xb2>
		k_queue_append(&work_q->queue, work);
    78d0:	f1a3 0108 	sub.w	r1, r3, #8
    78d4:	486e      	ldr	r0, [pc, #440]	; (7a90 <usbd_event_transfer_data+0x344>)
    78d6:	f009 f8b0 	bl	10a3a <k_queue_append>
    78da:	e790      	b.n	77fe <usbd_event_transfer_data+0xb2>
			LOG_ERR("USBD event memory corrupted.");
    78dc:	f04f 0100 	mov.w	r1, #0
    78e0:	2301      	movs	r3, #1
    78e2:	f363 0102 	bfi	r1, r3, #0, #3
    78e6:	f36f 01c5 	bfc	r1, #3, #3
    78ea:	4b6a      	ldr	r3, [pc, #424]	; (7a94 <usbd_event_transfer_data+0x348>)
    78ec:	4a6a      	ldr	r2, [pc, #424]	; (7a98 <usbd_event_transfer_data+0x34c>)
    78ee:	1a9b      	subs	r3, r3, r2
    78f0:	f3c3 03c9 	ubfx	r3, r3, #3, #10
    78f4:	f363 118f 	bfi	r1, r3, #6, #10
    78f8:	4869      	ldr	r0, [pc, #420]	; (7aa0 <usbd_event_transfer_data+0x354>)
    78fa:	f7fd fbf9 	bl	50f0 <log_0>
			__ASSERT_NO_MSG(0);
    78fe:	4d69      	ldr	r5, [pc, #420]	; (7aa4 <usbd_event_transfer_data+0x358>)
    7900:	f240 13d5 	movw	r3, #469	; 0x1d5
    7904:	462a      	mov	r2, r5
    7906:	4968      	ldr	r1, [pc, #416]	; (7aa8 <usbd_event_transfer_data+0x35c>)
    7908:	4868      	ldr	r0, [pc, #416]	; (7aac <usbd_event_transfer_data+0x360>)
    790a:	f007 ffb8 	bl	f87e <printk>
    790e:	f240 11d5 	movw	r1, #469	; 0x1d5
    7912:	4628      	mov	r0, r5
    7914:	f008 f839 	bl	f98a <assert_post_action>
			return NULL;
    7918:	e771      	b.n	77fe <usbd_event_transfer_data+0xb2>
			LOG_ERR("Unexpected event from nrfx_usbd: %d, ep %d",
    791a:	f04f 0300 	mov.w	r3, #0
    791e:	2201      	movs	r2, #1
    7920:	f362 0302 	bfi	r3, r2, #0, #3
    7924:	f36f 03c5 	bfc	r3, #3, #3
    7928:	4a5a      	ldr	r2, [pc, #360]	; (7a94 <usbd_event_transfer_data+0x348>)
    792a:	485b      	ldr	r0, [pc, #364]	; (7a98 <usbd_event_transfer_data+0x34c>)
    792c:	1a12      	subs	r2, r2, r0
    792e:	f3c2 02c9 	ubfx	r2, r2, #3, #10
    7932:	f362 138f 	bfi	r3, r2, #6, #10
    7936:	4622      	mov	r2, r4
    7938:	485d      	ldr	r0, [pc, #372]	; (7ab0 <usbd_event_transfer_data+0x364>)
    793a:	f7fd fb6d 	bl	5018 <log_2>
    793e:	e09f      	b.n	7a80 <usbd_event_transfer_data+0x334>
		LOG_ERR("USBD event allocation failed!");
    7940:	f04f 0100 	mov.w	r1, #0
    7944:	2301      	movs	r3, #1
    7946:	f363 0102 	bfi	r1, r3, #0, #3
    794a:	f36f 01c5 	bfc	r1, #3, #3
    794e:	4b51      	ldr	r3, [pc, #324]	; (7a94 <usbd_event_transfer_data+0x348>)
    7950:	4a51      	ldr	r2, [pc, #324]	; (7a98 <usbd_event_transfer_data+0x34c>)
    7952:	1a9b      	subs	r3, r3, r2
    7954:	f3c3 03c9 	ubfx	r3, r3, #3, #10
    7958:	f363 118f 	bfi	r1, r3, #6, #10
    795c:	484f      	ldr	r0, [pc, #316]	; (7a9c <usbd_event_transfer_data+0x350>)
    795e:	f7fd fbc7 	bl	50f0 <log_0>
static inline void usbd_evt_flush(void)
    7962:	e003      	b.n	796c <usbd_event_transfer_data+0x220>
	k_mem_pool_free(&ev->block);
    7964:	3004      	adds	r0, #4
    7966:	f008 fff5 	bl	10954 <k_mem_pool_free>
	} while (ev != NULL);
    796a:	b13c      	cbz	r4, 797c <usbd_event_transfer_data+0x230>
    796c:	2100      	movs	r1, #0
    796e:	4846      	ldr	r0, [pc, #280]	; (7a88 <usbd_event_transfer_data+0x33c>)
    7970:	f005 fb5e 	bl	d030 <z_impl_k_queue_get>
		if (ev) {
    7974:	4604      	mov	r4, r0
    7976:	2800      	cmp	r0, #0
    7978:	d1f4      	bne.n	7964 <usbd_event_transfer_data+0x218>
    797a:	e7f6      	b.n	796a <usbd_event_transfer_data+0x21e>
		ret = k_mem_pool_alloc(&fifo_elem_pool, &block,
    797c:	2300      	movs	r3, #0
    797e:	2218      	movs	r2, #24
    7980:	4669      	mov	r1, sp
    7982:	4840      	ldr	r0, [pc, #256]	; (7a84 <usbd_event_transfer_data+0x338>)
    7984:	f004 ffb4 	bl	c8f0 <k_mem_pool_alloc>
		if (ret < 0) {
    7988:	2800      	cmp	r0, #0
    798a:	db23      	blt.n	79d4 <usbd_event_transfer_data+0x288>
		ev = (struct usbd_event *)block.data;
    798c:	9b00      	ldr	r3, [sp, #0]
		ev->block = block;
    798e:	1d1a      	adds	r2, r3, #4
    7990:	a902      	add	r1, sp, #8
    7992:	e911 0003 	ldmdb	r1, {r0, r1}
    7996:	e882 0003 	stmia.w	r2, {r0, r1}
		ev->evt_type = USBD_EVT_REINIT;
    799a:	2204      	movs	r2, #4
    799c:	751a      	strb	r2, [r3, #20]
	k_fifo_put(&work_queue, ev);
    799e:	4619      	mov	r1, r3
    79a0:	4839      	ldr	r0, [pc, #228]	; (7a88 <usbd_event_transfer_data+0x33c>)
    79a2:	f009 f84a 	bl	10a3a <k_queue_append>
    79a6:	4b39      	ldr	r3, [pc, #228]	; (7a8c <usbd_event_transfer_data+0x340>)
    79a8:	f3bf 8f5b 	dmb	ish
    79ac:	e853 2f00 	ldrex	r2, [r3]
    79b0:	f042 0101 	orr.w	r1, r2, #1
    79b4:	e843 1000 	strex	r0, r1, [r3]
    79b8:	2800      	cmp	r0, #0
    79ba:	d1f7      	bne.n	79ac <usbd_event_transfer_data+0x260>
    79bc:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    79c0:	f012 0f01 	tst.w	r2, #1
    79c4:	f47f aee4 	bne.w	7790 <usbd_event_transfer_data+0x44>
		k_queue_append(&work_q->queue, work);
    79c8:	f1a3 0108 	sub.w	r1, r3, #8
    79cc:	4830      	ldr	r0, [pc, #192]	; (7a90 <usbd_event_transfer_data+0x344>)
    79ce:	f009 f834 	bl	10a3a <k_queue_append>
    79d2:	e6dd      	b.n	7790 <usbd_event_transfer_data+0x44>
			LOG_ERR("USBD event memory corrupted.");
    79d4:	f04f 0100 	mov.w	r1, #0
    79d8:	2301      	movs	r3, #1
    79da:	f363 0102 	bfi	r1, r3, #0, #3
    79de:	f36f 01c5 	bfc	r1, #3, #3
    79e2:	4b2c      	ldr	r3, [pc, #176]	; (7a94 <usbd_event_transfer_data+0x348>)
    79e4:	4a2c      	ldr	r2, [pc, #176]	; (7a98 <usbd_event_transfer_data+0x34c>)
    79e6:	1a9b      	subs	r3, r3, r2
    79e8:	f3c3 03c9 	ubfx	r3, r3, #3, #10
    79ec:	f363 118f 	bfi	r1, r3, #6, #10
    79f0:	482b      	ldr	r0, [pc, #172]	; (7aa0 <usbd_event_transfer_data+0x354>)
    79f2:	f7fd fb7d 	bl	50f0 <log_0>
			__ASSERT_NO_MSG(0);
    79f6:	4d2b      	ldr	r5, [pc, #172]	; (7aa4 <usbd_event_transfer_data+0x358>)
    79f8:	f240 13d5 	movw	r3, #469	; 0x1d5
    79fc:	462a      	mov	r2, r5
    79fe:	492a      	ldr	r1, [pc, #168]	; (7aa8 <usbd_event_transfer_data+0x35c>)
    7a00:	482a      	ldr	r0, [pc, #168]	; (7aac <usbd_event_transfer_data+0x360>)
    7a02:	f007 ff3c 	bl	f87e <printk>
    7a06:	f240 11d5 	movw	r1, #469	; 0x1d5
    7a0a:	4628      	mov	r0, r5
    7a0c:	f007 ffbd 	bl	f98a <assert_post_action>
			return NULL;
    7a10:	e6be      	b.n	7790 <usbd_event_transfer_data+0x44>
	ret = k_mem_pool_alloc(&fifo_elem_pool, &block,
    7a12:	2300      	movs	r3, #0
    7a14:	2218      	movs	r2, #24
    7a16:	4669      	mov	r1, sp
    7a18:	481a      	ldr	r0, [pc, #104]	; (7a84 <usbd_event_transfer_data+0x338>)
    7a1a:	f004 ff69 	bl	c8f0 <k_mem_pool_alloc>
	if (ret < 0) {
    7a1e:	2800      	cmp	r0, #0
    7a20:	db4a      	blt.n	7ab8 <usbd_event_transfer_data+0x36c>
	ev = (struct usbd_event *)block.data;
    7a22:	9c00      	ldr	r4, [sp, #0]
	ev->block = block;
    7a24:	1d23      	adds	r3, r4, #4
    7a26:	aa02      	add	r2, sp, #8
    7a28:	e912 0003 	ldmdb	r2, {r0, r1}
    7a2c:	e883 0003 	stmia.w	r3, {r0, r1}
			if (!ev) {
    7a30:	b334      	cbz	r4, 7a80 <usbd_event_transfer_data+0x334>
				p_event->data.eptransfer.ep);
    7a32:	78ab      	ldrb	r3, [r5, #2]

uint32_t nrf_usbd_ep_amount_get(uint8_t ep)
{
    uint32_t ret;

    if (NRF_USBD_EPIN_CHECK(ep))
    7a34:	f013 0f80 	tst.w	r3, #128	; 0x80
    7a38:	f040 80a7 	bne.w	7b8a <usbd_event_transfer_data+0x43e>
            ret = NRF_USBD->EPIN[epnr].AMOUNT;
        }
    }
    else
    {
        if (NRF_USBD_EPISO_CHECK(ep))
    7a3c:	f013 0f08 	tst.w	r3, #8
    7a40:	f000 80b6 	beq.w	7bb0 <usbd_event_transfer_data+0x464>
        {
            ret = NRF_USBD->ISOOUT.AMOUNT;
    7a44:	4b1b      	ldr	r3, [pc, #108]	; (7ab4 <usbd_event_transfer_data+0x368>)
    7a46:	f8d3 37a8 	ldr.w	r3, [r3, #1960]	; 0x7a8
			ep_ctx->buf.len = nrf_usbd_ep_amount_get(
    7a4a:	60f3      	str	r3, [r6, #12]
			ev->evt_type = USBD_EVT_EP;
    7a4c:	2301      	movs	r3, #1
    7a4e:	7523      	strb	r3, [r4, #20]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_COMPLETE;
    7a50:	2302      	movs	r3, #2
    7a52:	7423      	strb	r3, [r4, #16]
			ev->evt.ep_evt.ep = ep_ctx;
    7a54:	60e6      	str	r6, [r4, #12]
	k_fifo_put(&work_queue, ev);
    7a56:	4621      	mov	r1, r4
    7a58:	480b      	ldr	r0, [pc, #44]	; (7a88 <usbd_event_transfer_data+0x33c>)
    7a5a:	f008 ffee 	bl	10a3a <k_queue_append>
    7a5e:	4b0b      	ldr	r3, [pc, #44]	; (7a8c <usbd_event_transfer_data+0x340>)
    7a60:	f3bf 8f5b 	dmb	ish
    7a64:	e853 2f00 	ldrex	r2, [r3]
    7a68:	f042 0101 	orr.w	r1, r2, #1
    7a6c:	e843 1000 	strex	r0, r1, [r3]
    7a70:	2800      	cmp	r0, #0
    7a72:	d1f7      	bne.n	7a64 <usbd_event_transfer_data+0x318>
    7a74:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    7a78:	f012 0f01 	tst.w	r2, #1
    7a7c:	f000 80a4 	beq.w	7bc8 <usbd_event_transfer_data+0x47c>
}
    7a80:	b003      	add	sp, #12
    7a82:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7a84:	20007420 	.word	0x20007420
    7a88:	200074cc 	.word	0x200074cc
    7a8c:	20001fcc 	.word	0x20001fcc
    7a90:	20002738 	.word	0x20002738
    7a94:	00010e1c 	.word	0x00010e1c
    7a98:	00010dd4 	.word	0x00010dd4
    7a9c:	00012614 	.word	0x00012614
    7aa0:	00012634 	.word	0x00012634
    7aa4:	00012388 	.word	0x00012388
    7aa8:	00012ff0 	.word	0x00012ff0
    7aac:	00010f8c 	.word	0x00010f8c
    7ab0:	00012654 	.word	0x00012654
    7ab4:	40027000 	.word	0x40027000
		LOG_ERR("USBD event allocation failed!");
    7ab8:	f04f 0100 	mov.w	r1, #0
    7abc:	2301      	movs	r3, #1
    7abe:	f363 0102 	bfi	r1, r3, #0, #3
    7ac2:	f36f 01c5 	bfc	r1, #3, #3
    7ac6:	4b4d      	ldr	r3, [pc, #308]	; (7bfc <usbd_event_transfer_data+0x4b0>)
    7ac8:	4a4d      	ldr	r2, [pc, #308]	; (7c00 <usbd_event_transfer_data+0x4b4>)
    7aca:	1a9b      	subs	r3, r3, r2
    7acc:	f3c3 03c9 	ubfx	r3, r3, #3, #10
    7ad0:	f363 118f 	bfi	r1, r3, #6, #10
    7ad4:	484b      	ldr	r0, [pc, #300]	; (7c04 <usbd_event_transfer_data+0x4b8>)
    7ad6:	f7fd fb0b 	bl	50f0 <log_0>
static inline void usbd_evt_flush(void)
    7ada:	e003      	b.n	7ae4 <usbd_event_transfer_data+0x398>
	k_mem_pool_free(&ev->block);
    7adc:	3004      	adds	r0, #4
    7ade:	f008 ff39 	bl	10954 <k_mem_pool_free>
	} while (ev != NULL);
    7ae2:	b13c      	cbz	r4, 7af4 <usbd_event_transfer_data+0x3a8>
    7ae4:	2100      	movs	r1, #0
    7ae6:	4848      	ldr	r0, [pc, #288]	; (7c08 <usbd_event_transfer_data+0x4bc>)
    7ae8:	f005 faa2 	bl	d030 <z_impl_k_queue_get>
		if (ev) {
    7aec:	4604      	mov	r4, r0
    7aee:	2800      	cmp	r0, #0
    7af0:	d1f4      	bne.n	7adc <usbd_event_transfer_data+0x390>
    7af2:	e7f6      	b.n	7ae2 <usbd_event_transfer_data+0x396>
		ret = k_mem_pool_alloc(&fifo_elem_pool, &block,
    7af4:	2300      	movs	r3, #0
    7af6:	2218      	movs	r2, #24
    7af8:	4669      	mov	r1, sp
    7afa:	4844      	ldr	r0, [pc, #272]	; (7c0c <usbd_event_transfer_data+0x4c0>)
    7afc:	f004 fef8 	bl	c8f0 <k_mem_pool_alloc>
		if (ret < 0) {
    7b00:	2800      	cmp	r0, #0
    7b02:	db23      	blt.n	7b4c <usbd_event_transfer_data+0x400>
		ev = (struct usbd_event *)block.data;
    7b04:	9b00      	ldr	r3, [sp, #0]
		ev->block = block;
    7b06:	1d1a      	adds	r2, r3, #4
    7b08:	a902      	add	r1, sp, #8
    7b0a:	e911 0003 	ldmdb	r1, {r0, r1}
    7b0e:	e882 0003 	stmia.w	r2, {r0, r1}
		ev->evt_type = USBD_EVT_REINIT;
    7b12:	2204      	movs	r2, #4
    7b14:	751a      	strb	r2, [r3, #20]
	k_fifo_put(&work_queue, ev);
    7b16:	4619      	mov	r1, r3
    7b18:	483b      	ldr	r0, [pc, #236]	; (7c08 <usbd_event_transfer_data+0x4bc>)
    7b1a:	f008 ff8e 	bl	10a3a <k_queue_append>
    7b1e:	4b3c      	ldr	r3, [pc, #240]	; (7c10 <usbd_event_transfer_data+0x4c4>)
    7b20:	f3bf 8f5b 	dmb	ish
    7b24:	e853 2f00 	ldrex	r2, [r3]
    7b28:	f042 0101 	orr.w	r1, r2, #1
    7b2c:	e843 1000 	strex	r0, r1, [r3]
    7b30:	2800      	cmp	r0, #0
    7b32:	d1f7      	bne.n	7b24 <usbd_event_transfer_data+0x3d8>
    7b34:	f3bf 8f5b 	dmb	ish
    7b38:	f012 0f01 	tst.w	r2, #1
    7b3c:	f47f af78 	bne.w	7a30 <usbd_event_transfer_data+0x2e4>
		k_queue_append(&work_q->queue, work);
    7b40:	f1a3 0108 	sub.w	r1, r3, #8
    7b44:	4833      	ldr	r0, [pc, #204]	; (7c14 <usbd_event_transfer_data+0x4c8>)
    7b46:	f008 ff78 	bl	10a3a <k_queue_append>
    7b4a:	e771      	b.n	7a30 <usbd_event_transfer_data+0x2e4>
			LOG_ERR("USBD event memory corrupted.");
    7b4c:	f04f 0100 	mov.w	r1, #0
    7b50:	2301      	movs	r3, #1
    7b52:	f363 0102 	bfi	r1, r3, #0, #3
    7b56:	f36f 01c5 	bfc	r1, #3, #3
    7b5a:	4b28      	ldr	r3, [pc, #160]	; (7bfc <usbd_event_transfer_data+0x4b0>)
    7b5c:	4a28      	ldr	r2, [pc, #160]	; (7c00 <usbd_event_transfer_data+0x4b4>)
    7b5e:	1a9b      	subs	r3, r3, r2
    7b60:	f3c3 03c9 	ubfx	r3, r3, #3, #10
    7b64:	f363 118f 	bfi	r1, r3, #6, #10
    7b68:	482b      	ldr	r0, [pc, #172]	; (7c18 <usbd_event_transfer_data+0x4cc>)
    7b6a:	f7fd fac1 	bl	50f0 <log_0>
			__ASSERT_NO_MSG(0);
    7b6e:	4f2b      	ldr	r7, [pc, #172]	; (7c1c <usbd_event_transfer_data+0x4d0>)
    7b70:	f240 13d5 	movw	r3, #469	; 0x1d5
    7b74:	463a      	mov	r2, r7
    7b76:	492a      	ldr	r1, [pc, #168]	; (7c20 <usbd_event_transfer_data+0x4d4>)
    7b78:	482a      	ldr	r0, [pc, #168]	; (7c24 <usbd_event_transfer_data+0x4d8>)
    7b7a:	f007 fe80 	bl	f87e <printk>
    7b7e:	f240 11d5 	movw	r1, #469	; 0x1d5
    7b82:	4638      	mov	r0, r7
    7b84:	f007 ff01 	bl	f98a <assert_post_action>
			return NULL;
    7b88:	e752      	b.n	7a30 <usbd_event_transfer_data+0x2e4>
        if (NRF_USBD_EPISO_CHECK(ep))
    7b8a:	f013 0f08 	tst.w	r3, #8
    7b8e:	d003      	beq.n	7b98 <usbd_event_transfer_data+0x44c>
            ret = NRF_USBD->ISOIN.AMOUNT;
    7b90:	4b25      	ldr	r3, [pc, #148]	; (7c28 <usbd_event_transfer_data+0x4dc>)
    7b92:	f8d3 36a8 	ldr.w	r3, [r3, #1704]	; 0x6a8
    7b96:	e758      	b.n	7a4a <usbd_event_transfer_data+0x2fe>
            uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
    7b98:	f003 030f 	and.w	r3, r3, #15
            ret = NRF_USBD->EPIN[epnr].AMOUNT;
    7b9c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    7ba0:	009b      	lsls	r3, r3, #2
    7ba2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    7ba6:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    7baa:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    7bae:	e74c      	b.n	7a4a <usbd_event_transfer_data+0x2fe>
        }
        else
        {
            uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
    7bb0:	f003 030f 	and.w	r3, r3, #15
            NRFX_ASSERT(epnr < NRFX_ARRAY_SIZE(NRF_USBD->EPOUT));
            ret = NRF_USBD->EPOUT[epnr].AMOUNT;
    7bb4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    7bb8:	009b      	lsls	r3, r3, #2
    7bba:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    7bbe:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    7bc2:	f8d3 3708 	ldr.w	r3, [r3, #1800]	; 0x708
    7bc6:	e740      	b.n	7a4a <usbd_event_transfer_data+0x2fe>
    7bc8:	f1a3 0108 	sub.w	r1, r3, #8
    7bcc:	4811      	ldr	r0, [pc, #68]	; (7c14 <usbd_event_transfer_data+0x4c8>)
    7bce:	f008 ff34 	bl	10a3a <k_queue_append>
    7bd2:	e755      	b.n	7a80 <usbd_event_transfer_data+0x334>
			LOG_ERR("Unexpected event from nrfx_usbd: %d, ep %d",
    7bd4:	f04f 0300 	mov.w	r3, #0
    7bd8:	2201      	movs	r2, #1
    7bda:	f362 0302 	bfi	r3, r2, #0, #3
    7bde:	f36f 03c5 	bfc	r3, #3, #3
    7be2:	4a06      	ldr	r2, [pc, #24]	; (7bfc <usbd_event_transfer_data+0x4b0>)
    7be4:	4806      	ldr	r0, [pc, #24]	; (7c00 <usbd_event_transfer_data+0x4b4>)
    7be6:	1a12      	subs	r2, r2, r0
    7be8:	f3c2 02c9 	ubfx	r2, r2, #3, #10
    7bec:	f362 138f 	bfi	r3, r2, #6, #10
    7bf0:	4622      	mov	r2, r4
    7bf2:	480e      	ldr	r0, [pc, #56]	; (7c2c <usbd_event_transfer_data+0x4e0>)
    7bf4:	f7fd fa10 	bl	5018 <log_2>
    7bf8:	e742      	b.n	7a80 <usbd_event_transfer_data+0x334>
    7bfa:	bf00      	nop
    7bfc:	00010e1c 	.word	0x00010e1c
    7c00:	00010dd4 	.word	0x00010dd4
    7c04:	00012614 	.word	0x00012614
    7c08:	200074cc 	.word	0x200074cc
    7c0c:	20007420 	.word	0x20007420
    7c10:	20001fcc 	.word	0x20001fcc
    7c14:	20002738 	.word	0x20002738
    7c18:	00012634 	.word	0x00012634
    7c1c:	00012388 	.word	0x00012388
    7c20:	00012ff0 	.word	0x00012ff0
    7c24:	00010f8c 	.word	0x00010f8c
    7c28:	40027000 	.word	0x40027000
    7c2c:	00012654 	.word	0x00012654

00007c30 <usbd_event_transfer_ctrl>:
{
    7c30:	b5f0      	push	{r4, r5, r6, r7, lr}
    7c32:	b083      	sub	sp, #12
    7c34:	4605      	mov	r5, r0
		endpoint_ctx(p_event->data.eptransfer.ep);
    7c36:	7884      	ldrb	r4, [r0, #2]
    7c38:	4620      	mov	r0, r4
    7c3a:	f7ff f975 	bl	6f28 <endpoint_ctx>
    7c3e:	4606      	mov	r6, r0
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
    7c40:	f014 0f80 	tst.w	r4, #128	; 0x80
    7c44:	d138      	bne.n	7cb8 <usbd_event_transfer_ctrl+0x88>
		switch (p_event->data.eptransfer.status) {
    7c46:	78e9      	ldrb	r1, [r5, #3]
    7c48:	2900      	cmp	r1, #0
    7c4a:	f000 8151 	beq.w	7ef0 <usbd_event_transfer_ctrl+0x2c0>
    7c4e:	2901      	cmp	r1, #1
    7c50:	f040 823d 	bne.w	80ce <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xce>
	ret = k_mem_pool_alloc(&fifo_elem_pool, &block,
    7c54:	2300      	movs	r3, #0
    7c56:	2218      	movs	r2, #24
    7c58:	4669      	mov	r1, sp
    7c5a:	48c8      	ldr	r0, [pc, #800]	; (7f7c <usbd_event_transfer_ctrl+0x34c>)
    7c5c:	f004 fe48 	bl	c8f0 <k_mem_pool_alloc>
	if (ret < 0) {
    7c60:	2800      	cmp	r0, #0
    7c62:	f2c0 80dc 	blt.w	7e1e <usbd_event_transfer_ctrl+0x1ee>
	ev = (struct usbd_event *)block.data;
    7c66:	9c00      	ldr	r4, [sp, #0]
	ev->block = block;
    7c68:	1d23      	adds	r3, r4, #4
    7c6a:	aa02      	add	r2, sp, #8
    7c6c:	e912 0003 	ldmdb	r2, {r0, r1}
    7c70:	e883 0003 	stmia.w	r3, {r0, r1}
			if (!ev) {
    7c74:	2c00      	cmp	r4, #0
    7c76:	d04f      	beq.n	7d18 <usbd_event_transfer_ctrl+0xe8>
			ep_ctx->read_pending = true;
    7c78:	2301      	movs	r3, #1
    7c7a:	f886 3021 	strb.w	r3, [r6, #33]	; 0x21
			ev->evt_type = USBD_EVT_EP;
    7c7e:	7523      	strb	r3, [r4, #20]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
    7c80:	7423      	strb	r3, [r4, #16]
			ev->evt.ep_evt.ep = ep_ctx;
    7c82:	60e6      	str	r6, [r4, #12]
	k_fifo_put(&work_queue, ev);
    7c84:	4621      	mov	r1, r4
    7c86:	48be      	ldr	r0, [pc, #760]	; (7f80 <usbd_event_transfer_ctrl+0x350>)
    7c88:	f008 fed7 	bl	10a3a <k_queue_append>
    7c8c:	4bbd      	ldr	r3, [pc, #756]	; (7f84 <usbd_event_transfer_ctrl+0x354>)
    7c8e:	f3bf 8f5b 	dmb	ish
    7c92:	e853 2f00 	ldrex	r2, [r3]
    7c96:	f042 0101 	orr.w	r1, r2, #1
    7c9a:	e843 1000 	strex	r0, r1, [r3]
    7c9e:	2800      	cmp	r0, #0
    7ca0:	d1f7      	bne.n	7c92 <usbd_event_transfer_ctrl+0x62>
    7ca2:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    7ca6:	f012 0f01 	tst.w	r2, #1
    7caa:	d135      	bne.n	7d18 <usbd_event_transfer_ctrl+0xe8>
		k_queue_append(&work_q->queue, work);
    7cac:	f1a3 0108 	sub.w	r1, r3, #8
    7cb0:	48b5      	ldr	r0, [pc, #724]	; (7f88 <usbd_event_transfer_ctrl+0x358>)
    7cb2:	f008 fec2 	bl	10a3a <k_queue_append>
    7cb6:	e02f      	b.n	7d18 <usbd_event_transfer_ctrl+0xe8>
		switch (p_event->data.eptransfer.status) {
    7cb8:	78e9      	ldrb	r1, [r5, #3]
    7cba:	2900      	cmp	r1, #0
    7cbc:	f040 809c 	bne.w	7df8 <usbd_event_transfer_ctrl+0x1c8>
	ret = k_mem_pool_alloc(&fifo_elem_pool, &block,
    7cc0:	2300      	movs	r3, #0
    7cc2:	2218      	movs	r2, #24
    7cc4:	4669      	mov	r1, sp
    7cc6:	48ad      	ldr	r0, [pc, #692]	; (7f7c <usbd_event_transfer_ctrl+0x34c>)
    7cc8:	f004 fe12 	bl	c8f0 <k_mem_pool_alloc>
	if (ret < 0) {
    7ccc:	2800      	cmp	r0, #0
    7cce:	db25      	blt.n	7d1c <usbd_event_transfer_ctrl+0xec>
	ev = (struct usbd_event *)block.data;
    7cd0:	9c00      	ldr	r4, [sp, #0]
	ev->block = block;
    7cd2:	1d23      	adds	r3, r4, #4
    7cd4:	aa02      	add	r2, sp, #8
    7cd6:	e912 0003 	ldmdb	r2, {r0, r1}
    7cda:	e883 0003 	stmia.w	r3, {r0, r1}
			if (!ev) {
    7cde:	b1dc      	cbz	r4, 7d18 <usbd_event_transfer_ctrl+0xe8>
			ep_ctx->write_in_progress = false;
    7ce0:	2300      	movs	r3, #0
    7ce2:	f886 3022 	strb.w	r3, [r6, #34]	; 0x22
			ev->evt_type = USBD_EVT_EP;
    7ce6:	2301      	movs	r3, #1
    7ce8:	7523      	strb	r3, [r4, #20]
			ev->evt.ep_evt.evt_type = EP_EVT_WRITE_COMPLETE;
    7cea:	2303      	movs	r3, #3
    7cec:	7423      	strb	r3, [r4, #16]
			ev->evt.ep_evt.ep = ep_ctx;
    7cee:	60e6      	str	r6, [r4, #12]
	k_fifo_put(&work_queue, ev);
    7cf0:	4621      	mov	r1, r4
    7cf2:	48a3      	ldr	r0, [pc, #652]	; (7f80 <usbd_event_transfer_ctrl+0x350>)
    7cf4:	f008 fea1 	bl	10a3a <k_queue_append>
    7cf8:	4ba2      	ldr	r3, [pc, #648]	; (7f84 <usbd_event_transfer_ctrl+0x354>)
    7cfa:	f3bf 8f5b 	dmb	ish
    7cfe:	e853 2f00 	ldrex	r2, [r3]
    7d02:	f042 0101 	orr.w	r1, r2, #1
    7d06:	e843 1000 	strex	r0, r1, [r3]
    7d0a:	2800      	cmp	r0, #0
    7d0c:	d1f7      	bne.n	7cfe <usbd_event_transfer_ctrl+0xce>
    7d0e:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    7d12:	f012 0f01 	tst.w	r2, #1
    7d16:	d069      	beq.n	7dec <usbd_event_transfer_ctrl+0x1bc>
}
    7d18:	b003      	add	sp, #12
    7d1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_ERR("USBD event allocation failed!");
    7d1c:	f04f 0100 	mov.w	r1, #0
    7d20:	2301      	movs	r3, #1
    7d22:	f363 0102 	bfi	r1, r3, #0, #3
    7d26:	f36f 01c5 	bfc	r1, #3, #3
    7d2a:	4b98      	ldr	r3, [pc, #608]	; (7f8c <usbd_event_transfer_ctrl+0x35c>)
    7d2c:	4a98      	ldr	r2, [pc, #608]	; (7f90 <usbd_event_transfer_ctrl+0x360>)
    7d2e:	1a9b      	subs	r3, r3, r2
    7d30:	f3c3 03c9 	ubfx	r3, r3, #3, #10
    7d34:	f363 118f 	bfi	r1, r3, #6, #10
    7d38:	4896      	ldr	r0, [pc, #600]	; (7f94 <usbd_event_transfer_ctrl+0x364>)
    7d3a:	f7fd f9d9 	bl	50f0 <log_0>
static inline void usbd_evt_flush(void)
    7d3e:	e003      	b.n	7d48 <usbd_event_transfer_ctrl+0x118>
	k_mem_pool_free(&ev->block);
    7d40:	3004      	adds	r0, #4
    7d42:	f008 fe07 	bl	10954 <k_mem_pool_free>
	} while (ev != NULL);
    7d46:	b13c      	cbz	r4, 7d58 <usbd_event_transfer_ctrl+0x128>
    7d48:	2100      	movs	r1, #0
    7d4a:	488d      	ldr	r0, [pc, #564]	; (7f80 <usbd_event_transfer_ctrl+0x350>)
    7d4c:	f005 f970 	bl	d030 <z_impl_k_queue_get>
		if (ev) {
    7d50:	4604      	mov	r4, r0
    7d52:	2800      	cmp	r0, #0
    7d54:	d1f4      	bne.n	7d40 <usbd_event_transfer_ctrl+0x110>
    7d56:	e7f6      	b.n	7d46 <usbd_event_transfer_ctrl+0x116>
		ret = k_mem_pool_alloc(&fifo_elem_pool, &block,
    7d58:	2300      	movs	r3, #0
    7d5a:	2218      	movs	r2, #24
    7d5c:	4669      	mov	r1, sp
    7d5e:	4887      	ldr	r0, [pc, #540]	; (7f7c <usbd_event_transfer_ctrl+0x34c>)
    7d60:	f004 fdc6 	bl	c8f0 <k_mem_pool_alloc>
		if (ret < 0) {
    7d64:	2800      	cmp	r0, #0
    7d66:	db22      	blt.n	7dae <usbd_event_transfer_ctrl+0x17e>
		ev = (struct usbd_event *)block.data;
    7d68:	9b00      	ldr	r3, [sp, #0]
		ev->block = block;
    7d6a:	1d1a      	adds	r2, r3, #4
    7d6c:	a902      	add	r1, sp, #8
    7d6e:	e911 0003 	ldmdb	r1, {r0, r1}
    7d72:	e882 0003 	stmia.w	r2, {r0, r1}
		ev->evt_type = USBD_EVT_REINIT;
    7d76:	2204      	movs	r2, #4
    7d78:	751a      	strb	r2, [r3, #20]
	k_fifo_put(&work_queue, ev);
    7d7a:	4619      	mov	r1, r3
    7d7c:	4880      	ldr	r0, [pc, #512]	; (7f80 <usbd_event_transfer_ctrl+0x350>)
    7d7e:	f008 fe5c 	bl	10a3a <k_queue_append>
    7d82:	4b80      	ldr	r3, [pc, #512]	; (7f84 <usbd_event_transfer_ctrl+0x354>)
    7d84:	f3bf 8f5b 	dmb	ish
    7d88:	e853 2f00 	ldrex	r2, [r3]
    7d8c:	f042 0101 	orr.w	r1, r2, #1
    7d90:	e843 1000 	strex	r0, r1, [r3]
    7d94:	2800      	cmp	r0, #0
    7d96:	d1f7      	bne.n	7d88 <usbd_event_transfer_ctrl+0x158>
    7d98:	f3bf 8f5b 	dmb	ish
    7d9c:	f012 0f01 	tst.w	r2, #1
    7da0:	d19d      	bne.n	7cde <usbd_event_transfer_ctrl+0xae>
		k_queue_append(&work_q->queue, work);
    7da2:	f1a3 0108 	sub.w	r1, r3, #8
    7da6:	4878      	ldr	r0, [pc, #480]	; (7f88 <usbd_event_transfer_ctrl+0x358>)
    7da8:	f008 fe47 	bl	10a3a <k_queue_append>
    7dac:	e797      	b.n	7cde <usbd_event_transfer_ctrl+0xae>
			LOG_ERR("USBD event memory corrupted.");
    7dae:	f04f 0100 	mov.w	r1, #0
    7db2:	2301      	movs	r3, #1
    7db4:	f363 0102 	bfi	r1, r3, #0, #3
    7db8:	f36f 01c5 	bfc	r1, #3, #3
    7dbc:	4b73      	ldr	r3, [pc, #460]	; (7f8c <usbd_event_transfer_ctrl+0x35c>)
    7dbe:	4a74      	ldr	r2, [pc, #464]	; (7f90 <usbd_event_transfer_ctrl+0x360>)
    7dc0:	1a9b      	subs	r3, r3, r2
    7dc2:	f3c3 03c9 	ubfx	r3, r3, #3, #10
    7dc6:	f363 118f 	bfi	r1, r3, #6, #10
    7dca:	4873      	ldr	r0, [pc, #460]	; (7f98 <usbd_event_transfer_ctrl+0x368>)
    7dcc:	f7fd f990 	bl	50f0 <log_0>
			__ASSERT_NO_MSG(0);
    7dd0:	4d72      	ldr	r5, [pc, #456]	; (7f9c <usbd_event_transfer_ctrl+0x36c>)
    7dd2:	f240 13d5 	movw	r3, #469	; 0x1d5
    7dd6:	462a      	mov	r2, r5
    7dd8:	4971      	ldr	r1, [pc, #452]	; (7fa0 <usbd_event_transfer_ctrl+0x370>)
    7dda:	4872      	ldr	r0, [pc, #456]	; (7fa4 <usbd_event_transfer_ctrl+0x374>)
    7ddc:	f007 fd4f 	bl	f87e <printk>
    7de0:	f240 11d5 	movw	r1, #469	; 0x1d5
    7de4:	4628      	mov	r0, r5
    7de6:	f007 fdd0 	bl	f98a <assert_post_action>
			return NULL;
    7dea:	e778      	b.n	7cde <usbd_event_transfer_ctrl+0xae>
    7dec:	f1a3 0108 	sub.w	r1, r3, #8
    7df0:	4865      	ldr	r0, [pc, #404]	; (7f88 <usbd_event_transfer_ctrl+0x358>)
    7df2:	f008 fe22 	bl	10a3a <k_queue_append>
    7df6:	e78f      	b.n	7d18 <usbd_event_transfer_ctrl+0xe8>
			LOG_ERR(
    7df8:	f04f 0300 	mov.w	r3, #0
    7dfc:	2201      	movs	r2, #1
    7dfe:	f362 0302 	bfi	r3, r2, #0, #3
    7e02:	f36f 03c5 	bfc	r3, #3, #3
    7e06:	4a61      	ldr	r2, [pc, #388]	; (7f8c <usbd_event_transfer_ctrl+0x35c>)
    7e08:	4861      	ldr	r0, [pc, #388]	; (7f90 <usbd_event_transfer_ctrl+0x360>)
    7e0a:	1a12      	subs	r2, r2, r0
    7e0c:	f3c2 02c9 	ubfx	r2, r2, #3, #10
    7e10:	f362 138f 	bfi	r3, r2, #6, #10
    7e14:	4622      	mov	r2, r4
    7e16:	4864      	ldr	r0, [pc, #400]	; (7fa8 <usbd_event_transfer_ctrl+0x378>)
    7e18:	f7fd f8fe 	bl	5018 <log_2>
    7e1c:	e77c      	b.n	7d18 <usbd_event_transfer_ctrl+0xe8>
		LOG_ERR("USBD event allocation failed!");
    7e1e:	f04f 0100 	mov.w	r1, #0
    7e22:	2301      	movs	r3, #1
    7e24:	f363 0102 	bfi	r1, r3, #0, #3
    7e28:	f36f 01c5 	bfc	r1, #3, #3
    7e2c:	4b57      	ldr	r3, [pc, #348]	; (7f8c <usbd_event_transfer_ctrl+0x35c>)
    7e2e:	4a58      	ldr	r2, [pc, #352]	; (7f90 <usbd_event_transfer_ctrl+0x360>)
    7e30:	1a9b      	subs	r3, r3, r2
    7e32:	f3c3 03c9 	ubfx	r3, r3, #3, #10
    7e36:	f363 118f 	bfi	r1, r3, #6, #10
    7e3a:	4856      	ldr	r0, [pc, #344]	; (7f94 <usbd_event_transfer_ctrl+0x364>)
    7e3c:	f7fd f958 	bl	50f0 <log_0>
static inline void usbd_evt_flush(void)
    7e40:	e003      	b.n	7e4a <usbd_event_transfer_ctrl+0x21a>
	k_mem_pool_free(&ev->block);
    7e42:	3004      	adds	r0, #4
    7e44:	f008 fd86 	bl	10954 <k_mem_pool_free>
	} while (ev != NULL);
    7e48:	b13c      	cbz	r4, 7e5a <usbd_event_transfer_ctrl+0x22a>
    7e4a:	2100      	movs	r1, #0
    7e4c:	484c      	ldr	r0, [pc, #304]	; (7f80 <usbd_event_transfer_ctrl+0x350>)
    7e4e:	f005 f8ef 	bl	d030 <z_impl_k_queue_get>
		if (ev) {
    7e52:	4604      	mov	r4, r0
    7e54:	2800      	cmp	r0, #0
    7e56:	d1f4      	bne.n	7e42 <usbd_event_transfer_ctrl+0x212>
    7e58:	e7f6      	b.n	7e48 <usbd_event_transfer_ctrl+0x218>
		ret = k_mem_pool_alloc(&fifo_elem_pool, &block,
    7e5a:	2300      	movs	r3, #0
    7e5c:	2218      	movs	r2, #24
    7e5e:	4669      	mov	r1, sp
    7e60:	4846      	ldr	r0, [pc, #280]	; (7f7c <usbd_event_transfer_ctrl+0x34c>)
    7e62:	f004 fd45 	bl	c8f0 <k_mem_pool_alloc>
		if (ret < 0) {
    7e66:	2800      	cmp	r0, #0
    7e68:	db23      	blt.n	7eb2 <usbd_event_transfer_ctrl+0x282>
		ev = (struct usbd_event *)block.data;
    7e6a:	9b00      	ldr	r3, [sp, #0]
		ev->block = block;
    7e6c:	1d1a      	adds	r2, r3, #4
    7e6e:	a902      	add	r1, sp, #8
    7e70:	e911 0003 	ldmdb	r1, {r0, r1}
    7e74:	e882 0003 	stmia.w	r2, {r0, r1}
		ev->evt_type = USBD_EVT_REINIT;
    7e78:	2204      	movs	r2, #4
    7e7a:	751a      	strb	r2, [r3, #20]
	k_fifo_put(&work_queue, ev);
    7e7c:	4619      	mov	r1, r3
    7e7e:	4840      	ldr	r0, [pc, #256]	; (7f80 <usbd_event_transfer_ctrl+0x350>)
    7e80:	f008 fddb 	bl	10a3a <k_queue_append>
    7e84:	4b3f      	ldr	r3, [pc, #252]	; (7f84 <usbd_event_transfer_ctrl+0x354>)
    7e86:	f3bf 8f5b 	dmb	ish
    7e8a:	e853 2f00 	ldrex	r2, [r3]
    7e8e:	f042 0101 	orr.w	r1, r2, #1
    7e92:	e843 1000 	strex	r0, r1, [r3]
    7e96:	2800      	cmp	r0, #0
    7e98:	d1f7      	bne.n	7e8a <usbd_event_transfer_ctrl+0x25a>
    7e9a:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    7e9e:	f012 0f01 	tst.w	r2, #1
    7ea2:	f47f aee7 	bne.w	7c74 <usbd_event_transfer_ctrl+0x44>
		k_queue_append(&work_q->queue, work);
    7ea6:	f1a3 0108 	sub.w	r1, r3, #8
    7eaa:	4837      	ldr	r0, [pc, #220]	; (7f88 <usbd_event_transfer_ctrl+0x358>)
    7eac:	f008 fdc5 	bl	10a3a <k_queue_append>
    7eb0:	e6e0      	b.n	7c74 <usbd_event_transfer_ctrl+0x44>
			LOG_ERR("USBD event memory corrupted.");
    7eb2:	f04f 0100 	mov.w	r1, #0
    7eb6:	2301      	movs	r3, #1
    7eb8:	f363 0102 	bfi	r1, r3, #0, #3
    7ebc:	f36f 01c5 	bfc	r1, #3, #3
    7ec0:	4b32      	ldr	r3, [pc, #200]	; (7f8c <usbd_event_transfer_ctrl+0x35c>)
    7ec2:	4a33      	ldr	r2, [pc, #204]	; (7f90 <usbd_event_transfer_ctrl+0x360>)
    7ec4:	1a9b      	subs	r3, r3, r2
    7ec6:	f3c3 03c9 	ubfx	r3, r3, #3, #10
    7eca:	f363 118f 	bfi	r1, r3, #6, #10
    7ece:	4832      	ldr	r0, [pc, #200]	; (7f98 <usbd_event_transfer_ctrl+0x368>)
    7ed0:	f7fd f90e 	bl	50f0 <log_0>
			__ASSERT_NO_MSG(0);
    7ed4:	4d31      	ldr	r5, [pc, #196]	; (7f9c <usbd_event_transfer_ctrl+0x36c>)
    7ed6:	f240 13d5 	movw	r3, #469	; 0x1d5
    7eda:	462a      	mov	r2, r5
    7edc:	4930      	ldr	r1, [pc, #192]	; (7fa0 <usbd_event_transfer_ctrl+0x370>)
    7ede:	4831      	ldr	r0, [pc, #196]	; (7fa4 <usbd_event_transfer_ctrl+0x374>)
    7ee0:	f007 fccd 	bl	f87e <printk>
    7ee4:	f240 11d5 	movw	r1, #469	; 0x1d5
    7ee8:	4628      	mov	r0, r5
    7eea:	f007 fd4e 	bl	f98a <assert_post_action>
			return NULL;
    7eee:	e6c1      	b.n	7c74 <usbd_event_transfer_ctrl+0x44>
	ret = k_mem_pool_alloc(&fifo_elem_pool, &block,
    7ef0:	2300      	movs	r3, #0
    7ef2:	2218      	movs	r2, #24
    7ef4:	4669      	mov	r1, sp
    7ef6:	4821      	ldr	r0, [pc, #132]	; (7f7c <usbd_event_transfer_ctrl+0x34c>)
    7ef8:	f004 fcfa 	bl	c8f0 <k_mem_pool_alloc>
	if (ret < 0) {
    7efc:	2800      	cmp	r0, #0
    7efe:	db57      	blt.n	7fb0 <usbd_event_transfer_ctrl+0x380>
	ev = (struct usbd_event *)block.data;
    7f00:	9c00      	ldr	r4, [sp, #0]
	ev->block = block;
    7f02:	1d23      	adds	r3, r4, #4
    7f04:	aa02      	add	r2, sp, #8
    7f06:	e912 0003 	ldmdb	r2, {r0, r1}
    7f0a:	e883 0003 	stmia.w	r3, {r0, r1}
			if (!ev) {
    7f0e:	2c00      	cmp	r4, #0
    7f10:	f43f af02 	beq.w	7d18 <usbd_event_transfer_ctrl+0xe8>
			ev->evt_type = USBD_EVT_EP;
    7f14:	2301      	movs	r3, #1
    7f16:	7523      	strb	r3, [r4, #20]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_COMPLETE;
    7f18:	2302      	movs	r3, #2
    7f1a:	7423      	strb	r3, [r4, #16]
			ev->evt.ep_evt.ep = ep_ctx;
    7f1c:	60e6      	str	r6, [r4, #12]
			err_code = nrfx_usbd_ep_status_get(
    7f1e:	f106 010c 	add.w	r1, r6, #12
    7f22:	78a8      	ldrb	r0, [r5, #2]
    7f24:	f7fb f8dc 	bl	30e0 <nrfx_usbd_ep_status_get>
			if (err_code != NRFX_USBD_EP_OK) {
    7f28:	4601      	mov	r1, r0
    7f2a:	2800      	cmp	r0, #0
    7f2c:	f040 80a9 	bne.w	8082 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x82>
			if (ctx->ctrl_read_len > ep_ctx->buf.len) {
    7f30:	4b1e      	ldr	r3, [pc, #120]	; (7fac <usbd_event_transfer_ctrl+0x37c>)
    7f32:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
    7f36:	68f2      	ldr	r2, [r6, #12]
    7f38:	4293      	cmp	r3, r2
    7f3a:	f200 80c1 	bhi.w	80c0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc0>
				ctx->ctrl_read_len = 0U;
    7f3e:	4b1b      	ldr	r3, [pc, #108]	; (7fac <usbd_event_transfer_ctrl+0x37c>)
    7f40:	2200      	movs	r2, #0
    7f42:	f8a3 22b0 	strh.w	r2, [r3, #688]	; 0x2b0
	k_fifo_put(&work_queue, ev);
    7f46:	4621      	mov	r1, r4
    7f48:	480d      	ldr	r0, [pc, #52]	; (7f80 <usbd_event_transfer_ctrl+0x350>)
    7f4a:	f008 fd76 	bl	10a3a <k_queue_append>
    7f4e:	4b0d      	ldr	r3, [pc, #52]	; (7f84 <usbd_event_transfer_ctrl+0x354>)
    7f50:	f3bf 8f5b 	dmb	ish
    7f54:	e853 2f00 	ldrex	r2, [r3]
    7f58:	f042 0101 	orr.w	r1, r2, #1
    7f5c:	e843 1000 	strex	r0, r1, [r3]
    7f60:	2800      	cmp	r0, #0
    7f62:	d1f7      	bne.n	7f54 <usbd_event_transfer_ctrl+0x324>
    7f64:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    7f68:	f012 0f01 	tst.w	r2, #1
    7f6c:	f47f aed4 	bne.w	7d18 <usbd_event_transfer_ctrl+0xe8>
		k_queue_append(&work_q->queue, work);
    7f70:	f1a3 0108 	sub.w	r1, r3, #8
    7f74:	4804      	ldr	r0, [pc, #16]	; (7f88 <usbd_event_transfer_ctrl+0x358>)
    7f76:	f008 fd60 	bl	10a3a <k_queue_append>
    7f7a:	e6cd      	b.n	7d18 <usbd_event_transfer_ctrl+0xe8>
    7f7c:	20007420 	.word	0x20007420
    7f80:	200074cc 	.word	0x200074cc
    7f84:	20001fcc 	.word	0x20001fcc
    7f88:	20002738 	.word	0x20002738
    7f8c:	00010e1c 	.word	0x00010e1c
    7f90:	00010dd4 	.word	0x00010dd4
    7f94:	00012614 	.word	0x00012614
    7f98:	00012634 	.word	0x00012634
    7f9c:	00012388 	.word	0x00012388
    7fa0:	00012ff0 	.word	0x00012ff0
    7fa4:	00010f8c 	.word	0x00010f8c
    7fa8:	000125c8 	.word	0x000125c8
    7fac:	20001fbc 	.word	0x20001fbc
		LOG_ERR("USBD event allocation failed!");
    7fb0:	f04f 0100 	mov.w	r1, #0
    7fb4:	2301      	movs	r3, #1
    7fb6:	f363 0102 	bfi	r1, r3, #0, #3
    7fba:	f36f 01c5 	bfc	r1, #3, #3
    7fbe:	4b4d      	ldr	r3, [pc, #308]	; (80f4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xf4>)
    7fc0:	4a4d      	ldr	r2, [pc, #308]	; (80f8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xf8>)
    7fc2:	1a9b      	subs	r3, r3, r2
    7fc4:	f3c3 03c9 	ubfx	r3, r3, #3, #10
    7fc8:	f363 118f 	bfi	r1, r3, #6, #10
    7fcc:	484b      	ldr	r0, [pc, #300]	; (80fc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xfc>)
    7fce:	f7fd f88f 	bl	50f0 <log_0>
static inline void usbd_evt_flush(void)
    7fd2:	e003      	b.n	7fdc <usbd_event_transfer_ctrl+0x3ac>
	k_mem_pool_free(&ev->block);
    7fd4:	3004      	adds	r0, #4
    7fd6:	f008 fcbd 	bl	10954 <k_mem_pool_free>
	} while (ev != NULL);
    7fda:	b13c      	cbz	r4, 7fec <usbd_event_transfer_ctrl+0x3bc>
    7fdc:	2100      	movs	r1, #0
    7fde:	4848      	ldr	r0, [pc, #288]	; (8100 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x100>)
    7fe0:	f005 f826 	bl	d030 <z_impl_k_queue_get>
		if (ev) {
    7fe4:	4604      	mov	r4, r0
    7fe6:	2800      	cmp	r0, #0
    7fe8:	d1f4      	bne.n	7fd4 <usbd_event_transfer_ctrl+0x3a4>
    7fea:	e7f6      	b.n	7fda <usbd_event_transfer_ctrl+0x3aa>
		ret = k_mem_pool_alloc(&fifo_elem_pool, &block,
    7fec:	2300      	movs	r3, #0
    7fee:	2218      	movs	r2, #24
    7ff0:	4669      	mov	r1, sp
    7ff2:	4844      	ldr	r0, [pc, #272]	; (8104 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x104>)
    7ff4:	f004 fc7c 	bl	c8f0 <k_mem_pool_alloc>
		if (ret < 0) {
    7ff8:	2800      	cmp	r0, #0
    7ffa:	db23      	blt.n	8044 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x44>
		ev = (struct usbd_event *)block.data;
    7ffc:	9b00      	ldr	r3, [sp, #0]
		ev->block = block;
    7ffe:	1d1a      	adds	r2, r3, #4
    8000:	a902      	add	r1, sp, #8
    8002:	e911 0003 	ldmdb	r1, {r0, r1}
    8006:	e882 0003 	stmia.w	r2, {r0, r1}
		ev->evt_type = USBD_EVT_REINIT;
    800a:	2204      	movs	r2, #4
    800c:	751a      	strb	r2, [r3, #20]
	k_fifo_put(&work_queue, ev);
    800e:	4619      	mov	r1, r3
    8010:	483b      	ldr	r0, [pc, #236]	; (8100 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x100>)
    8012:	f008 fd12 	bl	10a3a <k_queue_append>
    8016:	4b3c      	ldr	r3, [pc, #240]	; (8108 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x108>)
    8018:	f3bf 8f5b 	dmb	ish
    801c:	e853 2f00 	ldrex	r2, [r3]
    8020:	f042 0101 	orr.w	r1, r2, #1
    8024:	e843 1000 	strex	r0, r1, [r3]
    8028:	2800      	cmp	r0, #0
    802a:	d1f7      	bne.n	801c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1c>
    802c:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    8030:	f012 0f01 	tst.w	r2, #1
    8034:	f47f af6b 	bne.w	7f0e <usbd_event_transfer_ctrl+0x2de>
		k_queue_append(&work_q->queue, work);
    8038:	f1a3 0108 	sub.w	r1, r3, #8
    803c:	4833      	ldr	r0, [pc, #204]	; (810c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x10c>)
    803e:	f008 fcfc 	bl	10a3a <k_queue_append>
    8042:	e764      	b.n	7f0e <usbd_event_transfer_ctrl+0x2de>
			LOG_ERR("USBD event memory corrupted.");
    8044:	f04f 0100 	mov.w	r1, #0
    8048:	2301      	movs	r3, #1
    804a:	f363 0102 	bfi	r1, r3, #0, #3
    804e:	f36f 01c5 	bfc	r1, #3, #3
    8052:	4b28      	ldr	r3, [pc, #160]	; (80f4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xf4>)
    8054:	4a28      	ldr	r2, [pc, #160]	; (80f8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xf8>)
    8056:	1a9b      	subs	r3, r3, r2
    8058:	f3c3 03c9 	ubfx	r3, r3, #3, #10
    805c:	f363 118f 	bfi	r1, r3, #6, #10
    8060:	482b      	ldr	r0, [pc, #172]	; (8110 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x110>)
    8062:	f7fd f845 	bl	50f0 <log_0>
			__ASSERT_NO_MSG(0);
    8066:	4f2b      	ldr	r7, [pc, #172]	; (8114 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x114>)
    8068:	f240 13d5 	movw	r3, #469	; 0x1d5
    806c:	463a      	mov	r2, r7
    806e:	492a      	ldr	r1, [pc, #168]	; (8118 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x118>)
    8070:	482a      	ldr	r0, [pc, #168]	; (811c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x11c>)
    8072:	f007 fc04 	bl	f87e <printk>
    8076:	f240 11d5 	movw	r1, #469	; 0x1d5
    807a:	4638      	mov	r0, r7
    807c:	f007 fc85 	bl	f98a <assert_post_action>
			return NULL;
    8080:	e745      	b.n	7f0e <usbd_event_transfer_ctrl+0x2de>
				LOG_ERR("_ep_status_get failed! Code: %d.",
    8082:	f04f 0200 	mov.w	r2, #0
    8086:	2301      	movs	r3, #1
    8088:	f363 0202 	bfi	r2, r3, #0, #3
    808c:	f36f 02c5 	bfc	r2, #3, #3
    8090:	4b18      	ldr	r3, [pc, #96]	; (80f4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xf4>)
    8092:	4819      	ldr	r0, [pc, #100]	; (80f8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xf8>)
    8094:	1a1b      	subs	r3, r3, r0
    8096:	f3c3 03c9 	ubfx	r3, r3, #3, #10
    809a:	f363 128f 	bfi	r2, r3, #6, #10
    809e:	4820      	ldr	r0, [pc, #128]	; (8120 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x120>)
    80a0:	f7fc ff54 	bl	4f4c <log_1>
				__ASSERT_NO_MSG(0);
    80a4:	4d1b      	ldr	r5, [pc, #108]	; (8114 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x114>)
    80a6:	f240 33ee 	movw	r3, #1006	; 0x3ee
    80aa:	462a      	mov	r2, r5
    80ac:	491a      	ldr	r1, [pc, #104]	; (8118 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x118>)
    80ae:	481b      	ldr	r0, [pc, #108]	; (811c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x11c>)
    80b0:	f007 fbe5 	bl	f87e <printk>
    80b4:	f240 31ee 	movw	r1, #1006	; 0x3ee
    80b8:	4628      	mov	r0, r5
    80ba:	f007 fc66 	bl	f98a <assert_post_action>
    80be:	e737      	b.n	7f30 <usbd_event_transfer_ctrl+0x300>
				ctx->ctrl_read_len -= ep_ctx->buf.len;
    80c0:	1a9b      	subs	r3, r3, r2
    80c2:	4a18      	ldr	r2, [pc, #96]	; (8124 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x124>)
    80c4:	f8a2 32b0 	strh.w	r3, [r2, #688]	; 0x2b0
				nrfx_usbd_setup_data_clear();
    80c8:	f7fb fd7a 	bl	3bc0 <nrfx_usbd_setup_data_clear>
    80cc:	e73b      	b.n	7f46 <usbd_event_transfer_ctrl+0x316>
			LOG_ERR("Unexpected event from nrfx_usbd: %d, ep %d",
    80ce:	f04f 0300 	mov.w	r3, #0
    80d2:	2201      	movs	r2, #1
    80d4:	f362 0302 	bfi	r3, r2, #0, #3
    80d8:	f36f 03c5 	bfc	r3, #3, #3
    80dc:	4a05      	ldr	r2, [pc, #20]	; (80f4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xf4>)
    80de:	4806      	ldr	r0, [pc, #24]	; (80f8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xf8>)
    80e0:	1a12      	subs	r2, r2, r0
    80e2:	f3c2 02c9 	ubfx	r2, r2, #3, #10
    80e6:	f362 138f 	bfi	r3, r2, #6, #10
    80ea:	4622      	mov	r2, r4
    80ec:	480e      	ldr	r0, [pc, #56]	; (8128 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x128>)
    80ee:	f7fc ff93 	bl	5018 <log_2>
    80f2:	e611      	b.n	7d18 <usbd_event_transfer_ctrl+0xe8>
    80f4:	00010e1c 	.word	0x00010e1c
    80f8:	00010dd4 	.word	0x00010dd4
    80fc:	00012614 	.word	0x00012614
    8100:	200074cc 	.word	0x200074cc
    8104:	20007420 	.word	0x20007420
    8108:	20001fcc 	.word	0x20001fcc
    810c:	20002738 	.word	0x20002738
    8110:	00012634 	.word	0x00012634
    8114:	00012388 	.word	0x00012388
    8118:	00012ff0 	.word	0x00012ff0
    811c:	00010f8c 	.word	0x00010f8c
    8120:	000125f0 	.word	0x000125f0
    8124:	20001fbc 	.word	0x20001fbc
    8128:	00012654 	.word	0x00012654

0000812c <usbd_event_handler>:
{
    812c:	b530      	push	{r4, r5, lr}
    812e:	b089      	sub	sp, #36	; 0x24
	struct usbd_event evt = {0};
    8130:	2300      	movs	r3, #0
    8132:	9302      	str	r3, [sp, #8]
    8134:	9303      	str	r3, [sp, #12]
    8136:	9304      	str	r3, [sp, #16]
    8138:	9305      	str	r3, [sp, #20]
    813a:	9306      	str	r3, [sp, #24]
    813c:	9307      	str	r3, [sp, #28]
	switch (p_event->type) {
    813e:	7803      	ldrb	r3, [r0, #0]
    8140:	3b01      	subs	r3, #1
    8142:	2b05      	cmp	r3, #5
    8144:	d836      	bhi.n	81b4 <usbd_event_handler+0x88>
    8146:	e8df f003 	tbb	[pc, r3]
    814a:	033b      	.short	0x033b
    814c:	3f563537 	.word	0x3f563537
		evt.evt.pwr_evt.state = USBD_SUSPENDED;
    8150:	2303      	movs	r3, #3
    8152:	f88d 3014 	strb.w	r3, [sp, #20]
	ret = k_mem_pool_alloc(&fifo_elem_pool, &block,
    8156:	2300      	movs	r3, #0
    8158:	2218      	movs	r2, #24
    815a:	4669      	mov	r1, sp
    815c:	4867      	ldr	r0, [pc, #412]	; (82fc <usbd_event_handler+0x1d0>)
    815e:	f004 fbc7 	bl	c8f0 <k_mem_pool_alloc>
	if (ret < 0) {
    8162:	2800      	cmp	r0, #0
    8164:	db5c      	blt.n	8220 <usbd_event_handler+0xf4>
	ev = (struct usbd_event *)block.data;
    8166:	9c00      	ldr	r4, [sp, #0]
	ev->block = block;
    8168:	1d23      	adds	r3, r4, #4
    816a:	466a      	mov	r2, sp
    816c:	e892 0003 	ldmia.w	r2, {r0, r1}
    8170:	e883 0003 	stmia.w	r3, {r0, r1}
		if (!ev) {
    8174:	b1f4      	cbz	r4, 81b4 <usbd_event_handler+0x88>
		ev->evt_type = evt.evt_type;
    8176:	f89d 301c 	ldrb.w	r3, [sp, #28]
    817a:	7523      	strb	r3, [r4, #20]
		ev->evt = evt.evt;
    817c:	f104 030c 	add.w	r3, r4, #12
    8180:	aa05      	add	r2, sp, #20
    8182:	e892 0003 	ldmia.w	r2, {r0, r1}
    8186:	e883 0003 	stmia.w	r3, {r0, r1}
	k_fifo_put(&work_queue, ev);
    818a:	4621      	mov	r1, r4
    818c:	485c      	ldr	r0, [pc, #368]	; (8300 <usbd_event_handler+0x1d4>)
    818e:	f008 fc54 	bl	10a3a <k_queue_append>
    8192:	4b5c      	ldr	r3, [pc, #368]	; (8304 <usbd_event_handler+0x1d8>)
    8194:	f3bf 8f5b 	dmb	ish
    8198:	e853 2f00 	ldrex	r2, [r3]
    819c:	f042 0101 	orr.w	r1, r2, #1
    81a0:	e843 1000 	strex	r0, r1, [r3]
    81a4:	2800      	cmp	r0, #0
    81a6:	d1f7      	bne.n	8198 <usbd_event_handler+0x6c>
    81a8:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    81ac:	f012 0f01 	tst.w	r2, #1
    81b0:	f000 809e 	beq.w	82f0 <usbd_event_handler+0x1c4>
}
    81b4:	b009      	add	sp, #36	; 0x24
    81b6:	bd30      	pop	{r4, r5, pc}
		evt.evt.pwr_evt.state = USBD_RESUMED;
    81b8:	2304      	movs	r3, #4
    81ba:	f88d 3014 	strb.w	r3, [sp, #20]
	if (put_evt) {
    81be:	e7ca      	b.n	8156 <usbd_event_handler+0x2a>
		evt.evt_type = USBD_EVT_RESET;
    81c0:	2302      	movs	r3, #2
    81c2:	f88d 301c 	strb.w	r3, [sp, #28]
	if (put_evt) {
    81c6:	e7c6      	b.n	8156 <usbd_event_handler+0x2a>
    81c8:	4604      	mov	r4, r0
		ep_ctx = endpoint_ctx(p_event->data.eptransfer.ep);
    81ca:	7880      	ldrb	r0, [r0, #2]
    81cc:	f7fe feac 	bl	6f28 <endpoint_ctx>
		switch (ep_ctx->cfg.type) {
    81d0:	7a83      	ldrb	r3, [r0, #10]
    81d2:	2b03      	cmp	r3, #3
    81d4:	d8ee      	bhi.n	81b4 <usbd_event_handler+0x88>
    81d6:	e8df f003 	tbb	[pc, r3]
    81da:	0a02      	.short	0x0a02
    81dc:	0606      	.short	0x0606
			usbd_event_transfer_ctrl(p_event);
    81de:	4620      	mov	r0, r4
    81e0:	f7ff fd26 	bl	7c30 <usbd_event_transfer_ctrl>
	if (put_evt) {
    81e4:	e7e6      	b.n	81b4 <usbd_event_handler+0x88>
			usbd_event_transfer_data(p_event);
    81e6:	4620      	mov	r0, r4
    81e8:	f7ff fab0 	bl	774c <usbd_event_transfer_data>
	if (put_evt) {
    81ec:	e7e2      	b.n	81b4 <usbd_event_handler+0x88>
			usbd_event_transfer_data(p_event);
    81ee:	4620      	mov	r0, r4
    81f0:	f7ff faac 	bl	774c <usbd_event_transfer_data>
	if (put_evt) {
    81f4:	e7de      	b.n	81b4 <usbd_event_handler+0x88>
		nrfx_usbd_setup_get(&drv_setup);
    81f6:	4668      	mov	r0, sp
    81f8:	f7fb fcb6 	bl	3b68 <nrfx_usbd_setup_get>
		if ((drv_setup.bRequest != USB_BREQUEST_SETADDRESS)
    81fc:	f89d 3001 	ldrb.w	r3, [sp, #1]
    8200:	2b05      	cmp	r3, #5
    8202:	d007      	beq.n	8214 <usbd_event_handler+0xe8>
				endpoint_ctx(NRF_USBD_EPOUT(0));
    8204:	2000      	movs	r0, #0
    8206:	f7fe fe8f 	bl	6f28 <endpoint_ctx>
			evt.evt_type = USBD_EVT_EP;
    820a:	2301      	movs	r3, #1
    820c:	f88d 301c 	strb.w	r3, [sp, #28]
			evt.evt.ep_evt.ep = ep_ctx;
    8210:	9005      	str	r0, [sp, #20]
	if (put_evt) {
    8212:	e7a0      	b.n	8156 <usbd_event_handler+0x2a>
		    || ((drv_setup.bmRequestType & USB_BMREQUESTTYPE_TYPE_MASK)
    8214:	f89d 3000 	ldrb.w	r3, [sp]
    8218:	f013 0f60 	tst.w	r3, #96	; 0x60
    821c:	d0ca      	beq.n	81b4 <usbd_event_handler+0x88>
    821e:	e7f1      	b.n	8204 <usbd_event_handler+0xd8>
		LOG_ERR("USBD event allocation failed!");
    8220:	f04f 0100 	mov.w	r1, #0
    8224:	2301      	movs	r3, #1
    8226:	f363 0102 	bfi	r1, r3, #0, #3
    822a:	f36f 01c5 	bfc	r1, #3, #3
    822e:	4b36      	ldr	r3, [pc, #216]	; (8308 <usbd_event_handler+0x1dc>)
    8230:	4a36      	ldr	r2, [pc, #216]	; (830c <usbd_event_handler+0x1e0>)
    8232:	1a9b      	subs	r3, r3, r2
    8234:	f3c3 03c9 	ubfx	r3, r3, #3, #10
    8238:	f363 118f 	bfi	r1, r3, #6, #10
    823c:	4834      	ldr	r0, [pc, #208]	; (8310 <usbd_event_handler+0x1e4>)
    823e:	f7fc ff57 	bl	50f0 <log_0>
static inline void usbd_evt_flush(void)
    8242:	e003      	b.n	824c <usbd_event_handler+0x120>
	k_mem_pool_free(&ev->block);
    8244:	3004      	adds	r0, #4
    8246:	f008 fb85 	bl	10954 <k_mem_pool_free>
	} while (ev != NULL);
    824a:	b13c      	cbz	r4, 825c <usbd_event_handler+0x130>
    824c:	2100      	movs	r1, #0
    824e:	482c      	ldr	r0, [pc, #176]	; (8300 <usbd_event_handler+0x1d4>)
    8250:	f004 feee 	bl	d030 <z_impl_k_queue_get>
		if (ev) {
    8254:	4604      	mov	r4, r0
    8256:	2800      	cmp	r0, #0
    8258:	d1f4      	bne.n	8244 <usbd_event_handler+0x118>
    825a:	e7f6      	b.n	824a <usbd_event_handler+0x11e>
		ret = k_mem_pool_alloc(&fifo_elem_pool, &block,
    825c:	2300      	movs	r3, #0
    825e:	2218      	movs	r2, #24
    8260:	4669      	mov	r1, sp
    8262:	4826      	ldr	r0, [pc, #152]	; (82fc <usbd_event_handler+0x1d0>)
    8264:	f004 fb44 	bl	c8f0 <k_mem_pool_alloc>
		if (ret < 0) {
    8268:	2800      	cmp	r0, #0
    826a:	db22      	blt.n	82b2 <usbd_event_handler+0x186>
		ev = (struct usbd_event *)block.data;
    826c:	9b00      	ldr	r3, [sp, #0]
		ev->block = block;
    826e:	1d1a      	adds	r2, r3, #4
    8270:	4669      	mov	r1, sp
    8272:	c903      	ldmia	r1, {r0, r1}
    8274:	e882 0003 	stmia.w	r2, {r0, r1}
		ev->evt_type = USBD_EVT_REINIT;
    8278:	2204      	movs	r2, #4
    827a:	751a      	strb	r2, [r3, #20]
	k_fifo_put(&work_queue, ev);
    827c:	4619      	mov	r1, r3
    827e:	4820      	ldr	r0, [pc, #128]	; (8300 <usbd_event_handler+0x1d4>)
    8280:	f008 fbdb 	bl	10a3a <k_queue_append>
    8284:	4b1f      	ldr	r3, [pc, #124]	; (8304 <usbd_event_handler+0x1d8>)
    8286:	f3bf 8f5b 	dmb	ish
    828a:	e853 2f00 	ldrex	r2, [r3]
    828e:	f042 0101 	orr.w	r1, r2, #1
    8292:	e843 1000 	strex	r0, r1, [r3]
    8296:	2800      	cmp	r0, #0
    8298:	d1f7      	bne.n	828a <usbd_event_handler+0x15e>
    829a:	f3bf 8f5b 	dmb	ish
    829e:	f012 0f01 	tst.w	r2, #1
    82a2:	f47f af67 	bne.w	8174 <usbd_event_handler+0x48>
		k_queue_append(&work_q->queue, work);
    82a6:	f1a3 0108 	sub.w	r1, r3, #8
    82aa:	481a      	ldr	r0, [pc, #104]	; (8314 <usbd_event_handler+0x1e8>)
    82ac:	f008 fbc5 	bl	10a3a <k_queue_append>
    82b0:	e760      	b.n	8174 <usbd_event_handler+0x48>
			LOG_ERR("USBD event memory corrupted.");
    82b2:	f04f 0100 	mov.w	r1, #0
    82b6:	2301      	movs	r3, #1
    82b8:	f363 0102 	bfi	r1, r3, #0, #3
    82bc:	f36f 01c5 	bfc	r1, #3, #3
    82c0:	4b11      	ldr	r3, [pc, #68]	; (8308 <usbd_event_handler+0x1dc>)
    82c2:	4a12      	ldr	r2, [pc, #72]	; (830c <usbd_event_handler+0x1e0>)
    82c4:	1a9b      	subs	r3, r3, r2
    82c6:	f3c3 03c9 	ubfx	r3, r3, #3, #10
    82ca:	f363 118f 	bfi	r1, r3, #6, #10
    82ce:	4812      	ldr	r0, [pc, #72]	; (8318 <usbd_event_handler+0x1ec>)
    82d0:	f7fc ff0e 	bl	50f0 <log_0>
			__ASSERT_NO_MSG(0);
    82d4:	4d11      	ldr	r5, [pc, #68]	; (831c <usbd_event_handler+0x1f0>)
    82d6:	f240 13d5 	movw	r3, #469	; 0x1d5
    82da:	462a      	mov	r2, r5
    82dc:	4910      	ldr	r1, [pc, #64]	; (8320 <usbd_event_handler+0x1f4>)
    82de:	4811      	ldr	r0, [pc, #68]	; (8324 <usbd_event_handler+0x1f8>)
    82e0:	f007 facd 	bl	f87e <printk>
    82e4:	f240 11d5 	movw	r1, #469	; 0x1d5
    82e8:	4628      	mov	r0, r5
    82ea:	f007 fb4e 	bl	f98a <assert_post_action>
			return NULL;
    82ee:	e741      	b.n	8174 <usbd_event_handler+0x48>
    82f0:	f1a3 0108 	sub.w	r1, r3, #8
    82f4:	4807      	ldr	r0, [pc, #28]	; (8314 <usbd_event_handler+0x1e8>)
    82f6:	f008 fba0 	bl	10a3a <k_queue_append>
    82fa:	e75b      	b.n	81b4 <usbd_event_handler+0x88>
    82fc:	20007420 	.word	0x20007420
    8300:	200074cc 	.word	0x200074cc
    8304:	20001fcc 	.word	0x20001fcc
    8308:	00010e1c 	.word	0x00010e1c
    830c:	00010dd4 	.word	0x00010dd4
    8310:	00012614 	.word	0x00012614
    8314:	20002738 	.word	0x20002738
    8318:	00012634 	.word	0x00012634
    831c:	00012388 	.word	0x00012388
    8320:	00012ff0 	.word	0x00012ff0
    8324:	00010f8c 	.word	0x00010f8c

00008328 <usb_dc_nrfx_power_event_callback>:
{
    8328:	b570      	push	{r4, r5, r6, lr}
    832a:	b082      	sub	sp, #8
	switch (event) {
    832c:	f5b0 7f90 	cmp.w	r0, #288	; 0x120
    8330:	d017      	beq.n	8362 <usb_dc_nrfx_power_event_callback+0x3a>
    8332:	f5b0 7f92 	cmp.w	r0, #292	; 0x124
    8336:	d016      	beq.n	8366 <usb_dc_nrfx_power_event_callback+0x3e>
    8338:	f5b0 7f8e 	cmp.w	r0, #284	; 0x11c
    833c:	d031      	beq.n	83a2 <usb_dc_nrfx_power_event_callback+0x7a>
		LOG_ERR("Unknown USB power event");
    833e:	f04f 0100 	mov.w	r1, #0
    8342:	2301      	movs	r3, #1
    8344:	f363 0102 	bfi	r1, r3, #0, #3
    8348:	f36f 01c5 	bfc	r1, #3, #3
    834c:	4b55      	ldr	r3, [pc, #340]	; (84a4 <usb_dc_nrfx_power_event_callback+0x17c>)
    834e:	4a56      	ldr	r2, [pc, #344]	; (84a8 <usb_dc_nrfx_power_event_callback+0x180>)
    8350:	1a9b      	subs	r3, r3, r2
    8352:	f3c3 03c9 	ubfx	r3, r3, #3, #10
    8356:	f363 118f 	bfi	r1, r3, #6, #10
    835a:	4854      	ldr	r0, [pc, #336]	; (84ac <usb_dc_nrfx_power_event_callback+0x184>)
    835c:	f7fc fec8 	bl	50f0 <log_0>
    8360:	e01d      	b.n	839e <usb_dc_nrfx_power_event_callback+0x76>
		new_state = USBD_DETACHED;
    8362:	2500      	movs	r5, #0
    8364:	e000      	b.n	8368 <usb_dc_nrfx_power_event_callback+0x40>
		new_state = USBD_POWERED;
    8366:	2502      	movs	r5, #2
	ret = k_mem_pool_alloc(&fifo_elem_pool, &block,
    8368:	2300      	movs	r3, #0
    836a:	2218      	movs	r2, #24
    836c:	4669      	mov	r1, sp
    836e:	4850      	ldr	r0, [pc, #320]	; (84b0 <usb_dc_nrfx_power_event_callback+0x188>)
    8370:	f004 fabe 	bl	c8f0 <k_mem_pool_alloc>
	if (ret < 0) {
    8374:	2800      	cmp	r0, #0
    8376:	db16      	blt.n	83a6 <usb_dc_nrfx_power_event_callback+0x7e>
	ev = (struct usbd_event *)block.data;
    8378:	9c00      	ldr	r4, [sp, #0]
	ev->block = block;
    837a:	1d23      	adds	r3, r4, #4
    837c:	aa02      	add	r2, sp, #8
    837e:	e912 0003 	ldmdb	r2, {r0, r1}
    8382:	e883 0003 	stmia.w	r3, {r0, r1}
	if (!ev) {
    8386:	b154      	cbz	r4, 839e <usb_dc_nrfx_power_event_callback+0x76>
	ev->evt_type = USBD_EVT_POWER;
    8388:	2300      	movs	r3, #0
    838a:	7523      	strb	r3, [r4, #20]
	ev->evt.pwr_evt.state = new_state;
    838c:	7325      	strb	r5, [r4, #12]
	k_fifo_put(&work_queue, ev);
    838e:	4621      	mov	r1, r4
    8390:	4848      	ldr	r0, [pc, #288]	; (84b4 <usb_dc_nrfx_power_event_callback+0x18c>)
    8392:	f008 fb52 	bl	10a3a <k_queue_append>
	if (usbd_ctx.attached) {
    8396:	4b48      	ldr	r3, [pc, #288]	; (84b8 <usb_dc_nrfx_power_event_callback+0x190>)
    8398:	791b      	ldrb	r3, [r3, #4]
    839a:	2b00      	cmp	r3, #0
    839c:	d16b      	bne.n	8476 <usb_dc_nrfx_power_event_callback+0x14e>
}
    839e:	b002      	add	sp, #8
    83a0:	bd70      	pop	{r4, r5, r6, pc}
		new_state = USBD_ATTACHED;
    83a2:	2501      	movs	r5, #1
    83a4:	e7e0      	b.n	8368 <usb_dc_nrfx_power_event_callback+0x40>
		LOG_ERR("USBD event allocation failed!");
    83a6:	f04f 0100 	mov.w	r1, #0
    83aa:	2301      	movs	r3, #1
    83ac:	f363 0102 	bfi	r1, r3, #0, #3
    83b0:	f36f 01c5 	bfc	r1, #3, #3
    83b4:	4b3b      	ldr	r3, [pc, #236]	; (84a4 <usb_dc_nrfx_power_event_callback+0x17c>)
    83b6:	4a3c      	ldr	r2, [pc, #240]	; (84a8 <usb_dc_nrfx_power_event_callback+0x180>)
    83b8:	1a9b      	subs	r3, r3, r2
    83ba:	f3c3 03c9 	ubfx	r3, r3, #3, #10
    83be:	f363 118f 	bfi	r1, r3, #6, #10
    83c2:	483e      	ldr	r0, [pc, #248]	; (84bc <usb_dc_nrfx_power_event_callback+0x194>)
    83c4:	f7fc fe94 	bl	50f0 <log_0>
static inline void usbd_evt_flush(void)
    83c8:	e003      	b.n	83d2 <usb_dc_nrfx_power_event_callback+0xaa>
	k_mem_pool_free(&ev->block);
    83ca:	3004      	adds	r0, #4
    83cc:	f008 fac2 	bl	10954 <k_mem_pool_free>
	} while (ev != NULL);
    83d0:	b13c      	cbz	r4, 83e2 <usb_dc_nrfx_power_event_callback+0xba>
    83d2:	2100      	movs	r1, #0
    83d4:	4837      	ldr	r0, [pc, #220]	; (84b4 <usb_dc_nrfx_power_event_callback+0x18c>)
    83d6:	f004 fe2b 	bl	d030 <z_impl_k_queue_get>
		if (ev) {
    83da:	4604      	mov	r4, r0
    83dc:	2800      	cmp	r0, #0
    83de:	d1f4      	bne.n	83ca <usb_dc_nrfx_power_event_callback+0xa2>
    83e0:	e7f6      	b.n	83d0 <usb_dc_nrfx_power_event_callback+0xa8>
		ret = k_mem_pool_alloc(&fifo_elem_pool, &block,
    83e2:	2300      	movs	r3, #0
    83e4:	2218      	movs	r2, #24
    83e6:	4669      	mov	r1, sp
    83e8:	4831      	ldr	r0, [pc, #196]	; (84b0 <usb_dc_nrfx_power_event_callback+0x188>)
    83ea:	f004 fa81 	bl	c8f0 <k_mem_pool_alloc>
		if (ret < 0) {
    83ee:	2800      	cmp	r0, #0
    83f0:	db22      	blt.n	8438 <usb_dc_nrfx_power_event_callback+0x110>
		ev = (struct usbd_event *)block.data;
    83f2:	9b00      	ldr	r3, [sp, #0]
		ev->block = block;
    83f4:	1d1a      	adds	r2, r3, #4
    83f6:	a902      	add	r1, sp, #8
    83f8:	e911 0003 	ldmdb	r1, {r0, r1}
    83fc:	e882 0003 	stmia.w	r2, {r0, r1}
		ev->evt_type = USBD_EVT_REINIT;
    8400:	2204      	movs	r2, #4
    8402:	751a      	strb	r2, [r3, #20]
	k_fifo_put(&work_queue, ev);
    8404:	4619      	mov	r1, r3
    8406:	482b      	ldr	r0, [pc, #172]	; (84b4 <usb_dc_nrfx_power_event_callback+0x18c>)
    8408:	f008 fb17 	bl	10a3a <k_queue_append>
    840c:	4b2c      	ldr	r3, [pc, #176]	; (84c0 <usb_dc_nrfx_power_event_callback+0x198>)
    840e:	f3bf 8f5b 	dmb	ish
    8412:	e853 2f00 	ldrex	r2, [r3]
    8416:	f042 0101 	orr.w	r1, r2, #1
    841a:	e843 1000 	strex	r0, r1, [r3]
    841e:	2800      	cmp	r0, #0
    8420:	d1f7      	bne.n	8412 <usb_dc_nrfx_power_event_callback+0xea>
    8422:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    8426:	f012 0f01 	tst.w	r2, #1
    842a:	d1ac      	bne.n	8386 <usb_dc_nrfx_power_event_callback+0x5e>
		k_queue_append(&work_q->queue, work);
    842c:	f1a3 0108 	sub.w	r1, r3, #8
    8430:	4824      	ldr	r0, [pc, #144]	; (84c4 <usb_dc_nrfx_power_event_callback+0x19c>)
    8432:	f008 fb02 	bl	10a3a <k_queue_append>
    8436:	e7a6      	b.n	8386 <usb_dc_nrfx_power_event_callback+0x5e>
			LOG_ERR("USBD event memory corrupted.");
    8438:	f04f 0100 	mov.w	r1, #0
    843c:	2301      	movs	r3, #1
    843e:	f363 0102 	bfi	r1, r3, #0, #3
    8442:	f36f 01c5 	bfc	r1, #3, #3
    8446:	4b17      	ldr	r3, [pc, #92]	; (84a4 <usb_dc_nrfx_power_event_callback+0x17c>)
    8448:	4a17      	ldr	r2, [pc, #92]	; (84a8 <usb_dc_nrfx_power_event_callback+0x180>)
    844a:	1a9b      	subs	r3, r3, r2
    844c:	f3c3 03c9 	ubfx	r3, r3, #3, #10
    8450:	f363 118f 	bfi	r1, r3, #6, #10
    8454:	481c      	ldr	r0, [pc, #112]	; (84c8 <usb_dc_nrfx_power_event_callback+0x1a0>)
    8456:	f7fc fe4b 	bl	50f0 <log_0>
			__ASSERT_NO_MSG(0);
    845a:	4e1c      	ldr	r6, [pc, #112]	; (84cc <usb_dc_nrfx_power_event_callback+0x1a4>)
    845c:	f240 13d5 	movw	r3, #469	; 0x1d5
    8460:	4632      	mov	r2, r6
    8462:	491b      	ldr	r1, [pc, #108]	; (84d0 <usb_dc_nrfx_power_event_callback+0x1a8>)
    8464:	481b      	ldr	r0, [pc, #108]	; (84d4 <usb_dc_nrfx_power_event_callback+0x1ac>)
    8466:	f007 fa0a 	bl	f87e <printk>
    846a:	f240 11d5 	movw	r1, #469	; 0x1d5
    846e:	4630      	mov	r0, r6
    8470:	f007 fa8b 	bl	f98a <assert_post_action>
			return NULL;
    8474:	e787      	b.n	8386 <usb_dc_nrfx_power_event_callback+0x5e>
    8476:	4b12      	ldr	r3, [pc, #72]	; (84c0 <usb_dc_nrfx_power_event_callback+0x198>)
    8478:	f3bf 8f5b 	dmb	ish
    847c:	e853 2f00 	ldrex	r2, [r3]
    8480:	f042 0101 	orr.w	r1, r2, #1
    8484:	e843 1000 	strex	r0, r1, [r3]
    8488:	2800      	cmp	r0, #0
    848a:	d1f7      	bne.n	847c <usb_dc_nrfx_power_event_callback+0x154>
    848c:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    8490:	f012 0f01 	tst.w	r2, #1
    8494:	d183      	bne.n	839e <usb_dc_nrfx_power_event_callback+0x76>
		k_queue_append(&work_q->queue, work);
    8496:	f1a3 0108 	sub.w	r1, r3, #8
    849a:	480a      	ldr	r0, [pc, #40]	; (84c4 <usb_dc_nrfx_power_event_callback+0x19c>)
    849c:	f008 facd 	bl	10a3a <k_queue_append>
    84a0:	e77d      	b.n	839e <usb_dc_nrfx_power_event_callback+0x76>
    84a2:	bf00      	nop
    84a4:	00010e1c 	.word	0x00010e1c
    84a8:	00010dd4 	.word	0x00010dd4
    84ac:	0001255c 	.word	0x0001255c
    84b0:	20007420 	.word	0x20007420
    84b4:	200074cc 	.word	0x200074cc
    84b8:	20001fbc 	.word	0x20001fbc
    84bc:	00012614 	.word	0x00012614
    84c0:	20001fcc 	.word	0x20001fcc
    84c4:	20002738 	.word	0x20002738
    84c8:	00012634 	.word	0x00012634
    84cc:	00012388 	.word	0x00012388
    84d0:	00012ff0 	.word	0x00012ff0
    84d4:	00010f8c 	.word	0x00010f8c

000084d8 <usb_dc_attach>:

int usb_dc_attach(void)
{
    84d8:	b510      	push	{r4, lr}
	struct nrf_usbd_ctx *ctx = get_usbd_ctx();
	nrfx_err_t err;
	int ret;

	if (ctx->attached) {
    84da:	4b26      	ldr	r3, [pc, #152]	; (8574 <usb_dc_attach+0x9c>)
    84dc:	791b      	ldrb	r3, [r3, #4]
    84de:	b113      	cbz	r3, 84e6 <usb_dc_attach+0xe>
		return 0;
    84e0:	2400      	movs	r4, #0
		 */
		usb_dc_nrfx_power_event_callback(NRF_POWER_EVENT_USBDETECTED);
	}

	return ret;
}
    84e2:	4620      	mov	r0, r4
    84e4:	bd10      	pop	{r4, pc}
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
    84e6:	4823      	ldr	r0, [pc, #140]	; (8574 <usb_dc_attach+0x9c>)
    84e8:	2400      	movs	r4, #0
    84ea:	6084      	str	r4, [r0, #8]
    84ec:	4b22      	ldr	r3, [pc, #136]	; (8578 <usb_dc_attach+0xa0>)
    84ee:	60c3      	str	r3, [r0, #12]
    84f0:	6104      	str	r4, [r0, #16]
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_INIT, k_mutex_init, struct k_mutex *, mutex)
    84f2:	3014      	adds	r0, #20
    84f4:	f008 fa69 	bl	109ca <z_impl_k_mutex_init>
	IRQ_CONNECT(DT_NORDIC_NRF_USBD_USBD_0_IRQ,
    84f8:	4622      	mov	r2, r4
    84fa:	2101      	movs	r1, #1
    84fc:	2027      	movs	r0, #39	; 0x27
    84fe:	f001 f805 	bl	950c <z_irq_priority_set>
	err = nrfx_usbd_init(usbd_event_handler);
    8502:	481e      	ldr	r0, [pc, #120]	; (857c <usb_dc_attach+0xa4>)
    8504:	f7fa fbca 	bl	2c9c <nrfx_usbd_init>
	if (err != NRFX_SUCCESS) {
    8508:	4b1d      	ldr	r3, [pc, #116]	; (8580 <usb_dc_attach+0xa8>)
    850a:	4298      	cmp	r0, r3
    850c:	d12e      	bne.n	856c <usb_dc_attach+0x94>
	nrf5_power_usb_power_int_enable(true);
    850e:	2001      	movs	r0, #1
    8510:	f007 ff23 	bl	1035a <nrf5_power_usb_power_int_enable>
	ret = eps_ctx_init();
    8514:	f7fe fd2e 	bl	6f74 <eps_ctx_init>
	if (ret == 0) {
    8518:	4604      	mov	r4, r0
    851a:	b910      	cbnz	r0, 8522 <usb_dc_attach+0x4a>
		ctx->attached = true;
    851c:	4b15      	ldr	r3, [pc, #84]	; (8574 <usb_dc_attach+0x9c>)
    851e:	2201      	movs	r2, #1
    8520:	711a      	strb	r2, [r3, #4]
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_head(sys_sflist_t *list)
{
	return list->head;
    8522:	4b18      	ldr	r3, [pc, #96]	; (8584 <usb_dc_attach+0xac>)
    8524:	681b      	ldr	r3, [r3, #0]
	if (!k_fifo_is_empty(&work_queue)) {
    8526:	b17b      	cbz	r3, 8548 <usb_dc_attach+0x70>
    8528:	4b17      	ldr	r3, [pc, #92]	; (8588 <usb_dc_attach+0xb0>)
    852a:	f3bf 8f5b 	dmb	ish
    852e:	e853 2f00 	ldrex	r2, [r3]
    8532:	f042 0101 	orr.w	r1, r2, #1
    8536:	e843 1000 	strex	r0, r1, [r3]
    853a:	2800      	cmp	r0, #0
    853c:	d1f7      	bne.n	852e <usb_dc_attach+0x56>
    853e:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    8542:	f012 0f01 	tst.w	r2, #1
    8546:	d00b      	beq.n	8560 <usb_dc_attach+0x88>
#endif // NRF_POWER_HAS_VDDH

#if NRF_POWER_HAS_USBREG
__STATIC_INLINE uint32_t nrf_power_usbregstatus_get(void)
{
    return NRF_POWER->USBREGSTATUS;
    8548:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    854c:	f8d3 3438 	ldr.w	r3, [r3, #1080]	; 0x438
	if (nrf_power_usbregstatus_vbusdet_get()) {
    8550:	f013 0f01 	tst.w	r3, #1
    8554:	d0c5      	beq.n	84e2 <usb_dc_attach+0xa>
		usb_dc_nrfx_power_event_callback(NRF_POWER_EVENT_USBDETECTED);
    8556:	f44f 708e 	mov.w	r0, #284	; 0x11c
    855a:	f7ff fee5 	bl	8328 <usb_dc_nrfx_power_event_callback>
    855e:	e7c0      	b.n	84e2 <usb_dc_attach+0xa>
		k_queue_append(&work_q->queue, work);
    8560:	f1a3 0108 	sub.w	r1, r3, #8
    8564:	4809      	ldr	r0, [pc, #36]	; (858c <usb_dc_attach+0xb4>)
    8566:	f008 fa68 	bl	10a3a <k_queue_append>
    856a:	e7ed      	b.n	8548 <usb_dc_attach+0x70>
		return -EIO;
    856c:	f06f 0404 	mvn.w	r4, #4
    8570:	e7b7      	b.n	84e2 <usb_dc_attach+0xa>
    8572:	bf00      	nop
    8574:	20001fbc 	.word	0x20001fbc
    8578:	0000732d 	.word	0x0000732d
    857c:	0000812d 	.word	0x0000812d
    8580:	0bad0000 	.word	0x0bad0000
    8584:	200074cc 	.word	0x200074cc
    8588:	20001fcc 	.word	0x20001fcc
    858c:	20002738 	.word	0x20002738

00008590 <usb_dc_set_address>:
	return get_usbd_ctx()->attached;
    8590:	4b13      	ldr	r3, [pc, #76]	; (85e0 <usb_dc_set_address+0x50>)
    8592:	791b      	ldrb	r3, [r3, #4]

int usb_dc_set_address(const u8_t addr)
{
	struct nrf_usbd_ctx *ctx;

	if (!dev_attached() || !dev_ready()) {
    8594:	b1eb      	cbz	r3, 85d2 <usb_dc_set_address+0x42>
	return get_usbd_ctx()->ready;
    8596:	4b12      	ldr	r3, [pc, #72]	; (85e0 <usb_dc_set_address+0x50>)
    8598:	795b      	ldrb	r3, [r3, #5]
	if (!dev_attached() || !dev_ready()) {
    859a:	b1eb      	cbz	r3, 85d8 <usb_dc_set_address+0x48>

	/**
	 * Nothing to do here. The USBD HW already takes care of initiating
	 * STATUS stage. Just double check the address for sanity.
	 */
	__ASSERT(addr == (u8_t)NRF_USBD->USBADDR, "USB Address incorrect!");
    859c:	4b11      	ldr	r3, [pc, #68]	; (85e4 <usb_dc_set_address+0x54>)
    859e:	f8d3 3470 	ldr.w	r3, [r3, #1136]	; 0x470
    85a2:	b2db      	uxtb	r3, r3
    85a4:	4283      	cmp	r3, r0
    85a6:	d101      	bne.n	85ac <usb_dc_set_address+0x1c>

	ctx = get_usbd_ctx();

	LOG_DBG("Address set to: %d.", addr);

	return 0;
    85a8:	2000      	movs	r0, #0
}
    85aa:	4770      	bx	lr
{
    85ac:	b510      	push	{r4, lr}
	__ASSERT(addr == (u8_t)NRF_USBD->USBADDR, "USB Address incorrect!");
    85ae:	4c0e      	ldr	r4, [pc, #56]	; (85e8 <usb_dc_set_address+0x58>)
    85b0:	f240 5375 	movw	r3, #1397	; 0x575
    85b4:	4622      	mov	r2, r4
    85b6:	490d      	ldr	r1, [pc, #52]	; (85ec <usb_dc_set_address+0x5c>)
    85b8:	480d      	ldr	r0, [pc, #52]	; (85f0 <usb_dc_set_address+0x60>)
    85ba:	f007 f960 	bl	f87e <printk>
    85be:	480d      	ldr	r0, [pc, #52]	; (85f4 <usb_dc_set_address+0x64>)
    85c0:	f007 f95d 	bl	f87e <printk>
    85c4:	f240 5175 	movw	r1, #1397	; 0x575
    85c8:	4620      	mov	r0, r4
    85ca:	f007 f9de 	bl	f98a <assert_post_action>
	return 0;
    85ce:	2000      	movs	r0, #0
}
    85d0:	bd10      	pop	{r4, pc}
		return -ENODEV;
    85d2:	f06f 0012 	mvn.w	r0, #18
    85d6:	4770      	bx	lr
    85d8:	f06f 0012 	mvn.w	r0, #18
    85dc:	4770      	bx	lr
    85de:	bf00      	nop
    85e0:	20001fbc 	.word	0x20001fbc
    85e4:	40027000 	.word	0x40027000
    85e8:	00012388 	.word	0x00012388
    85ec:	00012574 	.word	0x00012574
    85f0:	00010f8c 	.word	0x00010f8c
    85f4:	000125ac 	.word	0x000125ac

000085f8 <usb_dc_ep_check_cap>:


int usb_dc_ep_check_cap(const struct usb_dc_ep_cfg_data *const ep_cfg)
{
    85f8:	b508      	push	{r3, lr}
	u8_t ep_idx = NRF_USBD_EP_NR_GET(ep_cfg->ep_addr);
    85fa:	7801      	ldrb	r1, [r0, #0]
    85fc:	f001 020f 	and.w	r2, r1, #15

	LOG_DBG("ep %x, mps %d, type %d", ep_cfg->ep_addr, ep_cfg->ep_mps,
		ep_cfg->ep_type);

	if ((ep_cfg->ep_type == USB_DC_EP_CONTROL) && ep_idx) {
    8600:	7903      	ldrb	r3, [r0, #4]
    8602:	b903      	cbnz	r3, 8606 <usb_dc_ep_check_cap+0xe>
    8604:	b92a      	cbnz	r2, 8612 <usb_dc_ep_check_cap+0x1a>
		LOG_ERR("invalid endpoint configuration");
		return -1;
	}

	if (!NRF_USBD_EP_VALIDATE(ep_cfg->ep_addr)) {
    8606:	2a08      	cmp	r2, #8
    8608:	d817      	bhi.n	863a <usb_dc_ep_check_cap+0x42>
		LOG_ERR("invalid endpoint index/address");
		return -1;
	}

	if ((ep_cfg->ep_type == USB_DC_EP_ISOCHRONOUS) &&
    860a:	2b01      	cmp	r3, #1
    860c:	d029      	beq.n	8662 <usb_dc_ep_check_cap+0x6a>
	    (!NRF_USBD_EPISO_CHECK(ep_cfg->ep_addr))) {
		LOG_WRN("invalid endpoint type");
		return -1;
	}

	return 0;
    860e:	2000      	movs	r0, #0
}
    8610:	bd08      	pop	{r3, pc}
		LOG_ERR("invalid endpoint configuration");
    8612:	f04f 0100 	mov.w	r1, #0
    8616:	2301      	movs	r3, #1
    8618:	f363 0102 	bfi	r1, r3, #0, #3
    861c:	f36f 01c5 	bfc	r1, #3, #3
    8620:	4b1c      	ldr	r3, [pc, #112]	; (8694 <usb_dc_ep_check_cap+0x9c>)
    8622:	4a1d      	ldr	r2, [pc, #116]	; (8698 <usb_dc_ep_check_cap+0xa0>)
    8624:	1a9b      	subs	r3, r3, r2
    8626:	f3c3 03c9 	ubfx	r3, r3, #3, #10
    862a:	f363 118f 	bfi	r1, r3, #6, #10
    862e:	481b      	ldr	r0, [pc, #108]	; (869c <usb_dc_ep_check_cap+0xa4>)
    8630:	f7fc fd5e 	bl	50f0 <log_0>
		return -1;
    8634:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    8638:	e7ea      	b.n	8610 <usb_dc_ep_check_cap+0x18>
		LOG_ERR("invalid endpoint index/address");
    863a:	f04f 0100 	mov.w	r1, #0
    863e:	2301      	movs	r3, #1
    8640:	f363 0102 	bfi	r1, r3, #0, #3
    8644:	f36f 01c5 	bfc	r1, #3, #3
    8648:	4b12      	ldr	r3, [pc, #72]	; (8694 <usb_dc_ep_check_cap+0x9c>)
    864a:	4a13      	ldr	r2, [pc, #76]	; (8698 <usb_dc_ep_check_cap+0xa0>)
    864c:	1a9b      	subs	r3, r3, r2
    864e:	f3c3 03c9 	ubfx	r3, r3, #3, #10
    8652:	f363 118f 	bfi	r1, r3, #6, #10
    8656:	4812      	ldr	r0, [pc, #72]	; (86a0 <usb_dc_ep_check_cap+0xa8>)
    8658:	f7fc fd4a 	bl	50f0 <log_0>
		return -1;
    865c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    8660:	e7d6      	b.n	8610 <usb_dc_ep_check_cap+0x18>
	if ((ep_cfg->ep_type == USB_DC_EP_ISOCHRONOUS) &&
    8662:	f011 0f08 	tst.w	r1, #8
    8666:	d001      	beq.n	866c <usb_dc_ep_check_cap+0x74>
	return 0;
    8668:	2000      	movs	r0, #0
    866a:	e7d1      	b.n	8610 <usb_dc_ep_check_cap+0x18>
		LOG_WRN("invalid endpoint type");
    866c:	f04f 0100 	mov.w	r1, #0
    8670:	2302      	movs	r3, #2
    8672:	f363 0102 	bfi	r1, r3, #0, #3
    8676:	f36f 01c5 	bfc	r1, #3, #3
    867a:	4b06      	ldr	r3, [pc, #24]	; (8694 <usb_dc_ep_check_cap+0x9c>)
    867c:	4a06      	ldr	r2, [pc, #24]	; (8698 <usb_dc_ep_check_cap+0xa0>)
    867e:	1a9b      	subs	r3, r3, r2
    8680:	f3c3 03c9 	ubfx	r3, r3, #3, #10
    8684:	f363 118f 	bfi	r1, r3, #6, #10
    8688:	4806      	ldr	r0, [pc, #24]	; (86a4 <usb_dc_ep_check_cap+0xac>)
    868a:	f7fc fd31 	bl	50f0 <log_0>
		return -1;
    868e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    8692:	e7bd      	b.n	8610 <usb_dc_ep_check_cap+0x18>
    8694:	00010e1c 	.word	0x00010e1c
    8698:	00010dd4 	.word	0x00010dd4
    869c:	00012498 	.word	0x00012498
    86a0:	000124b8 	.word	0x000124b8
    86a4:	000124d8 	.word	0x000124d8

000086a8 <usb_dc_ep_configure>:

int usb_dc_ep_configure(const struct usb_dc_ep_cfg_data *const ep_cfg)
{
    86a8:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
    86aa:	4b19      	ldr	r3, [pc, #100]	; (8710 <usb_dc_ep_configure+0x68>)
    86ac:	791b      	ldrb	r3, [r3, #4]
	struct nrf_usbd_ep_ctx *ep_ctx;

	if (!dev_attached()) {
    86ae:	b343      	cbz	r3, 8702 <usb_dc_ep_configure+0x5a>
    86b0:	4604      	mov	r4, r0
	 * accordingly. So either this needs to be chosen in the
	 * menuconfig in application area or perhaps in device tree
	 * at compile time or introduce a new API to read the endpoint
	 * configuration at runtime before configuring them.
	 */
	ep_ctx = endpoint_ctx(ep_cfg->ep_addr);
    86b2:	7805      	ldrb	r5, [r0, #0]
    86b4:	4628      	mov	r0, r5
    86b6:	f7fe fc37 	bl	6f28 <endpoint_ctx>
	if (!ep_ctx) {
    86ba:	b328      	cbz	r0, 8708 <usb_dc_ep_configure+0x60>
		return -EINVAL;
	}

	ep_ctx->cfg.addr = ep_cfg->ep_addr;
    86bc:	7245      	strb	r5, [r0, #9]
	ep_ctx->cfg.type = ep_cfg->ep_type;
    86be:	7922      	ldrb	r2, [r4, #4]
    86c0:	7282      	strb	r2, [r0, #10]
	ep_ctx->cfg.max_sz = ep_cfg->ep_mps;
    86c2:	8862      	ldrh	r2, [r4, #2]
    86c4:	6042      	str	r2, [r0, #4]

	if ((ep_cfg->ep_mps & (ep_cfg->ep_mps - 1)) != 0U) {
    86c6:	8861      	ldrh	r1, [r4, #2]
    86c8:	1e48      	subs	r0, r1, #1
    86ca:	ea11 0500 	ands.w	r5, r1, r0
    86ce:	d104      	bne.n	86da <usb_dc_ep_configure+0x32>
		LOG_ERR("EP max packet size must be a power of 2.");
		return -EINVAL;
	}
	nrfx_usbd_ep_max_packet_size_set(ep_addr_to_nrfx(ep_cfg->ep_addr),
    86d0:	7820      	ldrb	r0, [r4, #0]
    86d2:	f7fa fa83 	bl	2bdc <nrfx_usbd_ep_max_packet_size_set>
					 ep_cfg->ep_mps);

	return 0;
}
    86d6:	4628      	mov	r0, r5
    86d8:	bd38      	pop	{r3, r4, r5, pc}
		LOG_ERR("EP max packet size must be a power of 2.");
    86da:	f04f 0100 	mov.w	r1, #0
    86de:	2301      	movs	r3, #1
    86e0:	f363 0102 	bfi	r1, r3, #0, #3
    86e4:	f36f 01c5 	bfc	r1, #3, #3
    86e8:	4b0a      	ldr	r3, [pc, #40]	; (8714 <usb_dc_ep_configure+0x6c>)
    86ea:	4a0b      	ldr	r2, [pc, #44]	; (8718 <usb_dc_ep_configure+0x70>)
    86ec:	1a9b      	subs	r3, r3, r2
    86ee:	f3c3 03c9 	ubfx	r3, r3, #3, #10
    86f2:	f363 118f 	bfi	r1, r3, #6, #10
    86f6:	4809      	ldr	r0, [pc, #36]	; (871c <usb_dc_ep_configure+0x74>)
    86f8:	f7fc fcfa 	bl	50f0 <log_0>
		return -EINVAL;
    86fc:	f06f 0515 	mvn.w	r5, #21
    8700:	e7e9      	b.n	86d6 <usb_dc_ep_configure+0x2e>
		return -ENODEV;
    8702:	f06f 0512 	mvn.w	r5, #18
    8706:	e7e6      	b.n	86d6 <usb_dc_ep_configure+0x2e>
		return -EINVAL;
    8708:	f06f 0515 	mvn.w	r5, #21
    870c:	e7e3      	b.n	86d6 <usb_dc_ep_configure+0x2e>
    870e:	bf00      	nop
    8710:	20001fbc 	.word	0x20001fbc
    8714:	00010e1c 	.word	0x00010e1c
    8718:	00010dd4 	.word	0x00010dd4
    871c:	000124f0 	.word	0x000124f0

00008720 <usb_dc_ep_set_stall>:

int usb_dc_ep_set_stall(const u8_t ep)
{
    8720:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
    8722:	4b1d      	ldr	r3, [pc, #116]	; (8798 <usb_dc_ep_set_stall+0x78>)
    8724:	791b      	ldrb	r3, [r3, #4]
	struct nrf_usbd_ep_ctx *ep_ctx;

	if (!dev_attached() || !dev_ready()) {
    8726:	b36b      	cbz	r3, 8784 <usb_dc_ep_set_stall+0x64>
	return get_usbd_ctx()->ready;
    8728:	4b1b      	ldr	r3, [pc, #108]	; (8798 <usb_dc_ep_set_stall+0x78>)
    872a:	795b      	ldrb	r3, [r3, #5]
	if (!dev_attached() || !dev_ready()) {
    872c:	b36b      	cbz	r3, 878a <usb_dc_ep_set_stall+0x6a>
    872e:	4604      	mov	r4, r0
		return -ENODEV;
	}

	ep_ctx = endpoint_ctx(ep);
    8730:	f7fe fbfa 	bl	6f28 <endpoint_ctx>
	if (!ep_ctx) {
    8734:	4605      	mov	r5, r0
    8736:	b358      	cbz	r0, 8790 <usb_dc_ep_set_stall+0x70>
		return -EINVAL;
	}

	switch (ep_ctx->cfg.type) {
    8738:	7a83      	ldrb	r3, [r0, #10]
    873a:	2b03      	cmp	r3, #3
    873c:	d805      	bhi.n	874a <usb_dc_ep_set_stall+0x2a>
    873e:	e8df f003 	tbb	[pc, r3]
    8742:	0d02      	.short	0x0d02
    8744:	0909      	.short	0x0909
	case USB_DC_EP_CONTROL:
		nrfx_usbd_setup_stall();
    8746:	f7fb fab7 	bl	3cb8 <nrfx_usbd_setup_stall>
	case USB_DC_EP_ISOCHRONOUS:
		LOG_ERR("STALL unsupported on ISO endpoint.s");
		return -EINVAL;
	}

	ep_ctx->buf.len = 0U;
    874a:	2000      	movs	r0, #0
    874c:	60e8      	str	r0, [r5, #12]
	ep_ctx->buf.curr = ep_ctx->buf.data;
    874e:	69ab      	ldr	r3, [r5, #24]
    8750:	61eb      	str	r3, [r5, #28]

	LOG_DBG("STALL on EP %d.", ep);

	return 0;
}
    8752:	bd38      	pop	{r3, r4, r5, pc}
		nrfx_usbd_ep_stall(ep_addr_to_nrfx(ep));
    8754:	4620      	mov	r0, r4
    8756:	f7fb f969 	bl	3a2c <nrfx_usbd_ep_stall>
		break;
    875a:	e7f6      	b.n	874a <usb_dc_ep_set_stall+0x2a>
		LOG_ERR("STALL unsupported on ISO endpoint.s");
    875c:	f04f 0100 	mov.w	r1, #0
    8760:	2301      	movs	r3, #1
    8762:	f363 0102 	bfi	r1, r3, #0, #3
    8766:	f36f 01c5 	bfc	r1, #3, #3
    876a:	4b0c      	ldr	r3, [pc, #48]	; (879c <usb_dc_ep_set_stall+0x7c>)
    876c:	4a0c      	ldr	r2, [pc, #48]	; (87a0 <usb_dc_ep_set_stall+0x80>)
    876e:	1a9b      	subs	r3, r3, r2
    8770:	f3c3 03c9 	ubfx	r3, r3, #3, #10
    8774:	f363 118f 	bfi	r1, r3, #6, #10
    8778:	480a      	ldr	r0, [pc, #40]	; (87a4 <usb_dc_ep_set_stall+0x84>)
    877a:	f7fc fcb9 	bl	50f0 <log_0>
		return -EINVAL;
    877e:	f06f 0015 	mvn.w	r0, #21
    8782:	e7e6      	b.n	8752 <usb_dc_ep_set_stall+0x32>
		return -ENODEV;
    8784:	f06f 0012 	mvn.w	r0, #18
    8788:	e7e3      	b.n	8752 <usb_dc_ep_set_stall+0x32>
    878a:	f06f 0012 	mvn.w	r0, #18
    878e:	e7e0      	b.n	8752 <usb_dc_ep_set_stall+0x32>
		return -EINVAL;
    8790:	f06f 0015 	mvn.w	r0, #21
    8794:	e7dd      	b.n	8752 <usb_dc_ep_set_stall+0x32>
    8796:	bf00      	nop
    8798:	20001fbc 	.word	0x20001fbc
    879c:	00010e1c 	.word	0x00010e1c
    87a0:	00010dd4 	.word	0x00010dd4
    87a4:	0001251c 	.word	0x0001251c

000087a8 <usb_dc_ep_clear_stall>:
	return get_usbd_ctx()->attached;
    87a8:	4b0c      	ldr	r3, [pc, #48]	; (87dc <usb_dc_ep_clear_stall+0x34>)
    87aa:	791b      	ldrb	r3, [r3, #4]
int usb_dc_ep_clear_stall(const u8_t ep)
{

	struct nrf_usbd_ep_ctx *ep_ctx;

	if (!dev_attached() || !dev_ready()) {
    87ac:	b163      	cbz	r3, 87c8 <usb_dc_ep_clear_stall+0x20>
	return get_usbd_ctx()->ready;
    87ae:	4b0b      	ldr	r3, [pc, #44]	; (87dc <usb_dc_ep_clear_stall+0x34>)
    87b0:	795b      	ldrb	r3, [r3, #5]
	if (!dev_attached() || !dev_ready()) {
    87b2:	b163      	cbz	r3, 87ce <usb_dc_ep_clear_stall+0x26>
{
    87b4:	b510      	push	{r4, lr}
    87b6:	4604      	mov	r4, r0
		return -ENODEV;
	}

	ep_ctx = endpoint_ctx(ep);
    87b8:	f7fe fbb6 	bl	6f28 <endpoint_ctx>
	if (!ep_ctx) {
    87bc:	b150      	cbz	r0, 87d4 <usb_dc_ep_clear_stall+0x2c>
		return -EINVAL;
	}

	nrfx_usbd_ep_stall_clear(ep_addr_to_nrfx(ep));
    87be:	4620      	mov	r0, r4
    87c0:	f7fb febc 	bl	453c <nrfx_usbd_ep_stall_clear>
	LOG_DBG("Unstall on EP %d", ep);

	return 0;
    87c4:	2000      	movs	r0, #0
}
    87c6:	bd10      	pop	{r4, pc}
		return -ENODEV;
    87c8:	f06f 0012 	mvn.w	r0, #18
    87cc:	4770      	bx	lr
    87ce:	f06f 0012 	mvn.w	r0, #18
}
    87d2:	4770      	bx	lr
		return -EINVAL;
    87d4:	f06f 0015 	mvn.w	r0, #21
    87d8:	e7f5      	b.n	87c6 <usb_dc_ep_clear_stall+0x1e>
    87da:	bf00      	nop
    87dc:	20001fbc 	.word	0x20001fbc

000087e0 <usb_dc_ep_is_stalled>:
{
	return usb_dc_ep_set_stall(ep);
}

int usb_dc_ep_is_stalled(const u8_t ep, u8_t *const stalled)
{
    87e0:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
    87e2:	4b0d      	ldr	r3, [pc, #52]	; (8818 <usb_dc_ep_is_stalled+0x38>)
    87e4:	791b      	ldrb	r3, [r3, #4]
	struct nrf_usbd_ep_ctx *ep_ctx;

	if (!dev_attached() || !dev_ready()) {
    87e6:	b16b      	cbz	r3, 8804 <usb_dc_ep_is_stalled+0x24>
	return get_usbd_ctx()->ready;
    87e8:	4b0b      	ldr	r3, [pc, #44]	; (8818 <usb_dc_ep_is_stalled+0x38>)
    87ea:	795b      	ldrb	r3, [r3, #5]
	if (!dev_attached() || !dev_ready()) {
    87ec:	b16b      	cbz	r3, 880a <usb_dc_ep_is_stalled+0x2a>
    87ee:	460d      	mov	r5, r1
    87f0:	4604      	mov	r4, r0
		return -ENODEV;
	}

	ep_ctx = endpoint_ctx(ep);
    87f2:	f7fe fb99 	bl	6f28 <endpoint_ctx>
	if (!ep_ctx) {
    87f6:	b158      	cbz	r0, 8810 <usb_dc_ep_is_stalled+0x30>
		return -EINVAL;
	}

	*stalled = (u8_t) nrfx_usbd_ep_stall_check(ep_addr_to_nrfx(ep));
    87f8:	4620      	mov	r0, r4
    87fa:	f7fb f953 	bl	3aa4 <nrfx_usbd_ep_stall_check>
    87fe:	7028      	strb	r0, [r5, #0]

	return 0;
    8800:	2000      	movs	r0, #0
}
    8802:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
    8804:	f06f 0012 	mvn.w	r0, #18
    8808:	e7fb      	b.n	8802 <usb_dc_ep_is_stalled+0x22>
    880a:	f06f 0012 	mvn.w	r0, #18
    880e:	e7f8      	b.n	8802 <usb_dc_ep_is_stalled+0x22>
		return -EINVAL;
    8810:	f06f 0015 	mvn.w	r0, #21
    8814:	e7f5      	b.n	8802 <usb_dc_ep_is_stalled+0x22>
    8816:	bf00      	nop
    8818:	20001fbc 	.word	0x20001fbc

0000881c <usb_dc_ep_enable>:
	return get_usbd_ctx()->attached;
    881c:	4b0f      	ldr	r3, [pc, #60]	; (885c <usb_dc_ep_enable+0x40>)
    881e:	791b      	ldrb	r3, [r3, #4]

int usb_dc_ep_enable(const u8_t ep)
{
	struct nrf_usbd_ep_ctx *ep_ctx;

	if (!dev_attached()) {
    8820:	b193      	cbz	r3, 8848 <usb_dc_ep_enable+0x2c>
{
    8822:	b510      	push	{r4, lr}
    8824:	4604      	mov	r4, r0
		return -ENODEV;
	}

	ep_ctx = endpoint_ctx(ep);
    8826:	f7fe fb7f 	bl	6f28 <endpoint_ctx>
	if (!ep_ctx) {
    882a:	b180      	cbz	r0, 884e <usb_dc_ep_enable+0x32>
		return -EINVAL;
	}

	if (ep_ctx->cfg.en) {
    882c:	7a02      	ldrb	r2, [r0, #8]
    882e:	b98a      	cbnz	r2, 8854 <usb_dc_ep_enable+0x38>
		return -EALREADY;
	}

	LOG_DBG("EP enable: %d.", ep);

	ep_ctx->cfg.en = true;
    8830:	2201      	movs	r2, #1
    8832:	7202      	strb	r2, [r0, #8]
	return get_usbd_ctx()->ready;
    8834:	4b09      	ldr	r3, [pc, #36]	; (885c <usb_dc_ep_enable+0x40>)
    8836:	795b      	ldrb	r3, [r3, #5]

	/* Defer the endpoint enable if USBD is not ready yet. */
	if (dev_ready()) {
    8838:	b90b      	cbnz	r3, 883e <usb_dc_ep_enable+0x22>
		nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep));
	}

	return 0;
    883a:	2000      	movs	r0, #0
}
    883c:	bd10      	pop	{r4, pc}
		nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep));
    883e:	4620      	mov	r0, r4
    8840:	f7fb fdac 	bl	439c <nrfx_usbd_ep_enable>
	return 0;
    8844:	2000      	movs	r0, #0
    8846:	e7f9      	b.n	883c <usb_dc_ep_enable+0x20>
		return -ENODEV;
    8848:	f06f 0012 	mvn.w	r0, #18
}
    884c:	4770      	bx	lr
		return -EINVAL;
    884e:	f06f 0015 	mvn.w	r0, #21
    8852:	e7f3      	b.n	883c <usb_dc_ep_enable+0x20>
		return -EALREADY;
    8854:	f06f 0044 	mvn.w	r0, #68	; 0x44
    8858:	e7f0      	b.n	883c <usb_dc_ep_enable+0x20>
    885a:	bf00      	nop
    885c:	20001fbc 	.word	0x20001fbc

00008860 <usb_dc_ep_write>:
	return 0;
}

int usb_dc_ep_write(const u8_t ep, const u8_t *const data,
		    const u32_t data_len, u32_t *const ret_bytes)
{
    8860:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    8864:	b085      	sub	sp, #20
	return get_usbd_ctx()->attached;
    8866:	4c3f      	ldr	r4, [pc, #252]	; (8964 <usb_dc_ep_write+0x104>)
    8868:	7924      	ldrb	r4, [r4, #4]
	LOG_DBG("ep_write: ep %d, len %d", ep, data_len);
	struct nrf_usbd_ctx *ctx = get_usbd_ctx();
	struct nrf_usbd_ep_ctx *ep_ctx;
	u32_t bytes_to_copy;

	if (!dev_attached() || !dev_ready()) {
    886a:	2c00      	cmp	r4, #0
    886c:	d06d      	beq.n	894a <usb_dc_ep_write+0xea>
	return get_usbd_ctx()->ready;
    886e:	4c3d      	ldr	r4, [pc, #244]	; (8964 <usb_dc_ep_write+0x104>)
    8870:	7964      	ldrb	r4, [r4, #5]
	if (!dev_attached() || !dev_ready()) {
    8872:	2c00      	cmp	r4, #0
    8874:	d06c      	beq.n	8950 <usb_dc_ep_write+0xf0>
		return -ENODEV;
	}

	if (NRF_USBD_EPOUT_CHECK(ep)) {
    8876:	f010 0f80 	tst.w	r0, #128	; 0x80
    887a:	d06c      	beq.n	8956 <usb_dc_ep_write+0xf6>
    887c:	461f      	mov	r7, r3
    887e:	4690      	mov	r8, r2
    8880:	4689      	mov	r9, r1
    8882:	4605      	mov	r5, r0
		return -EINVAL;
	}

	ep_ctx = endpoint_ctx(ep);
    8884:	f7fe fb50 	bl	6f28 <endpoint_ctx>
	if (!ep_ctx) {
    8888:	4604      	mov	r4, r0
    888a:	2800      	cmp	r0, #0
    888c:	d066      	beq.n	895c <usb_dc_ep_write+0xfc>
K_SYSCALL_DECLARE2(K_SYSCALL_K_MUTEX_LOCK, k_mutex_lock, int, struct k_mutex *, mutex, s32_t, timeout)
    888e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    8892:	4835      	ldr	r0, [pc, #212]	; (8968 <usb_dc_ep_write+0x108>)
    8894:	f004 f930 	bl	caf8 <z_impl_k_mutex_lock>

	/* USBD driver does not allow scheduling multiple DMA transfers
	 * for one EP at a time. Next USB transfer on this endpoint can be
	 * triggered after the completion of previous one.
	 */
	if (ep_ctx->write_in_progress) {
    8898:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
    889c:	bb5b      	cbnz	r3, 88f6 <usb_dc_ep_write+0x96>
	 * copied to the internal buffer and must me fragmented here.
	 * In case of fragmentation, a flag is set to prevent triggering
	 * status stage which is handled by hardware, because there will be
	 * another write coming.
	 */
	if (data_len > ep_ctx->cfg.max_sz) {
    889e:	6866      	ldr	r6, [r4, #4]
    88a0:	4546      	cmp	r6, r8
    88a2:	d22e      	bcs.n	8902 <usb_dc_ep_write+0xa2>
		bytes_to_copy = ep_ctx->cfg.max_sz;
		ep_ctx->write_fragmented = true;
    88a4:	2301      	movs	r3, #1
    88a6:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	} else {
		bytes_to_copy = data_len;
		ep_ctx->write_fragmented = false;
	}
	memcpy(ep_ctx->buf.data, data, bytes_to_copy);
    88aa:	4632      	mov	r2, r6
    88ac:	4649      	mov	r1, r9
    88ae:	69a0      	ldr	r0, [r4, #24]
    88b0:	f007 fe3e 	bl	10530 <memcpy>
	ep_ctx->buf.len = bytes_to_copy;
    88b4:	60e6      	str	r6, [r4, #12]

	if (ret_bytes) {
    88b6:	b107      	cbz	r7, 88ba <usb_dc_ep_write+0x5a>
		*ret_bytes = bytes_to_copy;
    88b8:	603e      	str	r6, [r7, #0]

	/* Setup stage is handled by hardware.
	 * Detect the setup stage initiated by the stack
	 * and perform appropriate action.
	 */
	if ((ep_ctx->cfg.type == USB_DC_EP_CONTROL)
    88ba:	7aa3      	ldrb	r3, [r4, #10]
    88bc:	b91b      	cbnz	r3, 88c6 <usb_dc_ep_write+0x66>
	    && (nrfx_usbd_last_setup_dir_get() != ep)) {
    88be:	f7fb fa05 	bl	3ccc <nrfx_usbd_last_setup_dir_get>
    88c2:	42a8      	cmp	r0, r5
    88c4:	d122      	bne.n	890c <usb_dc_ep_write+0xac>
		k_mutex_unlock(&ctx->drv_lock);
		return 0;
	}

	int result = 0;
	ep_ctx->write_in_progress = true;
    88c6:	2301      	movs	r3, #1
    88c8:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	NRFX_USBD_TRANSFER_IN(transfer, ep_ctx->buf.data, ep_ctx->buf.len, 0);
    88cc:	69a3      	ldr	r3, [r4, #24]
    88ce:	9301      	str	r3, [sp, #4]
    88d0:	68e3      	ldr	r3, [r4, #12]
    88d2:	9302      	str	r3, [sp, #8]
    88d4:	2300      	movs	r3, #0
    88d6:	9303      	str	r3, [sp, #12]
	nrfx_err_t err = nrfx_usbd_ep_transfer(ep_addr_to_nrfx(ep), &transfer);
    88d8:	a901      	add	r1, sp, #4
    88da:	4628      	mov	r0, r5
    88dc:	f7fa fa70 	bl	2dc0 <nrfx_usbd_ep_transfer>

	if (err != NRFX_SUCCESS) {
    88e0:	4b22      	ldr	r3, [pc, #136]	; (896c <usb_dc_ep_write+0x10c>)
    88e2:	4298      	cmp	r0, r3
    88e4:	d119      	bne.n	891a <usb_dc_ep_write+0xba>
	int result = 0;
    88e6:	2400      	movs	r4, #0
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_UNLOCK, k_mutex_unlock, struct k_mutex *, mutex)
    88e8:	481f      	ldr	r0, [pc, #124]	; (8968 <usb_dc_ep_write+0x108>)
    88ea:	f004 fa0b 	bl	cd04 <z_impl_k_mutex_unlock>
		LOG_ERR("nRF USBD write error: %d.", (u32_t)err);
	}

	k_mutex_unlock(&ctx->drv_lock);
	return result;
}
    88ee:	4620      	mov	r0, r4
    88f0:	b005      	add	sp, #20
    88f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    88f6:	481c      	ldr	r0, [pc, #112]	; (8968 <usb_dc_ep_write+0x108>)
    88f8:	f004 fa04 	bl	cd04 <z_impl_k_mutex_unlock>
		return -EAGAIN;
    88fc:	f06f 040a 	mvn.w	r4, #10
    8900:	e7f5      	b.n	88ee <usb_dc_ep_write+0x8e>
		ep_ctx->write_fragmented = false;
    8902:	2300      	movs	r3, #0
    8904:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
		bytes_to_copy = data_len;
    8908:	4646      	mov	r6, r8
    890a:	e7ce      	b.n	88aa <usb_dc_ep_write+0x4a>
		nrfx_usbd_setup_clear();
    890c:	f7fb f9ca 	bl	3ca4 <nrfx_usbd_setup_clear>
    8910:	4815      	ldr	r0, [pc, #84]	; (8968 <usb_dc_ep_write+0x108>)
    8912:	f004 f9f7 	bl	cd04 <z_impl_k_mutex_unlock>
		return 0;
    8916:	2400      	movs	r4, #0
    8918:	e7e9      	b.n	88ee <usb_dc_ep_write+0x8e>
		ep_ctx->write_in_progress = false;
    891a:	2300      	movs	r3, #0
    891c:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
		LOG_ERR("nRF USBD write error: %d.", (u32_t)err);
    8920:	f04f 0200 	mov.w	r2, #0
    8924:	2101      	movs	r1, #1
    8926:	f361 0202 	bfi	r2, r1, #0, #3
    892a:	f363 02c5 	bfi	r2, r3, #3, #3
    892e:	4b10      	ldr	r3, [pc, #64]	; (8970 <usb_dc_ep_write+0x110>)
    8930:	4910      	ldr	r1, [pc, #64]	; (8974 <usb_dc_ep_write+0x114>)
    8932:	1a5b      	subs	r3, r3, r1
    8934:	f3c3 03c9 	ubfx	r3, r3, #3, #10
    8938:	f363 128f 	bfi	r2, r3, #6, #10
    893c:	4601      	mov	r1, r0
    893e:	480e      	ldr	r0, [pc, #56]	; (8978 <usb_dc_ep_write+0x118>)
    8940:	f7fc fb04 	bl	4f4c <log_1>
		result = -EIO;
    8944:	f06f 0404 	mvn.w	r4, #4
    8948:	e7ce      	b.n	88e8 <usb_dc_ep_write+0x88>
		return -ENODEV;
    894a:	f06f 0412 	mvn.w	r4, #18
    894e:	e7ce      	b.n	88ee <usb_dc_ep_write+0x8e>
    8950:	f06f 0412 	mvn.w	r4, #18
    8954:	e7cb      	b.n	88ee <usb_dc_ep_write+0x8e>
		return -EINVAL;
    8956:	f06f 0415 	mvn.w	r4, #21
    895a:	e7c8      	b.n	88ee <usb_dc_ep_write+0x8e>
		return -EINVAL;
    895c:	f06f 0415 	mvn.w	r4, #21
    8960:	e7c5      	b.n	88ee <usb_dc_ep_write+0x8e>
    8962:	bf00      	nop
    8964:	20001fbc 	.word	0x20001fbc
    8968:	20001fd0 	.word	0x20001fd0
    896c:	0bad0000 	.word	0x0bad0000
    8970:	00010e1c 	.word	0x00010e1c
    8974:	00010dd4 	.word	0x00010dd4
    8978:	00012540 	.word	0x00012540

0000897c <usb_dc_ep_read_wait>:

int usb_dc_ep_read_wait(u8_t ep, u8_t *data, u32_t max_data_len,
			u32_t *read_bytes)
{
    897c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return get_usbd_ctx()->attached;
    8980:	4c26      	ldr	r4, [pc, #152]	; (8a1c <usb_dc_ep_read_wait+0xa0>)
    8982:	7924      	ldrb	r4, [r4, #4]
	struct nrf_usbd_ep_ctx *ep_ctx;
	struct nrf_usbd_ctx *ctx = get_usbd_ctx();
	u32_t bytes_to_copy;

	if (!dev_attached() || !dev_ready()) {
    8984:	2c00      	cmp	r4, #0
    8986:	d03d      	beq.n	8a04 <usb_dc_ep_read_wait+0x88>
	return get_usbd_ctx()->ready;
    8988:	4c24      	ldr	r4, [pc, #144]	; (8a1c <usb_dc_ep_read_wait+0xa0>)
    898a:	7964      	ldrb	r4, [r4, #5]
	if (!dev_attached() || !dev_ready()) {
    898c:	2c00      	cmp	r4, #0
    898e:	d03c      	beq.n	8a0a <usb_dc_ep_read_wait+0x8e>
		return -ENODEV;
	}

	if (NRF_USBD_EPIN_CHECK(ep)) {
    8990:	f010 0f80 	tst.w	r0, #128	; 0x80
    8994:	d13c      	bne.n	8a10 <usb_dc_ep_read_wait+0x94>
		return -EINVAL;
	}

	if (!data && max_data_len) {
    8996:	b339      	cbz	r1, 89e8 <usb_dc_ep_read_wait+0x6c>
    8998:	461f      	mov	r7, r3
    899a:	4616      	mov	r6, r2
    899c:	460d      	mov	r5, r1
		return -EINVAL;
	}

	ep_ctx = endpoint_ctx(ep);
    899e:	f7fe fac3 	bl	6f28 <endpoint_ctx>
	if (!ep_ctx) {
    89a2:	4604      	mov	r4, r0
    89a4:	2800      	cmp	r0, #0
    89a6:	d036      	beq.n	8a16 <usb_dc_ep_read_wait+0x9a>
K_SYSCALL_DECLARE2(K_SYSCALL_K_MUTEX_LOCK, k_mutex_lock, int, struct k_mutex *, mutex, s32_t, timeout)
    89a8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    89ac:	481c      	ldr	r0, [pc, #112]	; (8a20 <usb_dc_ep_read_wait+0xa4>)
    89ae:	f004 f8a3 	bl	caf8 <z_impl_k_mutex_lock>
		return -EINVAL;
	}

	k_mutex_lock(&ctx->drv_lock, K_FOREVER);

	bytes_to_copy = MIN(max_data_len, ep_ctx->buf.len);
    89b2:	68e3      	ldr	r3, [r4, #12]
    89b4:	4698      	mov	r8, r3
    89b6:	42b3      	cmp	r3, r6
    89b8:	bf28      	it	cs
    89ba:	46b0      	movcs	r8, r6

	if (!data && !max_data_len) {
    89bc:	b1cd      	cbz	r5, 89f2 <usb_dc_ep_read_wait+0x76>
		}
		k_mutex_unlock(&ctx->drv_lock);
		return 0;
	}

	memcpy(data, ep_ctx->buf.curr, bytes_to_copy);
    89be:	4642      	mov	r2, r8
    89c0:	69e1      	ldr	r1, [r4, #28]
    89c2:	4628      	mov	r0, r5
    89c4:	f007 fdb4 	bl	10530 <memcpy>

	ep_ctx->buf.curr += bytes_to_copy;
    89c8:	69e3      	ldr	r3, [r4, #28]
    89ca:	4443      	add	r3, r8
    89cc:	61e3      	str	r3, [r4, #28]
	ep_ctx->buf.len -= bytes_to_copy;
    89ce:	68e3      	ldr	r3, [r4, #12]
    89d0:	eba3 0308 	sub.w	r3, r3, r8
    89d4:	60e3      	str	r3, [r4, #12]
	if (read_bytes) {
    89d6:	b10f      	cbz	r7, 89dc <usb_dc_ep_read_wait+0x60>
		*read_bytes = bytes_to_copy;
    89d8:	f8c7 8000 	str.w	r8, [r7]
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_UNLOCK, k_mutex_unlock, struct k_mutex *, mutex)
    89dc:	4810      	ldr	r0, [pc, #64]	; (8a20 <usb_dc_ep_read_wait+0xa4>)
    89de:	f004 f991 	bl	cd04 <z_impl_k_mutex_unlock>
	}

	k_mutex_unlock(&ctx->drv_lock);
	return 0;
    89e2:	2000      	movs	r0, #0
}
    89e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!data && max_data_len) {
    89e8:	2a00      	cmp	r2, #0
    89ea:	d0d5      	beq.n	8998 <usb_dc_ep_read_wait+0x1c>
		return -EINVAL;
    89ec:	f06f 0015 	mvn.w	r0, #21
    89f0:	e7f8      	b.n	89e4 <usb_dc_ep_read_wait+0x68>
	if (!data && !max_data_len) {
    89f2:	2e00      	cmp	r6, #0
    89f4:	d1e3      	bne.n	89be <usb_dc_ep_read_wait+0x42>
		if (read_bytes) {
    89f6:	b107      	cbz	r7, 89fa <usb_dc_ep_read_wait+0x7e>
			*read_bytes = ep_ctx->buf.len;
    89f8:	603b      	str	r3, [r7, #0]
    89fa:	4809      	ldr	r0, [pc, #36]	; (8a20 <usb_dc_ep_read_wait+0xa4>)
    89fc:	f004 f982 	bl	cd04 <z_impl_k_mutex_unlock>
		return 0;
    8a00:	2000      	movs	r0, #0
    8a02:	e7ef      	b.n	89e4 <usb_dc_ep_read_wait+0x68>
		return -ENODEV;
    8a04:	f06f 0012 	mvn.w	r0, #18
    8a08:	e7ec      	b.n	89e4 <usb_dc_ep_read_wait+0x68>
    8a0a:	f06f 0012 	mvn.w	r0, #18
    8a0e:	e7e9      	b.n	89e4 <usb_dc_ep_read_wait+0x68>
		return -EINVAL;
    8a10:	f06f 0015 	mvn.w	r0, #21
    8a14:	e7e6      	b.n	89e4 <usb_dc_ep_read_wait+0x68>
		return -EINVAL;
    8a16:	f06f 0015 	mvn.w	r0, #21
    8a1a:	e7e3      	b.n	89e4 <usb_dc_ep_read_wait+0x68>
    8a1c:	20001fbc 	.word	0x20001fbc
    8a20:	20001fd0 	.word	0x20001fd0

00008a24 <usb_dc_ep_read_continue>:
	return get_usbd_ctx()->attached;
    8a24:	4b68      	ldr	r3, [pc, #416]	; (8bc8 <usb_dc_ep_read_continue+0x1a4>)
    8a26:	791b      	ldrb	r3, [r3, #4]
int usb_dc_ep_read_continue(u8_t ep)
{
	struct nrf_usbd_ep_ctx *ep_ctx;
	struct nrf_usbd_ctx *ctx = get_usbd_ctx();

	if (!dev_attached() || !dev_ready()) {
    8a28:	2b00      	cmp	r3, #0
    8a2a:	f000 80be 	beq.w	8baa <usb_dc_ep_read_continue+0x186>
	return get_usbd_ctx()->ready;
    8a2e:	4b66      	ldr	r3, [pc, #408]	; (8bc8 <usb_dc_ep_read_continue+0x1a4>)
    8a30:	795b      	ldrb	r3, [r3, #5]
	if (!dev_attached() || !dev_ready()) {
    8a32:	2b00      	cmp	r3, #0
    8a34:	f000 80bc 	beq.w	8bb0 <usb_dc_ep_read_continue+0x18c>
		return -ENODEV;
	}

	if (NRF_USBD_EPIN_CHECK(ep)) {
    8a38:	f010 0f80 	tst.w	r0, #128	; 0x80
    8a3c:	f040 80bb 	bne.w	8bb6 <usb_dc_ep_read_continue+0x192>
{
    8a40:	b570      	push	{r4, r5, r6, lr}
    8a42:	b082      	sub	sp, #8
		return -EINVAL;
	}

	ep_ctx = endpoint_ctx(ep);
    8a44:	f7fe fa70 	bl	6f28 <endpoint_ctx>
	if (!ep_ctx) {
    8a48:	4604      	mov	r4, r0
    8a4a:	2800      	cmp	r0, #0
    8a4c:	f000 80b6 	beq.w	8bbc <usb_dc_ep_read_continue+0x198>
K_SYSCALL_DECLARE2(K_SYSCALL_K_MUTEX_LOCK, k_mutex_lock, int, struct k_mutex *, mutex, s32_t, timeout)
    8a50:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    8a54:	485d      	ldr	r0, [pc, #372]	; (8bcc <usb_dc_ep_read_continue+0x1a8>)
    8a56:	f004 f84f 	bl	caf8 <z_impl_k_mutex_lock>
		return -EINVAL;
	}

	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
	if (!ep_ctx->buf.len) {
    8a5a:	68e3      	ldr	r3, [r4, #12]
    8a5c:	b93b      	cbnz	r3, 8a6e <usb_dc_ep_read_continue+0x4a>
		ep_ctx->buf.curr = ep_ctx->buf.data;
    8a5e:	69a3      	ldr	r3, [r4, #24]
    8a60:	61e3      	str	r3, [r4, #28]
		ep_ctx->read_complete = true;
    8a62:	2301      	movs	r3, #1
    8a64:	f884 3020 	strb.w	r3, [r4, #32]

		if (ep_ctx->read_pending) {
    8a68:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
    8a6c:	b92b      	cbnz	r3, 8a7a <usb_dc_ep_read_continue+0x56>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_UNLOCK, k_mutex_unlock, struct k_mutex *, mutex)
    8a6e:	4857      	ldr	r0, [pc, #348]	; (8bcc <usb_dc_ep_read_continue+0x1a8>)
    8a70:	f004 f948 	bl	cd04 <z_impl_k_mutex_unlock>
			usbd_work_schedule();
		}
	}
	k_mutex_unlock(&ctx->drv_lock);

	return 0;
    8a74:	2000      	movs	r0, #0
}
    8a76:	b002      	add	sp, #8
    8a78:	bd70      	pop	{r4, r5, r6, pc}
	ret = k_mem_pool_alloc(&fifo_elem_pool, &block,
    8a7a:	2300      	movs	r3, #0
    8a7c:	2218      	movs	r2, #24
    8a7e:	4669      	mov	r1, sp
    8a80:	4853      	ldr	r0, [pc, #332]	; (8bd0 <usb_dc_ep_read_continue+0x1ac>)
    8a82:	f003 ff35 	bl	c8f0 <k_mem_pool_alloc>
	if (ret < 0) {
    8a86:	2800      	cmp	r0, #0
    8a88:	db27      	blt.n	8ada <usb_dc_ep_read_continue+0xb6>
	ev = (struct usbd_event *)block.data;
    8a8a:	9d00      	ldr	r5, [sp, #0]
	ev->block = block;
    8a8c:	1d2b      	adds	r3, r5, #4
    8a8e:	aa02      	add	r2, sp, #8
    8a90:	e912 0003 	ldmdb	r2, {r0, r1}
    8a94:	e883 0003 	stmia.w	r3, {r0, r1}
			if (!ev) {
    8a98:	2d00      	cmp	r5, #0
    8a9a:	f000 8092 	beq.w	8bc2 <usb_dc_ep_read_continue+0x19e>
			ev->evt_type = USBD_EVT_EP;
    8a9e:	2301      	movs	r3, #1
    8aa0:	752b      	strb	r3, [r5, #20]
			ev->evt.ep_evt.ep = ep_ctx;
    8aa2:	60ec      	str	r4, [r5, #12]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
    8aa4:	742b      	strb	r3, [r5, #16]
	k_fifo_put(&work_queue, ev);
    8aa6:	4629      	mov	r1, r5
    8aa8:	484a      	ldr	r0, [pc, #296]	; (8bd4 <usb_dc_ep_read_continue+0x1b0>)
    8aaa:	f007 ffc6 	bl	10a3a <k_queue_append>
    8aae:	4b4a      	ldr	r3, [pc, #296]	; (8bd8 <usb_dc_ep_read_continue+0x1b4>)
    8ab0:	f3bf 8f5b 	dmb	ish
    8ab4:	e853 2f00 	ldrex	r2, [r3]
    8ab8:	f042 0101 	orr.w	r1, r2, #1
    8abc:	e843 1000 	strex	r0, r1, [r3]
    8ac0:	2800      	cmp	r0, #0
    8ac2:	d1f7      	bne.n	8ab4 <usb_dc_ep_read_continue+0x90>
    8ac4:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    8ac8:	f012 0f01 	tst.w	r2, #1
    8acc:	d1cf      	bne.n	8a6e <usb_dc_ep_read_continue+0x4a>
		k_queue_append(&work_q->queue, work);
    8ace:	f1a3 0108 	sub.w	r1, r3, #8
    8ad2:	4842      	ldr	r0, [pc, #264]	; (8bdc <usb_dc_ep_read_continue+0x1b8>)
    8ad4:	f007 ffb1 	bl	10a3a <k_queue_append>
    8ad8:	e7c9      	b.n	8a6e <usb_dc_ep_read_continue+0x4a>
		LOG_ERR("USBD event allocation failed!");
    8ada:	f04f 0100 	mov.w	r1, #0
    8ade:	2301      	movs	r3, #1
    8ae0:	f363 0102 	bfi	r1, r3, #0, #3
    8ae4:	f36f 01c5 	bfc	r1, #3, #3
    8ae8:	4b3d      	ldr	r3, [pc, #244]	; (8be0 <usb_dc_ep_read_continue+0x1bc>)
    8aea:	4a3e      	ldr	r2, [pc, #248]	; (8be4 <usb_dc_ep_read_continue+0x1c0>)
    8aec:	1a9b      	subs	r3, r3, r2
    8aee:	f3c3 03c9 	ubfx	r3, r3, #3, #10
    8af2:	f363 118f 	bfi	r1, r3, #6, #10
    8af6:	483c      	ldr	r0, [pc, #240]	; (8be8 <usb_dc_ep_read_continue+0x1c4>)
    8af8:	f7fc fafa 	bl	50f0 <log_0>
static inline void usbd_evt_flush(void)
    8afc:	e003      	b.n	8b06 <usb_dc_ep_read_continue+0xe2>
	k_mem_pool_free(&ev->block);
    8afe:	3004      	adds	r0, #4
    8b00:	f007 ff28 	bl	10954 <k_mem_pool_free>
	} while (ev != NULL);
    8b04:	b13d      	cbz	r5, 8b16 <usb_dc_ep_read_continue+0xf2>
K_SYSCALL_DECLARE2(K_SYSCALL_K_QUEUE_GET, k_queue_get, void *, struct k_queue *, queue, s32_t, timeout)
    8b06:	2100      	movs	r1, #0
    8b08:	4832      	ldr	r0, [pc, #200]	; (8bd4 <usb_dc_ep_read_continue+0x1b0>)
    8b0a:	f004 fa91 	bl	d030 <z_impl_k_queue_get>
		if (ev) {
    8b0e:	4605      	mov	r5, r0
    8b10:	2800      	cmp	r0, #0
    8b12:	d1f4      	bne.n	8afe <usb_dc_ep_read_continue+0xda>
    8b14:	e7f6      	b.n	8b04 <usb_dc_ep_read_continue+0xe0>
		ret = k_mem_pool_alloc(&fifo_elem_pool, &block,
    8b16:	2300      	movs	r3, #0
    8b18:	2218      	movs	r2, #24
    8b1a:	4669      	mov	r1, sp
    8b1c:	482c      	ldr	r0, [pc, #176]	; (8bd0 <usb_dc_ep_read_continue+0x1ac>)
    8b1e:	f003 fee7 	bl	c8f0 <k_mem_pool_alloc>
		if (ret < 0) {
    8b22:	2800      	cmp	r0, #0
    8b24:	db22      	blt.n	8b6c <usb_dc_ep_read_continue+0x148>
		ev = (struct usbd_event *)block.data;
    8b26:	9b00      	ldr	r3, [sp, #0]
		ev->block = block;
    8b28:	1d1a      	adds	r2, r3, #4
    8b2a:	a902      	add	r1, sp, #8
    8b2c:	e911 0003 	ldmdb	r1, {r0, r1}
    8b30:	e882 0003 	stmia.w	r2, {r0, r1}
		ev->evt_type = USBD_EVT_REINIT;
    8b34:	2204      	movs	r2, #4
    8b36:	751a      	strb	r2, [r3, #20]
	k_fifo_put(&work_queue, ev);
    8b38:	4619      	mov	r1, r3
    8b3a:	4826      	ldr	r0, [pc, #152]	; (8bd4 <usb_dc_ep_read_continue+0x1b0>)
    8b3c:	f007 ff7d 	bl	10a3a <k_queue_append>
    8b40:	4b25      	ldr	r3, [pc, #148]	; (8bd8 <usb_dc_ep_read_continue+0x1b4>)
    8b42:	f3bf 8f5b 	dmb	ish
    8b46:	e853 2f00 	ldrex	r2, [r3]
    8b4a:	f042 0101 	orr.w	r1, r2, #1
    8b4e:	e843 1000 	strex	r0, r1, [r3]
    8b52:	2800      	cmp	r0, #0
    8b54:	d1f7      	bne.n	8b46 <usb_dc_ep_read_continue+0x122>
    8b56:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    8b5a:	f012 0f01 	tst.w	r2, #1
    8b5e:	d19b      	bne.n	8a98 <usb_dc_ep_read_continue+0x74>
		k_queue_append(&work_q->queue, work);
    8b60:	f1a3 0108 	sub.w	r1, r3, #8
    8b64:	481d      	ldr	r0, [pc, #116]	; (8bdc <usb_dc_ep_read_continue+0x1b8>)
    8b66:	f007 ff68 	bl	10a3a <k_queue_append>
    8b6a:	e795      	b.n	8a98 <usb_dc_ep_read_continue+0x74>
			LOG_ERR("USBD event memory corrupted.");
    8b6c:	f04f 0100 	mov.w	r1, #0
    8b70:	2301      	movs	r3, #1
    8b72:	f363 0102 	bfi	r1, r3, #0, #3
    8b76:	f36f 01c5 	bfc	r1, #3, #3
    8b7a:	4b19      	ldr	r3, [pc, #100]	; (8be0 <usb_dc_ep_read_continue+0x1bc>)
    8b7c:	4a19      	ldr	r2, [pc, #100]	; (8be4 <usb_dc_ep_read_continue+0x1c0>)
    8b7e:	1a9b      	subs	r3, r3, r2
    8b80:	f3c3 03c9 	ubfx	r3, r3, #3, #10
    8b84:	f363 118f 	bfi	r1, r3, #6, #10
    8b88:	4818      	ldr	r0, [pc, #96]	; (8bec <usb_dc_ep_read_continue+0x1c8>)
    8b8a:	f7fc fab1 	bl	50f0 <log_0>
			__ASSERT_NO_MSG(0);
    8b8e:	4e18      	ldr	r6, [pc, #96]	; (8bf0 <usb_dc_ep_read_continue+0x1cc>)
    8b90:	f240 13d5 	movw	r3, #469	; 0x1d5
    8b94:	4632      	mov	r2, r6
    8b96:	4917      	ldr	r1, [pc, #92]	; (8bf4 <usb_dc_ep_read_continue+0x1d0>)
    8b98:	4817      	ldr	r0, [pc, #92]	; (8bf8 <usb_dc_ep_read_continue+0x1d4>)
    8b9a:	f006 fe70 	bl	f87e <printk>
    8b9e:	f240 11d5 	movw	r1, #469	; 0x1d5
    8ba2:	4630      	mov	r0, r6
    8ba4:	f006 fef1 	bl	f98a <assert_post_action>
			return NULL;
    8ba8:	e776      	b.n	8a98 <usb_dc_ep_read_continue+0x74>
		return -ENODEV;
    8baa:	f06f 0012 	mvn.w	r0, #18
    8bae:	4770      	bx	lr
    8bb0:	f06f 0012 	mvn.w	r0, #18
    8bb4:	4770      	bx	lr
		return -EINVAL;
    8bb6:	f06f 0015 	mvn.w	r0, #21
}
    8bba:	4770      	bx	lr
		return -EINVAL;
    8bbc:	f06f 0015 	mvn.w	r0, #21
    8bc0:	e759      	b.n	8a76 <usb_dc_ep_read_continue+0x52>
				return -ENOMEM;
    8bc2:	f06f 000b 	mvn.w	r0, #11
    8bc6:	e756      	b.n	8a76 <usb_dc_ep_read_continue+0x52>
    8bc8:	20001fbc 	.word	0x20001fbc
    8bcc:	20001fd0 	.word	0x20001fd0
    8bd0:	20007420 	.word	0x20007420
    8bd4:	200074cc 	.word	0x200074cc
    8bd8:	20001fcc 	.word	0x20001fcc
    8bdc:	20002738 	.word	0x20002738
    8be0:	00010e1c 	.word	0x00010e1c
    8be4:	00010dd4 	.word	0x00010dd4
    8be8:	00012614 	.word	0x00012614
    8bec:	00012634 	.word	0x00012634
    8bf0:	00012388 	.word	0x00012388
    8bf4:	00012ff0 	.word	0x00012ff0
    8bf8:	00010f8c 	.word	0x00010f8c

00008bfc <usb_dc_ep_set_callback>:
	return get_usbd_ctx()->attached;
    8bfc:	4b08      	ldr	r3, [pc, #32]	; (8c20 <usb_dc_ep_set_callback+0x24>)
    8bfe:	791b      	ldrb	r3, [r3, #4]

int usb_dc_ep_set_callback(const u8_t ep, const usb_dc_ep_callback cb)
{
	struct nrf_usbd_ep_ctx *ep_ctx;

	if (!dev_attached()) {
    8c00:	b13b      	cbz	r3, 8c12 <usb_dc_ep_set_callback+0x16>
{
    8c02:	b510      	push	{r4, lr}
    8c04:	460c      	mov	r4, r1
		return -ENODEV;
	}

	ep_ctx = endpoint_ctx(ep);
    8c06:	f7fe f98f 	bl	6f28 <endpoint_ctx>
	if (!ep_ctx) {
    8c0a:	b128      	cbz	r0, 8c18 <usb_dc_ep_set_callback+0x1c>
		return -EINVAL;
	}

	ep_ctx->cfg.cb = cb;
    8c0c:	6004      	str	r4, [r0, #0]

	return 0;
    8c0e:	2000      	movs	r0, #0
}
    8c10:	bd10      	pop	{r4, pc}
		return -ENODEV;
    8c12:	f06f 0012 	mvn.w	r0, #18
}
    8c16:	4770      	bx	lr
		return -EINVAL;
    8c18:	f06f 0015 	mvn.w	r0, #21
    8c1c:	e7f8      	b.n	8c10 <usb_dc_ep_set_callback+0x14>
    8c1e:	bf00      	nop
    8c20:	20001fbc 	.word	0x20001fbc

00008c24 <usb_dc_set_status_callback>:

int usb_dc_set_status_callback(const usb_dc_status_callback cb)
{
	get_usbd_ctx()->status_cb = cb;
    8c24:	4b01      	ldr	r3, [pc, #4]	; (8c2c <usb_dc_set_status_callback+0x8>)
    8c26:	6018      	str	r0, [r3, #0]
	return 0;
}
    8c28:	2000      	movs	r0, #0
    8c2a:	4770      	bx	lr
    8c2c:	20001fbc 	.word	0x20001fbc

00008c30 <usb_dc_ep_mps>:

int usb_dc_ep_mps(const u8_t ep)
{
    8c30:	b508      	push	{r3, lr}
	return get_usbd_ctx()->attached;
    8c32:	4b07      	ldr	r3, [pc, #28]	; (8c50 <usb_dc_ep_mps+0x20>)
    8c34:	791b      	ldrb	r3, [r3, #4]
	struct nrf_usbd_ep_ctx *ep_ctx;

	if (!dev_attached()) {
    8c36:	b123      	cbz	r3, 8c42 <usb_dc_ep_mps+0x12>
		return -ENODEV;
	}

	ep_ctx = endpoint_ctx(ep);
    8c38:	f7fe f976 	bl	6f28 <endpoint_ctx>
	if (!ep_ctx) {
    8c3c:	b120      	cbz	r0, 8c48 <usb_dc_ep_mps+0x18>
		return -EINVAL;
	}

	return ep_ctx->cfg.max_sz;
    8c3e:	6840      	ldr	r0, [r0, #4]
}
    8c40:	bd08      	pop	{r3, pc}
		return -ENODEV;
    8c42:	f06f 0012 	mvn.w	r0, #18
    8c46:	e7fb      	b.n	8c40 <usb_dc_ep_mps+0x10>
		return -EINVAL;
    8c48:	f06f 0015 	mvn.w	r0, #21
    8c4c:	e7f8      	b.n	8c40 <usb_dc_ep_mps+0x10>
    8c4e:	bf00      	nop
    8c50:	20001fbc 	.word	0x20001fbc

00008c54 <z_clock_isr>:
#include <drivers/system_timer.h>

/* Weak-linked noop defaults for optional driver interfaces: */

void __weak z_clock_isr(void *arg)
{
    8c54:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(false);
    8c56:	4c06      	ldr	r4, [pc, #24]	; (8c70 <z_clock_isr+0x1c>)
    8c58:	2317      	movs	r3, #23
    8c5a:	4622      	mov	r2, r4
    8c5c:	4905      	ldr	r1, [pc, #20]	; (8c74 <z_clock_isr+0x20>)
    8c5e:	4806      	ldr	r0, [pc, #24]	; (8c78 <z_clock_isr+0x24>)
    8c60:	f006 fe0d 	bl	f87e <printk>
    8c64:	2117      	movs	r1, #23
    8c66:	4620      	mov	r0, r4
    8c68:	f006 fe8f 	bl	f98a <assert_post_action>
}
    8c6c:	bd10      	pop	{r4, pc}
    8c6e:	bf00      	nop
    8c70:	00012754 	.word	0x00012754
    8c74:	00012ff0 	.word	0x00012ff0
    8c78:	00010f8c 	.word	0x00010f8c

00008c7c <set_comparator>:
	return (a - b) & COUNTER_MAX;
}

static void set_comparator(u32_t cyc)
{
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    8c7c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

#ifndef SUPPRESS_INLINE_IMPLEMENTATION

__STATIC_INLINE  void nrf_rtc_cc_set(NRF_RTC_Type * p_reg, uint32_t ch, uint32_t cc_val)
{
    p_reg->CC[ch] = cc_val;
    8c80:	4b01      	ldr	r3, [pc, #4]	; (8c88 <set_comparator+0xc>)
    8c82:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
}
    8c86:	4770      	bx	lr
    8c88:	40011000 	.word	0x40011000

00008c8c <counter>:
#endif
}

__STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type * p_reg)
{
     return p_reg->COUNTER;
    8c8c:	4b01      	ldr	r3, [pc, #4]	; (8c94 <counter+0x8>)
    8c8e:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

static u32_t counter(void)
{
	return nrf_rtc_counter_get(RTC);
}
    8c92:	4770      	bx	lr
    8c94:	40011000 	.word	0x40011000

00008c98 <rtc1_nrf_isr>:
 * probably better abstract that at some point (e.g. query and reset
 * it by pointer at runtime, maybe?) so we don't have this leaky
 * symbol.
 */
void rtc1_nrf_isr(void *arg)
{
    8c98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	ARG_UNUSED(arg);
	RTC->EVENTS_COMPARE[0] = 0;
    8c9c:	4b28      	ldr	r3, [pc, #160]	; (8d40 <rtc1_nrf_isr+0xa8>)
    8c9e:	2200      	movs	r2, #0
    8ca0:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	__asm__ volatile(
    8ca4:	f04f 0320 	mov.w	r3, #32
    8ca8:	f3ef 8811 	mrs	r8, BASEPRI
    8cac:	f383 8811 	msr	BASEPRI, r3
    8cb0:	f3bf 8f6f 	isb	sy
	 * actually a wrapper for a global spinlock!
	 */
	k.key = z_arch_irq_lock();

#ifdef SPIN_VALIDATE
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
    8cb4:	4823      	ldr	r0, [pc, #140]	; (8d44 <rtc1_nrf_isr+0xac>)
    8cb6:	f005 fdc1 	bl	e83c <z_spin_lock_valid>
    8cba:	b318      	cbz	r0, 8d04 <rtc1_nrf_isr+0x6c>
	while (!atomic_cas(&l->locked, 0, 1)) {
	}
#endif

#ifdef SPIN_VALIDATE
	z_spin_lock_set_owner(l);
    8cbc:	4d21      	ldr	r5, [pc, #132]	; (8d44 <rtc1_nrf_isr+0xac>)
    8cbe:	4628      	mov	r0, r5
    8cc0:	f005 fddc 	bl	e87c <z_spin_lock_set_owner>

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t t = counter();
    8cc4:	f7ff ffe2 	bl	8c8c <counter>
	u32_t dticks = counter_sub(t, last_count) / CYC_PER_TICK;
    8cc8:	4e1f      	ldr	r6, [pc, #124]	; (8d48 <rtc1_nrf_isr+0xb0>)
    8cca:	6837      	ldr	r7, [r6, #0]
    8ccc:	4639      	mov	r1, r7
    8cce:	f007 fb81 	bl	103d4 <counter_sub>
    8cd2:	4c1e      	ldr	r4, [pc, #120]	; (8d4c <rtc1_nrf_isr+0xb4>)
    8cd4:	fba4 3400 	umull	r3, r4, r4, r0
    8cd8:	1b00      	subs	r0, r0, r4
    8cda:	eb04 0450 	add.w	r4, r4, r0, lsr #1
    8cde:	0a24      	lsrs	r4, r4, #8

	last_count += dticks * CYC_PER_TICK;
    8ce0:	f240 1347 	movw	r3, #327	; 0x147
    8ce4:	fb03 7704 	mla	r7, r3, r4, r7
    8ce8:	6037      	str	r7, [r6, #0]
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
    8cea:	4628      	mov	r0, r5
    8cec:	f005 fdb6 	bl	e85c <z_spin_unlock_valid>
    8cf0:	b1b8      	cbz	r0, 8d22 <rtc1_nrf_isr+0x8a>
	__asm__ volatile(
    8cf2:	f388 8811 	msr	BASEPRI, r8
    8cf6:	f3bf 8f6f 	isb	sy
		}
		set_comparator(next);
	}

	k_spin_unlock(&lock, key);
	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : 1);
    8cfa:	4620      	mov	r0, r4
    8cfc:	f006 f8f6 	bl	eeec <z_clock_announce>
}
    8d00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
    8d04:	4c12      	ldr	r4, [pc, #72]	; (8d50 <rtc1_nrf_isr+0xb8>)
    8d06:	234e      	movs	r3, #78	; 0x4e
    8d08:	4622      	mov	r2, r4
    8d0a:	4912      	ldr	r1, [pc, #72]	; (8d54 <rtc1_nrf_isr+0xbc>)
    8d0c:	4812      	ldr	r0, [pc, #72]	; (8d58 <rtc1_nrf_isr+0xc0>)
    8d0e:	f006 fdb6 	bl	f87e <printk>
    8d12:	4812      	ldr	r0, [pc, #72]	; (8d5c <rtc1_nrf_isr+0xc4>)
    8d14:	f006 fdb3 	bl	f87e <printk>
    8d18:	214e      	movs	r1, #78	; 0x4e
    8d1a:	4620      	mov	r0, r4
    8d1c:	f006 fe35 	bl	f98a <assert_post_action>
    8d20:	e7cc      	b.n	8cbc <rtc1_nrf_isr+0x24>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
    8d22:	4d0b      	ldr	r5, [pc, #44]	; (8d50 <rtc1_nrf_isr+0xb8>)
    8d24:	2361      	movs	r3, #97	; 0x61
    8d26:	462a      	mov	r2, r5
    8d28:	490d      	ldr	r1, [pc, #52]	; (8d60 <rtc1_nrf_isr+0xc8>)
    8d2a:	480b      	ldr	r0, [pc, #44]	; (8d58 <rtc1_nrf_isr+0xc0>)
    8d2c:	f006 fda7 	bl	f87e <printk>
    8d30:	480c      	ldr	r0, [pc, #48]	; (8d64 <rtc1_nrf_isr+0xcc>)
    8d32:	f006 fda4 	bl	f87e <printk>
    8d36:	2161      	movs	r1, #97	; 0x61
    8d38:	4628      	mov	r0, r5
    8d3a:	f006 fe26 	bl	f98a <assert_post_action>
    8d3e:	e7d8      	b.n	8cf2 <rtc1_nrf_isr+0x5a>
    8d40:	40011000 	.word	0x40011000
    8d44:	20002274 	.word	0x20002274
    8d48:	20002270 	.word	0x20002270
    8d4c:	90d4f121 	.word	0x90d4f121
    8d50:	00012778 	.word	0x00012778
    8d54:	00012790 	.word	0x00012790
    8d58:	00010f8c 	.word	0x00010f8c
    8d5c:	000127a8 	.word	0x000127a8
    8d60:	000127c0 	.word	0x000127c0
    8d64:	000127d8 	.word	0x000127d8

00008d68 <z_clock_driver_init>:

int z_clock_driver_init(struct device *device)
{
    8d68:	b530      	push	{r4, r5, lr}
    8d6a:	b083      	sub	sp, #12
    8d6c:	481d      	ldr	r0, [pc, #116]	; (8de4 <z_clock_driver_init+0x7c>)
    8d6e:	f003 fb3d 	bl	c3ec <z_impl_device_get_binding>
	struct device *clock;

	ARG_UNUSED(device);

	clock = device_get_binding(DT_NORDIC_NRF_CLOCK_0_LABEL "_32K");
	if (!clock) {
    8d72:	2800      	cmp	r0, #0
    8d74:	d033      	beq.n	8dde <z_clock_driver_init+0x76>
	const struct clock_control_driver_api *api = dev->driver_api;
    8d76:	6842      	ldr	r2, [r0, #4]
	return api->on(dev, sys);
    8d78:	6812      	ldr	r2, [r2, #0]
    8d7a:	2101      	movs	r1, #1
    8d7c:	4790      	blx	r2
}

__STATIC_INLINE void nrf_rtc_prescaler_set(NRF_RTC_Type * p_reg, uint32_t val)
{
    NRFX_ASSERT(val <= (RTC_PRESCALER_PRESCALER_Msk >> RTC_PRESCALER_PRESCALER_Pos));
    p_reg->PRESCALER = val;
    8d7e:	4d1a      	ldr	r5, [pc, #104]	; (8de8 <z_clock_driver_init+0x80>)
    8d80:	2400      	movs	r4, #0
    8d82:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    p_reg->CC[ch] = cc_val;
    8d86:	f240 1347 	movw	r3, #327	; 0x147
    8d8a:	f8c5 3540 	str.w	r3, [r5, #1344]	; 0x540
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

__STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    8d8e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    8d92:	f8c5 3344 	str.w	r3, [r5, #836]	; 0x344
    p_reg->INTENSET = mask;
    8d96:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    8d9a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    8d9e:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
    8da2:	601c      	str	r4, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    8da4:	681b      	ldr	r3, [r3, #0]
    8da6:	9301      	str	r3, [sp, #4]
    (void)dummy;
    8da8:	9b01      	ldr	r3, [sp, #4]
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    8daa:	4b10      	ldr	r3, [pc, #64]	; (8dec <z_clock_driver_init+0x84>)
    8dac:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    8db0:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180

	/* Clear the event flag and possible pending interrupt */
	nrf_rtc_event_clear(RTC, NRF_RTC_EVENT_COMPARE_0);
	NVIC_ClearPendingIRQ(RTC1_IRQn);

	IRQ_CONNECT(RTC1_IRQn, 1, rtc1_nrf_isr, 0, 0);
    8db4:	4622      	mov	r2, r4
    8db6:	2101      	movs	r1, #1
    8db8:	2011      	movs	r0, #17
    8dba:	f000 fba7 	bl	950c <z_irq_priority_set>
	irq_enable(RTC1_IRQn);
    8dbe:	2011      	movs	r0, #17
    8dc0:	f000 fb72 	bl	94a8 <z_arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    8dc4:	2301      	movs	r3, #1
    8dc6:	4a0a      	ldr	r2, [pc, #40]	; (8df0 <z_clock_driver_init+0x88>)
    8dc8:	6013      	str	r3, [r2, #0]
    8dca:	602b      	str	r3, [r5, #0]

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	if (!IS_ENABLED(TICKLESS_KERNEL)) {
		set_comparator(counter() + CYC_PER_TICK);
    8dcc:	f7ff ff5e 	bl	8c8c <counter>
    8dd0:	f200 1047 	addw	r0, r0, #327	; 0x147
    8dd4:	f7ff ff52 	bl	8c7c <set_comparator>
	}

	return 0;
    8dd8:	4620      	mov	r0, r4
}
    8dda:	b003      	add	sp, #12
    8ddc:	bd30      	pop	{r4, r5, pc}
		return -1;
    8dde:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    8de2:	e7fa      	b.n	8dda <z_clock_driver_init+0x72>
    8de4:	00012370 	.word	0x00012370
    8de8:	40011000 	.word	0x40011000
    8dec:	e000e100 	.word	0xe000e100
    8df0:	40011008 	.word	0x40011008

00008df4 <z_clock_set_timeout>:

void z_clock_set_timeout(s32_t ticks, bool idle)
{
    8df4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	ARG_UNUSED(idle);

#ifdef CONFIG_TICKLESS_KERNEL
	ticks = (ticks == K_FOREVER) ? MAX_TICKS : ticks;
    8df8:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    8dfc:	d043      	beq.n	8e86 <z_clock_set_timeout+0x92>
	ticks = MAX(MIN(ticks - 1, (s32_t)MAX_TICKS), 0);
    8dfe:	3801      	subs	r0, #1
    8e00:	2800      	cmp	r0, #0
    8e02:	dd43      	ble.n	8e8c <z_clock_set_timeout+0x98>
    8e04:	f64c 0469 	movw	r4, #51305	; 0xc869
    8e08:	4284      	cmp	r4, r0
    8e0a:	bfa8      	it	ge
    8e0c:	4604      	movge	r4, r0
	__asm__ volatile(
    8e0e:	f04f 0320 	mov.w	r3, #32
    8e12:	f3ef 8511 	mrs	r5, BASEPRI
    8e16:	f383 8811 	msr	BASEPRI, r3
    8e1a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
    8e1e:	482b      	ldr	r0, [pc, #172]	; (8ecc <z_clock_set_timeout+0xd8>)
    8e20:	f005 fd0c 	bl	e83c <z_spin_lock_valid>
    8e24:	b3a0      	cbz	r0, 8e90 <z_clock_set_timeout+0x9c>
	z_spin_lock_set_owner(l);
    8e26:	4829      	ldr	r0, [pc, #164]	; (8ecc <z_clock_set_timeout+0xd8>)
    8e28:	f005 fd28 	bl	e87c <z_spin_lock_set_owner>

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t cyc, t = counter();
    8e2c:	f7ff ff2e 	bl	8c8c <counter>
    8e30:	4606      	mov	r6, r0

	/* Round up to next tick boundary */
	cyc = ticks * CYC_PER_TICK + counter_sub(t, last_count);
    8e32:	f240 1747 	movw	r7, #327	; 0x147
    8e36:	fb07 f404 	mul.w	r4, r7, r4
    8e3a:	4b25      	ldr	r3, [pc, #148]	; (8ed0 <z_clock_set_timeout+0xdc>)
    8e3c:	f8d3 8000 	ldr.w	r8, [r3]
    8e40:	4641      	mov	r1, r8
    8e42:	f007 fac7 	bl	103d4 <counter_sub>
    8e46:	4420      	add	r0, r4
	cyc += (CYC_PER_TICK - 1);
    8e48:	f500 73a3 	add.w	r3, r0, #326	; 0x146
	cyc = (cyc / CYC_PER_TICK) * CYC_PER_TICK;
    8e4c:	4c21      	ldr	r4, [pc, #132]	; (8ed4 <z_clock_set_timeout+0xe0>)
    8e4e:	fba4 2403 	umull	r2, r4, r4, r3
    8e52:	1b1b      	subs	r3, r3, r4
    8e54:	eb04 0453 	add.w	r4, r4, r3, lsr #1
    8e58:	0a24      	lsrs	r4, r4, #8
	cyc += last_count;
    8e5a:	fb07 8404 	mla	r4, r7, r4, r8

	if (counter_sub(cyc, t) < MIN_DELAY) {
    8e5e:	4631      	mov	r1, r6
    8e60:	4620      	mov	r0, r4
    8e62:	f007 fab7 	bl	103d4 <counter_sub>
    8e66:	281f      	cmp	r0, #31
    8e68:	d800      	bhi.n	8e6c <z_clock_set_timeout+0x78>
		cyc += CYC_PER_TICK;
    8e6a:	443c      	add	r4, r7
	}

	set_comparator(cyc);
    8e6c:	4620      	mov	r0, r4
    8e6e:	f7ff ff05 	bl	8c7c <set_comparator>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
    8e72:	4816      	ldr	r0, [pc, #88]	; (8ecc <z_clock_set_timeout+0xd8>)
    8e74:	f005 fcf2 	bl	e85c <z_spin_unlock_valid>
    8e78:	b1c8      	cbz	r0, 8eae <z_clock_set_timeout+0xba>
	__asm__ volatile(
    8e7a:	f385 8811 	msr	BASEPRI, r5
    8e7e:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);
#endif
}
    8e82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ticks = (ticks == K_FOREVER) ? MAX_TICKS : ticks;
    8e86:	f64c 0069 	movw	r0, #51305	; 0xc869
    8e8a:	e7b8      	b.n	8dfe <z_clock_set_timeout+0xa>
	ticks = MAX(MIN(ticks - 1, (s32_t)MAX_TICKS), 0);
    8e8c:	2400      	movs	r4, #0
    8e8e:	e7be      	b.n	8e0e <z_clock_set_timeout+0x1a>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
    8e90:	4e11      	ldr	r6, [pc, #68]	; (8ed8 <z_clock_set_timeout+0xe4>)
    8e92:	234e      	movs	r3, #78	; 0x4e
    8e94:	4632      	mov	r2, r6
    8e96:	4911      	ldr	r1, [pc, #68]	; (8edc <z_clock_set_timeout+0xe8>)
    8e98:	4811      	ldr	r0, [pc, #68]	; (8ee0 <z_clock_set_timeout+0xec>)
    8e9a:	f006 fcf0 	bl	f87e <printk>
    8e9e:	4811      	ldr	r0, [pc, #68]	; (8ee4 <z_clock_set_timeout+0xf0>)
    8ea0:	f006 fced 	bl	f87e <printk>
    8ea4:	214e      	movs	r1, #78	; 0x4e
    8ea6:	4630      	mov	r0, r6
    8ea8:	f006 fd6f 	bl	f98a <assert_post_action>
    8eac:	e7bb      	b.n	8e26 <z_clock_set_timeout+0x32>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
    8eae:	4c0a      	ldr	r4, [pc, #40]	; (8ed8 <z_clock_set_timeout+0xe4>)
    8eb0:	2361      	movs	r3, #97	; 0x61
    8eb2:	4622      	mov	r2, r4
    8eb4:	490c      	ldr	r1, [pc, #48]	; (8ee8 <z_clock_set_timeout+0xf4>)
    8eb6:	480a      	ldr	r0, [pc, #40]	; (8ee0 <z_clock_set_timeout+0xec>)
    8eb8:	f006 fce1 	bl	f87e <printk>
    8ebc:	480b      	ldr	r0, [pc, #44]	; (8eec <z_clock_set_timeout+0xf8>)
    8ebe:	f006 fcde 	bl	f87e <printk>
    8ec2:	2161      	movs	r1, #97	; 0x61
    8ec4:	4620      	mov	r0, r4
    8ec6:	f006 fd60 	bl	f98a <assert_post_action>
    8eca:	e7d6      	b.n	8e7a <z_clock_set_timeout+0x86>
    8ecc:	20002274 	.word	0x20002274
    8ed0:	20002270 	.word	0x20002270
    8ed4:	90d4f121 	.word	0x90d4f121
    8ed8:	00012778 	.word	0x00012778
    8edc:	00012790 	.word	0x00012790
    8ee0:	00010f8c 	.word	0x00010f8c
    8ee4:	000127a8 	.word	0x000127a8
    8ee8:	000127c0 	.word	0x000127c0
    8eec:	000127d8 	.word	0x000127d8

00008ef0 <z_clock_elapsed>:

u32_t z_clock_elapsed(void)
{
    8ef0:	b570      	push	{r4, r5, r6, lr}
	__asm__ volatile(
    8ef2:	f04f 0320 	mov.w	r3, #32
    8ef6:	f3ef 8611 	mrs	r6, BASEPRI
    8efa:	f383 8811 	msr	BASEPRI, r3
    8efe:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
    8f02:	481e      	ldr	r0, [pc, #120]	; (8f7c <z_clock_elapsed+0x8c>)
    8f04:	f005 fc9a 	bl	e83c <z_spin_lock_valid>
    8f08:	b1d0      	cbz	r0, 8f40 <z_clock_elapsed+0x50>
	z_spin_lock_set_owner(l);
    8f0a:	4d1c      	ldr	r5, [pc, #112]	; (8f7c <z_clock_elapsed+0x8c>)
    8f0c:	4628      	mov	r0, r5
    8f0e:	f005 fcb5 	bl	e87c <z_spin_lock_set_owner>
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
    8f12:	f7ff febb 	bl	8c8c <counter>
    8f16:	4b1a      	ldr	r3, [pc, #104]	; (8f80 <z_clock_elapsed+0x90>)
    8f18:	6819      	ldr	r1, [r3, #0]
    8f1a:	f007 fa5b 	bl	103d4 <counter_sub>
    8f1e:	4b19      	ldr	r3, [pc, #100]	; (8f84 <z_clock_elapsed+0x94>)
    8f20:	fba3 2300 	umull	r2, r3, r3, r0
    8f24:	1ac0      	subs	r0, r0, r3
    8f26:	eb03 0350 	add.w	r3, r3, r0, lsr #1
    8f2a:	0a1c      	lsrs	r4, r3, #8
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
    8f2c:	4628      	mov	r0, r5
    8f2e:	f005 fc95 	bl	e85c <z_spin_unlock_valid>
    8f32:	b1a0      	cbz	r0, 8f5e <z_clock_elapsed+0x6e>
	__asm__ volatile(
    8f34:	f386 8811 	msr	BASEPRI, r6
    8f38:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
    8f3c:	4620      	mov	r0, r4
    8f3e:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
    8f40:	4c11      	ldr	r4, [pc, #68]	; (8f88 <z_clock_elapsed+0x98>)
    8f42:	234e      	movs	r3, #78	; 0x4e
    8f44:	4622      	mov	r2, r4
    8f46:	4911      	ldr	r1, [pc, #68]	; (8f8c <z_clock_elapsed+0x9c>)
    8f48:	4811      	ldr	r0, [pc, #68]	; (8f90 <z_clock_elapsed+0xa0>)
    8f4a:	f006 fc98 	bl	f87e <printk>
    8f4e:	4811      	ldr	r0, [pc, #68]	; (8f94 <z_clock_elapsed+0xa4>)
    8f50:	f006 fc95 	bl	f87e <printk>
    8f54:	214e      	movs	r1, #78	; 0x4e
    8f56:	4620      	mov	r0, r4
    8f58:	f006 fd17 	bl	f98a <assert_post_action>
    8f5c:	e7d5      	b.n	8f0a <z_clock_elapsed+0x1a>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
    8f5e:	4d0a      	ldr	r5, [pc, #40]	; (8f88 <z_clock_elapsed+0x98>)
    8f60:	2361      	movs	r3, #97	; 0x61
    8f62:	462a      	mov	r2, r5
    8f64:	490c      	ldr	r1, [pc, #48]	; (8f98 <z_clock_elapsed+0xa8>)
    8f66:	480a      	ldr	r0, [pc, #40]	; (8f90 <z_clock_elapsed+0xa0>)
    8f68:	f006 fc89 	bl	f87e <printk>
    8f6c:	480b      	ldr	r0, [pc, #44]	; (8f9c <z_clock_elapsed+0xac>)
    8f6e:	f006 fc86 	bl	f87e <printk>
    8f72:	2161      	movs	r1, #97	; 0x61
    8f74:	4628      	mov	r0, r5
    8f76:	f006 fd08 	bl	f98a <assert_post_action>
    8f7a:	e7db      	b.n	8f34 <z_clock_elapsed+0x44>
    8f7c:	20002274 	.word	0x20002274
    8f80:	20002270 	.word	0x20002270
    8f84:	90d4f121 	.word	0x90d4f121
    8f88:	00012778 	.word	0x00012778
    8f8c:	00012790 	.word	0x00012790
    8f90:	00010f8c 	.word	0x00010f8c
    8f94:	000127a8 	.word	0x000127a8
    8f98:	000127c0 	.word	0x000127c0
    8f9c:	000127d8 	.word	0x000127d8

00008fa0 <z_timer_cycle_get_32>:

u32_t z_timer_cycle_get_32(void)
{
    8fa0:	b570      	push	{r4, r5, r6, lr}
	__asm__ volatile(
    8fa2:	f04f 0320 	mov.w	r3, #32
    8fa6:	f3ef 8611 	mrs	r6, BASEPRI
    8faa:	f383 8811 	msr	BASEPRI, r3
    8fae:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
    8fb2:	481c      	ldr	r0, [pc, #112]	; (9024 <z_timer_cycle_get_32+0x84>)
    8fb4:	f005 fc42 	bl	e83c <z_spin_lock_valid>
    8fb8:	b1a8      	cbz	r0, 8fe6 <z_timer_cycle_get_32+0x46>
	z_spin_lock_set_owner(l);
    8fba:	4d1a      	ldr	r5, [pc, #104]	; (9024 <z_timer_cycle_get_32+0x84>)
    8fbc:	4628      	mov	r0, r5
    8fbe:	f005 fc5d 	bl	e87c <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t ret = counter_sub(counter(), last_count) + last_count;
    8fc2:	f7ff fe63 	bl	8c8c <counter>
    8fc6:	4b18      	ldr	r3, [pc, #96]	; (9028 <z_timer_cycle_get_32+0x88>)
    8fc8:	681c      	ldr	r4, [r3, #0]
    8fca:	4621      	mov	r1, r4
    8fcc:	f007 fa02 	bl	103d4 <counter_sub>
    8fd0:	4404      	add	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
    8fd2:	4628      	mov	r0, r5
    8fd4:	f005 fc42 	bl	e85c <z_spin_unlock_valid>
    8fd8:	b1a0      	cbz	r0, 9004 <z_timer_cycle_get_32+0x64>
	__asm__ volatile(
    8fda:	f386 8811 	msr	BASEPRI, r6
    8fde:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
    8fe2:	4620      	mov	r0, r4
    8fe4:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
    8fe6:	4c11      	ldr	r4, [pc, #68]	; (902c <z_timer_cycle_get_32+0x8c>)
    8fe8:	234e      	movs	r3, #78	; 0x4e
    8fea:	4622      	mov	r2, r4
    8fec:	4910      	ldr	r1, [pc, #64]	; (9030 <z_timer_cycle_get_32+0x90>)
    8fee:	4811      	ldr	r0, [pc, #68]	; (9034 <z_timer_cycle_get_32+0x94>)
    8ff0:	f006 fc45 	bl	f87e <printk>
    8ff4:	4810      	ldr	r0, [pc, #64]	; (9038 <z_timer_cycle_get_32+0x98>)
    8ff6:	f006 fc42 	bl	f87e <printk>
    8ffa:	214e      	movs	r1, #78	; 0x4e
    8ffc:	4620      	mov	r0, r4
    8ffe:	f006 fcc4 	bl	f98a <assert_post_action>
    9002:	e7da      	b.n	8fba <z_timer_cycle_get_32+0x1a>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
    9004:	4d09      	ldr	r5, [pc, #36]	; (902c <z_timer_cycle_get_32+0x8c>)
    9006:	2361      	movs	r3, #97	; 0x61
    9008:	462a      	mov	r2, r5
    900a:	490c      	ldr	r1, [pc, #48]	; (903c <z_timer_cycle_get_32+0x9c>)
    900c:	4809      	ldr	r0, [pc, #36]	; (9034 <z_timer_cycle_get_32+0x94>)
    900e:	f006 fc36 	bl	f87e <printk>
    9012:	480b      	ldr	r0, [pc, #44]	; (9040 <z_timer_cycle_get_32+0xa0>)
    9014:	f006 fc33 	bl	f87e <printk>
    9018:	2161      	movs	r1, #97	; 0x61
    901a:	4628      	mov	r0, r5
    901c:	f006 fcb5 	bl	f98a <assert_post_action>
    9020:	e7db      	b.n	8fda <z_timer_cycle_get_32+0x3a>
    9022:	bf00      	nop
    9024:	20002274 	.word	0x20002274
    9028:	20002270 	.word	0x20002270
    902c:	00012778 	.word	0x00012778
    9030:	00012790 	.word	0x00012790
    9034:	00010f8c 	.word	0x00010f8c
    9038:	000127a8 	.word	0x000127a8
    903c:	000127c0 	.word	0x000127c0
    9040:	000127d8 	.word	0x000127d8

00009044 <_IntExit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_ExcExit)

#ifdef CONFIG_PREEMPT_ENABLED
    ldr r0, =_kernel
    9044:	4804      	ldr	r0, [pc, #16]	; (9058 <_EXIT_EXC+0x2>)

    ldr r1, [r0, #_kernel_offset_to_current]
    9046:	6881      	ldr	r1, [r0, #8]

    ldr r0, [r0, #_kernel_offset_to_ready_q_cache]
    9048:	6a40      	ldr	r0, [r0, #36]	; 0x24
    cmp r0, r1
    904a:	4288      	cmp	r0, r1
    beq _EXIT_EXC
    904c:	d003      	beq.n	9056 <_EXIT_EXC>

    /* context switch required, pend the PendSV exception */
    ldr r1, =_SCS_ICSR
    904e:	4903      	ldr	r1, [pc, #12]	; (905c <_EXIT_EXC+0x6>)
    ldr r2, =_SCS_ICSR_PENDSV
    9050:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    str r2, [r1]
    9054:	600a      	str	r2, [r1, #0]

00009056 <_EXIT_EXC>:
    mov lr, r1
#else
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */
    bx lr
    9056:	4770      	bx	lr
    ldr r0, =_kernel
    9058:	200026f4 	.word	0x200026f4
    ldr r1, =_SCS_ICSR
    905c:	e000ed04 	.word	0xe000ed04

00009060 <z_IntLibInit>:
 * @return N/A
 */

void z_IntLibInit(void)
{
	int irq = 0;
    9060:	2200      	movs	r2, #0

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    9062:	e006      	b.n	9072 <z_IntLibInit+0x12>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    9064:	f002 010f 	and.w	r1, r2, #15
    9068:	4b09      	ldr	r3, [pc, #36]	; (9090 <z_IntLibInit+0x30>)
    906a:	440b      	add	r3, r1
    906c:	2120      	movs	r1, #32
    906e:	7619      	strb	r1, [r3, #24]
    9070:	3201      	adds	r2, #1
    9072:	2a2f      	cmp	r2, #47	; 0x2f
    9074:	dc0a      	bgt.n	908c <z_IntLibInit+0x2c>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
    9076:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
    9078:	2b00      	cmp	r3, #0
    907a:	dbf3      	blt.n	9064 <z_IntLibInit+0x4>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    907c:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    9080:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    9084:	2120      	movs	r1, #32
    9086:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
    908a:	e7f1      	b.n	9070 <z_IntLibInit+0x10>
	}
}
    908c:	4770      	bx	lr
    908e:	bf00      	nop
    9090:	e000ecfc 	.word	0xe000ecfc

00009094 <__swap>:
#ifdef CONFIG_EXECUTION_BENCHMARKING
	read_timer_start_of_swap();
#endif

	/* store off key and return value */
	_current->arch.basepri = key;
    9094:	4a09      	ldr	r2, [pc, #36]	; (90bc <__swap+0x28>)
    9096:	6893      	ldr	r3, [r2, #8]
    9098:	6658      	str	r0, [r3, #100]	; 0x64
	_current->arch.swap_return_value = _k_neg_eagain;
    909a:	4909      	ldr	r1, [pc, #36]	; (90c0 <__swap+0x2c>)
    909c:	6809      	ldr	r1, [r1, #0]
    909e:	6699      	str	r1, [r3, #104]	; 0x68

	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    90a0:	4908      	ldr	r1, [pc, #32]	; (90c4 <__swap+0x30>)
    90a2:	684b      	ldr	r3, [r1, #4]
    90a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    90a8:	604b      	str	r3, [r1, #4]
    90aa:	2300      	movs	r3, #0
    90ac:	f383 8811 	msr	BASEPRI, r3
    90b0:	f3bf 8f6f 	isb	sy
	irq_unlock(0);

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    90b4:	6893      	ldr	r3, [r2, #8]
}
    90b6:	6e98      	ldr	r0, [r3, #104]	; 0x68
    90b8:	4770      	bx	lr
    90ba:	bf00      	nop
    90bc:	200026f4 	.word	0x200026f4
    90c0:	000131f4 	.word	0x000131f4
    90c4:	e000ed00 	.word	0xe000ed00

000090c8 <__pendsv>:

    /* protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    90c8:	2020      	movs	r0, #32
    msr BASEPRI, r0
    90ca:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    90ce:	f3bf 8f6f 	isb	sy
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    90d2:	4911      	ldr	r1, [pc, #68]	; (9118 <__pendsv+0x50>)
    ldr r2, [r1, #_kernel_offset_to_current]
    90d4:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    90d6:	f04f 0028 	mov.w	r0, #40	; 0x28
    add r0, r2
    90da:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
    mrs ip, PSP
    90dc:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    90e0:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
     * don't clear it yet. PendSV must not be cleared until
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
    ldr v4, =_SCS_ICSR
    90e4:	4f0d      	ldr	r7, [pc, #52]	; (911c <__pendsv+0x54>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    90e6:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    90ea:	6a4a      	ldr	r2, [r1, #36]	; 0x24

    str r2, [r1, #_kernel_offset_to_current]
    90ec:	608a      	str	r2, [r1, #8]
     * since they were based on the previous kernel state and this
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
    str v3, [v4, #0]
    90ee:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    90f0:	6e50      	ldr	r0, [r2, #100]	; 0x64
    movs.n r3, #0
    90f2:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    90f4:	6653      	str	r3, [r2, #100]	; 0x64
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    90f6:	f380 8811 	msr	BASEPRI, r0
    vldmia r0, {s16-s31}
#endif

#if defined (CONFIG_ARM_MPU)
    /* Re-program dynamic memory map */
    push {r2,lr}
    90fa:	b504      	push	{r2, lr}
    ldr r0, =_kernel
    90fc:	4806      	ldr	r0, [pc, #24]	; (9118 <__pendsv+0x50>)
    ldr r0, [r0, #_kernel_offset_to_current]
    90fe:	6880      	ldr	r0, [r0, #8]
    bl z_arch_configure_dynamic_mpu_regions
    9100:	f007 f9a3 	bl	1044a <z_arch_configure_dynamic_mpu_regions>
    pop {r2,lr}
    9104:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    9108:	f102 0028 	add.w	r0, r2, #40	; 0x28
    ldmia r0, {v1-v8, ip}
    910c:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
    /* clear stack pointer limit before setting the PSP */
    mov r0, #0
    msr PSPLIM, r0
#endif /* CONFIG_BUILTIN_STACK_GUARD */

    msr PSP, ip
    9110:	f38c 8809 	msr	PSP, ip
    pop {r0, lr}
#endif
#endif /* CONFIG_TRACING */

    /* exc return */
    bx lr
    9114:	4770      	bx	lr
    9116:	0000      	.short	0x0000
    ldr r1, =_kernel
    9118:	200026f4 	.word	0x200026f4
    ldr v4, =_SCS_ICSR
    911c:	e000ed04 	.word	0xe000ed04

00009120 <__svc>:
 * - System Calls (User mode)
 *
 * @return N/A
 */
SECTION_FUNC(TEXT, __svc)
    tst lr, #0x4    /* did we come from thread mode ? */
    9120:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    9124:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    9126:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    912a:	f3ef 8009 	mrsne	r0, PSP

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    912e:	6981      	ldr	r1, [r0, #24]
    /* SVC is a two-byte instruction, point to it and read encoding */
    ldrh r1, [r1, #-2]
    9130:	f831 1c02 	ldrh.w	r1, [r1, #-2]
    * 2: kernel panic or oops (software generated fatal exception)
    * 3: System call (if user mode supported)
    * Planned implementation of system calls for memory protection will
    * expand this case.
    */
    ands r1, #0xff
    9134:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
    tst r2, #0x1
    bne _oops

#endif

    cmp r1, #2
    9138:	2902      	cmp	r1, #2
    beq _oops
    913a:	d0ff      	beq.n	913c <_oops>

0000913c <_oops>:
    /* exception return is done in _IntExit() */
    b _IntExit
#endif

_oops:
    push {r0, lr}
    913c:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    913e:	f007 f974 	bl	1042a <z_do_kernel_oops>
    pop {r0, pc}
    9142:	bd01      	pop	{r0, pc}

00009144 <BusFault>:
 * See _FaultDump() for example.
 *
 * @return N/A
 */
static int BusFault(NANO_ESF *esf, int fromHardFault)
{
    9144:	b538      	push	{r3, r4, r5, lr}
    9146:	4604      	mov	r4, r0
    9148:	460d      	mov	r5, r1
	u32_t reason = _NANO_ERR_HW_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****\n");
    914a:	482a      	ldr	r0, [pc, #168]	; (91f4 <BusFault+0xb0>)
    914c:	f006 fb97 	bl	f87e <printk>

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    9150:	4b29      	ldr	r3, [pc, #164]	; (91f8 <BusFault+0xb4>)
    9152:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    9154:	f413 5f80 	tst.w	r3, #4096	; 0x1000
    9158:	d123      	bne.n	91a2 <BusFault+0x5e>
		PR_FAULT_INFO("  Stacking error\n");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    915a:	4b27      	ldr	r3, [pc, #156]	; (91f8 <BusFault+0xb4>)
    915c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    915e:	f413 6f00 	tst.w	r3, #2048	; 0x800
    9162:	d122      	bne.n	91aa <BusFault+0x66>
		PR_FAULT_INFO("  Unstacking error\n");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    9164:	4b24      	ldr	r3, [pc, #144]	; (91f8 <BusFault+0xb4>)
    9166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    9168:	f413 7f00 	tst.w	r3, #512	; 0x200
    916c:	d121      	bne.n	91b2 <BusFault+0x6e>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    916e:	4b22      	ldr	r3, [pc, #136]	; (91f8 <BusFault+0xb4>)
    9170:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    9172:	f413 6f80 	tst.w	r3, #1024	; 0x400
    9176:	d130      	bne.n	91da <BusFault+0x96>
		PR_FAULT_INFO("  Imprecise data bus error\n");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    9178:	4b1f      	ldr	r3, [pc, #124]	; (91f8 <BusFault+0xb4>)
    917a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    917c:	f413 7f80 	tst.w	r3, #256	; 0x100
    9180:	d12f      	bne.n	91e2 <BusFault+0x9e>
		PR_FAULT_INFO("  Instruction bus error\n");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    9182:	4b1d      	ldr	r3, [pc, #116]	; (91f8 <BusFault+0xb4>)
    9184:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    9186:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    918a:	d12e      	bne.n	91ea <BusFault+0xa6>
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    918c:	4a1a      	ldr	r2, [pc, #104]	; (91f8 <BusFault+0xb4>)
    918e:	6a93      	ldr	r3, [r2, #40]	; 0x28
    9190:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    9194:	6293      	str	r3, [r2, #40]	; 0x28

	if (MemoryFaultIsRecoverable(esf)) {
    9196:	4620      	mov	r0, r4
    9198:	f007 f920 	bl	103dc <MemoryFaultIsRecoverable>
    919c:	b100      	cbz	r0, 91a0 <BusFault+0x5c>
		reason = _NANO_ERR_RECOVERABLE;
    919e:	2006      	movs	r0, #6
	}

	return reason;
}
    91a0:	bd38      	pop	{r3, r4, r5, pc}
		PR_FAULT_INFO("  Stacking error\n");
    91a2:	4816      	ldr	r0, [pc, #88]	; (91fc <BusFault+0xb8>)
    91a4:	f006 fb6b 	bl	f87e <printk>
    91a8:	e7d7      	b.n	915a <BusFault+0x16>
		PR_FAULT_INFO("  Unstacking error\n");
    91aa:	4815      	ldr	r0, [pc, #84]	; (9200 <BusFault+0xbc>)
    91ac:	f006 fb67 	bl	f87e <printk>
    91b0:	e7d8      	b.n	9164 <BusFault+0x20>
		PR_FAULT_INFO("  Precise data bus error\n");
    91b2:	4814      	ldr	r0, [pc, #80]	; (9204 <BusFault+0xc0>)
    91b4:	f006 fb63 	bl	f87e <printk>
		STORE_xFAR(bfar, SCB->BFAR);
    91b8:	4b0f      	ldr	r3, [pc, #60]	; (91f8 <BusFault+0xb4>)
    91ba:	6b99      	ldr	r1, [r3, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    91bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    91be:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    91c2:	d0d4      	beq.n	916e <BusFault+0x2a>
			PR_EXC("  BFAR Address: 0x%x\n", bfar);
    91c4:	4810      	ldr	r0, [pc, #64]	; (9208 <BusFault+0xc4>)
    91c6:	f006 fb5a 	bl	f87e <printk>
			if (fromHardFault) {
    91ca:	2d00      	cmp	r5, #0
    91cc:	d0cf      	beq.n	916e <BusFault+0x2a>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    91ce:	4a0a      	ldr	r2, [pc, #40]	; (91f8 <BusFault+0xb4>)
    91d0:	6a93      	ldr	r3, [r2, #40]	; 0x28
    91d2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    91d6:	6293      	str	r3, [r2, #40]	; 0x28
    91d8:	e7c9      	b.n	916e <BusFault+0x2a>
		PR_FAULT_INFO("  Imprecise data bus error\n");
    91da:	480c      	ldr	r0, [pc, #48]	; (920c <BusFault+0xc8>)
    91dc:	f006 fb4f 	bl	f87e <printk>
    91e0:	e7ca      	b.n	9178 <BusFault+0x34>
		PR_FAULT_INFO("  Instruction bus error\n");
    91e2:	480b      	ldr	r0, [pc, #44]	; (9210 <BusFault+0xcc>)
    91e4:	f006 fb4b 	bl	f87e <printk>
    91e8:	e7d0      	b.n	918c <BusFault+0x48>
		PR_FAULT_INFO("  Floating-point lazy state preservation error\n");
    91ea:	480a      	ldr	r0, [pc, #40]	; (9214 <BusFault+0xd0>)
    91ec:	f006 fb47 	bl	f87e <printk>
    91f0:	e7cc      	b.n	918c <BusFault+0x48>
    91f2:	bf00      	nop
    91f4:	000127ec 	.word	0x000127ec
    91f8:	e000ed00 	.word	0xe000ed00
    91fc:	00012804 	.word	0x00012804
    9200:	00012818 	.word	0x00012818
    9204:	0001282c 	.word	0x0001282c
    9208:	00012848 	.word	0x00012848
    920c:	00012860 	.word	0x00012860
    9210:	0001287c 	.word	0x0001287c
    9214:	00012898 	.word	0x00012898

00009218 <UsageFault>:
 * See _FaultDump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static u32_t UsageFault(const NANO_ESF *esf)
{
    9218:	b508      	push	{r3, lr}
	u32_t reason = _NANO_ERR_HW_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****\n");
    921a:	4821      	ldr	r0, [pc, #132]	; (92a0 <UsageFault+0x88>)
    921c:	f006 fb2f 	bl	f87e <printk>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    9220:	4b20      	ldr	r3, [pc, #128]	; (92a4 <UsageFault+0x8c>)
    9222:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    9224:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
    9228:	d121      	bne.n	926e <UsageFault+0x56>
		PR_FAULT_INFO("  Division by zero\n");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    922a:	4b1e      	ldr	r3, [pc, #120]	; (92a4 <UsageFault+0x8c>)
    922c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    922e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
    9232:	d120      	bne.n	9276 <UsageFault+0x5e>
		 */
		reason = _NANO_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    9234:	4b1b      	ldr	r3, [pc, #108]	; (92a4 <UsageFault+0x8c>)
    9236:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    9238:	f413 2f00 	tst.w	r3, #524288	; 0x80000
    923c:	d11f      	bne.n	927e <UsageFault+0x66>
		PR_FAULT_INFO("  No coprocessor instructions\n");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    923e:	4b19      	ldr	r3, [pc, #100]	; (92a4 <UsageFault+0x8c>)
    9240:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    9242:	f413 2f80 	tst.w	r3, #262144	; 0x40000
    9246:	d11e      	bne.n	9286 <UsageFault+0x6e>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC\n");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    9248:	4b16      	ldr	r3, [pc, #88]	; (92a4 <UsageFault+0x8c>)
    924a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    924c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
    9250:	d11d      	bne.n	928e <UsageFault+0x76>
		PR_FAULT_INFO("  Illegal use of the EPSR\n");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    9252:	4b14      	ldr	r3, [pc, #80]	; (92a4 <UsageFault+0x8c>)
    9254:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    9256:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    925a:	d11c      	bne.n	9296 <UsageFault+0x7e>
		PR_FAULT_INFO("  Attempt to execute undefined instruction\n");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    925c:	4a11      	ldr	r2, [pc, #68]	; (92a4 <UsageFault+0x8c>)
    925e:	6a93      	ldr	r3, [r2, #40]	; 0x28
    9260:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    9264:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    9268:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
    926a:	2000      	movs	r0, #0
    926c:	bd08      	pop	{r3, pc}
		PR_FAULT_INFO("  Division by zero\n");
    926e:	480e      	ldr	r0, [pc, #56]	; (92a8 <UsageFault+0x90>)
    9270:	f006 fb05 	bl	f87e <printk>
    9274:	e7d9      	b.n	922a <UsageFault+0x12>
		PR_FAULT_INFO("  Unaligned memory access\n");
    9276:	480d      	ldr	r0, [pc, #52]	; (92ac <UsageFault+0x94>)
    9278:	f006 fb01 	bl	f87e <printk>
    927c:	e7da      	b.n	9234 <UsageFault+0x1c>
		PR_FAULT_INFO("  No coprocessor instructions\n");
    927e:	480c      	ldr	r0, [pc, #48]	; (92b0 <UsageFault+0x98>)
    9280:	f006 fafd 	bl	f87e <printk>
    9284:	e7db      	b.n	923e <UsageFault+0x26>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC\n");
    9286:	480b      	ldr	r0, [pc, #44]	; (92b4 <UsageFault+0x9c>)
    9288:	f006 faf9 	bl	f87e <printk>
    928c:	e7dc      	b.n	9248 <UsageFault+0x30>
		PR_FAULT_INFO("  Illegal use of the EPSR\n");
    928e:	480a      	ldr	r0, [pc, #40]	; (92b8 <UsageFault+0xa0>)
    9290:	f006 faf5 	bl	f87e <printk>
    9294:	e7dd      	b.n	9252 <UsageFault+0x3a>
		PR_FAULT_INFO("  Attempt to execute undefined instruction\n");
    9296:	4809      	ldr	r0, [pc, #36]	; (92bc <UsageFault+0xa4>)
    9298:	f006 faf1 	bl	f87e <printk>
    929c:	e7de      	b.n	925c <UsageFault+0x44>
    929e:	bf00      	nop
    92a0:	00012a98 	.word	0x00012a98
    92a4:	e000ed00 	.word	0xe000ed00
    92a8:	00012ab4 	.word	0x00012ab4
    92ac:	00012ac8 	.word	0x00012ac8
    92b0:	00012ae4 	.word	0x00012ae4
    92b4:	00012b04 	.word	0x00012b04
    92b8:	00012b2c 	.word	0x00012b2c
    92bc:	00012b48 	.word	0x00012b48

000092c0 <DebugMonitor>:
 * See _FaultDump() for example.
 *
 * @return N/A
 */
static void DebugMonitor(const NANO_ESF *esf)
{
    92c0:	b508      	push	{r3, lr}
	ARG_UNUSED(esf);

	PR_FAULT_INFO(
    92c2:	4802      	ldr	r0, [pc, #8]	; (92cc <DebugMonitor+0xc>)
    92c4:	f006 fadb 	bl	f87e <printk>
		"***** Debug monitor exception (not implemented) *****\n");
}
    92c8:	bd08      	pop	{r3, pc}
    92ca:	bf00      	nop
    92cc:	000128c8 	.word	0x000128c8

000092d0 <ReservedException>:
 * See _FaultDump() for example.
 *
 * @return N/A
 */
static void ReservedException(const NANO_ESF *esf, int fault)
{
    92d0:	b508      	push	{r3, lr}
    92d2:	460a      	mov	r2, r1
	ARG_UNUSED(esf);

	PR_FAULT_INFO("***** %s %d) *****\n",
    92d4:	290f      	cmp	r1, #15
    92d6:	dc05      	bgt.n	92e4 <ReservedException+0x14>
    92d8:	4903      	ldr	r1, [pc, #12]	; (92e8 <ReservedException+0x18>)
    92da:	3a10      	subs	r2, #16
    92dc:	4803      	ldr	r0, [pc, #12]	; (92ec <ReservedException+0x1c>)
    92de:	f006 face 	bl	f87e <printk>
	       fault < 16 ? "Reserved Exception (" : "Spurious interrupt (IRQ ",
	       fault - 16);
}
    92e2:	bd08      	pop	{r3, pc}
	PR_FAULT_INFO("***** %s %d) *****\n",
    92e4:	4902      	ldr	r1, [pc, #8]	; (92f0 <ReservedException+0x20>)
    92e6:	e7f8      	b.n	92da <ReservedException+0xa>
    92e8:	00012a6c 	.word	0x00012a6c
    92ec:	00012a84 	.word	0x00012a84
    92f0:	00012a50 	.word	0x00012a50

000092f4 <MpuFault>:
{
    92f4:	b538      	push	{r3, r4, r5, lr}
    92f6:	4604      	mov	r4, r0
    92f8:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** MPU FAULT *****\n");
    92fa:	4831      	ldr	r0, [pc, #196]	; (93c0 <MpuFault+0xcc>)
    92fc:	f006 fabf 	bl	f87e <printk>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    9300:	4b30      	ldr	r3, [pc, #192]	; (93c4 <MpuFault+0xd0>)
    9302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    9304:	f013 0f10 	tst.w	r3, #16
    9308:	d123      	bne.n	9352 <MpuFault+0x5e>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    930a:	4b2e      	ldr	r3, [pc, #184]	; (93c4 <MpuFault+0xd0>)
    930c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    930e:	f013 0f08 	tst.w	r3, #8
    9312:	d122      	bne.n	935a <MpuFault+0x66>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    9314:	4b2b      	ldr	r3, [pc, #172]	; (93c4 <MpuFault+0xd0>)
    9316:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    9318:	f013 0f02 	tst.w	r3, #2
    931c:	d121      	bne.n	9362 <MpuFault+0x6e>
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    931e:	4b29      	ldr	r3, [pc, #164]	; (93c4 <MpuFault+0xd0>)
    9320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    9322:	f013 0f01 	tst.w	r3, #1
    9326:	d130      	bne.n	938a <MpuFault+0x96>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    9328:	4b26      	ldr	r3, [pc, #152]	; (93c4 <MpuFault+0xd0>)
    932a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    932c:	f013 0f20 	tst.w	r3, #32
    9330:	d12f      	bne.n	9392 <MpuFault+0x9e>
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
    9332:	4b24      	ldr	r3, [pc, #144]	; (93c4 <MpuFault+0xd0>)
    9334:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    9336:	f013 0f10 	tst.w	r3, #16
    933a:	d12e      	bne.n	939a <MpuFault+0xa6>
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    933c:	4a21      	ldr	r2, [pc, #132]	; (93c4 <MpuFault+0xd0>)
    933e:	6a93      	ldr	r3, [r2, #40]	; 0x28
    9340:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    9344:	6293      	str	r3, [r2, #40]	; 0x28
	if (MemoryFaultIsRecoverable(esf)) {
    9346:	4620      	mov	r0, r4
    9348:	f007 f848 	bl	103dc <MemoryFaultIsRecoverable>
    934c:	2800      	cmp	r0, #0
    934e:	d135      	bne.n	93bc <MpuFault+0xc8>
}
    9350:	bd38      	pop	{r3, r4, r5, pc}
		PR_FAULT_INFO("  Stacking error (context area might be"
    9352:	481d      	ldr	r0, [pc, #116]	; (93c8 <MpuFault+0xd4>)
    9354:	f006 fa93 	bl	f87e <printk>
    9358:	e7d7      	b.n	930a <MpuFault+0x16>
		PR_FAULT_INFO("  Unstacking error\n");
    935a:	481c      	ldr	r0, [pc, #112]	; (93cc <MpuFault+0xd8>)
    935c:	f006 fa8f 	bl	f87e <printk>
    9360:	e7d8      	b.n	9314 <MpuFault+0x20>
		PR_FAULT_INFO("  Data Access Violation\n");
    9362:	481b      	ldr	r0, [pc, #108]	; (93d0 <MpuFault+0xdc>)
    9364:	f006 fa8b 	bl	f87e <printk>
		mmfar = SCB->MMFAR;
    9368:	4b16      	ldr	r3, [pc, #88]	; (93c4 <MpuFault+0xd0>)
    936a:	6b59      	ldr	r1, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    936c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    936e:	f013 0f80 	tst.w	r3, #128	; 0x80
    9372:	d0d4      	beq.n	931e <MpuFault+0x2a>
			PR_EXC("  MMFAR Address: 0x%x\n", mmfar);
    9374:	4817      	ldr	r0, [pc, #92]	; (93d4 <MpuFault+0xe0>)
    9376:	f006 fa82 	bl	f87e <printk>
			if (fromHardFault) {
    937a:	2d00      	cmp	r5, #0
    937c:	d0cf      	beq.n	931e <MpuFault+0x2a>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    937e:	4a11      	ldr	r2, [pc, #68]	; (93c4 <MpuFault+0xd0>)
    9380:	6a93      	ldr	r3, [r2, #40]	; 0x28
    9382:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    9386:	6293      	str	r3, [r2, #40]	; 0x28
    9388:	e7c9      	b.n	931e <MpuFault+0x2a>
		PR_FAULT_INFO("  Instruction Access Violation\n");
    938a:	4813      	ldr	r0, [pc, #76]	; (93d8 <MpuFault+0xe4>)
    938c:	f006 fa77 	bl	f87e <printk>
    9390:	e7ca      	b.n	9328 <MpuFault+0x34>
		PR_FAULT_INFO(
    9392:	4812      	ldr	r0, [pc, #72]	; (93dc <MpuFault+0xe8>)
    9394:	f006 fa73 	bl	f87e <printk>
    9398:	e7cb      	b.n	9332 <MpuFault+0x3e>
	__ASSERT(0,
    939a:	4d11      	ldr	r5, [pc, #68]	; (93e0 <MpuFault+0xec>)
    939c:	f44f 739e 	mov.w	r3, #316	; 0x13c
    93a0:	462a      	mov	r2, r5
    93a2:	4910      	ldr	r1, [pc, #64]	; (93e4 <MpuFault+0xf0>)
    93a4:	4810      	ldr	r0, [pc, #64]	; (93e8 <MpuFault+0xf4>)
    93a6:	f006 fa6a 	bl	f87e <printk>
    93aa:	4810      	ldr	r0, [pc, #64]	; (93ec <MpuFault+0xf8>)
    93ac:	f006 fa67 	bl	f87e <printk>
    93b0:	f44f 719e 	mov.w	r1, #316	; 0x13c
    93b4:	4628      	mov	r0, r5
    93b6:	f006 fae8 	bl	f98a <assert_post_action>
    93ba:	e7bf      	b.n	933c <MpuFault+0x48>
		reason = _NANO_ERR_RECOVERABLE;
    93bc:	2006      	movs	r0, #6
	return reason;
    93be:	e7c7      	b.n	9350 <MpuFault+0x5c>
    93c0:	0001295c 	.word	0x0001295c
    93c4:	e000ed00 	.word	0xe000ed00
    93c8:	00012974 	.word	0x00012974
    93cc:	00012818 	.word	0x00012818
    93d0:	000129a8 	.word	0x000129a8
    93d4:	000129c4 	.word	0x000129c4
    93d8:	000129dc 	.word	0x000129dc
    93dc:	00012898 	.word	0x00012898
    93e0:	000129fc 	.word	0x000129fc
    93e4:	00012ff0 	.word	0x00012ff0
    93e8:	00010f8c 	.word	0x00010f8c
    93ec:	00012a14 	.word	0x00012a14

000093f0 <HardFault>:
{
    93f0:	b538      	push	{r3, r4, r5, lr}
    93f2:	4605      	mov	r5, r0
	PR_FAULT_INFO("***** HARD FAULT *****\n");
    93f4:	4817      	ldr	r0, [pc, #92]	; (9454 <HardFault+0x64>)
    93f6:	f006 fa42 	bl	f87e <printk>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    93fa:	4b17      	ldr	r3, [pc, #92]	; (9458 <HardFault+0x68>)
    93fc:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    93fe:	f014 0402 	ands.w	r4, r4, #2
    9402:	d105      	bne.n	9410 <HardFault+0x20>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    9404:	4b14      	ldr	r3, [pc, #80]	; (9458 <HardFault+0x68>)
    9406:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
    9408:	f010 4080 	ands.w	r0, r0, #1073741824	; 0x40000000
    940c:	d105      	bne.n	941a <HardFault+0x2a>
}
    940e:	bd38      	pop	{r3, r4, r5, pc}
		PR_EXC("  Bus fault on vector table read\n");
    9410:	4812      	ldr	r0, [pc, #72]	; (945c <HardFault+0x6c>)
    9412:	f006 fa34 	bl	f87e <printk>
	u32_t reason = _NANO_ERR_HW_EXCEPTION;
    9416:	2000      	movs	r0, #0
    9418:	e7f9      	b.n	940e <HardFault+0x1e>
		PR_EXC("  Fault escalation (see below)\n");
    941a:	4811      	ldr	r0, [pc, #68]	; (9460 <HardFault+0x70>)
    941c:	f006 fa2f 	bl	f87e <printk>
		if (SCB_MMFSR != 0) {
    9420:	4b10      	ldr	r3, [pc, #64]	; (9464 <HardFault+0x74>)
    9422:	781b      	ldrb	r3, [r3, #0]
    9424:	b943      	cbnz	r3, 9438 <HardFault+0x48>
		} else if (SCB_BFSR != 0) {
    9426:	4b10      	ldr	r3, [pc, #64]	; (9468 <HardFault+0x78>)
    9428:	781b      	ldrb	r3, [r3, #0]
    942a:	b953      	cbnz	r3, 9442 <HardFault+0x52>
		} else if (SCB_UFSR != 0) {
    942c:	4b0f      	ldr	r3, [pc, #60]	; (946c <HardFault+0x7c>)
    942e:	881b      	ldrh	r3, [r3, #0]
    9430:	b29b      	uxth	r3, r3
    9432:	b95b      	cbnz	r3, 944c <HardFault+0x5c>
	u32_t reason = _NANO_ERR_HW_EXCEPTION;
    9434:	4620      	mov	r0, r4
	return reason;
    9436:	e7ea      	b.n	940e <HardFault+0x1e>
			reason = MpuFault(esf, 1);
    9438:	2101      	movs	r1, #1
    943a:	4628      	mov	r0, r5
    943c:	f7ff ff5a 	bl	92f4 <MpuFault>
    9440:	e7e5      	b.n	940e <HardFault+0x1e>
			reason = BusFault(esf, 1);
    9442:	2101      	movs	r1, #1
    9444:	4628      	mov	r0, r5
    9446:	f7ff fe7d 	bl	9144 <BusFault>
    944a:	e7e0      	b.n	940e <HardFault+0x1e>
			reason = UsageFault(esf);
    944c:	4628      	mov	r0, r5
    944e:	f7ff fee3 	bl	9218 <UsageFault>
    9452:	e7dc      	b.n	940e <HardFault+0x1e>
    9454:	00012900 	.word	0x00012900
    9458:	e000ed00 	.word	0xe000ed00
    945c:	00012918 	.word	0x00012918
    9460:	0001293c 	.word	0x0001293c
    9464:	e000ed28 	.word	0xe000ed28
    9468:	e000ed29 	.word	0xe000ed29
    946c:	e000ed2a 	.word	0xe000ed2a

00009470 <_Fault>:
 *
 * Note: exc_return argument shall only be used by the Fault handler if we are
 * running a Secure Firmware.
 */
void _Fault(NANO_ESF *esf, u32_t exc_return)
{
    9470:	b538      	push	{r3, r4, r5, lr}
    9472:	4605      	mov	r5, r0
	u32_t reason = _NANO_ERR_HW_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    9474:	4b07      	ldr	r3, [pc, #28]	; (9494 <_Fault+0x24>)
    9476:	685c      	ldr	r4, [r3, #4]
    9478:	f3c4 0408 	ubfx	r4, r4, #0, #9

	LOG_PANIC();
    947c:	f7fb ff36 	bl	52ec <log_panic>
	}
#else
	(void) exc_return;
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	reason = FaultHandle(esf, fault);
    9480:	4621      	mov	r1, r4
    9482:	4628      	mov	r0, r5
    9484:	f006 ffac 	bl	103e0 <FaultHandle>

	if (reason == _NANO_ERR_RECOVERABLE) {
    9488:	2806      	cmp	r0, #6
    948a:	d002      	beq.n	9492 <_Fault+0x22>

#if defined(CONFIG_ARM_SECURE_FIRMWARE) || \
	defined(CONFIG_ARM_NONSECURE_FIRMWARE)
_exit_fatal:
#endif
	z_NanoFatalErrorHandler(reason, esf);
    948c:	4629      	mov	r1, r5
    948e:	f000 f8e7 	bl	9660 <z_NanoFatalErrorHandler>
}
    9492:	bd38      	pop	{r3, r4, r5, pc}
    9494:	e000ed00 	.word	0xe000ed00

00009498 <z_FaultInit>:
 */
void z_FaultInit(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    9498:	4a02      	ldr	r2, [pc, #8]	; (94a4 <z_FaultInit+0xc>)
    949a:	6953      	ldr	r3, [r2, #20]
    949c:	f043 0310 	orr.w	r3, r3, #16
    94a0:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    94a2:	4770      	bx	lr
    94a4:	e000ed00 	.word	0xe000ed00

000094a8 <z_arch_irq_enable>:
 *
 * @return N/A
 */
void z_arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    94a8:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    94aa:	2b00      	cmp	r3, #0
    94ac:	db08      	blt.n	94c0 <z_arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    94ae:	f000 001f 	and.w	r0, r0, #31
    94b2:	095b      	lsrs	r3, r3, #5
    94b4:	2201      	movs	r2, #1
    94b6:	fa02 f000 	lsl.w	r0, r2, r0
    94ba:	4a02      	ldr	r2, [pc, #8]	; (94c4 <z_arch_irq_enable+0x1c>)
    94bc:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    94c0:	4770      	bx	lr
    94c2:	bf00      	nop
    94c4:	e000e100 	.word	0xe000e100

000094c8 <z_arch_irq_disable>:
 *
 * @return N/A
 */
void z_arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    94c8:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    94ca:	2b00      	cmp	r3, #0
    94cc:	db0d      	blt.n	94ea <z_arch_irq_disable+0x22>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    94ce:	f000 001f 	and.w	r0, r0, #31
    94d2:	095b      	lsrs	r3, r3, #5
    94d4:	2201      	movs	r2, #1
    94d6:	fa02 f000 	lsl.w	r0, r2, r0
    94da:	3320      	adds	r3, #32
    94dc:	4a03      	ldr	r2, [pc, #12]	; (94ec <z_arch_irq_disable+0x24>)
    94de:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    94e2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    94e6:	f3bf 8f6f 	isb	sy
}
    94ea:	4770      	bx	lr
    94ec:	e000e100 	.word	0xe000e100

000094f0 <z_arch_irq_is_enabled>:
 * @param irq IRQ line
 * @return interrupt enable state, true or false
 */
int z_arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    94f0:	0942      	lsrs	r2, r0, #5
    94f2:	4b05      	ldr	r3, [pc, #20]	; (9508 <z_arch_irq_is_enabled+0x18>)
    94f4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    94f8:	f000 001f 	and.w	r0, r0, #31
    94fc:	2301      	movs	r3, #1
    94fe:	fa03 f000 	lsl.w	r0, r3, r0
}
    9502:	4010      	ands	r0, r2
    9504:	4770      	bx	lr
    9506:	bf00      	nop
    9508:	e000e100 	.word	0xe000e100

0000950c <z_irq_priority_set>:
 * priority levels which are reserved.
 *
 * @return N/A
 */
void z_irq_priority_set(unsigned int irq, unsigned int prio, u32_t flags)
{
    950c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    950e:	4605      	mov	r5, r0
	} else {
		prio += _IRQ_PRIO_OFFSET;
	}
#else
	ARG_UNUSED(flags);
	prio += _IRQ_PRIO_OFFSET;
    9510:	1c4c      	adds	r4, r1, #1
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(DT_NUM_IRQ_PRIO_BITS) - 1),
    9512:	2c07      	cmp	r4, #7
    9514:	d80b      	bhi.n	952e <z_irq_priority_set+0x22>
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(DT_NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    9516:	b26b      	sxtb	r3, r5
  if ((int32_t)(IRQn) >= 0)
    9518:	2b00      	cmp	r3, #0
    951a:	db1a      	blt.n	9552 <z_irq_priority_set+0x46>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    951c:	0164      	lsls	r4, r4, #5
    951e:	b2e4      	uxtb	r4, r4
    9520:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    9524:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    9528:	f883 4300 	strb.w	r4, [r3, #768]	; 0x300
}
    952c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    952e:	460e      	mov	r6, r1
	__ASSERT(prio <= (BIT(DT_NUM_IRQ_PRIO_BITS) - 1),
    9530:	4f0b      	ldr	r7, [pc, #44]	; (9560 <z_irq_priority_set+0x54>)
    9532:	2372      	movs	r3, #114	; 0x72
    9534:	463a      	mov	r2, r7
    9536:	490b      	ldr	r1, [pc, #44]	; (9564 <z_irq_priority_set+0x58>)
    9538:	480b      	ldr	r0, [pc, #44]	; (9568 <z_irq_priority_set+0x5c>)
    953a:	f006 f9a0 	bl	f87e <printk>
    953e:	2207      	movs	r2, #7
    9540:	4631      	mov	r1, r6
    9542:	480a      	ldr	r0, [pc, #40]	; (956c <z_irq_priority_set+0x60>)
    9544:	f006 f99b 	bl	f87e <printk>
    9548:	2172      	movs	r1, #114	; 0x72
    954a:	4638      	mov	r0, r7
    954c:	f006 fa1d 	bl	f98a <assert_post_action>
    9550:	e7e1      	b.n	9516 <z_irq_priority_set+0xa>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    9552:	f005 050f 	and.w	r5, r5, #15
    9556:	0164      	lsls	r4, r4, #5
    9558:	b2e4      	uxtb	r4, r4
    955a:	4b05      	ldr	r3, [pc, #20]	; (9570 <z_irq_priority_set+0x64>)
    955c:	555c      	strb	r4, [r3, r5]
}
    955e:	e7e5      	b.n	952c <z_irq_priority_set+0x20>
    9560:	00012b74 	.word	0x00012b74
    9564:	00012b94 	.word	0x00012b94
    9568:	00010f8c 	.word	0x00010f8c
    956c:	00012bb0 	.word	0x00012bb0
    9570:	e000ed14 	.word	0xe000ed14

00009574 <z_new_thread>:

void z_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		 size_t stackSize, k_thread_entry_t pEntry,
		 void *parameter1, void *parameter2, void *parameter3,
		 int priority, unsigned int options)
{
    9574:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    9578:	4605      	mov	r5, r0
    957a:	4689      	mov	r9, r1
    957c:	4690      	mov	r8, r2
    957e:	461f      	mov	r7, r3
    9580:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
	char *pStackMem = Z_THREAD_STACK_BUFFER(stack);
	char *stackEnd;
	/* Offset between the top of stack and the high end of stack area. */
	u32_t top_of_stack_offset = 0U;

	Z_ASSERT_VALID_PRIO(priority, pEntry);
    9582:	2e0f      	cmp	r6, #15
    9584:	d028      	beq.n	95d8 <z_new_thread+0x64>
    9586:	f106 0310 	add.w	r3, r6, #16
    958a:	2b1e      	cmp	r3, #30
    958c:	d828      	bhi.n	95e0 <z_new_thread+0x6c>
	 * k_thread_create(). If K_THREAD_STACK_SIZEOF() is used, the
	 * Guard size has already been take out of stackSize.
	 */
	stackSize -= MPU_GUARD_ALIGN_AND_SIZE;
#endif
	stackEnd = pStackMem + stackSize;
    958e:	eb09 0408 	add.w	r4, r9, r8
	 * if it isn't.
	 */
	*((u32_t *)pStack) = STACK_SENTINEL;
#endif /* CONFIG_STACK_SENTINEL */
	/* Initialize various struct k_thread members */
	z_init_thread_base(&thread->base, prio, _THREAD_PRESTART, options);
    9592:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    9594:	2204      	movs	r2, #4
    9596:	4631      	mov	r1, r6
    9598:	4628      	mov	r0, r5
    959a:	f007 fad2 	bl	10b42 <z_init_thread_base>

	/* static threads overwrite it afterwards with real value */
	thread->init_data = NULL;
    959e:	2200      	movs	r2, #0
    95a0:	64ea      	str	r2, [r5, #76]	; 0x4c
	thread->fn_abort = NULL;
    95a2:	652a      	str	r2, [r5, #80]	; 0x50
#if defined(CONFIG_USERSPACE)
	thread->mem_domain_info.mem_domain = NULL;
#endif /* CONFIG_USERSPACE */

#if defined(CONFIG_THREAD_STACK_INFO)
	thread->stack_info.start = (u32_t)pStack;
    95a4:	f8c5 9058 	str.w	r9, [r5, #88]	; 0x58
	thread->stack_info.size = (u32_t)stackSize;
    95a8:	f8c5 805c 	str.w	r8, [r5, #92]	; 0x5c

	z_new_thread_init(thread, pStackMem, stackSize, priority,
			 options);

	/* carve the thread entry struct from the "base" of the stack */
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
    95ac:	f1a4 0320 	sub.w	r3, r4, #32
    95b0:	f023 0307 	bic.w	r3, r3, #7
		pInitCtx->pc = (u32_t)z_arch_user_mode_enter;
	} else {
		pInitCtx->pc = (u32_t)z_thread_entry;
	}
#else
	pInitCtx->pc = (u32_t)z_thread_entry;
    95b4:	4914      	ldr	r1, [pc, #80]	; (9608 <z_new_thread+0x94>)
#endif

	/* force ARM mode by clearing LSB of address */
	pInitCtx->pc &= 0xfffffffe;
    95b6:	f021 0101 	bic.w	r1, r1, #1
    95ba:	6199      	str	r1, [r3, #24]

	pInitCtx->a1 = (u32_t)pEntry;
    95bc:	601f      	str	r7, [r3, #0]
	pInitCtx->a2 = (u32_t)parameter1;
    95be:	9908      	ldr	r1, [sp, #32]
    95c0:	6059      	str	r1, [r3, #4]
	pInitCtx->a3 = (u32_t)parameter2;
    95c2:	9909      	ldr	r1, [sp, #36]	; 0x24
    95c4:	6099      	str	r1, [r3, #8]
	pInitCtx->a4 = (u32_t)parameter3;
    95c6:	990a      	ldr	r1, [sp, #40]	; 0x28
    95c8:	60d9      	str	r1, [r3, #12]
	pInitCtx->xpsr =
    95ca:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
    95ce:	61d9      	str	r1, [r3, #28]
		0x01000000UL; /* clear all, thumb bit is 1, even if RO */
#ifdef CONFIG_FLOAT
	pInitCtx->fpscr = (u32_t)0; /* clears FPU status/control register*/
#endif

	thread->callee_saved.psp = (u32_t)pInitCtx;
    95d0:	64ab      	str	r3, [r5, #72]	; 0x48
	thread->arch.basepri = 0;
    95d2:	666a      	str	r2, [r5, #100]	; 0x64

	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    95d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	Z_ASSERT_VALID_PRIO(priority, pEntry);
    95d8:	4b0c      	ldr	r3, [pc, #48]	; (960c <z_new_thread+0x98>)
    95da:	429f      	cmp	r7, r3
    95dc:	d1d3      	bne.n	9586 <z_new_thread+0x12>
    95de:	e7d6      	b.n	958e <z_new_thread+0x1a>
    95e0:	4c0b      	ldr	r4, [pc, #44]	; (9610 <z_new_thread+0x9c>)
    95e2:	233f      	movs	r3, #63	; 0x3f
    95e4:	4622      	mov	r2, r4
    95e6:	490b      	ldr	r1, [pc, #44]	; (9614 <z_new_thread+0xa0>)
    95e8:	480b      	ldr	r0, [pc, #44]	; (9618 <z_new_thread+0xa4>)
    95ea:	f006 f948 	bl	f87e <printk>
    95ee:	f06f 030f 	mvn.w	r3, #15
    95f2:	220e      	movs	r2, #14
    95f4:	4631      	mov	r1, r6
    95f6:	4809      	ldr	r0, [pc, #36]	; (961c <z_new_thread+0xa8>)
    95f8:	f006 f941 	bl	f87e <printk>
    95fc:	213f      	movs	r1, #63	; 0x3f
    95fe:	4620      	mov	r0, r4
    9600:	f006 f9c3 	bl	f98a <assert_post_action>
    9604:	e7c3      	b.n	958e <z_new_thread+0x1a>
    9606:	bf00      	nop
    9608:	0000f719 	.word	0x0000f719
    960c:	00010911 	.word	0x00010911
    9610:	00012be8 	.word	0x00012be8
    9614:	00012c04 	.word	0x00012c04
    9618:	00010f8c 	.word	0x00010f8c
    961c:	00012c8c 	.word	0x00012c8c

00009620 <z_CpuIdleInit>:
 *
 * void z_CpuIdleInit (void);
 */

SECTION_FUNC(TEXT, z_CpuIdleInit)
	ldr r1, =_SCB_SCR
    9620:	4901      	ldr	r1, [pc, #4]	; (9628 <z_CpuIdleInit+0x8>)
	movs.n r2, #_SCR_INIT_BITS
    9622:	2210      	movs	r2, #16
	str r2, [r1]
    9624:	600a      	str	r2, [r1, #0]
	bx lr
    9626:	4770      	bx	lr
	ldr r1, =_SCB_SCR
    9628:	e000ed10 	.word	0xe000ed10

0000962c <k_cpu_idle>:

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	cpsie i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* clear BASEPRI so wfi is awakened by incoming interrupts */
	eors.n r0, r0
    962c:	4040      	eors	r0, r0
	msr BASEPRI, r0
    962e:	f380 8811 	msr	BASEPRI, r0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	wfi
    9632:	bf30      	wfi

	bx lr
    9634:	4770      	bx	lr
    9636:	bf00      	nop

00009638 <__bus_fault>:
	mrs r0, MSP
_stack_frame_endif:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* force unlock interrupts */
	eors.n r0, r0
    9638:	4040      	eors	r0, r0
	msr BASEPRI, r0
    963a:	f380 8811 	msr	BASEPRI, r0

#if !defined(CONFIG_ARM_SECURE_FIRMWARE) && \
	!defined(CONFIG_ARM_NONSECURE_FIRMWARE)
	/* this checks to see if we are in a nested exception */
	ldr ip, =_SCS_ICSR
    963e:	f8df c01c 	ldr.w	ip, [pc, #28]	; 965c <__bus_fault+0x24>
	ldr ip, [ip]
    9642:	f8dc c000 	ldr.w	ip, [ip]
	ands.w ip, #_SCS_ICSR_RETTOBASE
    9646:	f41c 6c00 	ands.w	ip, ip, #2048	; 0x800

	ite eq			/* is the RETTOBASE bit zero ? */
    964a:	bf0c      	ite	eq
		mrseq r0, MSP	/* if so, we're not returning to thread mode,
    964c:	f3ef 8008 	mrseq	r0, MSP
				 * thus this is a nested exception: the stack
				 * frame is on the MSP */
		mrsne r0, PSP	/* if not, we are returning to thread mode, thus
    9650:	f3ef 8009 	mrsne	r0, PSP
	 * located in the LR. Therefore, we supply the LR value as an
	 * argument to the fault handler.
	 */
	mov r1, lr
#endif /* CONFIG_ARM_SECURE_FIRMWARE || CONFIG_ARM_NONSECURE_FIRMWARE */
	push {r0, lr}
    9654:	b501      	push	{r0, lr}
	bl _Fault
    9656:	f7ff ff0b 	bl	9470 <_Fault>

	pop {r0, pc}
    965a:	bd01      	pop	{r0, pc}
	ldr ip, =_SCS_ICSR
    965c:	e000ed04 	.word	0xe000ed04

00009660 <z_NanoFatalErrorHandler>:
 *
 * @return This function does not return.
 */
void z_NanoFatalErrorHandler(unsigned int reason,
					  const NANO_ESF *pEsf)
{
    9660:	b538      	push	{r3, r4, r5, lr}
    9662:	4604      	mov	r4, r0
    9664:	460d      	mov	r5, r1
	LOG_PANIC();
    9666:	f7fb fe41 	bl	52ec <log_panic>

	switch (reason) {
    966a:	2c05      	cmp	r4, #5
    966c:	d81f      	bhi.n	96ae <z_NanoFatalErrorHandler+0x4e>
    966e:	e8df f004 	tbb	[pc, r4]
    9672:	1e03      	.short	0x1e03
    9674:	1a16121e 	.word	0x1a16121e
	case _NANO_ERR_HW_EXCEPTION:
		printk("***** Hardware exception *****\n");
    9678:	480f      	ldr	r0, [pc, #60]	; (96b8 <z_NanoFatalErrorHandler+0x58>)
    967a:	f006 f900 	bl	f87e <printk>
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t)
    967e:	f004 ff71 	bl	e564 <z_impl_k_current_get>

	default:
		printk("**** Unknown Fatal Error %d! ****\n", reason);
		break;
	}
	printk("Current thread ID = %p\n"
    9682:	69aa      	ldr	r2, [r5, #24]
    9684:	4601      	mov	r1, r0
    9686:	480d      	ldr	r0, [pc, #52]	; (96bc <z_NanoFatalErrorHandler+0x5c>)
    9688:	f006 f8f9 	bl	f87e <printk>
	 * to respond to the error.  The decisions as to what responses are
	 * appropriate to the various errors are something the customer must
	 * decide.
	 */

	z_SysFatalErrorHandler(reason, pEsf);
    968c:	4629      	mov	r1, r5
    968e:	4620      	mov	r0, r4
    9690:	f000 f81e 	bl	96d0 <z_SysFatalErrorHandler>
}
    9694:	bd38      	pop	{r3, r4, r5, pc}
		printk("**** Kernel Allocation Failure! ****\n");
    9696:	480a      	ldr	r0, [pc, #40]	; (96c0 <z_NanoFatalErrorHandler+0x60>)
    9698:	f006 f8f1 	bl	f87e <printk>
		break;
    969c:	e7ef      	b.n	967e <z_NanoFatalErrorHandler+0x1e>
		printk("***** Kernel OOPS! *****\n");
    969e:	4809      	ldr	r0, [pc, #36]	; (96c4 <z_NanoFatalErrorHandler+0x64>)
    96a0:	f006 f8ed 	bl	f87e <printk>
		break;
    96a4:	e7eb      	b.n	967e <z_NanoFatalErrorHandler+0x1e>
		printk("***** Kernel Panic! *****\n");
    96a6:	4808      	ldr	r0, [pc, #32]	; (96c8 <z_NanoFatalErrorHandler+0x68>)
    96a8:	f006 f8e9 	bl	f87e <printk>
		break;
    96ac:	e7e7      	b.n	967e <z_NanoFatalErrorHandler+0x1e>
		printk("**** Unknown Fatal Error %d! ****\n", reason);
    96ae:	4621      	mov	r1, r4
    96b0:	4806      	ldr	r0, [pc, #24]	; (96cc <z_NanoFatalErrorHandler+0x6c>)
    96b2:	f006 f8e4 	bl	f87e <printk>
		break;
    96b6:	e7e2      	b.n	967e <z_NanoFatalErrorHandler+0x1e>
    96b8:	00012cc0 	.word	0x00012cc0
    96bc:	00012d64 	.word	0x00012d64
    96c0:	00012ce0 	.word	0x00012ce0
    96c4:	00012d08 	.word	0x00012d08
    96c8:	00012d24 	.word	0x00012d24
    96cc:	00012d40 	.word	0x00012d40

000096d0 <z_SysFatalErrorHandler>:
 *
 * @return This function does not return.
 */
void __weak z_SysFatalErrorHandler(unsigned int reason,
					 const NANO_ESF *pEsf)
{
    96d0:	b510      	push	{r4, lr}
#ifdef CONFIG_STACK_SENTINEL
	if (reason == _NANO_ERR_STACK_CHK_FAIL) {
		goto hang_system;
	}
#endif
	if (reason == _NANO_ERR_KERNEL_PANIC) {
    96d2:	2805      	cmp	r0, #5
    96d4:	d00c      	beq.n	96f0 <z_SysFatalErrorHandler+0x20>
		goto hang_system;
	}
	if (k_is_in_isr() || z_is_thread_essential()) {
    96d6:	f005 f867 	bl	e7a8 <k_is_in_isr>
    96da:	b910      	cbnz	r0, 96e2 <z_SysFatalErrorHandler+0x12>
    96dc:	f005 f878 	bl	e7d0 <z_is_thread_essential>
    96e0:	b158      	cbz	r0, 96fa <z_SysFatalErrorHandler+0x2a>
		printk("Fatal fault in %s! Spinning...\n",
		       k_is_in_isr() ? "ISR" : "essential thread");
    96e2:	f005 f861 	bl	e7a8 <k_is_in_isr>
		printk("Fatal fault in %s! Spinning...\n",
    96e6:	b130      	cbz	r0, 96f6 <z_SysFatalErrorHandler+0x26>
    96e8:	4908      	ldr	r1, [pc, #32]	; (970c <z_SysFatalErrorHandler+0x3c>)
    96ea:	4809      	ldr	r0, [pc, #36]	; (9710 <z_SysFatalErrorHandler+0x40>)
    96ec:	f006 f8c7 	bl	f87e <printk>
#else
	ARG_UNUSED(reason);
#endif

	for (;;) {
		k_cpu_idle();
    96f0:	f7ff ff9c 	bl	962c <k_cpu_idle>
    96f4:	e7fc      	b.n	96f0 <z_SysFatalErrorHandler+0x20>
		printk("Fatal fault in %s! Spinning...\n",
    96f6:	4907      	ldr	r1, [pc, #28]	; (9714 <z_SysFatalErrorHandler+0x44>)
    96f8:	e7f7      	b.n	96ea <z_SysFatalErrorHandler+0x1a>
	printk("Fatal fault in thread %p! Aborting.\n", _current);
    96fa:	4c07      	ldr	r4, [pc, #28]	; (9718 <z_SysFatalErrorHandler+0x48>)
    96fc:	68a1      	ldr	r1, [r4, #8]
    96fe:	4807      	ldr	r0, [pc, #28]	; (971c <z_SysFatalErrorHandler+0x4c>)
    9700:	f006 f8bd 	bl	f87e <printk>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_ABORT, k_thread_abort, k_tid_t, thread)
    9704:	68a0      	ldr	r0, [r4, #8]
    9706:	f000 f80b 	bl	9720 <z_impl_k_thread_abort>
	}
	CODE_UNREACHABLE;
}
    970a:	bd10      	pop	{r4, pc}
    970c:	00012db4 	.word	0x00012db4
    9710:	00012db8 	.word	0x00012db8
    9714:	00012da0 	.word	0x00012da0
    9718:	200026f4 	.word	0x200026f4
    971c:	00012dd8 	.word	0x00012dd8

00009720 <z_impl_k_thread_abort>:
#include <misc/__assert.h>

extern void z_thread_single_abort(struct k_thread *thread);

void z_impl_k_thread_abort(k_tid_t thread)
{
    9720:	b570      	push	{r4, r5, r6, lr}
    9722:	4604      	mov	r4, r0
	__asm__ volatile(
    9724:	f04f 0320 	mov.w	r3, #32
    9728:	f3ef 8511 	mrs	r5, BASEPRI
    972c:	f383 8811 	msr	BASEPRI, r3
    9730:	f3bf 8f6f 	isb	sy
	unsigned int key;

	key = irq_lock();

	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
    9734:	7b03      	ldrb	r3, [r0, #12]
    9736:	f013 0f01 	tst.w	r3, #1
    973a:	d10a      	bne.n	9752 <z_impl_k_thread_abort+0x32>
		 "essential thread aborted");

	z_thread_single_abort(thread);
    973c:	4620      	mov	r0, r4
    973e:	f007 f9d9 	bl	10af4 <z_thread_single_abort>
	z_thread_monitor_exit(thread);

	if (_current == thread) {
    9742:	4b12      	ldr	r3, [pc, #72]	; (978c <z_impl_k_thread_abort+0x6c>)
    9744:	689b      	ldr	r3, [r3, #8]
    9746:	42a3      	cmp	r3, r4
    9748:	d012      	beq.n	9770 <z_impl_k_thread_abort+0x50>
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
		}
	}

	/* The abort handler might have altered the ready queue. */
	z_reschedule_irqlock(key);
    974a:	4628      	mov	r0, r5
    974c:	f003 fe36 	bl	d3bc <z_reschedule_irqlock>
}
    9750:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
    9752:	4e0f      	ldr	r6, [pc, #60]	; (9790 <z_impl_k_thread_abort+0x70>)
    9754:	2325      	movs	r3, #37	; 0x25
    9756:	4632      	mov	r2, r6
    9758:	490e      	ldr	r1, [pc, #56]	; (9794 <z_impl_k_thread_abort+0x74>)
    975a:	480f      	ldr	r0, [pc, #60]	; (9798 <z_impl_k_thread_abort+0x78>)
    975c:	f006 f88f 	bl	f87e <printk>
    9760:	480e      	ldr	r0, [pc, #56]	; (979c <z_impl_k_thread_abort+0x7c>)
    9762:	f006 f88c 	bl	f87e <printk>
    9766:	2125      	movs	r1, #37	; 0x25
    9768:	4630      	mov	r0, r6
    976a:	f006 f90e 	bl	f98a <assert_post_action>
    976e:	e7e5      	b.n	973c <z_impl_k_thread_abort+0x1c>
		if ((SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0) {
    9770:	4b0b      	ldr	r3, [pc, #44]	; (97a0 <z_impl_k_thread_abort+0x80>)
    9772:	685b      	ldr	r3, [r3, #4]
    9774:	f3c3 0308 	ubfx	r3, r3, #0, #9
    9778:	b12b      	cbz	r3, 9786 <z_impl_k_thread_abort+0x66>
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    977a:	4a09      	ldr	r2, [pc, #36]	; (97a0 <z_impl_k_thread_abort+0x80>)
    977c:	6853      	ldr	r3, [r2, #4]
    977e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    9782:	6053      	str	r3, [r2, #4]
    9784:	e7e1      	b.n	974a <z_impl_k_thread_abort+0x2a>
#ifndef CONFIG_ARM
#ifdef CONFIG_TRACING
	sys_trace_thread_switched_out();
#endif
#endif
	ret = __swap(key);
    9786:	4628      	mov	r0, r5
    9788:	f7ff fc84 	bl	9094 <__swap>
			CODE_UNREACHABLE;
    978c:	200026f4 	.word	0x200026f4
    9790:	00012e00 	.word	0x00012e00
    9794:	00012e20 	.word	0x00012e20
    9798:	00010f8c 	.word	0x00010f8c
    979c:	00012e50 	.word	0x00012e50
    97a0:	e000ed00 	.word	0xe000ed00

000097a4 <_isr_wrapper>:
 *
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

	push {r0,lr}		/* r0, lr are now the first items on the stack */
    97a4:	b501      	push	{r0, lr}
	 * for the next timer deadline is not interrupted.  For non-tickless idle,
	 * this ensures that the clearing of the kernel idle state is not
	 * interrupted.  In each case, z_sys_power_save_idle_exit is called with
	 * interrupts disabled.
	 */
	cpsid i  /* PRIMASK = 1 */
    97a6:	b672      	cpsid	i

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    97a8:	4a0b      	ldr	r2, [pc, #44]	; (97d8 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    97aa:	6a10      	ldr	r0, [r2, #32]
	cmp r0, #0
    97ac:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    97ae:	bf1e      	ittt	ne
	movne	r1, #0
    97b0:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    97b2:	6211      	strne	r1, [r2, #32]
		blne	z_sys_power_save_idle_exit
    97b4:	f007 f8a8 	blne	10908 <z_sys_power_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    97b8:	b662      	cpsie	i
#endif

	mrs r0, IPSR	/* get exception number */
    97ba:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    97be:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    97c2:	ea4f 00c0 	mov.w	r0, r0, lsl #3
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldr r1, =_sw_isr_table
    97c6:	4905      	ldr	r1, [pc, #20]	; (97dc <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    97c8:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    97ca:	c909      	ldmia	r1!, {r0, r3}
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldm sp!,{r0-r3} /* Restore r0 to r3 regs */
#endif /* CONFIG_EXECUTION_BENCHMARKING */
	blx r3		/* call ISR */
    97cc:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    97ce:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * _IntExit() */
	ldr r0, =_IntExit
    97d2:	4803      	ldr	r0, [pc, #12]	; (97e0 <_isr_wrapper+0x3c>)
	bx r0
    97d4:	4700      	bx	r0
    97d6:	0000      	.short	0x0000
	ldr r2, =_kernel
    97d8:	200026f4 	.word	0x200026f4
	ldr r1, =_sw_isr_table
    97dc:	00010b88 	.word	0x00010b88
	ldr r0, =_IntExit
    97e0:	00009045 	.word	0x00009045

000097e4 <__reset>:
#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl _PlatformInit
#endif

    /* lock interrupts: will get unlocked when switch to main task */
    bl	lock_interrupts
    97e4:	f006 fe27 	bl	10436 <lock_interrupts>
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to _PrepC
     * (even though we do not intend to return).
     */
    bl _PrepC
    97e8:	f000 f804 	bl	97f4 <_PrepC>

000097ec <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    97ec:	bf30      	wfi
    b z_SysNmiOnReset
    97ee:	f7ff bffd 	b.w	97ec <z_SysNmiOnReset>
    97f2:	bf00      	nop

000097f4 <_PrepC>:

#ifdef CONFIG_BOOT_TIME_MEASUREMENT
	extern u64_t __start_time_stamp;
#endif
void _PrepC(void)
{
    97f4:	b508      	push	{r3, lr}
	process_sp = (u32_t)&_interrupt_stack + CONFIG_ISR_STACK_SIZE;
    97f6:	4b0e      	ldr	r3, [pc, #56]	; (9830 <_PrepC+0x3c>)
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    97f8:	f383 8809 	msr	PSP, r3
  __ASM volatile ("MRS %0, control" : "=r" (result) );
    97fc:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() | CONTROL_SPSEL_Msk);
    9800:	f043 0302 	orr.w	r3, r3, #2
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
    9804:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
    9808:	f3bf 8f6f 	isb	sy
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    980c:	4b09      	ldr	r3, [pc, #36]	; (9834 <_PrepC+0x40>)
    980e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    9812:	4a09      	ldr	r2, [pc, #36]	; (9838 <_PrepC+0x44>)
    9814:	6093      	str	r3, [r2, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    9816:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    981a:	f3bf 8f6f 	isb	sy
	 * gets set to _interrupt_stack during initialization.
	 */
	set_and_switch_to_psp();
	relocate_vector_table();
	enable_floating_point();
	z_bss_zero();
    981e:	f002 fe99 	bl	c554 <z_bss_zero>
	z_data_copy();
    9822:	f002 fea3 	bl	c56c <z_data_copy>
#ifdef CONFIG_BOOT_TIME_MEASUREMENT
	__start_time_stamp = 0U;
#endif
	z_IntLibInit();
    9826:	f7ff fc1b 	bl	9060 <z_IntLibInit>
	z_cstart();
    982a:	f002 fed1 	bl	c5d0 <z_cstart>
    982e:	bf00      	nop
    9830:	20005820 	.word	0x20005820
    9834:	00000000 	.word	0x00000000
    9838:	e000ed00 	.word	0xe000ed00

0000983c <z_arch_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arch_configure_static_mpu_regions(void)
{
    983c:	b500      	push	{lr}
    983e:	b085      	sub	sp, #20
		};
#endif /* CONFIG_NOCACHE_MEMORY */
#if defined(CONFIG_ARCH_HAS_RAMFUNC_SUPPORT)
		const struct k_mem_partition ramfunc_region =
		{
		.start = (u32_t)&_ramfunc_ram_start,
    9840:	4b08      	ldr	r3, [pc, #32]	; (9864 <z_arch_configure_static_mpu_regions+0x28>)
		const struct k_mem_partition ramfunc_region =
    9842:	9301      	str	r3, [sp, #4]
		.size = (u32_t)&_ramfunc_ram_size,
    9844:	4b08      	ldr	r3, [pc, #32]	; (9868 <z_arch_configure_static_mpu_regions+0x2c>)
		const struct k_mem_partition ramfunc_region =
    9846:	9302      	str	r3, [sp, #8]
    9848:	4b08      	ldr	r3, [pc, #32]	; (986c <z_arch_configure_static_mpu_regions+0x30>)
    984a:	9303      	str	r3, [sp, #12]

	/* Define a constant array of k_mem_partition objects
	 * to hold the configuration of the respective static
	 * MPU regions.
	 */
	const struct k_mem_partition *static_regions[] = {
    984c:	ab01      	add	r3, sp, #4
    984e:	9300      	str	r3, [sp, #0]
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    9850:	4b07      	ldr	r3, [pc, #28]	; (9870 <z_arch_configure_static_mpu_regions+0x34>)
    9852:	4a08      	ldr	r2, [pc, #32]	; (9874 <z_arch_configure_static_mpu_regions+0x38>)
    9854:	2101      	movs	r1, #1
    9856:	4668      	mov	r0, sp
    9858:	f000 f90e 	bl	9a78 <arm_core_mpu_configure_static_mpu_regions>
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    985c:	b005      	add	sp, #20
    985e:	f85d fb04 	ldr.w	pc, [sp], #4
    9862:	bf00      	nop
    9864:	20000000 	.word	0x20000000
    9868:	00000000 	.word	0x00000000
    986c:	060b0000 	.word	0x060b0000
    9870:	20040000 	.word	0x20040000
    9874:	20000000 	.word	0x20000000

00009878 <region_init>:
 */
static void region_init(const u32_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Select the region you want to access */
	MPU->RNR = index;
    9878:	4a06      	ldr	r2, [pc, #24]	; (9894 <region_init+0x1c>)
    987a:	6090      	str	r0, [r2, #8]
	/* Configure the region */
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    987c:	680b      	ldr	r3, [r1, #0]
    987e:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    9882:	4303      	orrs	r3, r0
    9884:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    9888:	60d3      	str	r3, [r2, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    988a:	688b      	ldr	r3, [r1, #8]
    988c:	f043 0301 	orr.w	r3, r3, #1
    9890:	6113      	str	r3, [r2, #16]
	LOG_DBG("[%d] 0x%08x 0x%08x",
		index, region_conf->base, region_conf->attr.rasr);
}
    9892:	4770      	bx	lr
    9894:	e000ed90 	.word	0xe000ed90

00009898 <region_allocate_and_init>:
#error "Unsupported ARM CPU"
#endif

static int region_allocate_and_init(const u8_t index,
	const struct arm_mpu_region *region_conf)
{
    9898:	b510      	push	{r4, lr}
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1)) {
    989a:	2807      	cmp	r0, #7
    989c:	d804      	bhi.n	98a8 <region_allocate_and_init+0x10>
    989e:	4604      	mov	r4, r0
	}

	LOG_DBG("Program MPU region at index 0x%x", index);

	/* Program region */
	region_init(index, region_conf);
    98a0:	f7ff ffea 	bl	9878 <region_init>

	return index;
}
    98a4:	4620      	mov	r0, r4
    98a6:	bd10      	pop	{r4, pc}
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    98a8:	f04f 0200 	mov.w	r2, #0
    98ac:	2301      	movs	r3, #1
    98ae:	f363 0202 	bfi	r2, r3, #0, #3
    98b2:	f36f 02c5 	bfc	r2, #3, #3
    98b6:	4b07      	ldr	r3, [pc, #28]	; (98d4 <region_allocate_and_init+0x3c>)
    98b8:	4907      	ldr	r1, [pc, #28]	; (98d8 <region_allocate_and_init+0x40>)
    98ba:	1a5b      	subs	r3, r3, r1
    98bc:	f3c3 03c9 	ubfx	r3, r3, #3, #10
    98c0:	f363 128f 	bfi	r2, r3, #6, #10
    98c4:	4601      	mov	r1, r0
    98c6:	4805      	ldr	r0, [pc, #20]	; (98dc <region_allocate_and_init+0x44>)
    98c8:	f7fb fb40 	bl	4f4c <log_1>
		return -EINVAL;
    98cc:	f06f 0415 	mvn.w	r4, #21
    98d0:	e7e8      	b.n	98a4 <region_allocate_and_init+0xc>
    98d2:	bf00      	nop
    98d4:	00010de4 	.word	0x00010de4
    98d8:	00010dd4 	.word	0x00010dd4
    98dc:	00012fc0 	.word	0x00012fc0

000098e0 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct k_mem_partition
	*regions[], u8_t regions_num, u8_t start_reg_index,
	bool do_sanity_check)
{
    98e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    98e4:	4680      	mov	r8, r0
    98e6:	460f      	mov	r7, r1
    98e8:	469a      	mov	sl, r3
	int i;
	int reg_index = start_reg_index;
    98ea:	4615      	mov	r5, r2

	for (i = 0; i < regions_num; i++) {
    98ec:	2400      	movs	r4, #0
    98ee:	e009      	b.n	9904 <mpu_configure_regions+0x24>
				(!mpu_partition_is_valid(regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, regions[i]);
    98f0:	4631      	mov	r1, r6
    98f2:	b2e8      	uxtb	r0, r5
    98f4:	f006 fdc0 	bl	10478 <mpu_configure_region>
    98f8:	4605      	mov	r5, r0

		if (reg_index == -EINVAL) {
    98fa:	f110 0f16 	cmn.w	r0, #22
    98fe:	d024      	beq.n	994a <mpu_configure_regions+0x6a>
			return reg_index;
		}

		/* Increment number of programmed MPU indices. */
		reg_index++;
    9900:	3501      	adds	r5, #1
	for (i = 0; i < regions_num; i++) {
    9902:	3401      	adds	r4, #1
    9904:	42bc      	cmp	r4, r7
    9906:	da20      	bge.n	994a <mpu_configure_regions+0x6a>
		if (regions[i]->size == 0U) {
    9908:	f858 6024 	ldr.w	r6, [r8, r4, lsl #2]
    990c:	6873      	ldr	r3, [r6, #4]
    990e:	2b00      	cmp	r3, #0
    9910:	d0f7      	beq.n	9902 <mpu_configure_regions+0x22>
		if (do_sanity_check &&
    9912:	f1ba 0f00 	cmp.w	sl, #0
    9916:	d0eb      	beq.n	98f0 <mpu_configure_regions+0x10>
				(!mpu_partition_is_valid(regions[i]))) {
    9918:	4630      	mov	r0, r6
    991a:	f006 fd9c 	bl	10456 <mpu_partition_is_valid>
		if (do_sanity_check &&
    991e:	2800      	cmp	r0, #0
    9920:	d1e6      	bne.n	98f0 <mpu_configure_regions+0x10>
			LOG_ERR("Partition %u: sanity check failed.", i);
    9922:	f04f 0200 	mov.w	r2, #0
    9926:	2301      	movs	r3, #1
    9928:	f363 0202 	bfi	r2, r3, #0, #3
    992c:	f36f 02c5 	bfc	r2, #3, #3
    9930:	4b07      	ldr	r3, [pc, #28]	; (9950 <mpu_configure_regions+0x70>)
    9932:	4908      	ldr	r1, [pc, #32]	; (9954 <mpu_configure_regions+0x74>)
    9934:	1a5b      	subs	r3, r3, r1
    9936:	f3c3 03c9 	ubfx	r3, r3, #3, #10
    993a:	f363 128f 	bfi	r2, r3, #6, #10
    993e:	4621      	mov	r1, r4
    9940:	4805      	ldr	r0, [pc, #20]	; (9958 <mpu_configure_regions+0x78>)
    9942:	f7fb fb03 	bl	4f4c <log_1>
			return -EINVAL;
    9946:	f06f 0515 	mvn.w	r5, #21
	}

	return reg_index;
}
    994a:	4628      	mov	r0, r5
    994c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    9950:	00010de4 	.word	0x00010de4
    9954:	00010dd4 	.word	0x00010dd4
    9958:	00012f9c 	.word	0x00012f9c

0000995c <mpu_configure_static_mpu_regions>:
 */
static int mpu_configure_static_mpu_regions(const struct k_mem_partition
	*static_regions[], const u8_t regions_num,
	const u32_t background_area_base,
	const u32_t background_area_end)
{
    995c:	b510      	push	{r4, lr}
	int mpu_reg_index = static_regions_num;
    995e:	4c03      	ldr	r4, [pc, #12]	; (996c <mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    9960:	2301      	movs	r3, #1
    9962:	7822      	ldrb	r2, [r4, #0]
    9964:	f7ff ffbc 	bl	98e0 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    9968:	7020      	strb	r0, [r4, #0]

	return mpu_reg_index;
}
    996a:	bd10      	pop	{r4, pc}
    996c:	200027d5 	.word	0x200027d5

00009970 <mpu_configure_dynamic_mpu_regions>:
 * If the dynamic MPU regions configuration has not been successfully
 * performed, the error signal is propagated to the caller of the function.
 */
static int mpu_configure_dynamic_mpu_regions(const struct k_mem_partition
	*dynamic_regions[], u8_t regions_num)
{
    9970:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    9972:	2300      	movs	r3, #0
    9974:	4a08      	ldr	r2, [pc, #32]	; (9998 <mpu_configure_dynamic_mpu_regions+0x28>)
    9976:	7812      	ldrb	r2, [r2, #0]
    9978:	f7ff ffb2 	bl	98e0 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    997c:	f110 0f16 	cmn.w	r0, #22
    9980:	d008      	beq.n	9994 <mpu_configure_dynamic_mpu_regions+0x24>

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    9982:	4603      	mov	r3, r0
    9984:	2b07      	cmp	r3, #7
    9986:	dc05      	bgt.n	9994 <mpu_configure_dynamic_mpu_regions+0x24>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
    9988:	4a04      	ldr	r2, [pc, #16]	; (999c <mpu_configure_dynamic_mpu_regions+0x2c>)
    998a:	6093      	str	r3, [r2, #8]
  MPU->RASR = 0U;
    998c:	2100      	movs	r1, #0
    998e:	6111      	str	r1, [r2, #16]
    9990:	3301      	adds	r3, #1
    9992:	e7f7      	b.n	9984 <mpu_configure_dynamic_mpu_regions+0x14>
			ARM_MPU_ClrRegion(i);
		}
	}

	return mpu_reg_index;
}
    9994:	bd08      	pop	{r3, pc}
    9996:	bf00      	nop
    9998:	200027d5 	.word	0x200027d5
    999c:	e000ed90 	.word	0xe000ed90

000099a0 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    99a0:	4b03      	ldr	r3, [pc, #12]	; (99b0 <arm_core_mpu_enable+0x10>)
    99a2:	2205      	movs	r2, #5
    99a4:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    99a6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    99aa:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    99ae:	4770      	bx	lr
    99b0:	e000ed90 	.word	0xe000ed90

000099b4 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    99b4:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    99b8:	4b01      	ldr	r3, [pc, #4]	; (99c0 <arm_core_mpu_disable+0xc>)
    99ba:	2200      	movs	r2, #0
    99bc:	605a      	str	r2, [r3, #4]
}
    99be:	4770      	bx	lr
    99c0:	e000ed90 	.word	0xe000ed90

000099c4 <arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
static int arm_mpu_init(struct device *arg)
{
    99c4:	b538      	push	{r3, r4, r5, lr}
	u32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    99c6:	4b23      	ldr	r3, [pc, #140]	; (9a54 <arm_mpu_init+0x90>)
    99c8:	681d      	ldr	r5, [r3, #0]
    99ca:	2d08      	cmp	r5, #8
    99cc:	d80f      	bhi.n	99ee <arm_mpu_init+0x2a>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    99ce:	f7ff fff1 	bl	99b4 <arm_core_mpu_disable>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    99d2:	2400      	movs	r4, #0
    99d4:	42a5      	cmp	r5, r4
    99d6:	d91f      	bls.n	9a18 <arm_mpu_init+0x54>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    99d8:	4b1e      	ldr	r3, [pc, #120]	; (9a54 <arm_mpu_init+0x90>)
    99da:	6859      	ldr	r1, [r3, #4]
    99dc:	eb04 0244 	add.w	r2, r4, r4, lsl #1
    99e0:	0093      	lsls	r3, r2, #2
    99e2:	4419      	add	r1, r3
    99e4:	4620      	mov	r0, r4
    99e6:	f7ff ff47 	bl	9878 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    99ea:	3401      	adds	r4, #1
    99ec:	e7f2      	b.n	99d4 <arm_mpu_init+0x10>
		__ASSERT(0,
    99ee:	4c1a      	ldr	r4, [pc, #104]	; (9a58 <arm_mpu_init+0x94>)
    99f0:	f240 1303 	movw	r3, #259	; 0x103
    99f4:	4622      	mov	r2, r4
    99f6:	4919      	ldr	r1, [pc, #100]	; (9a5c <arm_mpu_init+0x98>)
    99f8:	4819      	ldr	r0, [pc, #100]	; (9a60 <arm_mpu_init+0x9c>)
    99fa:	f005 ff40 	bl	f87e <printk>
    99fe:	2208      	movs	r2, #8
    9a00:	4629      	mov	r1, r5
    9a02:	4818      	ldr	r0, [pc, #96]	; (9a64 <arm_mpu_init+0xa0>)
    9a04:	f005 ff3b 	bl	f87e <printk>
    9a08:	f240 1103 	movw	r1, #259	; 0x103
    9a0c:	4620      	mov	r0, r4
    9a0e:	f005 ffbc 	bl	f98a <assert_post_action>
		return -1;
    9a12:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    9a16:	e00a      	b.n	9a2e <arm_mpu_init+0x6a>
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    9a18:	4b13      	ldr	r3, [pc, #76]	; (9a68 <arm_mpu_init+0xa4>)
    9a1a:	701d      	strb	r5, [r3, #0]


	arm_core_mpu_enable();
    9a1c:	f7ff ffc0 	bl	99a0 <arm_core_mpu_enable>

	/* Sanity check for number of regions in Cortex-M0+, M3, and M4. */
#if defined(CONFIG_CPU_CORTEX_M0PLUS) || \
	defined(CONFIG_CPU_CORTEX_M3) || \
	defined(CONFIG_CPU_CORTEX_M4)
	__ASSERT(
    9a20:	4b12      	ldr	r3, [pc, #72]	; (9a6c <arm_mpu_init+0xa8>)
    9a22:	681b      	ldr	r3, [r3, #0]
    9a24:	f3c3 2307 	ubfx	r3, r3, #8, #8
    9a28:	2b08      	cmp	r3, #8
    9a2a:	d101      	bne.n	9a30 <arm_mpu_init+0x6c>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos == 8,
		"Invalid number of MPU regions\n");
#endif
	return 0;
    9a2c:	2000      	movs	r0, #0
}
    9a2e:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT(
    9a30:	4c09      	ldr	r4, [pc, #36]	; (9a58 <arm_mpu_init+0x94>)
    9a32:	f240 131f 	movw	r3, #287	; 0x11f
    9a36:	4622      	mov	r2, r4
    9a38:	490d      	ldr	r1, [pc, #52]	; (9a70 <arm_mpu_init+0xac>)
    9a3a:	4809      	ldr	r0, [pc, #36]	; (9a60 <arm_mpu_init+0x9c>)
    9a3c:	f005 ff1f 	bl	f87e <printk>
    9a40:	480c      	ldr	r0, [pc, #48]	; (9a74 <arm_mpu_init+0xb0>)
    9a42:	f005 ff1c 	bl	f87e <printk>
    9a46:	f240 111f 	movw	r1, #287	; 0x11f
    9a4a:	4620      	mov	r0, r4
    9a4c:	f005 ff9d 	bl	f98a <assert_post_action>
	return 0;
    9a50:	2000      	movs	r0, #0
    9a52:	e7ec      	b.n	9a2e <arm_mpu_init+0x6a>
    9a54:	00011210 	.word	0x00011210
    9a58:	00012ecc 	.word	0x00012ecc
    9a5c:	00012ff0 	.word	0x00012ff0
    9a60:	00010f8c 	.word	0x00010f8c
    9a64:	00012ef4 	.word	0x00012ef4
    9a68:	200027d5 	.word	0x200027d5
    9a6c:	e000ed90 	.word	0xe000ed90
    9a70:	00012f28 	.word	0x00012f28
    9a74:	00012f78 	.word	0x00012f78

00009a78 <arm_core_mpu_configure_static_mpu_regions>:
{
    9a78:	b538      	push	{r3, r4, r5, lr}
    9a7a:	460c      	mov	r4, r1
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
    9a7c:	f7ff ff6e 	bl	995c <mpu_configure_static_mpu_regions>
    9a80:	f110 0f16 	cmn.w	r0, #22
    9a84:	d000      	beq.n	9a88 <arm_core_mpu_configure_static_mpu_regions+0x10>
}
    9a86:	bd38      	pop	{r3, r4, r5, pc}
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
    9a88:	4d07      	ldr	r5, [pc, #28]	; (9aa8 <arm_core_mpu_configure_static_mpu_regions+0x30>)
    9a8a:	23c9      	movs	r3, #201	; 0xc9
    9a8c:	462a      	mov	r2, r5
    9a8e:	4907      	ldr	r1, [pc, #28]	; (9aac <arm_core_mpu_configure_static_mpu_regions+0x34>)
    9a90:	4807      	ldr	r0, [pc, #28]	; (9ab0 <arm_core_mpu_configure_static_mpu_regions+0x38>)
    9a92:	f005 fef4 	bl	f87e <printk>
    9a96:	4621      	mov	r1, r4
    9a98:	4806      	ldr	r0, [pc, #24]	; (9ab4 <arm_core_mpu_configure_static_mpu_regions+0x3c>)
    9a9a:	f005 fef0 	bl	f87e <printk>
    9a9e:	21c9      	movs	r1, #201	; 0xc9
    9aa0:	4628      	mov	r0, r5
    9aa2:	f005 ff72 	bl	f98a <assert_post_action>
}
    9aa6:	e7ee      	b.n	9a86 <arm_core_mpu_configure_static_mpu_regions+0xe>
    9aa8:	00012ecc 	.word	0x00012ecc
    9aac:	00012ff0 	.word	0x00012ff0
    9ab0:	00010f8c 	.word	0x00010f8c
    9ab4:	00012ea0 	.word	0x00012ea0

00009ab8 <arm_core_mpu_configure_dynamic_mpu_regions>:
{
    9ab8:	b538      	push	{r3, r4, r5, lr}
    9aba:	460c      	mov	r4, r1
	if (mpu_configure_dynamic_mpu_regions(dynamic_regions, regions_num)
    9abc:	f7ff ff58 	bl	9970 <mpu_configure_dynamic_mpu_regions>
    9ac0:	f110 0f16 	cmn.w	r0, #22
    9ac4:	d000      	beq.n	9ac8 <arm_core_mpu_configure_dynamic_mpu_regions+0x10>
}
    9ac6:	bd38      	pop	{r3, r4, r5, pc}
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
    9ac8:	4d07      	ldr	r5, [pc, #28]	; (9ae8 <arm_core_mpu_configure_dynamic_mpu_regions+0x30>)
    9aca:	23e8      	movs	r3, #232	; 0xe8
    9acc:	462a      	mov	r2, r5
    9ace:	4907      	ldr	r1, [pc, #28]	; (9aec <arm_core_mpu_configure_dynamic_mpu_regions+0x34>)
    9ad0:	4807      	ldr	r0, [pc, #28]	; (9af0 <arm_core_mpu_configure_dynamic_mpu_regions+0x38>)
    9ad2:	f005 fed4 	bl	f87e <printk>
    9ad6:	4621      	mov	r1, r4
    9ad8:	4806      	ldr	r0, [pc, #24]	; (9af4 <arm_core_mpu_configure_dynamic_mpu_regions+0x3c>)
    9ada:	f005 fed0 	bl	f87e <printk>
    9ade:	21e8      	movs	r1, #232	; 0xe8
    9ae0:	4628      	mov	r0, r5
    9ae2:	f005 ff52 	bl	f98a <assert_post_action>
}
    9ae6:	e7ee      	b.n	9ac6 <arm_core_mpu_configure_dynamic_mpu_regions+0xe>
    9ae8:	00012ecc 	.word	0x00012ecc
    9aec:	00012ff0 	.word	0x00012ff0
    9af0:	00010f8c 	.word	0x00010f8c
    9af4:	00012e70 	.word	0x00012e70

00009af8 <_ldiv5>:
 * six.  This was tested exhaustively through the first ~10B values in
 * the input space, and for ~2e12 (4 hours runtime) random inputs
 * taken from the full 64 bit space.
 */
static void _ldiv5(uint64_t *v)
{
    9af8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t i, hi;
	uint64_t rem = *v, quot = 0U, q;
    9afc:	6805      	ldr	r5, [r0, #0]
    9afe:	6846      	ldr	r6, [r0, #4]
	static const char shifts[] = { 32, 3, 0 };

	/* Usage in this file wants rounded behavior, not truncation.  So add
	 * two to get the threshold right.
	 */
	rem += 2U;
    9b00:	3502      	adds	r5, #2
    9b02:	f146 0600 	adc.w	r6, r6, #0
	uint64_t rem = *v, quot = 0U, q;
    9b06:	2700      	movs	r7, #0
    9b08:	46be      	mov	lr, r7

	for (i = 0U; i < 3; i++) {
    9b0a:	46bc      	mov	ip, r7
    9b0c:	f1bc 0f02 	cmp.w	ip, #2
    9b10:	d82d      	bhi.n	9b6e <_ldiv5+0x76>
		hi = rem >> shifts[i];
    9b12:	4b19      	ldr	r3, [pc, #100]	; (9b78 <_ldiv5+0x80>)
    9b14:	f813 400c 	ldrb.w	r4, [r3, ip]
    9b18:	f1c4 0120 	rsb	r1, r4, #32
    9b1c:	f1a4 0320 	sub.w	r3, r4, #32
    9b20:	fa25 f204 	lsr.w	r2, r5, r4
    9b24:	fa06 f101 	lsl.w	r1, r6, r1
    9b28:	430a      	orrs	r2, r1
    9b2a:	fa26 f303 	lsr.w	r3, r6, r3
    9b2e:	431a      	orrs	r2, r3
		q = (uint64_t)(hi / 5U) << shifts[i];
    9b30:	4b12      	ldr	r3, [pc, #72]	; (9b7c <_ldiv5+0x84>)
    9b32:	fba3 2302 	umull	r2, r3, r3, r2
    9b36:	089b      	lsrs	r3, r3, #2
    9b38:	f1a4 0820 	sub.w	r8, r4, #32
    9b3c:	f1c4 0220 	rsb	r2, r4, #32
    9b40:	fa03 f108 	lsl.w	r1, r3, r8
    9b44:	fa23 f202 	lsr.w	r2, r3, r2
    9b48:	4311      	orrs	r1, r2
    9b4a:	40a3      	lsls	r3, r4
		rem -= q * 5U;
    9b4c:	ea4f 0881 	mov.w	r8, r1, lsl #2
    9b50:	009a      	lsls	r2, r3, #2
    9b52:	ea48 7493 	orr.w	r4, r8, r3, lsr #30
    9b56:	18d2      	adds	r2, r2, r3
    9b58:	eb41 0404 	adc.w	r4, r1, r4
    9b5c:	1aad      	subs	r5, r5, r2
    9b5e:	eb66 0604 	sbc.w	r6, r6, r4
		quot += q;
    9b62:	18ff      	adds	r7, r7, r3
    9b64:	eb4e 0e01 	adc.w	lr, lr, r1
	for (i = 0U; i < 3; i++) {
    9b68:	f10c 0c01 	add.w	ip, ip, #1
    9b6c:	e7ce      	b.n	9b0c <_ldiv5+0x14>
	}

	*v = quot;
    9b6e:	6007      	str	r7, [r0, #0]
    9b70:	f8c0 e004 	str.w	lr, [r0, #4]
}
    9b74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9b78:	00012fe8 	.word	0x00012fe8
    9b7c:	cccccccd 	.word	0xcccccccd

00009b80 <_to_float>:
#define	MAXFP1	0xFFFFFFFF	/* Largest # if first fp format */
#define HIGHBIT64 (1ull<<63)

static int _to_float(char *buf, uint64_t double_temp, int c,
					 int falt, int fplus, int fspace, int precision)
{
    9b80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9b84:	b087      	sub	sp, #28
    9b86:	9e10      	ldr	r6, [sp, #64]	; 0x40
    9b88:	9d14      	ldr	r5, [sp, #80]	; 0x50
	uint64_t        fract;
	uint64_t        ltemp;
	int             prune_zero;
	char           *start = buf;

	exp = double_temp >> 52 & 0x7ff;
    9b8a:	f3c3 540a 	ubfx	r4, r3, #20, #11
	fract = (double_temp << 11) & ~HIGHBIT64;
    9b8e:	02d9      	lsls	r1, r3, #11
    9b90:	ea41 5152 	orr.w	r1, r1, r2, lsr #21
    9b94:	02d7      	lsls	r7, r2, #11
    9b96:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    9b9a:	9702      	str	r7, [sp, #8]
    9b9c:	9103      	str	r1, [sp, #12]
	sign = !!(double_temp & HIGHBIT64);
    9b9e:	4692      	mov	sl, r2
    9ba0:	469b      	mov	fp, r3


	if (exp == 0x7ff) {
    9ba2:	f240 73ff 	movw	r3, #2047	; 0x7ff
    9ba6:	429c      	cmp	r4, r3
    9ba8:	d02e      	beq.n	9c08 <_to_float+0x88>
		}
		*buf = 0;
		return buf - start;
	}

	if (c == 'F') {
    9baa:	2e46      	cmp	r6, #70	; 0x46
    9bac:	d061      	beq.n	9c72 <_to_float+0xf2>
		c = 'f';
	}

	if ((exp | fract) != 0) {
    9bae:	ea44 0207 	orr.w	r2, r4, r7
    9bb2:	ea4f 79e4 	mov.w	r9, r4, asr #31
    9bb6:	ea49 0301 	orr.w	r3, r9, r1
    9bba:	4313      	orrs	r3, r2
    9bbc:	d00a      	beq.n	9bd4 <_to_float+0x54>
		exp -= (1023 - 1);	/* +1 since .1 vs 1. */
    9bbe:	f2a4 34fe 	subw	r4, r4, #1022	; 0x3fe
		fract |= HIGHBIT64;
    9bc2:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
    9bc6:	9702      	str	r7, [sp, #8]
    9bc8:	9103      	str	r1, [sp, #12]
		decexp = true;		/* Wasn't zero */
	} else {
		decexp = false;		/* It was zero */
	}

	if (decexp && sign) {
    9bca:	f1ba 0f00 	cmp.w	sl, #0
    9bce:	f17b 0300 	sbcs.w	r3, fp, #0
    9bd2:	db50      	blt.n	9c76 <_to_float+0xf6>
		*buf++ = '-';
	} else if (fplus) {
    9bd4:	9b12      	ldr	r3, [sp, #72]	; 0x48
    9bd6:	2b00      	cmp	r3, #0
    9bd8:	d052      	beq.n	9c80 <_to_float+0x100>
		*buf++ = '+';
    9bda:	4681      	mov	r9, r0
    9bdc:	232b      	movs	r3, #43	; 0x2b
    9bde:	f809 3b01 	strb.w	r3, [r9], #1
    9be2:	4682      	mov	sl, r0
		*buf++ = ' ';
	} else {
		/* unreachable */
	}

	decexp = 0;
    9be4:	f04f 0800 	mov.w	r8, #0
	while (exp <= -3) {
    9be8:	f114 0f02 	cmn.w	r4, #2
    9bec:	da79      	bge.n	9ce2 <_to_float+0x162>
		while ((fract >> 32) >= (MAXFP1 / 5)) {
    9bee:	9802      	ldr	r0, [sp, #8]
    9bf0:	9903      	ldr	r1, [sp, #12]
    9bf2:	2300      	movs	r3, #0
    9bf4:	2b00      	cmp	r3, #0
    9bf6:	bf08      	it	eq
    9bf8:	f1b1 3f33 	cmpeq.w	r1, #858993459	; 0x33333333
    9bfc:	d349      	bcc.n	9c92 <_to_float+0x112>
			_rlrshift(&fract);
    9bfe:	a802      	add	r0, sp, #8
    9c00:	f006 fd6a 	bl	106d8 <_rlrshift>
			exp++;
    9c04:	3401      	adds	r4, #1
    9c06:	e7f2      	b.n	9bee <_to_float+0x6e>
		if (sign) {
    9c08:	2a00      	cmp	r2, #0
    9c0a:	f17b 0300 	sbcs.w	r3, fp, #0
    9c0e:	db12      	blt.n	9c36 <_to_float+0xb6>
    9c10:	4601      	mov	r1, r0
		if (!fract) {
    9c12:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    9c16:	4313      	orrs	r3, r2
    9c18:	d11a      	bne.n	9c50 <_to_float+0xd0>
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    9c1a:	3e41      	subs	r6, #65	; 0x41
			if (isupper(c)) {
    9c1c:	2e19      	cmp	r6, #25
    9c1e:	d80f      	bhi.n	9c40 <_to_float+0xc0>
				*buf++ = 'I';
    9c20:	2349      	movs	r3, #73	; 0x49
    9c22:	700b      	strb	r3, [r1, #0]
				*buf++ = 'N';
    9c24:	234e      	movs	r3, #78	; 0x4e
    9c26:	704b      	strb	r3, [r1, #1]
				*buf++ = 'F';
    9c28:	1ccb      	adds	r3, r1, #3
    9c2a:	2246      	movs	r2, #70	; 0x46
    9c2c:	708a      	strb	r2, [r1, #2]
		*buf = 0;
    9c2e:	2200      	movs	r2, #0
    9c30:	701a      	strb	r2, [r3, #0]
		return buf - start;
    9c32:	1a18      	subs	r0, r3, r0
    9c34:	e135      	b.n	9ea2 <_to_float+0x322>
			*buf++ = '-';
    9c36:	4601      	mov	r1, r0
    9c38:	232d      	movs	r3, #45	; 0x2d
    9c3a:	f801 3b01 	strb.w	r3, [r1], #1
    9c3e:	e7e8      	b.n	9c12 <_to_float+0x92>
				*buf++ = 'i';
    9c40:	2369      	movs	r3, #105	; 0x69
    9c42:	700b      	strb	r3, [r1, #0]
				*buf++ = 'n';
    9c44:	236e      	movs	r3, #110	; 0x6e
    9c46:	704b      	strb	r3, [r1, #1]
				*buf++ = 'f';
    9c48:	1ccb      	adds	r3, r1, #3
    9c4a:	2266      	movs	r2, #102	; 0x66
    9c4c:	708a      	strb	r2, [r1, #2]
    9c4e:	e7ee      	b.n	9c2e <_to_float+0xae>
    9c50:	3e41      	subs	r6, #65	; 0x41
			if (isupper(c)) {
    9c52:	2e19      	cmp	r6, #25
    9c54:	d806      	bhi.n	9c64 <_to_float+0xe4>
				*buf++ = 'N';
    9c56:	224e      	movs	r2, #78	; 0x4e
    9c58:	700a      	strb	r2, [r1, #0]
				*buf++ = 'A';
    9c5a:	2341      	movs	r3, #65	; 0x41
    9c5c:	704b      	strb	r3, [r1, #1]
				*buf++ = 'N';
    9c5e:	1ccb      	adds	r3, r1, #3
    9c60:	708a      	strb	r2, [r1, #2]
    9c62:	e7e4      	b.n	9c2e <_to_float+0xae>
				*buf++ = 'n';
    9c64:	226e      	movs	r2, #110	; 0x6e
    9c66:	700a      	strb	r2, [r1, #0]
				*buf++ = 'a';
    9c68:	2361      	movs	r3, #97	; 0x61
    9c6a:	704b      	strb	r3, [r1, #1]
				*buf++ = 'n';
    9c6c:	1ccb      	adds	r3, r1, #3
    9c6e:	708a      	strb	r2, [r1, #2]
    9c70:	e7dd      	b.n	9c2e <_to_float+0xae>
		c = 'f';
    9c72:	2666      	movs	r6, #102	; 0x66
    9c74:	e79b      	b.n	9bae <_to_float+0x2e>
		*buf++ = '-';
    9c76:	4681      	mov	r9, r0
    9c78:	232d      	movs	r3, #45	; 0x2d
    9c7a:	f809 3b01 	strb.w	r3, [r9], #1
    9c7e:	e7b0      	b.n	9be2 <_to_float+0x62>
	} else if (fspace) {
    9c80:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    9c82:	b123      	cbz	r3, 9c8e <_to_float+0x10e>
		*buf++ = ' ';
    9c84:	4681      	mov	r9, r0
    9c86:	2320      	movs	r3, #32
    9c88:	f809 3b01 	strb.w	r3, [r9], #1
    9c8c:	e7a9      	b.n	9be2 <_to_float+0x62>
    9c8e:	4681      	mov	r9, r0
    9c90:	e7a7      	b.n	9be2 <_to_float+0x62>
		}
		fract *= 5U;
    9c92:	ea4f 0c81 	mov.w	ip, r1, lsl #2
    9c96:	0083      	lsls	r3, r0, #2
    9c98:	ea4c 7290 	orr.w	r2, ip, r0, lsr #30
    9c9c:	1818      	adds	r0, r3, r0
    9c9e:	eb42 0101 	adc.w	r1, r2, r1
    9ca2:	9002      	str	r0, [sp, #8]
    9ca4:	9103      	str	r1, [sp, #12]
		exp++;
    9ca6:	3401      	adds	r4, #1
		decexp--;
    9ca8:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff

		while ((fract >> 32) <= (MAXFP1 / 2)) {
    9cac:	9b02      	ldr	r3, [sp, #8]
    9cae:	9a03      	ldr	r2, [sp, #12]
    9cb0:	2100      	movs	r1, #0
    9cb2:	2900      	cmp	r1, #0
    9cb4:	bf08      	it	eq
    9cb6:	f1b2 4f00 	cmpeq.w	r2, #2147483648	; 0x80000000
    9cba:	d295      	bcs.n	9be8 <_to_float+0x68>
			fract <<= 1;
    9cbc:	18db      	adds	r3, r3, r3
    9cbe:	4152      	adcs	r2, r2
    9cc0:	9302      	str	r3, [sp, #8]
    9cc2:	9203      	str	r2, [sp, #12]
			exp--;
    9cc4:	3c01      	subs	r4, #1
    9cc6:	e7f1      	b.n	9cac <_to_float+0x12c>
	while (exp > 0) {
		_ldiv5(&fract);
		exp--;
		decexp++;
		while ((fract >> 32) <= (MAXFP1 / 2)) {
			fract <<= 1;
    9cc8:	18db      	adds	r3, r3, r3
    9cca:	4152      	adcs	r2, r2
    9ccc:	9302      	str	r3, [sp, #8]
    9cce:	9203      	str	r2, [sp, #12]
			exp--;
    9cd0:	3c01      	subs	r4, #1
		while ((fract >> 32) <= (MAXFP1 / 2)) {
    9cd2:	9b02      	ldr	r3, [sp, #8]
    9cd4:	9a03      	ldr	r2, [sp, #12]
    9cd6:	2100      	movs	r1, #0
    9cd8:	2900      	cmp	r1, #0
    9cda:	bf08      	it	eq
    9cdc:	f1b2 4f00 	cmpeq.w	r2, #2147483648	; 0x80000000
    9ce0:	d3f2      	bcc.n	9cc8 <_to_float+0x148>
	while (exp > 0) {
    9ce2:	2c00      	cmp	r4, #0
    9ce4:	dd0a      	ble.n	9cfc <_to_float+0x17c>
		_ldiv5(&fract);
    9ce6:	a802      	add	r0, sp, #8
    9ce8:	f7ff ff06 	bl	9af8 <_ldiv5>
		exp--;
    9cec:	3c01      	subs	r4, #1
		decexp++;
    9cee:	f108 0801 	add.w	r8, r8, #1
		while ((fract >> 32) <= (MAXFP1 / 2)) {
    9cf2:	e7ee      	b.n	9cd2 <_to_float+0x152>
		}
	}

	while (exp < (0 + 4)) {
		_rlrshift(&fract);
    9cf4:	a802      	add	r0, sp, #8
    9cf6:	f006 fcef 	bl	106d8 <_rlrshift>
		exp++;
    9cfa:	3401      	adds	r4, #1
	while (exp < (0 + 4)) {
    9cfc:	2c03      	cmp	r4, #3
    9cfe:	ddf9      	ble.n	9cf4 <_to_float+0x174>
	}

	if (precision < 0)
    9d00:	2d00      	cmp	r5, #0
    9d02:	db12      	blt.n	9d2a <_to_float+0x1aa>
		precision = 6;		/* Default precision if none given */
	prune_zero = false;		/* Assume trailing 0's allowed     */
	if ((c == 'g') || (c == 'G')) {
    9d04:	2e67      	cmp	r6, #103	; 0x67
    9d06:	d012      	beq.n	9d2e <_to_float+0x1ae>
    9d08:	2e47      	cmp	r6, #71	; 0x47
    9d0a:	d010      	beq.n	9d2e <_to_float+0x1ae>
		} else {
			c = 'f';
		}
	}

	if (c == 'f') {
    9d0c:	2e66      	cmp	r6, #102	; 0x66
    9d0e:	d021      	beq.n	9d54 <_to_float+0x1d4>
	prune_zero = false;		/* Assume trailing 0's allowed     */
    9d10:	2400      	movs	r4, #0
		exp = precision + decexp;
		if (exp < 0) {
			exp = 0;
		}
	} else {
		exp = precision + 1;
    9d12:	1c6b      	adds	r3, r5, #1
	}
	digit_count = 16;
    9d14:	2210      	movs	r2, #16
    9d16:	9205      	str	r2, [sp, #20]
	if (exp > 16) {
    9d18:	4293      	cmp	r3, r2
    9d1a:	dd00      	ble.n	9d1e <_to_float+0x19e>
		exp = 16;
    9d1c:	4613      	mov	r3, r2
	}

	ltemp = 0x0800000000000000;
    9d1e:	2000      	movs	r0, #0
    9d20:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    9d24:	e9cd 0100 	strd	r0, r1, [sp]
	while (exp--) {
    9d28:	e027      	b.n	9d7a <_to_float+0x1fa>
		precision = 6;		/* Default precision if none given */
    9d2a:	2506      	movs	r5, #6
    9d2c:	e7ea      	b.n	9d04 <_to_float+0x184>
		if (!falt && (precision > 0)) {
    9d2e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    9d30:	b92b      	cbnz	r3, 9d3e <_to_float+0x1be>
    9d32:	2d00      	cmp	r5, #0
    9d34:	dd01      	ble.n	9d3a <_to_float+0x1ba>
			prune_zero = true;
    9d36:	2401      	movs	r4, #1
    9d38:	e002      	b.n	9d40 <_to_float+0x1c0>
	prune_zero = false;		/* Assume trailing 0's allowed     */
    9d3a:	461c      	mov	r4, r3
    9d3c:	e000      	b.n	9d40 <_to_float+0x1c0>
    9d3e:	2400      	movs	r4, #0
		if ((decexp < (-4 + 1)) || (decexp > (precision + 1))) {
    9d40:	f118 0f03 	cmn.w	r8, #3
    9d44:	db02      	blt.n	9d4c <_to_float+0x1cc>
    9d46:	1c6b      	adds	r3, r5, #1
    9d48:	4543      	cmp	r3, r8
    9d4a:	da0b      	bge.n	9d64 <_to_float+0x1e4>
			if (c == 'g') {
    9d4c:	2e67      	cmp	r6, #103	; 0x67
    9d4e:	d00b      	beq.n	9d68 <_to_float+0x1e8>
				c = 'E';
    9d50:	2645      	movs	r6, #69	; 0x45
    9d52:	e7de      	b.n	9d12 <_to_float+0x192>
	prune_zero = false;		/* Assume trailing 0's allowed     */
    9d54:	2400      	movs	r4, #0
		if (exp < 0) {
    9d56:	eb15 0308 	adds.w	r3, r5, r8
    9d5a:	d5db      	bpl.n	9d14 <_to_float+0x194>
	digit_count = 16;
    9d5c:	2310      	movs	r3, #16
    9d5e:	9305      	str	r3, [sp, #20]
			exp = 0;
    9d60:	2300      	movs	r3, #0
    9d62:	e7dc      	b.n	9d1e <_to_float+0x19e>
			c = 'f';
    9d64:	2666      	movs	r6, #102	; 0x66
    9d66:	e7f6      	b.n	9d56 <_to_float+0x1d6>
				c = 'e';
    9d68:	2665      	movs	r6, #101	; 0x65
    9d6a:	e7d2      	b.n	9d12 <_to_float+0x192>
		_ldiv5(&ltemp);
    9d6c:	4668      	mov	r0, sp
    9d6e:	f7ff fec3 	bl	9af8 <_ldiv5>
		_rlrshift(&ltemp);
    9d72:	4668      	mov	r0, sp
    9d74:	f006 fcb0 	bl	106d8 <_rlrshift>
	while (exp--) {
    9d78:	465b      	mov	r3, fp
    9d7a:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
    9d7e:	2b00      	cmp	r3, #0
    9d80:	d1f4      	bne.n	9d6c <_to_float+0x1ec>
	}

	fract += ltemp;
    9d82:	9b02      	ldr	r3, [sp, #8]
    9d84:	9a00      	ldr	r2, [sp, #0]
    9d86:	189b      	adds	r3, r3, r2
    9d88:	9a03      	ldr	r2, [sp, #12]
    9d8a:	9901      	ldr	r1, [sp, #4]
    9d8c:	eb41 0202 	adc.w	r2, r1, r2
    9d90:	9302      	str	r3, [sp, #8]
    9d92:	9203      	str	r2, [sp, #12]
	if ((fract >> 32) & 0xF0000000) {
    9d94:	f002 4070 	and.w	r0, r2, #4026531840	; 0xf0000000
    9d98:	2100      	movs	r1, #0
    9d9a:	ea50 0301 	orrs.w	r3, r0, r1
    9d9e:	d110      	bne.n	9dc2 <_to_float+0x242>
		_ldiv5(&fract);
		_rlrshift(&fract);
		decexp++;
	}

	if (c == 'f') {
    9da0:	2e66      	cmp	r6, #102	; 0x66
    9da2:	d13a      	bne.n	9e1a <_to_float+0x29a>
		if (decexp > 0) {
    9da4:	f1b8 0f00 	cmp.w	r8, #0
    9da8:	dd14      	ble.n	9dd4 <_to_float+0x254>
			while (decexp > 0) {
    9daa:	f1b8 0f00 	cmp.w	r8, #0
    9dae:	dd14      	ble.n	9dda <_to_float+0x25a>
				*buf++ = _get_digit(&fract, &digit_count);
    9db0:	a905      	add	r1, sp, #20
    9db2:	a802      	add	r0, sp, #8
    9db4:	f006 fca2 	bl	106fc <_get_digit>
    9db8:	f809 0b01 	strb.w	r0, [r9], #1
				decexp--;
    9dbc:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    9dc0:	e7f3      	b.n	9daa <_to_float+0x22a>
		_ldiv5(&fract);
    9dc2:	a802      	add	r0, sp, #8
    9dc4:	f7ff fe98 	bl	9af8 <_ldiv5>
		_rlrshift(&fract);
    9dc8:	a802      	add	r0, sp, #8
    9dca:	f006 fc85 	bl	106d8 <_rlrshift>
		decexp++;
    9dce:	f108 0801 	add.w	r8, r8, #1
    9dd2:	e7e5      	b.n	9da0 <_to_float+0x220>
			}
		} else {
			*buf++ = '0';
    9dd4:	2330      	movs	r3, #48	; 0x30
    9dd6:	f809 3b01 	strb.w	r3, [r9], #1
		}
		if (falt || (precision > 0)) {
    9dda:	9b11      	ldr	r3, [sp, #68]	; 0x44
    9ddc:	b90b      	cbnz	r3, 9de2 <_to_float+0x262>
    9dde:	2d00      	cmp	r5, #0
    9de0:	dd19      	ble.n	9e16 <_to_float+0x296>
			*buf++ = '.';
    9de2:	464b      	mov	r3, r9
    9de4:	222e      	movs	r2, #46	; 0x2e
    9de6:	f803 2b01 	strb.w	r2, [r3], #1
    9dea:	e008      	b.n	9dfe <_to_float+0x27e>
		while (precision-- > 0) {
			if (decexp < 0) {
				*buf++ = '0';
				decexp++;
			} else {
				*buf++ = _get_digit(&fract, &digit_count);
    9dec:	461d      	mov	r5, r3
    9dee:	a905      	add	r1, sp, #20
    9df0:	a802      	add	r0, sp, #8
    9df2:	f006 fc83 	bl	106fc <_get_digit>
    9df6:	f805 0b01 	strb.w	r0, [r5], #1
    9dfa:	462b      	mov	r3, r5
				*buf++ = '0';
    9dfc:	463d      	mov	r5, r7
		while (precision-- > 0) {
    9dfe:	1e6f      	subs	r7, r5, #1
    9e00:	2d00      	cmp	r5, #0
    9e02:	dd2c      	ble.n	9e5e <_to_float+0x2de>
			if (decexp < 0) {
    9e04:	f1b8 0f00 	cmp.w	r8, #0
    9e08:	daf0      	bge.n	9dec <_to_float+0x26c>
				*buf++ = '0';
    9e0a:	2230      	movs	r2, #48	; 0x30
    9e0c:	f803 2b01 	strb.w	r2, [r3], #1
				decexp++;
    9e10:	f108 0801 	add.w	r8, r8, #1
    9e14:	e7f2      	b.n	9dfc <_to_float+0x27c>
    9e16:	464b      	mov	r3, r9
    9e18:	e7f1      	b.n	9dfe <_to_float+0x27e>
			}
		}
	} else {
		*buf = _get_digit(&fract, &digit_count);
    9e1a:	a905      	add	r1, sp, #20
    9e1c:	a802      	add	r0, sp, #8
    9e1e:	f006 fc6d 	bl	106fc <_get_digit>
    9e22:	464b      	mov	r3, r9
    9e24:	f803 0b01 	strb.w	r0, [r3], #1
		if (*buf++ != '0') {
    9e28:	2830      	cmp	r0, #48	; 0x30
    9e2a:	d001      	beq.n	9e30 <_to_float+0x2b0>
			decexp--;
    9e2c:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
		}
		if (falt || (precision > 0)) {
    9e30:	9a11      	ldr	r2, [sp, #68]	; 0x44
    9e32:	b90a      	cbnz	r2, 9e38 <_to_float+0x2b8>
    9e34:	2d00      	cmp	r5, #0
    9e36:	dd0e      	ble.n	9e56 <_to_float+0x2d6>
			*buf++ = '.';
    9e38:	f109 0302 	add.w	r3, r9, #2
    9e3c:	222e      	movs	r2, #46	; 0x2e
    9e3e:	f889 2001 	strb.w	r2, [r9, #1]
    9e42:	e008      	b.n	9e56 <_to_float+0x2d6>
		}
		while (precision-- > 0) {
			*buf++ = _get_digit(&fract, &digit_count);
    9e44:	461f      	mov	r7, r3
    9e46:	a905      	add	r1, sp, #20
    9e48:	a802      	add	r0, sp, #8
    9e4a:	f006 fc57 	bl	106fc <_get_digit>
    9e4e:	f807 0b01 	strb.w	r0, [r7], #1
		while (precision-- > 0) {
    9e52:	464d      	mov	r5, r9
			*buf++ = _get_digit(&fract, &digit_count);
    9e54:	463b      	mov	r3, r7
		while (precision-- > 0) {
    9e56:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
    9e5a:	2d00      	cmp	r5, #0
    9e5c:	dcf2      	bgt.n	9e44 <_to_float+0x2c4>
		}
	}

	if (prune_zero) {
    9e5e:	bb24      	cbnz	r4, 9eaa <_to_float+0x32a>
		if (*buf != '.') {
			buf++;
		}
	}

	if ((c == 'e') || (c == 'E')) {
    9e60:	2e65      	cmp	r6, #101	; 0x65
    9e62:	d001      	beq.n	9e68 <_to_float+0x2e8>
    9e64:	2e45      	cmp	r6, #69	; 0x45
    9e66:	d118      	bne.n	9e9a <_to_float+0x31a>
		*buf++ = (char) c;
    9e68:	701e      	strb	r6, [r3, #0]
		if (decexp < 0) {
    9e6a:	f1b8 0f00 	cmp.w	r8, #0
    9e6e:	db25      	blt.n	9ebc <_to_float+0x33c>
			decexp = -decexp;
			*buf++ = '-';
		} else {
			*buf++ = '+';
    9e70:	1c99      	adds	r1, r3, #2
    9e72:	222b      	movs	r2, #43	; 0x2b
    9e74:	705a      	strb	r2, [r3, #1]
		}
		*buf++ = (char) ((decexp / 10) + '0');
    9e76:	4b14      	ldr	r3, [pc, #80]	; (9ec8 <_to_float+0x348>)
    9e78:	fb83 2308 	smull	r2, r3, r3, r8
    9e7c:	ea4f 72e8 	mov.w	r2, r8, asr #31
    9e80:	ebc2 02a3 	rsb	r2, r2, r3, asr #2
    9e84:	f102 0030 	add.w	r0, r2, #48	; 0x30
    9e88:	460b      	mov	r3, r1
    9e8a:	f803 0b02 	strb.w	r0, [r3], #2
		decexp %= 10;
    9e8e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    9e92:	eba8 0242 	sub.w	r2, r8, r2, lsl #1
		*buf++ = (char) (decexp + '0');
    9e96:	3230      	adds	r2, #48	; 0x30
    9e98:	704a      	strb	r2, [r1, #1]
	}
	*buf = 0;
    9e9a:	2200      	movs	r2, #0
    9e9c:	701a      	strb	r2, [r3, #0]

	return buf - start;
    9e9e:	eba3 000a 	sub.w	r0, r3, sl
}
    9ea2:	b007      	add	sp, #28
    9ea4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		while (*--buf == '0')
    9ea8:	460b      	mov	r3, r1
    9eaa:	1e59      	subs	r1, r3, #1
    9eac:	f813 2c01 	ldrb.w	r2, [r3, #-1]
    9eb0:	2a30      	cmp	r2, #48	; 0x30
    9eb2:	d0f9      	beq.n	9ea8 <_to_float+0x328>
		if (*buf != '.') {
    9eb4:	2a2e      	cmp	r2, #46	; 0x2e
    9eb6:	d1d3      	bne.n	9e60 <_to_float+0x2e0>
		while (*--buf == '0')
    9eb8:	460b      	mov	r3, r1
    9eba:	e7d1      	b.n	9e60 <_to_float+0x2e0>
			decexp = -decexp;
    9ebc:	f1c8 0800 	rsb	r8, r8, #0
			*buf++ = '-';
    9ec0:	1c99      	adds	r1, r3, #2
    9ec2:	222d      	movs	r2, #45	; 0x2d
    9ec4:	705a      	strb	r2, [r3, #1]
    9ec6:	e7d6      	b.n	9e76 <_to_float+0x2f6>
    9ec8:	66666667 	.word	0x66666667

00009ecc <z_prf>:
	*sptr = p;
	return i;
}

int z_prf(int (*func)(), void *dest, char *format, va_list vargs)
{
    9ecc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9ed0:	b0c1      	sub	sp, #260	; 0x104
    9ed2:	4607      	mov	r7, r0
    9ed4:	468a      	mov	sl, r1
    9ed6:	920b      	str	r2, [sp, #44]	; 0x2c
    9ed8:	930a      	str	r3, [sp, #40]	; 0x28
	int32_t			*int32ptr_temp;
	int32_t			int32_temp;
	uint32_t			uint32_temp;
	uint64_t			double_temp;

	count = 0;
    9eda:	2500      	movs	r5, #0

	while ((c = *format++)) {
    9edc:	e000      	b.n	9ee0 <z_prf+0x14>
		if (c != '%') {
			if ((*func) (c, dest) == EOF) {
				return EOF;
			}

			count++;
    9ede:	3501      	adds	r5, #1
	while ((c = *format++)) {
    9ee0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    9ee2:	1c5a      	adds	r2, r3, #1
    9ee4:	920b      	str	r2, [sp, #44]	; 0x2c
    9ee6:	7818      	ldrb	r0, [r3, #0]
    9ee8:	b138      	cbz	r0, 9efa <z_prf+0x2e>
		if (c != '%') {
    9eea:	2825      	cmp	r0, #37	; 0x25
    9eec:	d017      	beq.n	9f1e <z_prf+0x52>
			if ((*func) (c, dest) == EOF) {
    9eee:	4651      	mov	r1, sl
    9ef0:	47b8      	blx	r7
    9ef2:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    9ef6:	d1f2      	bne.n	9ede <z_prf+0x12>
				return EOF;
    9ef8:	4605      	mov	r5, r0
				}
			}
		}
	}
	return count;
}
    9efa:	4628      	mov	r0, r5
    9efc:	b041      	add	sp, #260	; 0x104
    9efe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					fplus = true;
    9f02:	2301      	movs	r3, #1
    9f04:	9308      	str	r3, [sp, #32]
					break;
    9f06:	e013      	b.n	9f30 <z_prf+0x64>
					fspace = true;
    9f08:	f04f 0801 	mov.w	r8, #1
					break;
    9f0c:	e010      	b.n	9f30 <z_prf+0x64>
					falt = true;
    9f0e:	2301      	movs	r3, #1
    9f10:	9307      	str	r3, [sp, #28]
					break;
    9f12:	e00d      	b.n	9f30 <z_prf+0x64>
					pad = '0';
    9f14:	46a3      	mov	fp, r4
					break;
    9f16:	e00b      	b.n	9f30 <z_prf+0x64>
					fminus = true;
    9f18:	f04f 0901 	mov.w	r9, #1
    9f1c:	e008      	b.n	9f30 <z_prf+0x64>
			pad = ' ';		/* Default pad character    */
    9f1e:	f04f 0b20 	mov.w	fp, #32
			fminus = fplus = fspace = falt = false;
    9f22:	f04f 0800 	mov.w	r8, #0
    9f26:	f8cd 8020 	str.w	r8, [sp, #32]
    9f2a:	46c1      	mov	r9, r8
    9f2c:	f8cd 801c 	str.w	r8, [sp, #28]
			while (strchr("-+ #0", (c = *format++)) != NULL) {
    9f30:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    9f32:	1c5a      	adds	r2, r3, #1
    9f34:	920b      	str	r2, [sp, #44]	; 0x2c
    9f36:	781c      	ldrb	r4, [r3, #0]
    9f38:	4626      	mov	r6, r4
    9f3a:	4621      	mov	r1, r4
    9f3c:	48d8      	ldr	r0, [pc, #864]	; (a2a0 <z_prf+0x3d4>)
    9f3e:	f006 fac3 	bl	104c8 <strchr>
    9f42:	2800      	cmp	r0, #0
    9f44:	d066      	beq.n	a014 <z_prf+0x148>
				switch (c) {
    9f46:	2c30      	cmp	r4, #48	; 0x30
    9f48:	d8f2      	bhi.n	9f30 <z_prf+0x64>
    9f4a:	a301      	add	r3, pc, #4	; (adr r3, 9f50 <z_prf+0x84>)
    9f4c:	f853 f024 	ldr.w	pc, [r3, r4, lsl #2]
    9f50:	00009efb 	.word	0x00009efb
    9f54:	00009f31 	.word	0x00009f31
    9f58:	00009f31 	.word	0x00009f31
    9f5c:	00009f31 	.word	0x00009f31
    9f60:	00009f31 	.word	0x00009f31
    9f64:	00009f31 	.word	0x00009f31
    9f68:	00009f31 	.word	0x00009f31
    9f6c:	00009f31 	.word	0x00009f31
    9f70:	00009f31 	.word	0x00009f31
    9f74:	00009f31 	.word	0x00009f31
    9f78:	00009f31 	.word	0x00009f31
    9f7c:	00009f31 	.word	0x00009f31
    9f80:	00009f31 	.word	0x00009f31
    9f84:	00009f31 	.word	0x00009f31
    9f88:	00009f31 	.word	0x00009f31
    9f8c:	00009f31 	.word	0x00009f31
    9f90:	00009f31 	.word	0x00009f31
    9f94:	00009f31 	.word	0x00009f31
    9f98:	00009f31 	.word	0x00009f31
    9f9c:	00009f31 	.word	0x00009f31
    9fa0:	00009f31 	.word	0x00009f31
    9fa4:	00009f31 	.word	0x00009f31
    9fa8:	00009f31 	.word	0x00009f31
    9fac:	00009f31 	.word	0x00009f31
    9fb0:	00009f31 	.word	0x00009f31
    9fb4:	00009f31 	.word	0x00009f31
    9fb8:	00009f31 	.word	0x00009f31
    9fbc:	00009f31 	.word	0x00009f31
    9fc0:	00009f31 	.word	0x00009f31
    9fc4:	00009f31 	.word	0x00009f31
    9fc8:	00009f31 	.word	0x00009f31
    9fcc:	00009f31 	.word	0x00009f31
    9fd0:	00009f09 	.word	0x00009f09
    9fd4:	00009f31 	.word	0x00009f31
    9fd8:	00009f31 	.word	0x00009f31
    9fdc:	00009f0f 	.word	0x00009f0f
    9fe0:	00009f31 	.word	0x00009f31
    9fe4:	00009f31 	.word	0x00009f31
    9fe8:	00009f31 	.word	0x00009f31
    9fec:	00009f31 	.word	0x00009f31
    9ff0:	00009f31 	.word	0x00009f31
    9ff4:	00009f31 	.word	0x00009f31
    9ff8:	00009f31 	.word	0x00009f31
    9ffc:	00009f03 	.word	0x00009f03
    a000:	00009f31 	.word	0x00009f31
    a004:	00009f19 	.word	0x00009f19
    a008:	00009f31 	.word	0x00009f31
    a00c:	00009f31 	.word	0x00009f31
    a010:	00009f15 	.word	0x00009f15
			if (c == '*') {
    a014:	2c2a      	cmp	r4, #42	; 0x2a
    a016:	f000 810f 	beq.w	a238 <z_prf+0x36c>
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    a01a:	3c30      	subs	r4, #48	; 0x30
			} else if (!isdigit(c)) {
    a01c:	2c09      	cmp	r4, #9
    a01e:	f240 811a 	bls.w	a256 <z_prf+0x38a>
				width = 0;
    a022:	2400      	movs	r4, #0
			if ((unsigned) width > MAXFLD) {
    a024:	2cc8      	cmp	r4, #200	; 0xc8
    a026:	d900      	bls.n	a02a <z_prf+0x15e>
				width = MAXFLD;
    a028:	24c8      	movs	r4, #200	; 0xc8
			if (c == '.') {
    a02a:	2e2e      	cmp	r6, #46	; 0x2e
    a02c:	f000 811c 	beq.w	a268 <z_prf+0x39c>
			precision = -1;	/* No precision specified   */
    a030:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    a034:	9309      	str	r3, [sp, #36]	; 0x24
			if (strchr("hlLz", c) != NULL) {
    a036:	4631      	mov	r1, r6
    a038:	489a      	ldr	r0, [pc, #616]	; (a2a4 <z_prf+0x3d8>)
    a03a:	f006 fa45 	bl	104c8 <strchr>
    a03e:	b118      	cbz	r0, a048 <z_prf+0x17c>
				c = *format++;
    a040:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a042:	1c5a      	adds	r2, r3, #1
    a044:	920b      	str	r2, [sp, #44]	; 0x2c
    a046:	781e      	ldrb	r6, [r3, #0]
			switch (c) {
    a048:	2e78      	cmp	r6, #120	; 0x78
    a04a:	f200 823c 	bhi.w	a4c6 <z_prf+0x5fa>
    a04e:	a301      	add	r3, pc, #4	; (adr r3, a054 <z_prf+0x188>)
    a050:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
    a054:	00009efb 	.word	0x00009efb
    a058:	0000a4c7 	.word	0x0000a4c7
    a05c:	0000a4c7 	.word	0x0000a4c7
    a060:	0000a4c7 	.word	0x0000a4c7
    a064:	0000a4c7 	.word	0x0000a4c7
    a068:	0000a4c7 	.word	0x0000a4c7
    a06c:	0000a4c7 	.word	0x0000a4c7
    a070:	0000a4c7 	.word	0x0000a4c7
    a074:	0000a4c7 	.word	0x0000a4c7
    a078:	0000a4c7 	.word	0x0000a4c7
    a07c:	0000a4c7 	.word	0x0000a4c7
    a080:	0000a4c7 	.word	0x0000a4c7
    a084:	0000a4c7 	.word	0x0000a4c7
    a088:	0000a4c7 	.word	0x0000a4c7
    a08c:	0000a4c7 	.word	0x0000a4c7
    a090:	0000a4c7 	.word	0x0000a4c7
    a094:	0000a4c7 	.word	0x0000a4c7
    a098:	0000a4c7 	.word	0x0000a4c7
    a09c:	0000a4c7 	.word	0x0000a4c7
    a0a0:	0000a4c7 	.word	0x0000a4c7
    a0a4:	0000a4c7 	.word	0x0000a4c7
    a0a8:	0000a4c7 	.word	0x0000a4c7
    a0ac:	0000a4c7 	.word	0x0000a4c7
    a0b0:	0000a4c7 	.word	0x0000a4c7
    a0b4:	0000a4c7 	.word	0x0000a4c7
    a0b8:	0000a4c7 	.word	0x0000a4c7
    a0bc:	0000a4c7 	.word	0x0000a4c7
    a0c0:	0000a4c7 	.word	0x0000a4c7
    a0c4:	0000a4c7 	.word	0x0000a4c7
    a0c8:	0000a4c7 	.word	0x0000a4c7
    a0cc:	0000a4c7 	.word	0x0000a4c7
    a0d0:	0000a4c7 	.word	0x0000a4c7
    a0d4:	0000a4c7 	.word	0x0000a4c7
    a0d8:	0000a4c7 	.word	0x0000a4c7
    a0dc:	0000a4c7 	.word	0x0000a4c7
    a0e0:	0000a4c7 	.word	0x0000a4c7
    a0e4:	0000a4c7 	.word	0x0000a4c7
    a0e8:	0000a4b3 	.word	0x0000a4b3
    a0ec:	0000a4c7 	.word	0x0000a4c7
    a0f0:	0000a4c7 	.word	0x0000a4c7
    a0f4:	0000a4c7 	.word	0x0000a4c7
    a0f8:	0000a4c7 	.word	0x0000a4c7
    a0fc:	0000a4c7 	.word	0x0000a4c7
    a100:	0000a4c7 	.word	0x0000a4c7
    a104:	0000a4c7 	.word	0x0000a4c7
    a108:	0000a4c7 	.word	0x0000a4c7
    a10c:	0000a4c7 	.word	0x0000a4c7
    a110:	0000a4c7 	.word	0x0000a4c7
    a114:	0000a4c7 	.word	0x0000a4c7
    a118:	0000a4c7 	.word	0x0000a4c7
    a11c:	0000a4c7 	.word	0x0000a4c7
    a120:	0000a4c7 	.word	0x0000a4c7
    a124:	0000a4c7 	.word	0x0000a4c7
    a128:	0000a4c7 	.word	0x0000a4c7
    a12c:	0000a4c7 	.word	0x0000a4c7
    a130:	0000a4c7 	.word	0x0000a4c7
    a134:	0000a4c7 	.word	0x0000a4c7
    a138:	0000a4c7 	.word	0x0000a4c7
    a13c:	0000a4c7 	.word	0x0000a4c7
    a140:	0000a4c7 	.word	0x0000a4c7
    a144:	0000a4c7 	.word	0x0000a4c7
    a148:	0000a4c7 	.word	0x0000a4c7
    a14c:	0000a4c7 	.word	0x0000a4c7
    a150:	0000a4c7 	.word	0x0000a4c7
    a154:	0000a4c7 	.word	0x0000a4c7
    a158:	0000a4c7 	.word	0x0000a4c7
    a15c:	0000a4c7 	.word	0x0000a4c7
    a160:	0000a4c7 	.word	0x0000a4c7
    a164:	0000a4c7 	.word	0x0000a4c7
    a168:	0000a34d 	.word	0x0000a34d
    a16c:	0000a34d 	.word	0x0000a34d
    a170:	0000a34d 	.word	0x0000a34d
    a174:	0000a4c7 	.word	0x0000a4c7
    a178:	0000a4c7 	.word	0x0000a4c7
    a17c:	0000a4c7 	.word	0x0000a4c7
    a180:	0000a4c7 	.word	0x0000a4c7
    a184:	0000a4c7 	.word	0x0000a4c7
    a188:	0000a4c7 	.word	0x0000a4c7
    a18c:	0000a4c7 	.word	0x0000a4c7
    a190:	0000a4c7 	.word	0x0000a4c7
    a194:	0000a4c7 	.word	0x0000a4c7
    a198:	0000a4c7 	.word	0x0000a4c7
    a19c:	0000a4c7 	.word	0x0000a4c7
    a1a0:	0000a4c7 	.word	0x0000a4c7
    a1a4:	0000a4c7 	.word	0x0000a4c7
    a1a8:	0000a4c7 	.word	0x0000a4c7
    a1ac:	0000a4c7 	.word	0x0000a4c7
    a1b0:	0000a4c7 	.word	0x0000a4c7
    a1b4:	0000a47d 	.word	0x0000a47d
    a1b8:	0000a4c7 	.word	0x0000a4c7
    a1bc:	0000a4c7 	.word	0x0000a4c7
    a1c0:	0000a4c7 	.word	0x0000a4c7
    a1c4:	0000a4c7 	.word	0x0000a4c7
    a1c8:	0000a4c7 	.word	0x0000a4c7
    a1cc:	0000a4c7 	.word	0x0000a4c7
    a1d0:	0000a4c7 	.word	0x0000a4c7
    a1d4:	0000a4c7 	.word	0x0000a4c7
    a1d8:	0000a4c7 	.word	0x0000a4c7
    a1dc:	0000a4c7 	.word	0x0000a4c7
    a1e0:	0000a2a9 	.word	0x0000a2a9
    a1e4:	0000a2f9 	.word	0x0000a2f9
    a1e8:	0000a34d 	.word	0x0000a34d
    a1ec:	0000a34d 	.word	0x0000a34d
    a1f0:	0000a34d 	.word	0x0000a34d
    a1f4:	0000a4c7 	.word	0x0000a4c7
    a1f8:	0000a2f9 	.word	0x0000a2f9
    a1fc:	0000a4c7 	.word	0x0000a4c7
    a200:	0000a4c7 	.word	0x0000a4c7
    a204:	0000a4c7 	.word	0x0000a4c7
    a208:	0000a4c7 	.word	0x0000a4c7
    a20c:	0000a39b 	.word	0x0000a39b
    a210:	0000a3ab 	.word	0x0000a3ab
    a214:	0000a3dd 	.word	0x0000a3dd
    a218:	0000a4c7 	.word	0x0000a4c7
    a21c:	0000a4c7 	.word	0x0000a4c7
    a220:	0000a411 	.word	0x0000a411
    a224:	0000a4c7 	.word	0x0000a4c7
    a228:	0000a44d 	.word	0x0000a44d
    a22c:	0000a4c7 	.word	0x0000a4c7
    a230:	0000a4c7 	.word	0x0000a4c7
    a234:	0000a47d 	.word	0x0000a47d
				width = (int32_t) va_arg(vargs, int32_t);
    a238:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a23a:	1d1a      	adds	r2, r3, #4
    a23c:	920a      	str	r2, [sp, #40]	; 0x28
    a23e:	681c      	ldr	r4, [r3, #0]
				if (width < 0) {
    a240:	2c00      	cmp	r4, #0
    a242:	db04      	blt.n	a24e <z_prf+0x382>
				c = *format++;
    a244:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a246:	1c5a      	adds	r2, r3, #1
    a248:	920b      	str	r2, [sp, #44]	; 0x2c
    a24a:	781e      	ldrb	r6, [r3, #0]
    a24c:	e6ea      	b.n	a024 <z_prf+0x158>
					width = -width;
    a24e:	4264      	negs	r4, r4
					fminus = true;
    a250:	f04f 0901 	mov.w	r9, #1
    a254:	e7f6      	b.n	a244 <z_prf+0x378>
				width = _atoi(&format);	/* Find width */
    a256:	a80b      	add	r0, sp, #44	; 0x2c
    a258:	f006 fa6d 	bl	10736 <_atoi>
    a25c:	4604      	mov	r4, r0
				c = *format++;
    a25e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a260:	1c5a      	adds	r2, r3, #1
    a262:	920b      	str	r2, [sp, #44]	; 0x2c
    a264:	781e      	ldrb	r6, [r3, #0]
    a266:	e6dd      	b.n	a024 <z_prf+0x158>
				c = *format++;
    a268:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a26a:	1c5a      	adds	r2, r3, #1
    a26c:	920b      	str	r2, [sp, #44]	; 0x2c
    a26e:	781b      	ldrb	r3, [r3, #0]
				if (c == '*') {
    a270:	2b2a      	cmp	r3, #42	; 0x2a
    a272:	d10f      	bne.n	a294 <z_prf+0x3c8>
					precision = (int32_t)
    a274:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a276:	1d1a      	adds	r2, r3, #4
    a278:	920a      	str	r2, [sp, #40]	; 0x28
    a27a:	681b      	ldr	r3, [r3, #0]
    a27c:	9309      	str	r3, [sp, #36]	; 0x24
				if (precision > MAXFLD) {
    a27e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a280:	2bc8      	cmp	r3, #200	; 0xc8
    a282:	dd02      	ble.n	a28a <z_prf+0x3be>
					precision = -1;
    a284:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    a288:	9309      	str	r3, [sp, #36]	; 0x24
				c = *format++;
    a28a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a28c:	1c5a      	adds	r2, r3, #1
    a28e:	920b      	str	r2, [sp, #44]	; 0x2c
    a290:	781e      	ldrb	r6, [r3, #0]
    a292:	e6d0      	b.n	a036 <z_prf+0x16a>
					precision = _atoi(&format);
    a294:	a80b      	add	r0, sp, #44	; 0x2c
    a296:	f006 fa4e 	bl	10736 <_atoi>
    a29a:	9009      	str	r0, [sp, #36]	; 0x24
    a29c:	e7ef      	b.n	a27e <z_prf+0x3b2>
    a29e:	bf00      	nop
    a2a0:	00012fec 	.word	0x00012fec
    a2a4:	00012ff4 	.word	0x00012ff4
				buf[0] = (char) ((int32_t) va_arg(vargs, int32_t));
    a2a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a2aa:	1d1a      	adds	r2, r3, #4
    a2ac:	920a      	str	r2, [sp, #40]	; 0x28
    a2ae:	781b      	ldrb	r3, [r3, #0]
    a2b0:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
				buf[1] = '\0';
    a2b4:	2300      	movs	r3, #0
    a2b6:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
			prefix = 0;
    a2ba:	9307      	str	r3, [sp, #28]
				need_justifying = true;
    a2bc:	2301      	movs	r3, #1
				c = 1;
    a2be:	461e      	mov	r6, r3
			if (c >= MAXFLD + 1) {
    a2c0:	2ec8      	cmp	r6, #200	; 0xc8
    a2c2:	f300 812f 	bgt.w	a524 <z_prf+0x658>
			if (need_justifying) {
    a2c6:	2b00      	cmp	r3, #0
    a2c8:	f43f ae0a 	beq.w	9ee0 <z_prf+0x14>
				if (c < width) {
    a2cc:	42a6      	cmp	r6, r4
    a2ce:	f280 8118 	bge.w	a502 <z_prf+0x636>
					if (fminus) {
    a2d2:	f1b9 0f00 	cmp.w	r9, #0
    a2d6:	f040 8108 	bne.w	a4ea <z_prf+0x61e>
						(void) memmove((buf + (width - c)), buf, (size_t) (c
    a2da:	eba4 0806 	sub.w	r8, r4, r6
    a2de:	1c72      	adds	r2, r6, #1
    a2e0:	a90d      	add	r1, sp, #52	; 0x34
    a2e2:	eb01 0008 	add.w	r0, r1, r8
    a2e6:	f006 f90d 	bl	10504 <memmove>
						if (pad == ' ')
    a2ea:	f1bb 0f20 	cmp.w	fp, #32
    a2ee:	d001      	beq.n	a2f4 <z_prf+0x428>
    a2f0:	f8dd 901c 	ldr.w	r9, [sp, #28]
						c = width - c + prefix;
    a2f4:	44c8      	add	r8, r9
						for (i = prefix; i < c; i++)
    a2f6:	e101      	b.n	a4fc <z_prf+0x630>
				int32_temp = (int32_t) va_arg(vargs, int32_t);
    a2f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a2fa:	1d1a      	adds	r2, r3, #4
    a2fc:	920a      	str	r2, [sp, #40]	; 0x28
    a2fe:	6819      	ldr	r1, [r3, #0]
				c = _to_dec(buf, int32_temp, fplus, fspace, precision);
    a300:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a302:	9300      	str	r3, [sp, #0]
    a304:	4643      	mov	r3, r8
    a306:	9a08      	ldr	r2, [sp, #32]
    a308:	9107      	str	r1, [sp, #28]
    a30a:	a80d      	add	r0, sp, #52	; 0x34
    a30c:	f006 f9c3 	bl	10696 <_to_dec>
    a310:	4606      	mov	r6, r0
				if (fplus || fspace || (int32_temp < 0)) {
    a312:	9b08      	ldr	r3, [sp, #32]
    a314:	b943      	cbnz	r3, a328 <z_prf+0x45c>
    a316:	f1b8 0f00 	cmp.w	r8, #0
    a31a:	d10f      	bne.n	a33c <z_prf+0x470>
    a31c:	9907      	ldr	r1, [sp, #28]
    a31e:	2900      	cmp	r1, #0
    a320:	db0f      	blt.n	a342 <z_prf+0x476>
			prefix = 0;
    a322:	f8cd 801c 	str.w	r8, [sp, #28]
    a326:	e001      	b.n	a32c <z_prf+0x460>
					prefix = 1;
    a328:	2301      	movs	r3, #1
    a32a:	9307      	str	r3, [sp, #28]
				if (precision != -1) {
    a32c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a32e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    a332:	d009      	beq.n	a348 <z_prf+0x47c>
					pad = ' ';
    a334:	f04f 0b20 	mov.w	fp, #32
				need_justifying = true;
    a338:	2301      	movs	r3, #1
    a33a:	e7c1      	b.n	a2c0 <z_prf+0x3f4>
					prefix = 1;
    a33c:	2301      	movs	r3, #1
    a33e:	9307      	str	r3, [sp, #28]
    a340:	e7f4      	b.n	a32c <z_prf+0x460>
    a342:	2301      	movs	r3, #1
    a344:	9307      	str	r3, [sp, #28]
    a346:	e7f1      	b.n	a32c <z_prf+0x460>
				need_justifying = true;
    a348:	2301      	movs	r3, #1
    a34a:	e7b9      	b.n	a2c0 <z_prf+0x3f4>
				u.d = (double) va_arg(vargs, double);
    a34c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a34e:	3307      	adds	r3, #7
    a350:	f023 0307 	bic.w	r3, r3, #7
    a354:	f103 0208 	add.w	r2, r3, #8
    a358:	920a      	str	r2, [sp, #40]	; 0x28
    a35a:	e9d3 2300 	ldrd	r2, r3, [r3]
				c = _to_float(buf, double_temp, c, falt, fplus,
    a35e:	9909      	ldr	r1, [sp, #36]	; 0x24
    a360:	9104      	str	r1, [sp, #16]
    a362:	f8cd 800c 	str.w	r8, [sp, #12]
    a366:	9908      	ldr	r1, [sp, #32]
    a368:	9102      	str	r1, [sp, #8]
    a36a:	9807      	ldr	r0, [sp, #28]
    a36c:	9001      	str	r0, [sp, #4]
    a36e:	9600      	str	r6, [sp, #0]
    a370:	a80d      	add	r0, sp, #52	; 0x34
    a372:	f7ff fc05 	bl	9b80 <_to_float>
    a376:	4606      	mov	r6, r0
				if (fplus || fspace || (buf[0] == '-')) {
    a378:	9908      	ldr	r1, [sp, #32]
    a37a:	2900      	cmp	r1, #0
    a37c:	f040 80a6 	bne.w	a4cc <z_prf+0x600>
    a380:	f1b8 0f00 	cmp.w	r8, #0
    a384:	f040 80a5 	bne.w	a4d2 <z_prf+0x606>
    a388:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
    a38c:	2b2d      	cmp	r3, #45	; 0x2d
    a38e:	f000 80a3 	beq.w	a4d8 <z_prf+0x60c>
			prefix = 0;
    a392:	f8cd 801c 	str.w	r8, [sp, #28]
				need_justifying = true;
    a396:	2301      	movs	r3, #1
    a398:	e792      	b.n	a2c0 <z_prf+0x3f4>
				int32ptr_temp = (int32_t *)va_arg(vargs, int32_t *);
    a39a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a39c:	1d1a      	adds	r2, r3, #4
    a39e:	920a      	str	r2, [sp, #40]	; 0x28
    a3a0:	681b      	ldr	r3, [r3, #0]
				*int32ptr_temp = count;
    a3a2:	601d      	str	r5, [r3, #0]
			prefix = 0;
    a3a4:	2300      	movs	r3, #0
    a3a6:	9307      	str	r3, [sp, #28]
				break;
    a3a8:	e78a      	b.n	a2c0 <z_prf+0x3f4>
				uint32_temp = (uint32_t) va_arg(vargs, uint32_t);
    a3aa:	990a      	ldr	r1, [sp, #40]	; 0x28
    a3ac:	1d0b      	adds	r3, r1, #4
    a3ae:	930a      	str	r3, [sp, #40]	; 0x28
				c = _to_octal(buf, uint32_temp, falt, precision);
    a3b0:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
    a3b4:	4643      	mov	r3, r8
    a3b6:	9a07      	ldr	r2, [sp, #28]
    a3b8:	6809      	ldr	r1, [r1, #0]
    a3ba:	a80d      	add	r0, sp, #52	; 0x34
    a3bc:	f006 f951 	bl	10662 <_to_octal>
    a3c0:	4606      	mov	r6, r0
				if (precision != -1) {
    a3c2:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
    a3c6:	d005      	beq.n	a3d4 <z_prf+0x508>
			prefix = 0;
    a3c8:	2300      	movs	r3, #0
    a3ca:	9307      	str	r3, [sp, #28]
					pad = ' ';
    a3cc:	f04f 0b20 	mov.w	fp, #32
				need_justifying = true;
    a3d0:	2301      	movs	r3, #1
    a3d2:	e775      	b.n	a2c0 <z_prf+0x3f4>
			prefix = 0;
    a3d4:	2300      	movs	r3, #0
    a3d6:	9307      	str	r3, [sp, #28]
				need_justifying = true;
    a3d8:	2301      	movs	r3, #1
    a3da:	e771      	b.n	a2c0 <z_prf+0x3f4>
				uint32_temp = (uint32_t) va_arg(vargs, uint32_t);
    a3dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a3de:	1d1a      	adds	r2, r3, #4
    a3e0:	920a      	str	r2, [sp, #40]	; 0x28
    a3e2:	6819      	ldr	r1, [r3, #0]
				c = _to_hex(buf, uint32_temp, true, 8, (int) 'x');
    a3e4:	2378      	movs	r3, #120	; 0x78
    a3e6:	9300      	str	r3, [sp, #0]
    a3e8:	2308      	movs	r3, #8
    a3ea:	2201      	movs	r2, #1
    a3ec:	a80d      	add	r0, sp, #52	; 0x34
    a3ee:	f006 f91e 	bl	1062e <_to_hex>
    a3f2:	4606      	mov	r6, r0
				if (precision != -1) {
    a3f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a3f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    a3fa:	d005      	beq.n	a408 <z_prf+0x53c>
			prefix = 0;
    a3fc:	2300      	movs	r3, #0
    a3fe:	9307      	str	r3, [sp, #28]
					pad = ' ';
    a400:	f04f 0b20 	mov.w	fp, #32
				need_justifying = true;
    a404:	2301      	movs	r3, #1
    a406:	e75b      	b.n	a2c0 <z_prf+0x3f4>
			prefix = 0;
    a408:	2300      	movs	r3, #0
    a40a:	9307      	str	r3, [sp, #28]
				need_justifying = true;
    a40c:	2301      	movs	r3, #1
    a40e:	e757      	b.n	a2c0 <z_prf+0x3f4>
				cptr_temp = (char *) va_arg(vargs, char *);
    a410:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a412:	1d1a      	adds	r2, r3, #4
    a414:	920a      	str	r2, [sp, #40]	; 0x28
    a416:	6819      	ldr	r1, [r3, #0]
				for (c = 0; c < MAXFLD; c++) {
    a418:	2600      	movs	r6, #0
    a41a:	2ec7      	cmp	r6, #199	; 0xc7
    a41c:	dc03      	bgt.n	a426 <z_prf+0x55a>
					if (cptr_temp[c] == '\0') {
    a41e:	5d8b      	ldrb	r3, [r1, r6]
    a420:	b10b      	cbz	r3, a426 <z_prf+0x55a>
				for (c = 0; c < MAXFLD; c++) {
    a422:	3601      	adds	r6, #1
    a424:	e7f9      	b.n	a41a <z_prf+0x54e>
				if ((precision >= 0) && (precision < c)) {
    a426:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a428:	2b00      	cmp	r3, #0
    a42a:	db02      	blt.n	a432 <z_prf+0x566>
    a42c:	429e      	cmp	r6, r3
    a42e:	dd00      	ble.n	a432 <z_prf+0x566>
					c = precision;
    a430:	461e      	mov	r6, r3
				if (c > 0) {
    a432:	2e00      	cmp	r6, #0
    a434:	dc02      	bgt.n	a43c <z_prf+0x570>
			prefix = 0;
    a436:	2300      	movs	r3, #0
    a438:	9307      	str	r3, [sp, #28]
    a43a:	e741      	b.n	a2c0 <z_prf+0x3f4>
					memcpy(buf, cptr_temp, (size_t) c);
    a43c:	4632      	mov	r2, r6
    a43e:	a80d      	add	r0, sp, #52	; 0x34
    a440:	f006 f876 	bl	10530 <memcpy>
			prefix = 0;
    a444:	2300      	movs	r3, #0
    a446:	9307      	str	r3, [sp, #28]
					need_justifying = true;
    a448:	2301      	movs	r3, #1
    a44a:	e739      	b.n	a2c0 <z_prf+0x3f4>
				uint32_temp = (uint32_t) va_arg(vargs, uint32_t);
    a44c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a44e:	1d1a      	adds	r2, r3, #4
    a450:	920a      	str	r2, [sp, #40]	; 0x28
				c = _to_udec(buf, uint32_temp, precision);
    a452:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
    a456:	4642      	mov	r2, r8
    a458:	6819      	ldr	r1, [r3, #0]
    a45a:	a80d      	add	r0, sp, #52	; 0x34
    a45c:	f006 f915 	bl	1068a <_to_udec>
    a460:	4606      	mov	r6, r0
				if (precision != -1) {
    a462:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
    a466:	d005      	beq.n	a474 <z_prf+0x5a8>
			prefix = 0;
    a468:	2300      	movs	r3, #0
    a46a:	9307      	str	r3, [sp, #28]
					pad = ' ';
    a46c:	f04f 0b20 	mov.w	fp, #32
				need_justifying = true;
    a470:	2301      	movs	r3, #1
    a472:	e725      	b.n	a2c0 <z_prf+0x3f4>
			prefix = 0;
    a474:	2300      	movs	r3, #0
    a476:	9307      	str	r3, [sp, #28]
				need_justifying = true;
    a478:	2301      	movs	r3, #1
    a47a:	e721      	b.n	a2c0 <z_prf+0x3f4>
				uint32_temp = (uint32_t) va_arg(vargs, uint32_t);
    a47c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a47e:	1d1a      	adds	r2, r3, #4
    a480:	920a      	str	r2, [sp, #40]	; 0x28
    a482:	6819      	ldr	r1, [r3, #0]
				c = _to_hex(buf, uint32_temp, falt, precision, c);
    a484:	9600      	str	r6, [sp, #0]
    a486:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a488:	f8dd 801c 	ldr.w	r8, [sp, #28]
    a48c:	4642      	mov	r2, r8
    a48e:	a80d      	add	r0, sp, #52	; 0x34
    a490:	f006 f8cd 	bl	1062e <_to_hex>
    a494:	4606      	mov	r6, r0
				if (falt) {
    a496:	4643      	mov	r3, r8
    a498:	b10b      	cbz	r3, a49e <z_prf+0x5d2>
					prefix = 2;
    a49a:	2302      	movs	r3, #2
    a49c:	9307      	str	r3, [sp, #28]
				if (precision != -1) {
    a49e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a4a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    a4a4:	d003      	beq.n	a4ae <z_prf+0x5e2>
					pad = ' ';
    a4a6:	f04f 0b20 	mov.w	fp, #32
				need_justifying = true;
    a4aa:	2301      	movs	r3, #1
    a4ac:	e708      	b.n	a2c0 <z_prf+0x3f4>
    a4ae:	2301      	movs	r3, #1
    a4b0:	e706      	b.n	a2c0 <z_prf+0x3f4>
				if ((*func)('%', dest) == EOF) {
    a4b2:	4651      	mov	r1, sl
    a4b4:	2025      	movs	r0, #37	; 0x25
    a4b6:	47b8      	blx	r7
    a4b8:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    a4bc:	d030      	beq.n	a520 <z_prf+0x654>
				count++;
    a4be:	3501      	adds	r5, #1
			prefix = 0;
    a4c0:	2300      	movs	r3, #0
    a4c2:	9307      	str	r3, [sp, #28]
				break;
    a4c4:	e6fc      	b.n	a2c0 <z_prf+0x3f4>
			prefix = 0;
    a4c6:	2300      	movs	r3, #0
    a4c8:	9307      	str	r3, [sp, #28]
    a4ca:	e6f9      	b.n	a2c0 <z_prf+0x3f4>
					prefix = 1;
    a4cc:	2301      	movs	r3, #1
    a4ce:	9307      	str	r3, [sp, #28]
    a4d0:	e6f6      	b.n	a2c0 <z_prf+0x3f4>
    a4d2:	2301      	movs	r3, #1
    a4d4:	9307      	str	r3, [sp, #28]
    a4d6:	e6f3      	b.n	a2c0 <z_prf+0x3f4>
    a4d8:	2301      	movs	r3, #1
    a4da:	9307      	str	r3, [sp, #28]
    a4dc:	e6f0      	b.n	a2c0 <z_prf+0x3f4>
							buf[i] = ' ';
    a4de:	ab40      	add	r3, sp, #256	; 0x100
    a4e0:	4433      	add	r3, r6
    a4e2:	2220      	movs	r2, #32
    a4e4:	f803 2ccc 	strb.w	r2, [r3, #-204]
						for (i = c; i < width; i++)
    a4e8:	3601      	adds	r6, #1
    a4ea:	42a6      	cmp	r6, r4
    a4ec:	dbf7      	blt.n	a4de <z_prf+0x612>
    a4ee:	e009      	b.n	a504 <z_prf+0x638>
							buf[i] = pad;
    a4f0:	ab40      	add	r3, sp, #256	; 0x100
    a4f2:	444b      	add	r3, r9
    a4f4:	f803 bccc 	strb.w	fp, [r3, #-204]
						for (i = prefix; i < c; i++)
    a4f8:	f109 0901 	add.w	r9, r9, #1
    a4fc:	45c1      	cmp	r9, r8
    a4fe:	dbf7      	blt.n	a4f0 <z_prf+0x624>
    a500:	e000      	b.n	a504 <z_prf+0x638>
    a502:	4634      	mov	r4, r6
    a504:	ae0d      	add	r6, sp, #52	; 0x34
				for (cptr = buf; c > 0; c--, cptr++, count++) {
    a506:	2c00      	cmp	r4, #0
    a508:	f77f acea 	ble.w	9ee0 <z_prf+0x14>
					if ((*func)(*cptr, dest) == EOF) {
    a50c:	4651      	mov	r1, sl
    a50e:	7830      	ldrb	r0, [r6, #0]
    a510:	47b8      	blx	r7
    a512:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    a516:	d008      	beq.n	a52a <z_prf+0x65e>
				for (cptr = buf; c > 0; c--, cptr++, count++) {
    a518:	3c01      	subs	r4, #1
    a51a:	3601      	adds	r6, #1
    a51c:	3501      	adds	r5, #1
    a51e:	e7f2      	b.n	a506 <z_prf+0x63a>
					return EOF;
    a520:	4605      	mov	r5, r0
    a522:	e4ea      	b.n	9efa <z_prf+0x2e>
				return EOF;
    a524:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    a528:	e4e7      	b.n	9efa <z_prf+0x2e>
						return EOF;
    a52a:	4605      	mov	r5, r0
    a52c:	e4e5      	b.n	9efa <z_prf+0x2e>
    a52e:	bf00      	nop

0000a530 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    a530:	4b01      	ldr	r3, [pc, #4]	; (a538 <__stdout_hook_install+0x8>)
    a532:	6018      	str	r0, [r3, #0]
}
    a534:	4770      	bx	lr
    a536:	bf00      	nop
    a538:	20007184 	.word	0x20007184

0000a53c <snprintf>:
	return 0; /* indicate keep going so we get the total count */
}

int snprintf(char *_MLIBC_RESTRICT s, size_t len,
	     const char *_MLIBC_RESTRICT format, ...)
{
    a53c:	b40c      	push	{r2, r3}
    a53e:	b500      	push	{lr}
    a540:	b085      	sub	sp, #20

	struct emitter p;
	int     r;
	char    dummy;

	if (len == 0) {
    a542:	460b      	mov	r3, r1
    a544:	b909      	cbnz	r1, a54a <snprintf+0xe>
		s = &dummy; /* write final NUL to dummy, can't change *s */
    a546:	f10d 0003 	add.w	r0, sp, #3
	}

	p.ptr = s;
    a54a:	9001      	str	r0, [sp, #4]
	p.len = (int) len;
    a54c:	9302      	str	r3, [sp, #8]

	va_start(vargs, format);
    a54e:	ab07      	add	r3, sp, #28
    a550:	9303      	str	r3, [sp, #12]
	r = z_prf(sprintf_out, (void *) (&p), format, vargs);
    a552:	9a06      	ldr	r2, [sp, #24]
    a554:	a901      	add	r1, sp, #4
    a556:	4805      	ldr	r0, [pc, #20]	; (a56c <snprintf+0x30>)
    a558:	f7ff fcb8 	bl	9ecc <z_prf>
	va_end(vargs);

	*(p.ptr) = 0;
    a55c:	9b01      	ldr	r3, [sp, #4]
    a55e:	2200      	movs	r2, #0
    a560:	701a      	strb	r2, [r3, #0]
	return r;
}
    a562:	b005      	add	sp, #20
    a564:	f85d eb04 	ldr.w	lr, [sp], #4
    a568:	b002      	add	sp, #8
    a56a:	4770      	bx	lr
    a56c:	00010765 	.word	0x00010765

0000a570 <board_reel_board_init>:
	volatile NRF_GPIO_Type *gpio = NRF_P1;

	/*
	 * Workaround to enable peripheral voltage.
	 */
	gpio->PIN_CNF[PERIPH_PON_PIN] =
    a570:	4b06      	ldr	r3, [pc, #24]	; (a58c <board_reel_board_init+0x1c>)
    a572:	2203      	movs	r2, #3
    a574:	f8c3 2700 	str.w	r2, [r3, #1792]	; 0x700
		(GPIO_PIN_CNF_INPUT_Disconnect << GPIO_PIN_CNF_INPUT_Pos) |
		(GPIO_PIN_CNF_DIR_Output << GPIO_PIN_CNF_DIR_Pos);

	gpio->OUTSET = BIT(PERIPH_PON_PIN);
    a578:	2201      	movs	r2, #1
    a57a:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	 * to 2mA more than expected.
	 * The consumption increases because RX pin is floating
	 * (High-Impedance state of pin B from Dual-Supply Bus Transceiver).
	 */
	gpio = NRF_P0;
	gpio->PIN_CNF[DT_NORDIC_NRF_UART_0_RX_PIN] =
    a57e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    a582:	220e      	movs	r2, #14
    a584:	f8c3 2720 	str.w	r2, [r3, #1824]	; 0x720
		(GPIO_PIN_CNF_INPUT_Disconnect << GPIO_PIN_CNF_INPUT_Pos) |
		(GPIO_PIN_CNF_PULL_Pullup << GPIO_PIN_CNF_PULL_Pos) |
		(GPIO_PIN_CNF_DIR_Input << GPIO_PIN_CNF_DIR_Pos);

	return 0;
}
    a588:	2000      	movs	r0, #0
    a58a:	4770      	bx	lr
    a58c:	50000300 	.word	0x50000300

0000a590 <gpiote_channel_alloc>:
	return port->config->config_info;
}

static int gpiote_channel_alloc(u32_t abs_pin, nrf_gpiote_polarity_t polarity)
{
	for (u8_t channel = 0; channel < GPIOTE_CH_NUM; ++channel) {
    a590:	2300      	movs	r3, #0
    a592:	2b07      	cmp	r3, #7
    a594:	d842      	bhi.n	a61c <gpiote_channel_alloc+0x8c>
{
    a596:	b4f0      	push	{r4, r5, r6, r7}
    a598:	b082      	sub	sp, #8
    NRF_GPIOTE->CONFIG[idx] = 0;
}

__STATIC_INLINE bool nrf_gpiote_te_is_enabled(uint32_t idx)
{
    return (NRF_GPIOTE->CONFIG[idx] & GPIOTE_CONFIG_MODE_Msk) != GPIOTE_CONFIG_MODE_Disabled;
    a59a:	f503 72a2 	add.w	r2, r3, #324	; 0x144
    a59e:	4c21      	ldr	r4, [pc, #132]	; (a624 <gpiote_channel_alloc+0x94>)
    a5a0:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
		if (!nrf_gpiote_te_is_enabled(channel)) {
    a5a4:	f012 0f03 	tst.w	r2, #3
    a5a8:	d008      	beq.n	a5bc <gpiote_channel_alloc+0x2c>
	for (u8_t channel = 0; channel < GPIOTE_CH_NUM; ++channel) {
    a5aa:	3301      	adds	r3, #1
    a5ac:	b2db      	uxtb	r3, r3
    a5ae:	2b07      	cmp	r3, #7
    a5b0:	d9f3      	bls.n	a59a <gpiote_channel_alloc+0xa>
			nrf_gpiote_int_enable(BIT(channel));
			return 0;
		}
	}

	return -ENODEV;
    a5b2:	f06f 0012 	mvn.w	r0, #18
}
    a5b6:	b002      	add	sp, #8
    a5b8:	bcf0      	pop	{r4, r5, r6, r7}
    a5ba:	4770      	bx	lr
			nrf_gpiote_events_t evt =
    a5bc:	f103 0240 	add.w	r2, r3, #64	; 0x40
    a5c0:	0092      	lsls	r2, r2, #2
    a5c2:	b294      	uxth	r4, r2
  NRF_GPIOTE->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    a5c4:	4e17      	ldr	r6, [pc, #92]	; (a624 <gpiote_channel_alloc+0x94>)
    a5c6:	f503 75a2 	add.w	r5, r3, #324	; 0x144
    a5ca:	f856 2025 	ldr.w	r2, [r6, r5, lsl #2]
    a5ce:	f422 324f 	bic.w	r2, r2, #211968	; 0x33c00
    a5d2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    a5d6:	f846 2025 	str.w	r2, [r6, r5, lsl #2]
  NRF_GPIOTE->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    a5da:	f856 7025 	ldr.w	r7, [r6, r5, lsl #2]
    a5de:	0202      	lsls	r2, r0, #8
    a5e0:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
                              ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
    a5e4:	0409      	lsls	r1, r1, #16
    a5e6:	f401 3140 	and.w	r1, r1, #196608	; 0x30000
  NRF_GPIOTE->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    a5ea:	430a      	orrs	r2, r1
    a5ec:	433a      	orrs	r2, r7
    a5ee:	f846 2025 	str.w	r2, [r6, r5, lsl #2]
    return ((uint32_t)NRF_GPIOTE + event);
    a5f2:	f104 4280 	add.w	r2, r4, #1073741824	; 0x40000000
    a5f6:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *(uint32_t *)nrf_gpiote_event_addr_get(event) = 0;
    a5fa:	2000      	movs	r0, #0
    a5fc:	6010      	str	r0, [r2, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)nrf_gpiote_event_addr_get(event));
    a5fe:	6812      	ldr	r2, [r2, #0]
    a600:	9201      	str	r2, [sp, #4]
    (void)dummy;
    a602:	9a01      	ldr	r2, [sp, #4]
   NRF_GPIOTE->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    a604:	f856 2025 	ldr.w	r2, [r6, r5, lsl #2]
    a608:	f042 0201 	orr.w	r2, r2, #1
    a60c:	f846 2025 	str.w	r2, [r6, r5, lsl #2]
			nrf_gpiote_int_enable(BIT(channel));
    a610:	2201      	movs	r2, #1
    a612:	fa02 f303 	lsl.w	r3, r2, r3
    NRF_GPIOTE->INTENSET = mask;
    a616:	f8c6 3304 	str.w	r3, [r6, #772]	; 0x304
			return 0;
    a61a:	e7cc      	b.n	a5b6 <gpiote_channel_alloc+0x26>
	return -ENODEV;
    a61c:	f06f 0012 	mvn.w	r0, #18
}
    a620:	4770      	bx	lr
    a622:	bf00      	nop
    a624:	40006000 	.word	0x40006000

0000a628 <gpiote_channel_free>:

static void gpiote_channel_free(u32_t abs_pin)
{
    a628:	b410      	push	{r4}
    return (NRF_GPIOTE->INTENSET & mask);
    a62a:	4b13      	ldr	r3, [pc, #76]	; (a678 <gpiote_channel_free+0x50>)
    a62c:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
    a630:	b2e4      	uxtb	r4, r4
	u32_t intenset = nrf_gpiote_int_is_enabled(NRF_GPIOTE_INT_IN_MASK);

	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    a632:	2300      	movs	r3, #0
    a634:	e000      	b.n	a638 <gpiote_channel_free+0x10>
    a636:	3301      	adds	r3, #1
    a638:	2b07      	cmp	r3, #7
    a63a:	d81b      	bhi.n	a674 <gpiote_channel_free+0x4c>
    return ((NRF_GPIOTE->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    a63c:	f503 72a2 	add.w	r2, r3, #324	; 0x144
    a640:	490d      	ldr	r1, [pc, #52]	; (a678 <gpiote_channel_free+0x50>)
    a642:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    a646:	f3c2 2205 	ubfx	r2, r2, #8, #6
		if ((nrf_gpiote_event_pin_get(i) == abs_pin)
    a64a:	4290      	cmp	r0, r2
    a64c:	d1f3      	bne.n	a636 <gpiote_channel_free+0xe>
		    && (intenset & BIT(i))) {
    a64e:	fa24 f203 	lsr.w	r2, r4, r3
    a652:	f012 0f01 	tst.w	r2, #1
    a656:	d0ee      	beq.n	a636 <gpiote_channel_free+0xe>
   NRF_GPIOTE->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
    a658:	460a      	mov	r2, r1
    a65a:	f503 70a2 	add.w	r0, r3, #324	; 0x144
    a65e:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
    a662:	f021 0101 	bic.w	r1, r1, #1
    a666:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
			nrf_gpiote_event_disable(i);
			nrf_gpiote_int_disable(BIT(i));
    a66a:	2101      	movs	r1, #1
    a66c:	fa01 f303 	lsl.w	r3, r1, r3
    NRF_GPIOTE->INTENCLR = mask;
    a670:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
			return;
		}
	}
}
    a674:	bc10      	pop	{r4}
    a676:	4770      	bx	lr
    a678:	40006000 	.word	0x40006000

0000a67c <gpio_nrfx_manage_callback>:
}

static int gpio_nrfx_manage_callback(struct device *port,
				     struct gpio_callback *callback,
				     bool set)
{
    a67c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a67e:	4616      	mov	r6, r2
	return port->driver_data;
    a680:	6885      	ldr	r5, [r0, #8]
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
	__ASSERT(callback, "No callback!");
    a682:	460c      	mov	r4, r1
    a684:	b169      	cbz	r1, a6a2 <gpio_nrfx_manage_callback+0x26>
	__ASSERT(callback->handler, "No callback handler!");
    a686:	6863      	ldr	r3, [r4, #4]
    a688:	b1d3      	cbz	r3, a6c0 <gpio_nrfx_manage_callback+0x44>
	return list->head;
    a68a:	682b      	ldr	r3, [r5, #0]

	if (!sys_slist_is_empty(callbacks)) {
    a68c:	2b00      	cmp	r3, #0
    a68e:	d039      	beq.n	a704 <gpio_nrfx_manage_callback+0x88>
		if (!sys_slist_find_and_remove(callbacks, &callback->node)) {
    a690:	4621      	mov	r1, r4
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    a692:	2200      	movs	r2, #0
    a694:	2b00      	cmp	r3, #0
    a696:	d034      	beq.n	a702 <gpio_nrfx_manage_callback+0x86>
    a698:	4299      	cmp	r1, r3
    a69a:	d020      	beq.n	a6de <gpio_nrfx_manage_callback+0x62>
    a69c:	461a      	mov	r2, r3
    a69e:	681b      	ldr	r3, [r3, #0]
    a6a0:	e7f8      	b.n	a694 <gpio_nrfx_manage_callback+0x18>
	__ASSERT(callback, "No callback!");
    a6a2:	4f20      	ldr	r7, [pc, #128]	; (a724 <gpio_nrfx_manage_callback+0xa8>)
    a6a4:	231c      	movs	r3, #28
    a6a6:	463a      	mov	r2, r7
    a6a8:	491f      	ldr	r1, [pc, #124]	; (a728 <gpio_nrfx_manage_callback+0xac>)
    a6aa:	4820      	ldr	r0, [pc, #128]	; (a72c <gpio_nrfx_manage_callback+0xb0>)
    a6ac:	f005 f8e7 	bl	f87e <printk>
    a6b0:	481f      	ldr	r0, [pc, #124]	; (a730 <gpio_nrfx_manage_callback+0xb4>)
    a6b2:	f005 f8e4 	bl	f87e <printk>
    a6b6:	211c      	movs	r1, #28
    a6b8:	4638      	mov	r0, r7
    a6ba:	f005 f966 	bl	f98a <assert_post_action>
    a6be:	e7e2      	b.n	a686 <gpio_nrfx_manage_callback+0xa>
	__ASSERT(callback->handler, "No callback handler!");
    a6c0:	4f18      	ldr	r7, [pc, #96]	; (a724 <gpio_nrfx_manage_callback+0xa8>)
    a6c2:	231d      	movs	r3, #29
    a6c4:	463a      	mov	r2, r7
    a6c6:	491b      	ldr	r1, [pc, #108]	; (a734 <gpio_nrfx_manage_callback+0xb8>)
    a6c8:	4818      	ldr	r0, [pc, #96]	; (a72c <gpio_nrfx_manage_callback+0xb0>)
    a6ca:	f005 f8d8 	bl	f87e <printk>
    a6ce:	481a      	ldr	r0, [pc, #104]	; (a738 <gpio_nrfx_manage_callback+0xbc>)
    a6d0:	f005 f8d5 	bl	f87e <printk>
    a6d4:	211d      	movs	r1, #29
    a6d6:	4638      	mov	r0, r7
    a6d8:	f005 f957 	bl	f98a <assert_post_action>
    a6dc:	e7d5      	b.n	a68a <gpio_nrfx_manage_callback+0xe>
Z_GENLIST_REMOVE(slist, snode)
    a6de:	b13a      	cbz	r2, a6f0 <gpio_nrfx_manage_callback+0x74>
	return node->next;
    a6e0:	6823      	ldr	r3, [r4, #0]
	parent->next = child;
    a6e2:	6013      	str	r3, [r2, #0]
	return list->tail;
    a6e4:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
    a6e6:	429c      	cmp	r4, r3
    a6e8:	d009      	beq.n	a6fe <gpio_nrfx_manage_callback+0x82>
	parent->next = child;
    a6ea:	2300      	movs	r3, #0
    a6ec:	6023      	str	r3, [r4, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    a6ee:	e009      	b.n	a704 <gpio_nrfx_manage_callback+0x88>
	return node->next;
    a6f0:	6823      	ldr	r3, [r4, #0]
	list->head = node;
    a6f2:	602b      	str	r3, [r5, #0]
	return list->tail;
    a6f4:	686a      	ldr	r2, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
    a6f6:	4294      	cmp	r4, r2
    a6f8:	d1f7      	bne.n	a6ea <gpio_nrfx_manage_callback+0x6e>
	list->tail = node;
    a6fa:	606b      	str	r3, [r5, #4]
    a6fc:	e7f5      	b.n	a6ea <gpio_nrfx_manage_callback+0x6e>
    a6fe:	606a      	str	r2, [r5, #4]
    a700:	e7f3      	b.n	a6ea <gpio_nrfx_manage_callback+0x6e>
			if (!set) {
    a702:	b156      	cbz	r6, a71a <gpio_nrfx_manage_callback+0x9e>
				return -EINVAL;
			}
		}
	}

	if (set) {
    a704:	b166      	cbz	r6, a720 <gpio_nrfx_manage_callback+0xa4>
	return list->head;
    a706:	682b      	ldr	r3, [r5, #0]
	parent->next = child;
    a708:	6023      	str	r3, [r4, #0]
	list->head = node;
    a70a:	602c      	str	r4, [r5, #0]
	return list->tail;
    a70c:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
    a70e:	b10b      	cbz	r3, a714 <gpio_nrfx_manage_callback+0x98>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
    a710:	2000      	movs	r0, #0
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    a712:	e006      	b.n	a722 <gpio_nrfx_manage_callback+0xa6>
	list->tail = node;
    a714:	606c      	str	r4, [r5, #4]
    a716:	2000      	movs	r0, #0
    a718:	e003      	b.n	a722 <gpio_nrfx_manage_callback+0xa6>
				return -EINVAL;
    a71a:	f06f 0015 	mvn.w	r0, #21
    a71e:	e000      	b.n	a722 <gpio_nrfx_manage_callback+0xa6>
	return 0;
    a720:	2000      	movs	r0, #0
				     callback, set);
}
    a722:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a724:	00013018 	.word	0x00013018
    a728:	00013034 	.word	0x00013034
    a72c:	00010f8c 	.word	0x00010f8c
    a730:	00013040 	.word	0x00013040
    a734:	00013050 	.word	0x00013050
    a738:	00013064 	.word	0x00013064

0000a73c <gpio_nrfx_init>:
#endif
	}
}

static int gpio_nrfx_init(struct device *port)
{
    a73c:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
    a73e:	4b0b      	ldr	r3, [pc, #44]	; (a76c <gpio_nrfx_init+0x30>)
    a740:	781b      	ldrb	r3, [r3, #0]
    a742:	b10b      	cbz	r3, a748 <gpio_nrfx_init+0xc>
		irq_enable(DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ);
		nrf_gpiote_int_enable(NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
    a744:	2000      	movs	r0, #0
    a746:	bd08      	pop	{r3, pc}
		gpio_initialized = true;
    a748:	4b08      	ldr	r3, [pc, #32]	; (a76c <gpio_nrfx_init+0x30>)
    a74a:	2201      	movs	r2, #1
    a74c:	701a      	strb	r2, [r3, #0]
		IRQ_CONNECT(DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ,
    a74e:	2200      	movs	r2, #0
    a750:	2105      	movs	r1, #5
    a752:	2006      	movs	r0, #6
    a754:	f7fe feda 	bl	950c <z_irq_priority_set>
		irq_enable(DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ);
    a758:	2006      	movs	r0, #6
    a75a:	f7fe fea5 	bl	94a8 <z_arch_irq_enable>
    NRF_GPIOTE->INTENSET = mask;
    a75e:	4b04      	ldr	r3, [pc, #16]	; (a770 <gpio_nrfx_init+0x34>)
    a760:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    a764:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    a768:	e7ec      	b.n	a744 <gpio_nrfx_init+0x8>
    a76a:	bf00      	nop
    a76c:	200027d6 	.word	0x200027d6
    a770:	40006000 	.word	0x40006000

0000a774 <cfg_level_pins>:
{
    a774:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return port->driver_data;
    a778:	f8d0 8008 	ldr.w	r8, [r0, #8]
	return port->config->config_info;
    a77c:	6803      	ldr	r3, [r0, #0]
    a77e:	f8d3 9008 	ldr.w	r9, [r3, #8]
	u32_t out = data->int_en & data->pin_int_en;
    a782:	f8d8 300c 	ldr.w	r3, [r8, #12]
    a786:	f8d8 5008 	ldr.w	r5, [r8, #8]
    a78a:	401d      	ands	r5, r3
	out &= ~data->trig_edge & ~data->double_edge;
    a78c:	f8d8 3014 	ldr.w	r3, [r8, #20]
    a790:	f8d8 2018 	ldr.w	r2, [r8, #24]
    a794:	4313      	orrs	r3, r2
    a796:	ea25 0503 	bic.w	r5, r5, r3
	u32_t bit = 1U << pin;
    a79a:	2601      	movs	r6, #1
	u32_t pin = 0U;
    a79c:	2700      	movs	r7, #0
	while (level_pins) {
    a79e:	e025      	b.n	a7ec <cfg_level_pins+0x78>
		return NRF_GPIO_PIN_SENSE_HIGH;
    a7a0:	f04f 0a02 	mov.w	sl, #2
    a7a4:	e036      	b.n	a814 <cfg_level_pins+0xa0>
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
    a7a6:	f8df b090 	ldr.w	fp, [pc, #144]	; a838 <cfg_level_pins+0xc4>
    a7aa:	f44f 73e2 	mov.w	r3, #452	; 0x1c4
    a7ae:	465a      	mov	r2, fp
    a7b0:	491e      	ldr	r1, [pc, #120]	; (a82c <cfg_level_pins+0xb8>)
    a7b2:	481f      	ldr	r0, [pc, #124]	; (a830 <cfg_level_pins+0xbc>)
    a7b4:	f005 f863 	bl	f87e <printk>
    a7b8:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
    a7bc:	4658      	mov	r0, fp
    a7be:	f005 f8e4 	bl	f98a <assert_post_action>
    a7c2:	e02b      	b.n	a81c <cfg_level_pins+0xa8>
        return NRF_P0;
    a7c4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
__STATIC_INLINE void nrf_gpio_cfg_sense_set(uint32_t pin_number, nrf_gpio_pin_sense_t sense_config)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);

    /*lint -e{845} // A zero has been given as right argument to operator '|'" */
    reg->PIN_CNF[pin_number] &= ~GPIO_PIN_CNF_SENSE_Msk;
    a7c8:	f504 73e0 	add.w	r3, r4, #448	; 0x1c0
    a7cc:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    a7d0:	f421 3140 	bic.w	r1, r1, #196608	; 0x30000
    a7d4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    reg->PIN_CNF[pin_number] |= (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    a7d8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    a7dc:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
    a7e0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			level_pins &= ~bit;
    a7e4:	ea25 0506 	bic.w	r5, r5, r6
		++pin;
    a7e8:	3701      	adds	r7, #1
		bit <<= 1;
    a7ea:	0076      	lsls	r6, r6, #1
	while (level_pins) {
    a7ec:	b1e5      	cbz	r5, a828 <cfg_level_pins+0xb4>
		if (level_pins & bit) {
    a7ee:	422e      	tst	r6, r5
    a7f0:	d0fa      	beq.n	a7e8 <cfg_level_pins+0x74>
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    a7f2:	f899 4004 	ldrb.w	r4, [r9, #4]
    a7f6:	f007 031f 	and.w	r3, r7, #31
    a7fa:	ea43 1444 	orr.w	r4, r3, r4, lsl #5
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
    a7fe:	f8d8 3010 	ldr.w	r3, [r8, #16]
    a802:	f8d8 201c 	ldr.w	r2, [r8, #28]
    a806:	4053      	eors	r3, r2
    a808:	40fb      	lsrs	r3, r7
    a80a:	f013 0f01 	tst.w	r3, #1
    a80e:	d1c7      	bne.n	a7a0 <cfg_level_pins+0x2c>
	return NRF_GPIO_PIN_SENSE_LOW;
    a810:	f04f 0a03 	mov.w	sl, #3
			nrf_gpio_cfg_sense_set(abs_pin, sense);
    a814:	fa5f fa8a 	uxtb.w	sl, sl
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
    a818:	2c2f      	cmp	r4, #47	; 0x2f
    a81a:	d8c4      	bhi.n	a7a6 <cfg_level_pins+0x32>
    if (*p_pin < P0_PIN_NUM)
    a81c:	2c1f      	cmp	r4, #31
    a81e:	d9d1      	bls.n	a7c4 <cfg_level_pins+0x50>
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
    a820:	f004 041f 	and.w	r4, r4, #31
        return NRF_P1;
    a824:	4a03      	ldr	r2, [pc, #12]	; (a834 <cfg_level_pins+0xc0>)
    a826:	e7cf      	b.n	a7c8 <cfg_level_pins+0x54>
}
    a828:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a82c:	0001138c 	.word	0x0001138c
    a830:	00010f8c 	.word	0x00010f8c
    a834:	50000300 	.word	0x50000300
    a838:	00011364 	.word	0x00011364

0000a83c <check_level_trigger_pins>:
{
    a83c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return port->driver_data;
    a840:	6883      	ldr	r3, [r0, #8]
	return port->config->config_info;
    a842:	6802      	ldr	r2, [r0, #0]
    a844:	f8d2 9008 	ldr.w	r9, [r2, #8]
	u32_t out = data->int_en & data->pin_int_en;
    a848:	68dd      	ldr	r5, [r3, #12]
    a84a:	689a      	ldr	r2, [r3, #8]
    a84c:	4015      	ands	r5, r2
	out &= ~data->trig_edge & ~data->double_edge;
    a84e:	695a      	ldr	r2, [r3, #20]
    a850:	6999      	ldr	r1, [r3, #24]
    a852:	430a      	orrs	r2, r1
    a854:	ea25 0502 	bic.w	r5, r5, r2
	u32_t port_in = nrf_gpio_port_in_read(cfg->port);
    a858:	f8d9 2000 	ldr.w	r2, [r9]
}


__STATIC_INLINE uint32_t nrf_gpio_port_in_read(NRF_GPIO_Type const * p_reg)
{
    return p_reg->IN;
    a85c:	f8d2 1510 	ldr.w	r1, [r2, #1296]	; 0x510
	u32_t pin_states = ~(port_in ^ data->inverted ^ data->active_level);
    a860:	69da      	ldr	r2, [r3, #28]
    a862:	ea82 0801 	eor.w	r8, r2, r1
    a866:	691a      	ldr	r2, [r3, #16]
    a868:	ea88 0802 	eor.w	r8, r8, r2
	u32_t out = pin_states & level_pins;
    a86c:	ea25 0808 	bic.w	r8, r5, r8
	u32_t bit = 1U << pin;
    a870:	2601      	movs	r6, #1
	u32_t pin = 0U;
    a872:	2700      	movs	r7, #0
	while (level_pins) {
    a874:	e020      	b.n	a8b8 <check_level_trigger_pins+0x7c>
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
    a876:	f8df a074 	ldr.w	sl, [pc, #116]	; a8ec <check_level_trigger_pins+0xb0>
    a87a:	f44f 73e2 	mov.w	r3, #452	; 0x1c4
    a87e:	4652      	mov	r2, sl
    a880:	4917      	ldr	r1, [pc, #92]	; (a8e0 <check_level_trigger_pins+0xa4>)
    a882:	4818      	ldr	r0, [pc, #96]	; (a8e4 <check_level_trigger_pins+0xa8>)
    a884:	f004 fffb 	bl	f87e <printk>
    a888:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
    a88c:	4650      	mov	r0, sl
    a88e:	f005 f87c 	bl	f98a <assert_post_action>
    a892:	e01c      	b.n	a8ce <check_level_trigger_pins+0x92>
        return NRF_P0;
    a894:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] &= ~GPIO_PIN_CNF_SENSE_Msk;
    a898:	f504 73e0 	add.w	r3, r4, #448	; 0x1c0
    a89c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    a8a0:	f421 3140 	bic.w	r1, r1, #196608	; 0x30000
    a8a4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    reg->PIN_CNF[pin_number] |= (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    a8a8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    a8ac:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			level_pins &= ~bit;
    a8b0:	ea25 0506 	bic.w	r5, r5, r6
		++pin;
    a8b4:	3701      	adds	r7, #1
		bit <<= 1;
    a8b6:	0076      	lsls	r6, r6, #1
	while (level_pins) {
    a8b8:	b17d      	cbz	r5, a8da <check_level_trigger_pins+0x9e>
		if (level_pins & bit) {
    a8ba:	4235      	tst	r5, r6
    a8bc:	d0fa      	beq.n	a8b4 <check_level_trigger_pins+0x78>
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    a8be:	f899 4004 	ldrb.w	r4, [r9, #4]
    a8c2:	f007 031f 	and.w	r3, r7, #31
    a8c6:	ea43 1444 	orr.w	r4, r3, r4, lsl #5
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
    a8ca:	2c2f      	cmp	r4, #47	; 0x2f
    a8cc:	d8d3      	bhi.n	a876 <check_level_trigger_pins+0x3a>
    if (*p_pin < P0_PIN_NUM)
    a8ce:	2c1f      	cmp	r4, #31
    a8d0:	d9e0      	bls.n	a894 <check_level_trigger_pins+0x58>
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
    a8d2:	f004 041f 	and.w	r4, r4, #31
        return NRF_P1;
    a8d6:	4a04      	ldr	r2, [pc, #16]	; (a8e8 <check_level_trigger_pins+0xac>)
    a8d8:	e7de      	b.n	a898 <check_level_trigger_pins+0x5c>
}
    a8da:	4640      	mov	r0, r8
    a8dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    a8e0:	0001138c 	.word	0x0001138c
    a8e4:	00010f8c 	.word	0x00010f8c
    a8e8:	50000300 	.word	0x50000300
    a8ec:	00011364 	.word	0x00011364

0000a8f0 <gpiote_pin_int_cfg>:
{
    a8f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a8f2:	460d      	mov	r5, r1
	return port->driver_data;
    a8f4:	6886      	ldr	r6, [r0, #8]
	return port->config->config_info;
    a8f6:	6803      	ldr	r3, [r0, #0]
    a8f8:	689b      	ldr	r3, [r3, #8]
	u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    a8fa:	791b      	ldrb	r3, [r3, #4]
    a8fc:	f001 041f 	and.w	r4, r1, #31
    a900:	ea44 1443 	orr.w	r4, r4, r3, lsl #5
	gpiote_channel_free(abs_pin);
    a904:	4620      	mov	r0, r4
    a906:	f7ff fe8f 	bl	a628 <gpiote_channel_free>
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
    a90a:	2c2f      	cmp	r4, #47	; 0x2f
    a90c:	d805      	bhi.n	a91a <gpiote_pin_int_cfg+0x2a>
    if (*p_pin < P0_PIN_NUM)
    a90e:	2c1f      	cmp	r4, #31
    a910:	d911      	bls.n	a936 <gpiote_pin_int_cfg+0x46>
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
    a912:	f004 031f 	and.w	r3, r4, #31
        return NRF_P1;
    a916:	4a40      	ldr	r2, [pc, #256]	; (aa18 <gpiote_pin_int_cfg+0x128>)
    a918:	e010      	b.n	a93c <gpiote_pin_int_cfg+0x4c>
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
    a91a:	4f40      	ldr	r7, [pc, #256]	; (aa1c <gpiote_pin_int_cfg+0x12c>)
    a91c:	f44f 73e2 	mov.w	r3, #452	; 0x1c4
    a920:	463a      	mov	r2, r7
    a922:	493f      	ldr	r1, [pc, #252]	; (aa20 <gpiote_pin_int_cfg+0x130>)
    a924:	483f      	ldr	r0, [pc, #252]	; (aa24 <gpiote_pin_int_cfg+0x134>)
    a926:	f004 ffaa 	bl	f87e <printk>
    a92a:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
    a92e:	4638      	mov	r0, r7
    a930:	f005 f82b 	bl	f98a <assert_post_action>
    a934:	e7eb      	b.n	a90e <gpiote_pin_int_cfg+0x1e>
    if (*p_pin < P0_PIN_NUM)
    a936:	4623      	mov	r3, r4
        return NRF_P0;
    a938:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] &= ~GPIO_PIN_CNF_SENSE_Msk;
    a93c:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    a940:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    a944:	f421 3140 	bic.w	r1, r1, #196608	; 0x30000
    a948:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    reg->PIN_CNF[pin_number] |= (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    a94c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    a950:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	if ((data->pin_int_en & BIT(pin)) && (data->int_en & BIT(pin))) {
    a954:	68b3      	ldr	r3, [r6, #8]
    a956:	40eb      	lsrs	r3, r5
    a958:	f013 0f01 	tst.w	r3, #1
    a95c:	d058      	beq.n	aa10 <gpiote_pin_int_cfg+0x120>
    a95e:	68f3      	ldr	r3, [r6, #12]
    a960:	40eb      	lsrs	r3, r5
    a962:	f013 0f01 	tst.w	r3, #1
    a966:	d055      	beq.n	aa14 <gpiote_pin_int_cfg+0x124>
		if (data->trig_edge & BIT(pin)) {
    a968:	6973      	ldr	r3, [r6, #20]
    a96a:	40eb      	lsrs	r3, r5
    a96c:	f013 0f01 	tst.w	r3, #1
    a970:	d01a      	beq.n	a9a8 <gpiote_pin_int_cfg+0xb8>
			if (data->double_edge & BIT(pin)) {
    a972:	69b3      	ldr	r3, [r6, #24]
    a974:	40eb      	lsrs	r3, r5
    a976:	f013 0f01 	tst.w	r3, #1
    a97a:	d10e      	bne.n	a99a <gpiote_pin_int_cfg+0xaa>
			} else if (((data->active_level & BIT(pin)) != 0U)
    a97c:	6933      	ldr	r3, [r6, #16]
    a97e:	40eb      	lsrs	r3, r5
    a980:	f003 0301 	and.w	r3, r3, #1
    a984:	b2da      	uxtb	r2, r3
				   ^ ((BIT(pin) & data->inverted) != 0)) {
    a986:	69f3      	ldr	r3, [r6, #28]
    a988:	fa23 f505 	lsr.w	r5, r3, r5
    a98c:	f005 0501 	and.w	r5, r5, #1
			} else if (((data->active_level & BIT(pin)) != 0U)
    a990:	b2ed      	uxtb	r5, r5
    a992:	42aa      	cmp	r2, r5
    a994:	d006      	beq.n	a9a4 <gpiote_pin_int_cfg+0xb4>
				pol = NRF_GPIOTE_POLARITY_LOTOHI;
    a996:	2101      	movs	r1, #1
    a998:	e000      	b.n	a99c <gpiote_pin_int_cfg+0xac>
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
    a99a:	2103      	movs	r1, #3
			res = gpiote_channel_alloc(abs_pin, pol);
    a99c:	4620      	mov	r0, r4
    a99e:	f7ff fdf7 	bl	a590 <gpiote_channel_alloc>
    a9a2:	e036      	b.n	aa12 <gpiote_pin_int_cfg+0x122>
				pol = NRF_GPIOTE_POLARITY_HITOLO;
    a9a4:	2102      	movs	r1, #2
    a9a6:	e7f9      	b.n	a99c <gpiote_pin_int_cfg+0xac>
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
    a9a8:	6933      	ldr	r3, [r6, #16]
    a9aa:	69f2      	ldr	r2, [r6, #28]
    a9ac:	4053      	eors	r3, r2
    a9ae:	fa23 f505 	lsr.w	r5, r3, r5
    a9b2:	f015 0f01 	tst.w	r5, #1
    a9b6:	d118      	bne.n	a9ea <gpiote_pin_int_cfg+0xfa>
	return NRF_GPIO_PIN_SENSE_LOW;
    a9b8:	2203      	movs	r2, #3
			nrf_gpio_cfg_sense_set(abs_pin, sense);
    a9ba:	b2d5      	uxtb	r5, r2
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
    a9bc:	2c2f      	cmp	r4, #47	; 0x2f
    a9be:	d816      	bhi.n	a9ee <gpiote_pin_int_cfg+0xfe>
    if (*p_pin < P0_PIN_NUM)
    a9c0:	2c1f      	cmp	r4, #31
    a9c2:	d922      	bls.n	aa0a <gpiote_pin_int_cfg+0x11a>
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
    a9c4:	f004 041f 	and.w	r4, r4, #31
        return NRF_P1;
    a9c8:	4b13      	ldr	r3, [pc, #76]	; (aa18 <gpiote_pin_int_cfg+0x128>)
    reg->PIN_CNF[pin_number] &= ~GPIO_PIN_CNF_SENSE_Msk;
    a9ca:	f504 74e0 	add.w	r4, r4, #448	; 0x1c0
    a9ce:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
    a9d2:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    a9d6:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
    reg->PIN_CNF[pin_number] |= (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    a9da:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
    a9de:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
    a9e2:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
	int res = 0;
    a9e6:	2000      	movs	r0, #0
    a9e8:	e013      	b.n	aa12 <gpiote_pin_int_cfg+0x122>
		return NRF_GPIO_PIN_SENSE_HIGH;
    a9ea:	2202      	movs	r2, #2
    a9ec:	e7e5      	b.n	a9ba <gpiote_pin_int_cfg+0xca>
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
    a9ee:	4e0b      	ldr	r6, [pc, #44]	; (aa1c <gpiote_pin_int_cfg+0x12c>)
    a9f0:	f44f 73e2 	mov.w	r3, #452	; 0x1c4
    a9f4:	4632      	mov	r2, r6
    a9f6:	490a      	ldr	r1, [pc, #40]	; (aa20 <gpiote_pin_int_cfg+0x130>)
    a9f8:	480a      	ldr	r0, [pc, #40]	; (aa24 <gpiote_pin_int_cfg+0x134>)
    a9fa:	f004 ff40 	bl	f87e <printk>
    a9fe:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
    aa02:	4630      	mov	r0, r6
    aa04:	f004 ffc1 	bl	f98a <assert_post_action>
    aa08:	e7da      	b.n	a9c0 <gpiote_pin_int_cfg+0xd0>
        return NRF_P0;
    aa0a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    aa0e:	e7dc      	b.n	a9ca <gpiote_pin_int_cfg+0xda>
	int res = 0;
    aa10:	2000      	movs	r0, #0
}
    aa12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int res = 0;
    aa14:	2000      	movs	r0, #0
	return res;
    aa16:	e7fc      	b.n	aa12 <gpiote_pin_int_cfg+0x122>
    aa18:	50000300 	.word	0x50000300
    aa1c:	00011364 	.word	0x00011364
    aa20:	0001138c 	.word	0x0001138c
    aa24:	00010f8c 	.word	0x00010f8c

0000aa28 <gpio_nrfx_config>:
{
    aa28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    aa2c:	b085      	sub	sp, #20
	return port->driver_data;
    aa2e:	6884      	ldr	r4, [r0, #8]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
    aa30:	f403 4570 	and.w	r5, r3, #61440	; 0xf000
    aa34:	f5b5 4f80 	cmp.w	r5, #16384	; 0x4000
    aa38:	d038      	beq.n	aaac <gpio_nrfx_config+0x84>
    aa3a:	dd21      	ble.n	aa80 <gpio_nrfx_config+0x58>
    aa3c:	f5b5 4fe0 	cmp.w	r5, #28672	; 0x7000
    aa40:	d040      	beq.n	aac4 <gpio_nrfx_config+0x9c>
    aa42:	dd2a      	ble.n	aa9a <gpio_nrfx_config+0x72>
    aa44:	f5b5 4f40 	cmp.w	r5, #49152	; 0xc000
    aa48:	d03f      	beq.n	aaca <gpio_nrfx_config+0xa2>
    aa4a:	f5b5 4f50 	cmp.w	r5, #53248	; 0xd000
    aa4e:	f040 80cb 	bne.w	abe8 <gpio_nrfx_config+0x1c0>
		drive = NRF_GPIO_PIN_H0D1;
    aa52:	f04f 0a07 	mov.w	sl, #7
	if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_UP) {
    aa56:	f403 7540 	and.w	r5, r3, #768	; 0x300
    aa5a:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
    aa5e:	d03a      	beq.n	aad6 <gpio_nrfx_config+0xae>
	} else if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_DOWN) {
    aa60:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
    aa64:	d034      	beq.n	aad0 <gpio_nrfx_config+0xa8>
		pull = NRF_GPIO_PIN_NOPULL;
    aa66:	2500      	movs	r5, #0
    aa68:	9503      	str	r5, [sp, #12]
    aa6a:	4698      	mov	r8, r3
    aa6c:	4681      	mov	r9, r0
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
    aa6e:	f003 0301 	and.w	r3, r3, #1
    aa72:	9302      	str	r3, [sp, #8]
    aa74:	469b      	mov	fp, r3
	if (access_op == GPIO_ACCESS_BY_PORT) {
    aa76:	2901      	cmp	r1, #1
    aa78:	d030      	beq.n	aadc <gpio_nrfx_config+0xb4>
		from_pin = pin;
    aa7a:	b2d6      	uxtb	r6, r2
		to_pin   = pin;
    aa7c:	9601      	str	r6, [sp, #4]
    aa7e:	e07e      	b.n	ab7e <gpio_nrfx_config+0x156>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
    aa80:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
    aa84:	d015      	beq.n	aab2 <gpio_nrfx_config+0x8a>
    aa86:	f5b5 5f40 	cmp.w	r5, #12288	; 0x3000
    aa8a:	d015      	beq.n	aab8 <gpio_nrfx_config+0x90>
    aa8c:	b1bd      	cbz	r5, aabe <gpio_nrfx_config+0x96>
		return -EINVAL;
    aa8e:	f06f 0315 	mvn.w	r3, #21
}
    aa92:	4618      	mov	r0, r3
    aa94:	b005      	add	sp, #20
    aa96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
    aa9a:	f5b5 4fa0 	cmp.w	r5, #20480	; 0x5000
    aa9e:	d102      	bne.n	aaa6 <gpio_nrfx_config+0x7e>
		drive = NRF_GPIO_PIN_H0H1;
    aaa0:	f04f 0a03 	mov.w	sl, #3
    aaa4:	e7d7      	b.n	aa56 <gpio_nrfx_config+0x2e>
		return -EINVAL;
    aaa6:	f06f 0315 	mvn.w	r3, #21
    aaaa:	e7f2      	b.n	aa92 <gpio_nrfx_config+0x6a>
		drive = NRF_GPIO_PIN_S0H1;
    aaac:	f04f 0a02 	mov.w	sl, #2
    aab0:	e7d1      	b.n	aa56 <gpio_nrfx_config+0x2e>
		drive = NRF_GPIO_PIN_H0S1;
    aab2:	f04f 0a01 	mov.w	sl, #1
    aab6:	e7ce      	b.n	aa56 <gpio_nrfx_config+0x2e>
		drive = NRF_GPIO_PIN_D0S1;
    aab8:	f04f 0a04 	mov.w	sl, #4
    aabc:	e7cb      	b.n	aa56 <gpio_nrfx_config+0x2e>
		drive = NRF_GPIO_PIN_S0S1;
    aabe:	f04f 0a00 	mov.w	sl, #0
    aac2:	e7c8      	b.n	aa56 <gpio_nrfx_config+0x2e>
		drive = NRF_GPIO_PIN_D0H1;
    aac4:	f04f 0a05 	mov.w	sl, #5
    aac8:	e7c5      	b.n	aa56 <gpio_nrfx_config+0x2e>
		drive = NRF_GPIO_PIN_S0D1;
    aaca:	f04f 0a06 	mov.w	sl, #6
    aace:	e7c2      	b.n	aa56 <gpio_nrfx_config+0x2e>
		pull = NRF_GPIO_PIN_PULLDOWN;
    aad0:	2501      	movs	r5, #1
    aad2:	9503      	str	r5, [sp, #12]
    aad4:	e7c9      	b.n	aa6a <gpio_nrfx_config+0x42>
		pull = NRF_GPIO_PIN_PULLUP;
    aad6:	2503      	movs	r5, #3
    aad8:	9503      	str	r5, [sp, #12]
    aada:	e7c6      	b.n	aa6a <gpio_nrfx_config+0x42>
		to_pin   = 31U;
    aadc:	231f      	movs	r3, #31
    aade:	9301      	str	r3, [sp, #4]
		from_pin = 0U;
    aae0:	2600      	movs	r6, #0
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
    aae2:	e04c      	b.n	ab7e <gpio_nrfx_config+0x156>
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
    aae4:	f44f 73e2 	mov.w	r3, #452	; 0x1c4
    aae8:	4a41      	ldr	r2, [pc, #260]	; (abf0 <gpio_nrfx_config+0x1c8>)
    aaea:	4942      	ldr	r1, [pc, #264]	; (abf4 <gpio_nrfx_config+0x1cc>)
    aaec:	4842      	ldr	r0, [pc, #264]	; (abf8 <gpio_nrfx_config+0x1d0>)
    aaee:	f004 fec6 	bl	f87e <printk>
    aaf2:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
    aaf6:	483e      	ldr	r0, [pc, #248]	; (abf0 <gpio_nrfx_config+0x1c8>)
    aaf8:	f004 ff47 	bl	f98a <assert_post_action>
    aafc:	e04d      	b.n	ab9a <gpio_nrfx_config+0x172>
        return NRF_P0;
    aafe:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
                               | ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos)
    ab02:	9b02      	ldr	r3, [sp, #8]
    ab04:	ea43 034b 	orr.w	r3, r3, fp, lsl #1
                               | ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)
    ab08:	9903      	ldr	r1, [sp, #12]
    ab0a:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
    ab0e:	ea43 230a 	orr.w	r3, r3, sl, lsl #8
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    ab12:	f505 75e0 	add.w	r5, r5, #448	; 0x1c0
    ab16:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
		WRITE_BIT(data->pin_int_en, curr_pin, flags & GPIO_INT);
    ab1a:	f018 0f02 	tst.w	r8, #2
    ab1e:	d042      	beq.n	aba6 <gpio_nrfx_config+0x17e>
    ab20:	68a3      	ldr	r3, [r4, #8]
    ab22:	2201      	movs	r2, #1
    ab24:	40ba      	lsls	r2, r7
    ab26:	4313      	orrs	r3, r2
    ab28:	60a3      	str	r3, [r4, #8]
		WRITE_BIT(data->trig_edge, curr_pin, flags & GPIO_INT_EDGE);
    ab2a:	f018 0f20 	tst.w	r8, #32
    ab2e:	d040      	beq.n	abb2 <gpio_nrfx_config+0x18a>
    ab30:	6963      	ldr	r3, [r4, #20]
    ab32:	2201      	movs	r2, #1
    ab34:	40ba      	lsls	r2, r7
    ab36:	4313      	orrs	r3, r2
    ab38:	6163      	str	r3, [r4, #20]
		WRITE_BIT(data->double_edge, curr_pin,
    ab3a:	f018 0f40 	tst.w	r8, #64	; 0x40
    ab3e:	d03e      	beq.n	abbe <gpio_nrfx_config+0x196>
    ab40:	69a3      	ldr	r3, [r4, #24]
    ab42:	2201      	movs	r2, #1
    ab44:	40ba      	lsls	r2, r7
    ab46:	4313      	orrs	r3, r2
    ab48:	61a3      	str	r3, [r4, #24]
		WRITE_BIT(data->active_level, curr_pin,
    ab4a:	f018 0f04 	tst.w	r8, #4
    ab4e:	d03c      	beq.n	abca <gpio_nrfx_config+0x1a2>
    ab50:	6923      	ldr	r3, [r4, #16]
    ab52:	2201      	movs	r2, #1
    ab54:	40ba      	lsls	r2, r7
    ab56:	4313      	orrs	r3, r2
    ab58:	6123      	str	r3, [r4, #16]
		WRITE_BIT(data->inverted, curr_pin, flags & GPIO_POL_INV);
    ab5a:	f018 0f80 	tst.w	r8, #128	; 0x80
    ab5e:	d03a      	beq.n	abd6 <gpio_nrfx_config+0x1ae>
    ab60:	69e3      	ldr	r3, [r4, #28]
    ab62:	2201      	movs	r2, #1
    ab64:	fa02 f707 	lsl.w	r7, r2, r7
    ab68:	431f      	orrs	r7, r3
    ab6a:	61e7      	str	r7, [r4, #28]
		res = gpiote_pin_int_cfg(port, curr_pin);
    ab6c:	4631      	mov	r1, r6
    ab6e:	4648      	mov	r0, r9
    ab70:	f7ff febe 	bl	a8f0 <gpiote_pin_int_cfg>
		if (res != 0) {
    ab74:	4603      	mov	r3, r0
    ab76:	2800      	cmp	r0, #0
    ab78:	d18b      	bne.n	aa92 <gpio_nrfx_config+0x6a>
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
    ab7a:	3601      	adds	r6, #1
    ab7c:	b2f6      	uxtb	r6, r6
    ab7e:	9b01      	ldr	r3, [sp, #4]
    ab80:	42b3      	cmp	r3, r6
    ab82:	d32f      	bcc.n	abe4 <gpio_nrfx_config+0x1bc>
	return port->config->config_info;
    ab84:	f8d9 3000 	ldr.w	r3, [r9]
    ab88:	689b      	ldr	r3, [r3, #8]
		nrf_gpio_cfg(NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num,
    ab8a:	791b      	ldrb	r3, [r3, #4]
    ab8c:	4637      	mov	r7, r6
    ab8e:	f006 051f 	and.w	r5, r6, #31
    ab92:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
    ab96:	2d2f      	cmp	r5, #47	; 0x2f
    ab98:	d8a4      	bhi.n	aae4 <gpio_nrfx_config+0xbc>
    if (*p_pin < P0_PIN_NUM)
    ab9a:	2d1f      	cmp	r5, #31
    ab9c:	d9af      	bls.n	aafe <gpio_nrfx_config+0xd6>
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
    ab9e:	f005 051f 	and.w	r5, r5, #31
        return NRF_P1;
    aba2:	4a16      	ldr	r2, [pc, #88]	; (abfc <gpio_nrfx_config+0x1d4>)
    aba4:	e7ad      	b.n	ab02 <gpio_nrfx_config+0xda>
		WRITE_BIT(data->pin_int_en, curr_pin, flags & GPIO_INT);
    aba6:	68a3      	ldr	r3, [r4, #8]
    aba8:	2201      	movs	r2, #1
    abaa:	40ba      	lsls	r2, r7
    abac:	ea23 0302 	bic.w	r3, r3, r2
    abb0:	e7ba      	b.n	ab28 <gpio_nrfx_config+0x100>
		WRITE_BIT(data->trig_edge, curr_pin, flags & GPIO_INT_EDGE);
    abb2:	6963      	ldr	r3, [r4, #20]
    abb4:	2201      	movs	r2, #1
    abb6:	40ba      	lsls	r2, r7
    abb8:	ea23 0302 	bic.w	r3, r3, r2
    abbc:	e7bc      	b.n	ab38 <gpio_nrfx_config+0x110>
		WRITE_BIT(data->double_edge, curr_pin,
    abbe:	69a3      	ldr	r3, [r4, #24]
    abc0:	2201      	movs	r2, #1
    abc2:	40ba      	lsls	r2, r7
    abc4:	ea23 0302 	bic.w	r3, r3, r2
    abc8:	e7be      	b.n	ab48 <gpio_nrfx_config+0x120>
		WRITE_BIT(data->active_level, curr_pin,
    abca:	6923      	ldr	r3, [r4, #16]
    abcc:	2201      	movs	r2, #1
    abce:	40ba      	lsls	r2, r7
    abd0:	ea23 0302 	bic.w	r3, r3, r2
    abd4:	e7c0      	b.n	ab58 <gpio_nrfx_config+0x130>
		WRITE_BIT(data->inverted, curr_pin, flags & GPIO_POL_INV);
    abd6:	69e3      	ldr	r3, [r4, #28]
    abd8:	2201      	movs	r2, #1
    abda:	fa02 f707 	lsl.w	r7, r2, r7
    abde:	ea23 0707 	bic.w	r7, r3, r7
    abe2:	e7c2      	b.n	ab6a <gpio_nrfx_config+0x142>
	return 0;
    abe4:	2300      	movs	r3, #0
    abe6:	e754      	b.n	aa92 <gpio_nrfx_config+0x6a>
		return -EINVAL;
    abe8:	f06f 0315 	mvn.w	r3, #21
    abec:	e751      	b.n	aa92 <gpio_nrfx_config+0x6a>
    abee:	bf00      	nop
    abf0:	00011364 	.word	0x00011364
    abf4:	0001138c 	.word	0x0001138c
    abf8:	00010f8c 	.word	0x00010f8c
    abfc:	50000300 	.word	0x50000300

0000ac00 <gpiote_event_handler>:
{
    ac00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ac04:	b084      	sub	sp, #16
	u32_t fired_triggers[GPIO_COUNT] = {0};
    ac06:	2300      	movs	r3, #0
    ac08:	9302      	str	r3, [sp, #8]
    ac0a:	9303      	str	r3, [sp, #12]
    return (*(uint32_t *)nrf_gpiote_event_addr_get(event) == 0x1UL) ? true : false;
    ac0c:	4b5b      	ldr	r3, [pc, #364]	; (ad7c <gpiote_event_handler+0x17c>)
    ac0e:	681c      	ldr	r4, [r3, #0]
	if (port_event) {
    ac10:	2c01      	cmp	r4, #1
    ac12:	d001      	beq.n	ac18 <gpiote_event_handler+0x18>
{
    ac14:	2200      	movs	r2, #0
    ac16:	e011      	b.n	ac3c <gpiote_event_handler+0x3c>
			check_level_trigger_pins(DEVICE_GET(gpio_nrfx_p0));
    ac18:	4d59      	ldr	r5, [pc, #356]	; (ad80 <gpiote_event_handler+0x180>)
    ac1a:	4628      	mov	r0, r5
    ac1c:	f7ff fe0e 	bl	a83c <check_level_trigger_pins>
		fired_triggers[0] =
    ac20:	9002      	str	r0, [sp, #8]
			check_level_trigger_pins(DEVICE_GET(gpio_nrfx_p1));
    ac22:	f105 000c 	add.w	r0, r5, #12
    ac26:	f7ff fe09 	bl	a83c <check_level_trigger_pins>
		fired_triggers[1] =
    ac2a:	9003      	str	r0, [sp, #12]
    *(uint32_t *)nrf_gpiote_event_addr_get(event) = 0;
    ac2c:	4b53      	ldr	r3, [pc, #332]	; (ad7c <gpiote_event_handler+0x17c>)
    ac2e:	2200      	movs	r2, #0
    ac30:	601a      	str	r2, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)nrf_gpiote_event_addr_get(event));
    ac32:	681b      	ldr	r3, [r3, #0]
    ac34:	9300      	str	r3, [sp, #0]
    (void)dummy;
    ac36:	9b00      	ldr	r3, [sp, #0]
    ac38:	e7ec      	b.n	ac14 <gpiote_event_handler+0x14>
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    ac3a:	3201      	adds	r2, #1
    ac3c:	2a07      	cmp	r2, #7
    ac3e:	d82c      	bhi.n	ac9a <gpiote_event_handler+0x9a>
		nrf_gpiote_events_t evt =
    ac40:	f102 0340 	add.w	r3, r2, #64	; 0x40
    ac44:	009b      	lsls	r3, r3, #2
    ac46:	b29b      	uxth	r3, r3
		if (nrf_gpiote_int_is_enabled(BIT(i)) &&
    ac48:	2101      	movs	r1, #1
    ac4a:	4091      	lsls	r1, r2
    return (NRF_GPIOTE->INTENSET & mask);
    ac4c:	484d      	ldr	r0, [pc, #308]	; (ad84 <gpiote_event_handler+0x184>)
    ac4e:	f8d0 0304 	ldr.w	r0, [r0, #772]	; 0x304
    ac52:	4201      	tst	r1, r0
    ac54:	d0f1      	beq.n	ac3a <gpiote_event_handler+0x3a>
    return ((uint32_t)NRF_GPIOTE + event);
    ac56:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    ac5a:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    return (*(uint32_t *)nrf_gpiote_event_addr_get(event) == 0x1UL) ? true : false;
    ac5e:	6819      	ldr	r1, [r3, #0]
    ac60:	2901      	cmp	r1, #1
    ac62:	d1ea      	bne.n	ac3a <gpiote_event_handler+0x3a>
    return ((NRF_GPIOTE->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    ac64:	f502 71a2 	add.w	r1, r2, #324	; 0x144
    ac68:	4846      	ldr	r0, [pc, #280]	; (ad84 <gpiote_event_handler+0x184>)
    ac6a:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
    ac6e:	0a09      	lsrs	r1, r1, #8
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
    ac70:	f3c1 1040 	ubfx	r0, r1, #5, #1
    ac74:	f001 011f 	and.w	r1, r1, #31
    ac78:	2501      	movs	r5, #1
    ac7a:	fa05 f101 	lsl.w	r1, r5, r1
    ac7e:	ad04      	add	r5, sp, #16
    ac80:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    ac84:	f850 5c08 	ldr.w	r5, [r0, #-8]
    ac88:	430d      	orrs	r5, r1
    ac8a:	f840 5c08 	str.w	r5, [r0, #-8]
    *(uint32_t *)nrf_gpiote_event_addr_get(event) = 0;
    ac8e:	2100      	movs	r1, #0
    ac90:	6019      	str	r1, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)nrf_gpiote_event_addr_get(event));
    ac92:	681b      	ldr	r3, [r3, #0]
    ac94:	9301      	str	r3, [sp, #4]
    (void)dummy;
    ac96:	9b01      	ldr	r3, [sp, #4]
    ac98:	e7cf      	b.n	ac3a <gpiote_event_handler+0x3a>
	if (fired_triggers[0]) {
    ac9a:	9f02      	ldr	r7, [sp, #8]
    ac9c:	b93f      	cbnz	r7, acae <gpiote_event_handler+0xae>
	if (fired_triggers[1]) {
    ac9e:	9f03      	ldr	r7, [sp, #12]
    aca0:	2f00      	cmp	r7, #0
    aca2:	d133      	bne.n	ad0c <gpiote_event_handler+0x10c>
	if (port_event) {
    aca4:	2c01      	cmp	r4, #1
    aca6:	d060      	beq.n	ad6a <gpiote_event_handler+0x16a>
}
    aca8:	b004      	add	sp, #16
    acaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return port->driver_data;
    acae:	4b34      	ldr	r3, [pc, #208]	; (ad80 <gpiote_event_handler+0x180>)
    acb0:	689b      	ldr	r3, [r3, #8]
	return list->head;
    acb2:	681e      	ldr	r6, [r3, #0]
					struct device *port,
					u32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    acb4:	b336      	cbz	r6, ad04 <gpiote_event_handler+0x104>
    acb6:	4635      	mov	r5, r6
Z_GENLIST_PEEK_NEXT(slist, snode)
    acb8:	b166      	cbz	r6, acd4 <gpiote_event_handler+0xd4>
	return node->next;
    acba:	6835      	ldr	r5, [r6, #0]
    acbc:	e00a      	b.n	acd4 <gpiote_event_handler+0xd4>
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, pins);
    acbe:	6873      	ldr	r3, [r6, #4]
    acc0:	463a      	mov	r2, r7
    acc2:	4631      	mov	r1, r6
    acc4:	482e      	ldr	r0, [pc, #184]	; (ad80 <gpiote_event_handler+0x180>)
    acc6:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    acc8:	b1f5      	cbz	r5, ad08 <gpiote_event_handler+0x108>
    acca:	462b      	mov	r3, r5
Z_GENLIST_PEEK_NEXT(slist, snode)
    accc:	b105      	cbz	r5, acd0 <gpiote_event_handler+0xd0>
	return node->next;
    acce:	682b      	ldr	r3, [r5, #0]
    acd0:	462e      	mov	r6, r5
    acd2:	461d      	mov	r5, r3
    acd4:	2e00      	cmp	r6, #0
    acd6:	d0e2      	beq.n	ac9e <gpiote_event_handler+0x9e>
		if (cb->pin_mask & pins) {
    acd8:	68b3      	ldr	r3, [r6, #8]
    acda:	421f      	tst	r7, r3
    acdc:	d0f4      	beq.n	acc8 <gpiote_event_handler+0xc8>
			__ASSERT(cb->handler, "No callback handler!");
    acde:	6873      	ldr	r3, [r6, #4]
    ace0:	2b00      	cmp	r3, #0
    ace2:	d1ec      	bne.n	acbe <gpiote_event_handler+0xbe>
    ace4:	f8df 80b0 	ldr.w	r8, [pc, #176]	; ad98 <gpiote_event_handler+0x198>
    ace8:	233d      	movs	r3, #61	; 0x3d
    acea:	4642      	mov	r2, r8
    acec:	4926      	ldr	r1, [pc, #152]	; (ad88 <gpiote_event_handler+0x188>)
    acee:	4827      	ldr	r0, [pc, #156]	; (ad8c <gpiote_event_handler+0x18c>)
    acf0:	f004 fdc5 	bl	f87e <printk>
    acf4:	4826      	ldr	r0, [pc, #152]	; (ad90 <gpiote_event_handler+0x190>)
    acf6:	f004 fdc2 	bl	f87e <printk>
    acfa:	213d      	movs	r1, #61	; 0x3d
    acfc:	4640      	mov	r0, r8
    acfe:	f004 fe44 	bl	f98a <assert_post_action>
    ad02:	e7dc      	b.n	acbe <gpiote_event_handler+0xbe>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    ad04:	4635      	mov	r5, r6
    ad06:	e7e5      	b.n	acd4 <gpiote_event_handler+0xd4>
    ad08:	462b      	mov	r3, r5
    ad0a:	e7e1      	b.n	acd0 <gpiote_event_handler+0xd0>
    ad0c:	4b1c      	ldr	r3, [pc, #112]	; (ad80 <gpiote_event_handler+0x180>)
    ad0e:	695b      	ldr	r3, [r3, #20]
	return list->head;
    ad10:	681e      	ldr	r6, [r3, #0]
    ad12:	b336      	cbz	r6, ad62 <gpiote_event_handler+0x162>
    ad14:	4635      	mov	r5, r6
Z_GENLIST_PEEK_NEXT(slist, snode)
    ad16:	b166      	cbz	r6, ad32 <gpiote_event_handler+0x132>
	return node->next;
    ad18:	6835      	ldr	r5, [r6, #0]
    ad1a:	e00a      	b.n	ad32 <gpiote_event_handler+0x132>
			cb->handler(port, cb, pins);
    ad1c:	6873      	ldr	r3, [r6, #4]
    ad1e:	463a      	mov	r2, r7
    ad20:	4631      	mov	r1, r6
    ad22:	481c      	ldr	r0, [pc, #112]	; (ad94 <gpiote_event_handler+0x194>)
    ad24:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    ad26:	b1f5      	cbz	r5, ad66 <gpiote_event_handler+0x166>
    ad28:	462b      	mov	r3, r5
Z_GENLIST_PEEK_NEXT(slist, snode)
    ad2a:	b105      	cbz	r5, ad2e <gpiote_event_handler+0x12e>
	return node->next;
    ad2c:	682b      	ldr	r3, [r5, #0]
    ad2e:	462e      	mov	r6, r5
    ad30:	461d      	mov	r5, r3
    ad32:	2e00      	cmp	r6, #0
    ad34:	d0b6      	beq.n	aca4 <gpiote_event_handler+0xa4>
		if (cb->pin_mask & pins) {
    ad36:	68b3      	ldr	r3, [r6, #8]
    ad38:	421f      	tst	r7, r3
    ad3a:	d0f4      	beq.n	ad26 <gpiote_event_handler+0x126>
			__ASSERT(cb->handler, "No callback handler!");
    ad3c:	6873      	ldr	r3, [r6, #4]
    ad3e:	2b00      	cmp	r3, #0
    ad40:	d1ec      	bne.n	ad1c <gpiote_event_handler+0x11c>
    ad42:	f8df 8054 	ldr.w	r8, [pc, #84]	; ad98 <gpiote_event_handler+0x198>
    ad46:	233d      	movs	r3, #61	; 0x3d
    ad48:	4642      	mov	r2, r8
    ad4a:	490f      	ldr	r1, [pc, #60]	; (ad88 <gpiote_event_handler+0x188>)
    ad4c:	480f      	ldr	r0, [pc, #60]	; (ad8c <gpiote_event_handler+0x18c>)
    ad4e:	f004 fd96 	bl	f87e <printk>
    ad52:	480f      	ldr	r0, [pc, #60]	; (ad90 <gpiote_event_handler+0x190>)
    ad54:	f004 fd93 	bl	f87e <printk>
    ad58:	213d      	movs	r1, #61	; 0x3d
    ad5a:	4640      	mov	r0, r8
    ad5c:	f004 fe15 	bl	f98a <assert_post_action>
    ad60:	e7dc      	b.n	ad1c <gpiote_event_handler+0x11c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    ad62:	4635      	mov	r5, r6
    ad64:	e7e5      	b.n	ad32 <gpiote_event_handler+0x132>
    ad66:	462b      	mov	r3, r5
    ad68:	e7e1      	b.n	ad2e <gpiote_event_handler+0x12e>
		cfg_level_pins(DEVICE_GET(gpio_nrfx_p0));
    ad6a:	4c05      	ldr	r4, [pc, #20]	; (ad80 <gpiote_event_handler+0x180>)
    ad6c:	4620      	mov	r0, r4
    ad6e:	f7ff fd01 	bl	a774 <cfg_level_pins>
		cfg_level_pins(DEVICE_GET(gpio_nrfx_p1));
    ad72:	f104 000c 	add.w	r0, r4, #12
    ad76:	f7ff fcfd 	bl	a774 <cfg_level_pins>
}
    ad7a:	e795      	b.n	aca8 <gpiote_event_handler+0xa8>
    ad7c:	4000617c 	.word	0x4000617c
    ad80:	20007260 	.word	0x20007260
    ad84:	40006000 	.word	0x40006000
    ad88:	0001308c 	.word	0x0001308c
    ad8c:	00010f8c 	.word	0x00010f8c
    ad90:	00013064 	.word	0x00013064
    ad94:	2000726c 	.word	0x2000726c
    ad98:	00013018 	.word	0x00013018

0000ad9c <init_twim>:
	.configure = i2c_nrfx_twim_configure,
	.transfer  = i2c_nrfx_twim_transfer,
};

static int init_twim(struct device *dev, const nrfx_twim_config_t *config)
{
    ad9c:	b510      	push	{r4, lr}
    ad9e:	4604      	mov	r4, r0
	return dev->config->config_info;
    ada0:	6800      	ldr	r0, [r0, #0]

	nrfx_err_t result = nrfx_twim_init(&get_dev_config(dev)->twim, config,
    ada2:	4623      	mov	r3, r4
    ada4:	4a0f      	ldr	r2, [pc, #60]	; (ade4 <init_twim+0x48>)
    ada6:	6880      	ldr	r0, [r0, #8]
    ada8:	f7f6 fd9a 	bl	18e0 <nrfx_twim_init>
					   event_handler, dev);
	if (result != NRFX_SUCCESS) {
    adac:	4b0e      	ldr	r3, [pc, #56]	; (ade8 <init_twim+0x4c>)
    adae:	4298      	cmp	r0, r3
    adb0:	d101      	bne.n	adb6 <init_twim+0x1a>
		LOG_ERR("Failed to initialize device: %s",
			    dev->config->name);
		return -EBUSY;
	}

	return 0;
    adb2:	2000      	movs	r0, #0
}
    adb4:	bd10      	pop	{r4, pc}
		LOG_ERR("Failed to initialize device: %s",
    adb6:	f04f 0200 	mov.w	r2, #0
    adba:	2301      	movs	r3, #1
    adbc:	f363 0202 	bfi	r2, r3, #0, #3
    adc0:	f36f 02c5 	bfc	r2, #3, #3
    adc4:	4b09      	ldr	r3, [pc, #36]	; (adec <init_twim+0x50>)
    adc6:	490a      	ldr	r1, [pc, #40]	; (adf0 <init_twim+0x54>)
    adc8:	1a5b      	subs	r3, r3, r1
    adca:	f3c3 03c9 	ubfx	r3, r3, #3, #10
    adce:	f363 128f 	bfi	r2, r3, #6, #10
    add2:	6823      	ldr	r3, [r4, #0]
    add4:	6819      	ldr	r1, [r3, #0]
    add6:	4807      	ldr	r0, [pc, #28]	; (adf4 <init_twim+0x58>)
    add8:	f7fa f8b8 	bl	4f4c <log_1>
		return -EBUSY;
    addc:	f06f 000f 	mvn.w	r0, #15
    ade0:	e7e8      	b.n	adb4 <init_twim+0x18>
    ade2:	bf00      	nop
    ade4:	0000adf9 	.word	0x0000adf9
    ade8:	0bad0000 	.word	0x0bad0000
    adec:	00010dd4 	.word	0x00010dd4
    adf0:	00010dd4 	.word	0x00010dd4
    adf4:	000130e0 	.word	0x000130e0

0000adf8 <event_handler>:
{
    adf8:	b508      	push	{r3, lr}
	return dev->driver_data;
    adfa:	688a      	ldr	r2, [r1, #8]
	switch (p_event->type) {
    adfc:	7803      	ldrb	r3, [r0, #0]
    adfe:	2b01      	cmp	r3, #1
    ae00:	d00d      	beq.n	ae1e <event_handler+0x26>
    ae02:	b259      	sxtb	r1, r3
    ae04:	b121      	cbz	r1, ae10 <event_handler+0x18>
    ae06:	2b02      	cmp	r3, #2
    ae08:	d00c      	beq.n	ae24 <event_handler+0x2c>
		dev_data->res = NRFX_ERROR_INTERNAL;
    ae0a:	4b08      	ldr	r3, [pc, #32]	; (ae2c <event_handler+0x34>)
    ae0c:	6213      	str	r3, [r2, #32]
		break;
    ae0e:	e001      	b.n	ae14 <event_handler+0x1c>
		dev_data->res = NRFX_SUCCESS;
    ae10:	4b07      	ldr	r3, [pc, #28]	; (ae30 <event_handler+0x38>)
    ae12:	6213      	str	r3, [r2, #32]
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem)
    ae14:	f102 0010 	add.w	r0, r2, #16
    ae18:	f003 fbe0 	bl	e5dc <z_impl_k_sem_give>
}
    ae1c:	bd08      	pop	{r3, pc}
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_ANACK;
    ae1e:	4b05      	ldr	r3, [pc, #20]	; (ae34 <event_handler+0x3c>)
    ae20:	6213      	str	r3, [r2, #32]
		break;
    ae22:	e7f7      	b.n	ae14 <event_handler+0x1c>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_DNACK;
    ae24:	4b04      	ldr	r3, [pc, #16]	; (ae38 <event_handler+0x40>)
    ae26:	6213      	str	r3, [r2, #32]
		break;
    ae28:	e7f4      	b.n	ae14 <event_handler+0x1c>
    ae2a:	bf00      	nop
    ae2c:	0bad0001 	.word	0x0bad0001
    ae30:	0bad0000 	.word	0x0bad0000
    ae34:	0bae0001 	.word	0x0bae0001
    ae38:	0bae0002 	.word	0x0bae0002

0000ae3c <i2c_nrfx_twim_transfer>:
{
    ae3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ae40:	b086      	sub	sp, #24
    ae42:	4605      	mov	r5, r0
    ae44:	460e      	mov	r6, r1
    ae46:	4617      	mov	r7, r2
    ae48:	4698      	mov	r8, r3
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout)
    ae4a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    ae4e:	6880      	ldr	r0, [r0, #8]
    ae50:	f003 fbf8 	bl	e644 <z_impl_k_sem_take>
	return dev->config->config_info;
    ae54:	682b      	ldr	r3, [r5, #0]
	nrfx_twim_enable(&get_dev_config(dev)->twim);
    ae56:	6898      	ldr	r0, [r3, #8]
    ae58:	f7f6 fdf4 	bl	1a44 <nrfx_twim_enable>
	for (size_t i = 0; i < num_msgs; i++) {
    ae5c:	2400      	movs	r4, #0
    ae5e:	e012      	b.n	ae86 <i2c_nrfx_twim_transfer+0x4a>
		nrfx_err_t res = nrfx_twim_xfer(&get_dev_config(dev)->twim,
    ae60:	2220      	movs	r2, #32
    ae62:	a901      	add	r1, sp, #4
    ae64:	f7f6 fe54 	bl	1b10 <nrfx_twim_xfer>
		if (res != NRFX_SUCCESS) {
    ae68:	4b2e      	ldr	r3, [pc, #184]	; (af24 <i2c_nrfx_twim_transfer+0xe8>)
    ae6a:	4298      	cmp	r0, r3
    ae6c:	d12c      	bne.n	aec8 <i2c_nrfx_twim_transfer+0x8c>
	return dev->driver_data;
    ae6e:	68a8      	ldr	r0, [r5, #8]
    ae70:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    ae74:	3010      	adds	r0, #16
    ae76:	f003 fbe5 	bl	e644 <z_impl_k_sem_take>
    ae7a:	68ab      	ldr	r3, [r5, #8]
		res = get_dev_data(dev)->res;
    ae7c:	6a19      	ldr	r1, [r3, #32]
		if (res != NRFX_SUCCESS) {
    ae7e:	4b29      	ldr	r3, [pc, #164]	; (af24 <i2c_nrfx_twim_transfer+0xe8>)
    ae80:	4299      	cmp	r1, r3
    ae82:	d12a      	bne.n	aeda <i2c_nrfx_twim_transfer+0x9e>
	for (size_t i = 0; i < num_msgs; i++) {
    ae84:	3401      	adds	r4, #1
    ae86:	42a7      	cmp	r7, r4
    ae88:	d93f      	bls.n	af0a <i2c_nrfx_twim_transfer+0xce>
		if (I2C_MSG_ADDR_10_BITS & msgs[i].flags) {
    ae8a:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    ae8e:	eb06 0381 	add.w	r3, r6, r1, lsl #2
    ae92:	7a1a      	ldrb	r2, [r3, #8]
    ae94:	f012 0f08 	tst.w	r2, #8
    ae98:	d134      	bne.n	af04 <i2c_nrfx_twim_transfer+0xc8>
		nrfx_twim_xfer_desc_t cur_xfer = {
    ae9a:	2200      	movs	r2, #0
    ae9c:	9201      	str	r2, [sp, #4]
    ae9e:	9203      	str	r2, [sp, #12]
    aea0:	9205      	str	r2, [sp, #20]
			.type		= (msgs[i].flags & I2C_MSG_READ) ?
    aea2:	7a1a      	ldrb	r2, [r3, #8]
					  NRFX_TWIM_XFER_RX : NRFX_TWIM_XFER_TX
    aea4:	f002 0001 	and.w	r0, r2, #1
		nrfx_twim_xfer_desc_t cur_xfer = {
    aea8:	f88d 0004 	strb.w	r0, [sp, #4]
    aeac:	f88d 8005 	strb.w	r8, [sp, #5]
			.primary_length = msgs[i].len,
    aeb0:	685b      	ldr	r3, [r3, #4]
		nrfx_twim_xfer_desc_t cur_xfer = {
    aeb2:	9302      	str	r3, [sp, #8]
			.p_primary_buf  = msgs[i].buf,
    aeb4:	f856 3021 	ldr.w	r3, [r6, r1, lsl #2]
		nrfx_twim_xfer_desc_t cur_xfer = {
    aeb8:	9304      	str	r3, [sp, #16]
	return dev->config->config_info;
    aeba:	682b      	ldr	r3, [r5, #0]
    aebc:	6898      	ldr	r0, [r3, #8]
		nrfx_err_t res = nrfx_twim_xfer(&get_dev_config(dev)->twim,
    aebe:	f012 0f02 	tst.w	r2, #2
    aec2:	d0cd      	beq.n	ae60 <i2c_nrfx_twim_transfer+0x24>
    aec4:	2200      	movs	r2, #0
    aec6:	e7cc      	b.n	ae62 <i2c_nrfx_twim_transfer+0x26>
			if (res == NRFX_ERROR_BUSY) {
    aec8:	330b      	adds	r3, #11
    aeca:	4298      	cmp	r0, r3
    aecc:	d002      	beq.n	aed4 <i2c_nrfx_twim_transfer+0x98>
				ret = -EIO;
    aece:	f06f 0404 	mvn.w	r4, #4
    aed2:	e01b      	b.n	af0c <i2c_nrfx_twim_transfer+0xd0>
				ret = -EBUSY;
    aed4:	f06f 040f 	mvn.w	r4, #15
    aed8:	e018      	b.n	af0c <i2c_nrfx_twim_transfer+0xd0>
			LOG_ERR("Error %d occurred for message %d", res, i);
    aeda:	f04f 0300 	mov.w	r3, #0
    aede:	2201      	movs	r2, #1
    aee0:	f362 0302 	bfi	r3, r2, #0, #3
    aee4:	f36f 03c5 	bfc	r3, #3, #3
    aee8:	4a0f      	ldr	r2, [pc, #60]	; (af28 <i2c_nrfx_twim_transfer+0xec>)
    aeea:	4810      	ldr	r0, [pc, #64]	; (af2c <i2c_nrfx_twim_transfer+0xf0>)
    aeec:	1a12      	subs	r2, r2, r0
    aeee:	f3c2 02c9 	ubfx	r2, r2, #3, #10
    aef2:	f362 138f 	bfi	r3, r2, #6, #10
    aef6:	4622      	mov	r2, r4
    aef8:	480d      	ldr	r0, [pc, #52]	; (af30 <i2c_nrfx_twim_transfer+0xf4>)
    aefa:	f7fa f88d 	bl	5018 <log_2>
			ret = -EIO;
    aefe:	f06f 0404 	mvn.w	r4, #4
			break;
    af02:	e003      	b.n	af0c <i2c_nrfx_twim_transfer+0xd0>
			ret = -ENOTSUP;
    af04:	f06f 0422 	mvn.w	r4, #34	; 0x22
    af08:	e000      	b.n	af0c <i2c_nrfx_twim_transfer+0xd0>
	int ret = 0;
    af0a:	2400      	movs	r4, #0
	return dev->config->config_info;
    af0c:	682b      	ldr	r3, [r5, #0]
	nrfx_twim_disable(&get_dev_config(dev)->twim);
    af0e:	6898      	ldr	r0, [r3, #8]
    af10:	f7f6 fdc6 	bl	1aa0 <nrfx_twim_disable>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem)
    af14:	68a8      	ldr	r0, [r5, #8]
    af16:	f003 fb61 	bl	e5dc <z_impl_k_sem_give>
}
    af1a:	4620      	mov	r0, r4
    af1c:	b006      	add	sp, #24
    af1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    af22:	bf00      	nop
    af24:	0bad0000 	.word	0x0bad0000
    af28:	00010dd4 	.word	0x00010dd4
    af2c:	00010dd4 	.word	0x00010dd4
    af30:	000130bc 	.word	0x000130bc

0000af34 <i2c_nrfx_twim_configure>:
{
    af34:	b508      	push	{r3, lr}
	return dev->config->config_info;
    af36:	6803      	ldr	r3, [r0, #0]
    af38:	689b      	ldr	r3, [r3, #8]
	if (I2C_ADDR_10_BITS & dev_config) {
    af3a:	f011 0f01 	tst.w	r1, #1
    af3e:	d127      	bne.n	af90 <i2c_nrfx_twim_configure+0x5c>
	switch (I2C_SPEED_GET(dev_config)) {
    af40:	f3c1 0142 	ubfx	r1, r1, #1, #3
    af44:	2901      	cmp	r1, #1
    af46:	d015      	beq.n	af74 <i2c_nrfx_twim_configure+0x40>
    af48:	2902      	cmp	r1, #2
    af4a:	d01a      	beq.n	af82 <i2c_nrfx_twim_configure+0x4e>
		LOG_ERR("unsupported speed");
    af4c:	f04f 0100 	mov.w	r1, #0
    af50:	2301      	movs	r3, #1
    af52:	f363 0102 	bfi	r1, r3, #0, #3
    af56:	f36f 01c5 	bfc	r1, #3, #3
    af5a:	4b0f      	ldr	r3, [pc, #60]	; (af98 <i2c_nrfx_twim_configure+0x64>)
    af5c:	4a0f      	ldr	r2, [pc, #60]	; (af9c <i2c_nrfx_twim_configure+0x68>)
    af5e:	1a9b      	subs	r3, r3, r2
    af60:	f3c3 03c9 	ubfx	r3, r3, #3, #10
    af64:	f363 118f 	bfi	r1, r3, #6, #10
    af68:	480d      	ldr	r0, [pc, #52]	; (afa0 <i2c_nrfx_twim_configure+0x6c>)
    af6a:	f7fa f8c1 	bl	50f0 <log_0>
		return -EINVAL;
    af6e:	f06f 0015 	mvn.w	r0, #21
    af72:	e005      	b.n	af80 <i2c_nrfx_twim_configure+0x4c>
		nrf_twim_frequency_set(inst->p_twim, NRF_TWIM_FREQ_100K);
    af74:	681b      	ldr	r3, [r3, #0]
    p_reg->FREQUENCY = frequency;
    af76:	f04f 72cc 	mov.w	r2, #26738688	; 0x1980000
    af7a:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
	return 0;
    af7e:	2000      	movs	r0, #0
}
    af80:	bd08      	pop	{r3, pc}
		nrf_twim_frequency_set(inst->p_twim, NRF_TWIM_FREQ_400K);
    af82:	681b      	ldr	r3, [r3, #0]
    af84:	f04f 62c8 	mov.w	r2, #104857600	; 0x6400000
    af88:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
	return 0;
    af8c:	2000      	movs	r0, #0
    af8e:	e7f7      	b.n	af80 <i2c_nrfx_twim_configure+0x4c>
		return -EINVAL;
    af90:	f06f 0015 	mvn.w	r0, #21
    af94:	e7f4      	b.n	af80 <i2c_nrfx_twim_configure+0x4c>
    af96:	bf00      	nop
    af98:	00010dd4 	.word	0x00010dd4
    af9c:	00010dd4 	.word	0x00010dd4
    afa0:	00013098 	.word	0x00013098

0000afa4 <event_txdrdy_check>:
#endif
}

__STATIC_INLINE bool nrf_uart_event_check(NRF_UART_Type * p_reg, nrf_uart_event_t event)
{
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    afa4:	4b05      	ldr	r3, [pc, #20]	; (afbc <event_txdrdy_check+0x18>)
    afa6:	681b      	ldr	r3, [r3, #0]

static bool event_txdrdy_check(void)
{
	return (nrf_uart_event_check(uart0_addr, NRF_UART_EVENT_TXDRDY)
#ifdef CONFIG_UART_0_INTERRUPT_DRIVEN
		|| uart_sw_event_txdrdy
    afa8:	b923      	cbnz	r3, afb4 <event_txdrdy_check+0x10>
    afaa:	4b05      	ldr	r3, [pc, #20]	; (afc0 <event_txdrdy_check+0x1c>)
    afac:	781b      	ldrb	r3, [r3, #0]
    afae:	b11b      	cbz	r3, afb8 <event_txdrdy_check+0x14>
    afb0:	2001      	movs	r0, #1
    afb2:	4770      	bx	lr
    afb4:	2001      	movs	r0, #1
    afb6:	4770      	bx	lr
    afb8:	2000      	movs	r0, #0
#endif
	       );
}
    afba:	4770      	bx	lr
    afbc:	4000211c 	.word	0x4000211c
    afc0:	200027d7 	.word	0x200027d7

0000afc4 <event_txdrdy_clear>:

static void event_txdrdy_clear(void)
{
    afc4:	b082      	sub	sp, #8
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    afc6:	4a05      	ldr	r2, [pc, #20]	; (afdc <event_txdrdy_clear+0x18>)
    afc8:	2300      	movs	r3, #0
    afca:	6013      	str	r3, [r2, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    afcc:	6812      	ldr	r2, [r2, #0]
    afce:	9201      	str	r2, [sp, #4]
    (void)dummy;
    afd0:	9a01      	ldr	r2, [sp, #4]
	nrf_uart_event_clear(uart0_addr, NRF_UART_EVENT_TXDRDY);
#ifdef CONFIG_UART_0_INTERRUPT_DRIVEN
	uart_sw_event_txdrdy = 0U;
    afd2:	4a03      	ldr	r2, [pc, #12]	; (afe0 <event_txdrdy_clear+0x1c>)
    afd4:	7013      	strb	r3, [r2, #0]
#endif
}
    afd6:	b002      	add	sp, #8
    afd8:	4770      	bx	lr
    afda:	bf00      	nop
    afdc:	4000211c 	.word	0x4000211c
    afe0:	200027d7 	.word	0x200027d7

0000afe4 <baudrate_set>:

static int baudrate_set(struct device *dev, u32_t baudrate)
{
	nrf_uart_baudrate_t nrf_baudrate; /* calculated baudrate divisor */

	switch (baudrate) {
    afe4:	f647 2312 	movw	r3, #31250	; 0x7a12
    afe8:	4299      	cmp	r1, r3
    afea:	d06d      	beq.n	b0c8 <baudrate_set+0xe4>
    afec:	d910      	bls.n	b010 <baudrate_set+0x2c>
    afee:	f5b1 3fe1 	cmp.w	r1, #115200	; 0x1c200
    aff2:	d079      	beq.n	b0e8 <baudrate_set+0x104>
    aff4:	d940      	bls.n	b078 <baudrate_set+0x94>
    aff6:	f5b1 2fe1 	cmp.w	r1, #460800	; 0x70800
    affa:	d07c      	beq.n	b0f6 <baudrate_set+0x112>
    affc:	d857      	bhi.n	b0ae <baudrate_set+0xca>
    affe:	f5b1 3f61 	cmp.w	r1, #230400	; 0x38400
    b002:	d07a      	beq.n	b0fa <baudrate_set+0x116>
    b004:	4b40      	ldr	r3, [pc, #256]	; (b108 <baudrate_set+0x124>)
    b006:	4299      	cmp	r1, r3
    b008:	d14e      	bne.n	b0a8 <baudrate_set+0xc4>
		break;
	case 230400:
		nrf_baudrate = NRF_UART_BAUDRATE_230400;
		break;
	case 250000:
		nrf_baudrate = NRF_UART_BAUDRATE_250000;
    b00a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    b00e:	e056      	b.n	b0be <baudrate_set+0xda>
	switch (baudrate) {
    b010:	f5b1 5f96 	cmp.w	r1, #4800	; 0x12c0
    b014:	d05b      	beq.n	b0ce <baudrate_set+0xea>
    b016:	d818      	bhi.n	b04a <baudrate_set+0x66>
    b018:	f5b1 7f16 	cmp.w	r1, #600	; 0x258
    b01c:	d059      	beq.n	b0d2 <baudrate_set+0xee>
    b01e:	d908      	bls.n	b032 <baudrate_set+0x4e>
    b020:	f5b1 6f96 	cmp.w	r1, #1200	; 0x4b0
    b024:	d058      	beq.n	b0d8 <baudrate_set+0xf4>
    b026:	f5b1 6f16 	cmp.w	r1, #2400	; 0x960
    b02a:	d10b      	bne.n	b044 <baudrate_set+0x60>
		nrf_baudrate = NRF_UART_BAUDRATE_2400;
    b02c:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    b030:	e045      	b.n	b0be <baudrate_set+0xda>
	switch (baudrate) {
    b032:	f5b1 7f96 	cmp.w	r1, #300	; 0x12c
    b036:	d102      	bne.n	b03e <baudrate_set+0x5a>
		nrf_baudrate = 0x00014000;
    b038:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    b03c:	e03f      	b.n	b0be <baudrate_set+0xda>
		break;
	case 1000000:
		nrf_baudrate = NRF_UART_BAUDRATE_1000000;
		break;
	default:
		return -EINVAL;
    b03e:	f06f 0015 	mvn.w	r0, #21
    b042:	4770      	bx	lr
    b044:	f06f 0015 	mvn.w	r0, #21
    b048:	4770      	bx	lr
	switch (baudrate) {
    b04a:	f5b1 5f61 	cmp.w	r1, #14400	; 0x3840
    b04e:	d046      	beq.n	b0de <baudrate_set+0xfa>
    b050:	d907      	bls.n	b062 <baudrate_set+0x7e>
    b052:	f5b1 4f96 	cmp.w	r1, #19200	; 0x4b00
    b056:	d045      	beq.n	b0e4 <baudrate_set+0x100>
    b058:	f5b1 4fe1 	cmp.w	r1, #28800	; 0x7080
    b05c:	d109      	bne.n	b072 <baudrate_set+0x8e>
		nrf_baudrate = NRF_UART_BAUDRATE_28800;
    b05e:	4b2b      	ldr	r3, [pc, #172]	; (b10c <baudrate_set+0x128>)
    b060:	e02d      	b.n	b0be <baudrate_set+0xda>
	switch (baudrate) {
    b062:	f5b1 5f16 	cmp.w	r1, #9600	; 0x2580
    b066:	d101      	bne.n	b06c <baudrate_set+0x88>
		nrf_baudrate = NRF_UART_BAUDRATE_9600;
    b068:	4b29      	ldr	r3, [pc, #164]	; (b110 <baudrate_set+0x12c>)
    b06a:	e028      	b.n	b0be <baudrate_set+0xda>
		return -EINVAL;
    b06c:	f06f 0015 	mvn.w	r0, #21
    b070:	4770      	bx	lr
    b072:	f06f 0015 	mvn.w	r0, #21
    b076:	4770      	bx	lr
	switch (baudrate) {
    b078:	f64d 23c0 	movw	r3, #56000	; 0xdac0
    b07c:	4299      	cmp	r1, r3
    b07e:	d035      	beq.n	b0ec <baudrate_set+0x108>
    b080:	d907      	bls.n	b092 <baudrate_set+0xae>
    b082:	f5b1 4f61 	cmp.w	r1, #57600	; 0xe100
    b086:	d034      	beq.n	b0f2 <baudrate_set+0x10e>
    b088:	f5b1 3f96 	cmp.w	r1, #76800	; 0x12c00
    b08c:	d109      	bne.n	b0a2 <baudrate_set+0xbe>
		nrf_baudrate = NRF_UART_BAUDRATE_76800;
    b08e:	4b21      	ldr	r3, [pc, #132]	; (b114 <baudrate_set+0x130>)
    b090:	e015      	b.n	b0be <baudrate_set+0xda>
	switch (baudrate) {
    b092:	f5b1 4f16 	cmp.w	r1, #38400	; 0x9600
    b096:	d101      	bne.n	b09c <baudrate_set+0xb8>
		nrf_baudrate = NRF_UART_BAUDRATE_38400;
    b098:	4b1f      	ldr	r3, [pc, #124]	; (b118 <baudrate_set+0x134>)
    b09a:	e010      	b.n	b0be <baudrate_set+0xda>
		return -EINVAL;
    b09c:	f06f 0015 	mvn.w	r0, #21
    b0a0:	4770      	bx	lr
    b0a2:	f06f 0015 	mvn.w	r0, #21
    b0a6:	4770      	bx	lr
    b0a8:	f06f 0015 	mvn.w	r0, #21
    b0ac:	4770      	bx	lr
	switch (baudrate) {
    b0ae:	f5b1 2f61 	cmp.w	r1, #921600	; 0xe1000
    b0b2:	d024      	beq.n	b0fe <baudrate_set+0x11a>
    b0b4:	4b19      	ldr	r3, [pc, #100]	; (b11c <baudrate_set+0x138>)
    b0b6:	4299      	cmp	r1, r3
    b0b8:	d123      	bne.n	b102 <baudrate_set+0x11e>
		nrf_baudrate = NRF_UART_BAUDRATE_1000000;
    b0ba:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    p_reg->CONFIG = (uint32_t)parity | (uint32_t)hwfc;
}

__STATIC_INLINE void nrf_uart_baudrate_set(NRF_UART_Type   * p_reg, nrf_uart_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    b0be:	4a18      	ldr	r2, [pc, #96]	; (b120 <baudrate_set+0x13c>)
    b0c0:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
	}

	nrf_uart_baudrate_set(uart0_addr, nrf_baudrate);

	return 0;
    b0c4:	2000      	movs	r0, #0
    b0c6:	4770      	bx	lr
		nrf_baudrate = NRF_UART_BAUDRATE_31250;
    b0c8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    b0cc:	e7f7      	b.n	b0be <baudrate_set+0xda>
		nrf_baudrate = NRF_UART_BAUDRATE_4800;
    b0ce:	4b15      	ldr	r3, [pc, #84]	; (b124 <baudrate_set+0x140>)
    b0d0:	e7f5      	b.n	b0be <baudrate_set+0xda>
		nrf_baudrate = 0x00027000;
    b0d2:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    b0d6:	e7f2      	b.n	b0be <baudrate_set+0xda>
		nrf_baudrate = NRF_UART_BAUDRATE_1200;
    b0d8:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    b0dc:	e7ef      	b.n	b0be <baudrate_set+0xda>
		nrf_baudrate = NRF_UART_BAUDRATE_14400;
    b0de:	f44f 136c 	mov.w	r3, #3866624	; 0x3b0000
    b0e2:	e7ec      	b.n	b0be <baudrate_set+0xda>
		nrf_baudrate = NRF_UART_BAUDRATE_19200;
    b0e4:	4b10      	ldr	r3, [pc, #64]	; (b128 <baudrate_set+0x144>)
    b0e6:	e7ea      	b.n	b0be <baudrate_set+0xda>
		nrf_baudrate = NRF_UART_BAUDRATE_115200;
    b0e8:	4b10      	ldr	r3, [pc, #64]	; (b12c <baudrate_set+0x148>)
    b0ea:	e7e8      	b.n	b0be <baudrate_set+0xda>
		nrf_baudrate = NRF_UART_BAUDRATE_56000;
    b0ec:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    b0f0:	e7e5      	b.n	b0be <baudrate_set+0xda>
		nrf_baudrate = NRF_UART_BAUDRATE_57600;
    b0f2:	4b0f      	ldr	r3, [pc, #60]	; (b130 <baudrate_set+0x14c>)
    b0f4:	e7e3      	b.n	b0be <baudrate_set+0xda>
		nrf_baudrate = NRF_UART_BAUDRATE_460800;
    b0f6:	4b0f      	ldr	r3, [pc, #60]	; (b134 <baudrate_set+0x150>)
    b0f8:	e7e1      	b.n	b0be <baudrate_set+0xda>
		nrf_baudrate = NRF_UART_BAUDRATE_230400;
    b0fa:	4b0f      	ldr	r3, [pc, #60]	; (b138 <baudrate_set+0x154>)
    b0fc:	e7df      	b.n	b0be <baudrate_set+0xda>
		nrf_baudrate = NRF_UART_BAUDRATE_921600;
    b0fe:	4b0f      	ldr	r3, [pc, #60]	; (b13c <baudrate_set+0x158>)
    b100:	e7dd      	b.n	b0be <baudrate_set+0xda>
		return -EINVAL;
    b102:	f06f 0015 	mvn.w	r0, #21
}
    b106:	4770      	bx	lr
    b108:	0003d090 	.word	0x0003d090
    b10c:	0075f000 	.word	0x0075f000
    b110:	00275000 	.word	0x00275000
    b114:	013a9000 	.word	0x013a9000
    b118:	009d5000 	.word	0x009d5000
    b11c:	000f4240 	.word	0x000f4240
    b120:	40002000 	.word	0x40002000
    b124:	0013b000 	.word	0x0013b000
    b128:	004ea000 	.word	0x004ea000
    b12c:	01d7e000 	.word	0x01d7e000
    b130:	00ebf000 	.word	0x00ebf000
    b134:	075f7000 	.word	0x075f7000
    b138:	03afb000 	.word	0x03afb000
    b13c:	0ebed000 	.word	0x0ebed000

0000b140 <uart_nrfx_poll_in>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    b140:	4b09      	ldr	r3, [pc, #36]	; (b168 <uart_nrfx_poll_in+0x28>)
    b142:	681b      	ldr	r3, [r3, #0]
 * @return 0 if a character arrived, -1 if the input buffer if empty.
 */

static int uart_nrfx_poll_in(struct device *dev, unsigned char *c)
{
	if (!nrf_uart_event_check(uart0_addr, NRF_UART_EVENT_RXDRDY)) {
    b144:	b163      	cbz	r3, b160 <uart_nrfx_poll_in+0x20>
{
    b146:	b082      	sub	sp, #8
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    b148:	4b07      	ldr	r3, [pc, #28]	; (b168 <uart_nrfx_poll_in+0x28>)
    b14a:	2000      	movs	r0, #0
    b14c:	6018      	str	r0, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    b14e:	681b      	ldr	r3, [r3, #0]
    b150:	9301      	str	r3, [sp, #4]
    (void)dummy;
    b152:	9b01      	ldr	r3, [sp, #4]
    return p_reg->RXD;
    b154:	4b05      	ldr	r3, [pc, #20]	; (b16c <uart_nrfx_poll_in+0x2c>)
    b156:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518

	/* Clear the interrupt */
	nrf_uart_event_clear(uart0_addr, NRF_UART_EVENT_RXDRDY);

	/* got a character */
	*c = nrf_uart_rxd_get(uart0_addr);
    b15a:	700b      	strb	r3, [r1, #0]

	return 0;
}
    b15c:	b002      	add	sp, #8
    b15e:	4770      	bx	lr
		return -1;
    b160:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    b164:	4770      	bx	lr
    b166:	bf00      	nop
    b168:	40002108 	.word	0x40002108
    b16c:	40002000 	.word	0x40002000

0000b170 <uart_nrfx_poll_out>:
 * @param dev UART device struct
 * @param c Character to send
 */
static void uart_nrfx_poll_out(struct device *dev,
					unsigned char c)
{
    b170:	b510      	push	{r4, lr}
    b172:	460c      	mov	r4, r1
	 * before writing. This is a trade-off between losing a byte once in a
	 * blue moon against hanging up the whole thread permanently
	 */

	/* Reset the transmitter ready state. */
	event_txdrdy_clear();
    b174:	f7ff ff26 	bl	afc4 <event_txdrdy_clear>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    b178:	4b06      	ldr	r3, [pc, #24]	; (b194 <uart_nrfx_poll_out+0x24>)
    b17a:	2201      	movs	r2, #1
    b17c:	601a      	str	r2, [r3, #0]
    p_reg->TXD = txd;
    b17e:	3b08      	subs	r3, #8
    b180:	f8c3 451c 	str.w	r4, [r3, #1308]	; 0x51c

	/* Send the provided character. */
	nrf_uart_txd_set(uart0_addr, (u8_t)c);

	/* Wait until the transmitter is ready, i.e. the character is sent. */
	while (!event_txdrdy_check()) {
    b184:	f7ff ff0e 	bl	afa4 <event_txdrdy_check>
    b188:	2800      	cmp	r0, #0
    b18a:	d0fb      	beq.n	b184 <uart_nrfx_poll_out+0x14>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    b18c:	4b02      	ldr	r3, [pc, #8]	; (b198 <uart_nrfx_poll_out+0x28>)
    b18e:	2201      	movs	r2, #1
    b190:	601a      	str	r2, [r3, #0]

	/* Deactivate the transmitter so that it does not needlessly consume
	 * power.
	 */
	nrf_uart_task_trigger(uart0_addr, NRF_UART_TASK_STOPTX);
}
    b192:	bd10      	pop	{r4, pc}
    b194:	40002008 	.word	0x40002008
    b198:	4000200c 	.word	0x4000200c

0000b19c <uart_nrfx_err_check>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    b19c:	4b04      	ldr	r3, [pc, #16]	; (b1b0 <uart_nrfx_err_check+0x14>)
    b19e:	6818      	ldr	r0, [r3, #0]
/** Console I/O function */
static int uart_nrfx_err_check(struct device *dev)
{
	u32_t error = 0U;

	if (nrf_uart_event_check(uart0_addr, NRF_UART_EVENT_ERROR)) {
    b1a0:	b128      	cbz	r0, b1ae <uart_nrfx_err_check+0x12>
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    b1a2:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
    b1a6:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    b1aa:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
		/* register bitfields maps to the defines in uart.h */
		error = nrf_uart_errorsrc_get_and_clear(uart0_addr);
	}

	return error;
}
    b1ae:	4770      	bx	lr
    b1b0:	40002124 	.word	0x40002124

0000b1b4 <uart_nrfx_configure>:

static int uart_nrfx_configure(struct device *dev,
			       const struct uart_config *cfg)
{
    b1b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	nrf_uart_parity_t parity;
	nrf_uart_hwfc_t hwfc;

	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
    b1b6:	794b      	ldrb	r3, [r1, #5]
    b1b8:	2b01      	cmp	r3, #1
    b1ba:	d120      	bne.n	b1fe <uart_nrfx_configure+0x4a>
		return -ENOTSUP;
	}

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    b1bc:	798b      	ldrb	r3, [r1, #6]
    b1be:	2b03      	cmp	r3, #3
    b1c0:	d120      	bne.n	b204 <uart_nrfx_configure+0x50>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    b1c2:	79ce      	ldrb	r6, [r1, #7]
    b1c4:	b12e      	cbz	r6, b1d2 <uart_nrfx_configure+0x1e>
    b1c6:	2e01      	cmp	r6, #1
    b1c8:	d11f      	bne.n	b20a <uart_nrfx_configure+0x56>
	return dev->config->config_info;
    b1ca:	6803      	ldr	r3, [r0, #0]
    b1cc:	689b      	ldr	r3, [r3, #8]
	case UART_CFG_FLOW_CTRL_NONE:
		hwfc = NRF_UART_HWFC_DISABLED;
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		if (get_dev_config(dev)->rts_cts_pins_set) {
    b1ce:	781b      	ldrb	r3, [r3, #0]
    b1d0:	b1fb      	cbz	r3, b212 <uart_nrfx_configure+0x5e>
		break;
	default:
		return -ENOTSUP;
	}

	switch (cfg->parity) {
    b1d2:	790d      	ldrb	r5, [r1, #4]
    b1d4:	b115      	cbz	r5, b1dc <uart_nrfx_configure+0x28>
    b1d6:	2d02      	cmp	r5, #2
    b1d8:	d11e      	bne.n	b218 <uart_nrfx_configure+0x64>
	case UART_CFG_PARITY_NONE:
		parity = NRF_UART_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		parity = NRF_UART_PARITY_INCLUDED;
    b1da:	250e      	movs	r5, #14
    b1dc:	460c      	mov	r4, r1
    b1de:	4607      	mov	r7, r0
		break;
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
    b1e0:	6809      	ldr	r1, [r1, #0]
    b1e2:	f7ff feff 	bl	afe4 <baudrate_set>
    b1e6:	4603      	mov	r3, r0
    b1e8:	b9c8      	cbnz	r0, b21e <uart_nrfx_configure+0x6a>
    p_reg->CONFIG = (uint32_t)parity | (uint32_t)hwfc;
    b1ea:	4335      	orrs	r5, r6
    b1ec:	4a0d      	ldr	r2, [pc, #52]	; (b224 <uart_nrfx_configure+0x70>)
    b1ee:	f8c2 556c 	str.w	r5, [r2, #1388]	; 0x56c
	return dev->driver_data;
    b1f2:	68ba      	ldr	r2, [r7, #8]
		return -ENOTSUP;
	}

	nrf_uart_configure(uart0_addr, parity, hwfc);

	get_dev_data(dev)->uart_config = *cfg;
    b1f4:	e894 0003 	ldmia.w	r4, {r0, r1}
    b1f8:	e882 0003 	stmia.w	r2, {r0, r1}

	return 0;
    b1fc:	e007      	b.n	b20e <uart_nrfx_configure+0x5a>
		return -ENOTSUP;
    b1fe:	f06f 0322 	mvn.w	r3, #34	; 0x22
    b202:	e004      	b.n	b20e <uart_nrfx_configure+0x5a>
		return -ENOTSUP;
    b204:	f06f 0322 	mvn.w	r3, #34	; 0x22
    b208:	e001      	b.n	b20e <uart_nrfx_configure+0x5a>
		return -ENOTSUP;
    b20a:	f06f 0322 	mvn.w	r3, #34	; 0x22
}
    b20e:	4618      	mov	r0, r3
    b210:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return -ENOTSUP;
    b212:	f06f 0322 	mvn.w	r3, #34	; 0x22
    b216:	e7fa      	b.n	b20e <uart_nrfx_configure+0x5a>
		return -ENOTSUP;
    b218:	f06f 0322 	mvn.w	r3, #34	; 0x22
    b21c:	e7f7      	b.n	b20e <uart_nrfx_configure+0x5a>
		return -ENOTSUP;
    b21e:	f06f 0322 	mvn.w	r3, #34	; 0x22
    b222:	e7f4      	b.n	b20e <uart_nrfx_configure+0x5a>
    b224:	40002000 	.word	0x40002000

0000b228 <uart_nrfx_fifo_fill>:

/** Interrupt driven FIFO fill function */
static int uart_nrfx_fifo_fill(struct device *dev,
			       const u8_t *tx_data,
			       int len)
{
    b228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b22a:	460f      	mov	r7, r1
    b22c:	4616      	mov	r6, r2
	u8_t num_tx = 0U;
    b22e:	2400      	movs	r4, #0

	while ((len - num_tx > 0) &&
    b230:	4625      	mov	r5, r4
    b232:	1b33      	subs	r3, r6, r4
    b234:	2b00      	cmp	r3, #0
    b236:	dd0b      	ble.n	b250 <uart_nrfx_fifo_fill+0x28>
	       event_txdrdy_check()) {
    b238:	f7ff feb4 	bl	afa4 <event_txdrdy_check>
	while ((len - num_tx > 0) &&
    b23c:	b140      	cbz	r0, b250 <uart_nrfx_fifo_fill+0x28>

		/* Clear the interrupt */
		event_txdrdy_clear();
    b23e:	f7ff fec1 	bl	afc4 <event_txdrdy_clear>

		/* Send a character */
		nrf_uart_txd_set(uart0_addr, (u8_t)tx_data[num_tx++]);
    b242:	1c63      	adds	r3, r4, #1
    b244:	5d39      	ldrb	r1, [r7, r4]
    p_reg->TXD = txd;
    b246:	4a03      	ldr	r2, [pc, #12]	; (b254 <uart_nrfx_fifo_fill+0x2c>)
    b248:	f8c2 151c 	str.w	r1, [r2, #1308]	; 0x51c
    b24c:	b2dc      	uxtb	r4, r3
    b24e:	e7ef      	b.n	b230 <uart_nrfx_fifo_fill+0x8>
	}

	return (int)num_tx;
}
    b250:	4628      	mov	r0, r5
    b252:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b254:	40002000 	.word	0x40002000

0000b258 <uart_nrfx_fifo_read>:

/** Interrupt driven FIFO read function */
static int uart_nrfx_fifo_read(struct device *dev,
			       u8_t *rx_data,
			       const int size)
{
    b258:	b410      	push	{r4}
    b25a:	b083      	sub	sp, #12
	u8_t num_rx = 0U;
    b25c:	2300      	movs	r3, #0

	while ((size - num_rx > 0) &&
    b25e:	4618      	mov	r0, r3
    b260:	1ad4      	subs	r4, r2, r3
    b262:	2c00      	cmp	r4, #0
    b264:	dd0f      	ble.n	b286 <uart_nrfx_fifo_read+0x2e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    b266:	4c09      	ldr	r4, [pc, #36]	; (b28c <uart_nrfx_fifo_read+0x34>)
    b268:	6824      	ldr	r4, [r4, #0]
    b26a:	b164      	cbz	r4, b286 <uart_nrfx_fifo_read+0x2e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    b26c:	4807      	ldr	r0, [pc, #28]	; (b28c <uart_nrfx_fifo_read+0x34>)
    b26e:	2400      	movs	r4, #0
    b270:	6004      	str	r4, [r0, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    b272:	6800      	ldr	r0, [r0, #0]
    b274:	9001      	str	r0, [sp, #4]
    (void)dummy;
    b276:	9801      	ldr	r0, [sp, #4]
	       nrf_uart_event_check(uart0_addr, NRF_UART_EVENT_RXDRDY)) {
		/* Clear the interrupt */
		nrf_uart_event_clear(uart0_addr, NRF_UART_EVENT_RXDRDY);

		/* Receive a character */
		rx_data[num_rx++] = (u8_t)nrf_uart_rxd_get(uart0_addr);
    b278:	1c58      	adds	r0, r3, #1
    return p_reg->RXD;
    b27a:	4c05      	ldr	r4, [pc, #20]	; (b290 <uart_nrfx_fifo_read+0x38>)
    b27c:	f8d4 4518 	ldr.w	r4, [r4, #1304]	; 0x518
    b280:	54cc      	strb	r4, [r1, r3]
    b282:	b2c3      	uxtb	r3, r0
    b284:	e7eb      	b.n	b25e <uart_nrfx_fifo_read+0x6>
	}

	return num_rx;
}
    b286:	b003      	add	sp, #12
    b288:	bc10      	pop	{r4}
    b28a:	4770      	bx	lr
    b28c:	40002108 	.word	0x40002108
    b290:	40002000 	.word	0x40002000

0000b294 <uart_nrfx_irq_rx_enable>:
    p_reg->INTENSET = mask;
    b294:	4b02      	ldr	r3, [pc, #8]	; (b2a0 <uart_nrfx_irq_rx_enable+0xc>)
    b296:	2204      	movs	r2, #4
    b298:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

/** Interrupt driven receiver enabling function */
static void uart_nrfx_irq_rx_enable(struct device *dev)
{
	nrf_uart_int_enable(uart0_addr, NRF_UART_INT_MASK_RXDRDY);
}
    b29c:	4770      	bx	lr
    b29e:	bf00      	nop
    b2a0:	40002000 	.word	0x40002000

0000b2a4 <uart_nrfx_irq_rx_disable>:
    p_reg->INTENCLR = mask;
    b2a4:	4b02      	ldr	r3, [pc, #8]	; (b2b0 <uart_nrfx_irq_rx_disable+0xc>)
    b2a6:	2204      	movs	r2, #4
    b2a8:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308

/** Interrupt driven receiver disabling function */
static void uart_nrfx_irq_rx_disable(struct device *dev)
{
	nrf_uart_int_disable(uart0_addr, NRF_UART_INT_MASK_RXDRDY);
}
    b2ac:	4770      	bx	lr
    b2ae:	bf00      	nop
    b2b0:	40002000 	.word	0x40002000

0000b2b4 <uart_nrfx_irq_rx_ready>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    b2b4:	4b02      	ldr	r3, [pc, #8]	; (b2c0 <uart_nrfx_irq_rx_ready+0xc>)
    b2b6:	6818      	ldr	r0, [r3, #0]

/** Interrupt driven receiver ready function */
static int uart_nrfx_irq_rx_ready(struct device *dev)
{
	return nrf_uart_event_check(uart0_addr, NRF_UART_EVENT_RXDRDY);
}
    b2b8:	3000      	adds	r0, #0
    b2ba:	bf18      	it	ne
    b2bc:	2001      	movne	r0, #1
    b2be:	4770      	bx	lr
    b2c0:	40002108 	.word	0x40002108

0000b2c4 <uart_nrfx_irq_err_enable>:
    p_reg->INTENSET = mask;
    b2c4:	4b02      	ldr	r3, [pc, #8]	; (b2d0 <uart_nrfx_irq_err_enable+0xc>)
    b2c6:	f44f 7200 	mov.w	r2, #512	; 0x200
    b2ca:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

/** Interrupt driven error enabling function */
static void uart_nrfx_irq_err_enable(struct device *dev)
{
	nrf_uart_int_enable(uart0_addr, NRF_UART_INT_MASK_ERROR);
}
    b2ce:	4770      	bx	lr
    b2d0:	40002000 	.word	0x40002000

0000b2d4 <uart_nrfx_irq_err_disable>:
    p_reg->INTENCLR = mask;
    b2d4:	4b02      	ldr	r3, [pc, #8]	; (b2e0 <uart_nrfx_irq_err_disable+0xc>)
    b2d6:	f44f 7200 	mov.w	r2, #512	; 0x200
    b2da:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308

/** Interrupt driven error disabling function */
static void uart_nrfx_irq_err_disable(struct device *dev)
{
	nrf_uart_int_disable(uart0_addr, NRF_UART_INT_MASK_ERROR);
}
    b2de:	4770      	bx	lr
    b2e0:	40002000 	.word	0x40002000

0000b2e4 <uart_nrfx_irq_is_pending>:

/** Interrupt driven pending status function */
static int uart_nrfx_irq_is_pending(struct device *dev)
{
    b2e4:	b510      	push	{r4, lr}
    b2e6:	4604      	mov	r4, r0
    return (bool)(p_reg->INTENSET & mask);
    b2e8:	4b0e      	ldr	r3, [pc, #56]	; (b324 <uart_nrfx_irq_is_pending+0x40>)
    b2ea:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
	return ((nrf_uart_int_enable_check(uart0_addr,
					   NRF_UART_INT_MASK_TXDRDY) &&
		 event_txdrdy_check())
		||
    b2ee:	f013 0f80 	tst.w	r3, #128	; 0x80
    b2f2:	d108      	bne.n	b306 <uart_nrfx_irq_is_pending+0x22>
    b2f4:	4b0b      	ldr	r3, [pc, #44]	; (b324 <uart_nrfx_irq_is_pending+0x40>)
    b2f6:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
    b2fa:	f013 0f04 	tst.w	r3, #4
    b2fe:	d108      	bne.n	b312 <uart_nrfx_irq_is_pending+0x2e>
    b300:	2300      	movs	r3, #0
		(nrf_uart_int_enable_check(uart0_addr,
					   NRF_UART_INT_MASK_RXDRDY) &&
		 uart_nrfx_irq_rx_ready(dev)));
}
    b302:	4618      	mov	r0, r3
    b304:	bd10      	pop	{r4, pc}
		 event_txdrdy_check())
    b306:	f7ff fe4d 	bl	afa4 <event_txdrdy_check>
					   NRF_UART_INT_MASK_TXDRDY) &&
    b30a:	2800      	cmp	r0, #0
    b30c:	d0f2      	beq.n	b2f4 <uart_nrfx_irq_is_pending+0x10>
		||
    b30e:	2301      	movs	r3, #1
    b310:	e7f7      	b.n	b302 <uart_nrfx_irq_is_pending+0x1e>
		 uart_nrfx_irq_rx_ready(dev)));
    b312:	4620      	mov	r0, r4
    b314:	f7ff ffce 	bl	b2b4 <uart_nrfx_irq_rx_ready>
					   NRF_UART_INT_MASK_RXDRDY) &&
    b318:	4603      	mov	r3, r0
    b31a:	2800      	cmp	r0, #0
    b31c:	d0f1      	beq.n	b302 <uart_nrfx_irq_is_pending+0x1e>
		||
    b31e:	2301      	movs	r3, #1
    b320:	e7ef      	b.n	b302 <uart_nrfx_irq_is_pending+0x1e>
    b322:	bf00      	nop
    b324:	40002000 	.word	0x40002000

0000b328 <uart_nrfx_irq_callback_set>:
static void uart_nrfx_irq_callback_set(struct device *dev,
				       uart_irq_callback_user_data_t cb,
				       void *cb_data)
{
	(void)dev;
	irq_callback = cb;
    b328:	4b02      	ldr	r3, [pc, #8]	; (b334 <uart_nrfx_irq_callback_set+0xc>)
    b32a:	6019      	str	r1, [r3, #0]
	irq_cb_data = cb_data;
    b32c:	4b02      	ldr	r3, [pc, #8]	; (b338 <uart_nrfx_irq_callback_set+0x10>)
    b32e:	601a      	str	r2, [r3, #0]
}
    b330:	4770      	bx	lr
    b332:	bf00      	nop
    b334:	200022b8 	.word	0x200022b8
    b338:	200022bc 	.word	0x200022bc

0000b33c <uart_nrfx_isr>:
 * @param arg Argument to ISR.
 *
 * @return N/A
 */
static void uart_nrfx_isr(void *arg)
{
    b33c:	b508      	push	{r3, lr}
	ARG_UNUSED(arg);

	if (irq_callback) {
    b33e:	4b03      	ldr	r3, [pc, #12]	; (b34c <uart_nrfx_isr+0x10>)
    b340:	681b      	ldr	r3, [r3, #0]
    b342:	b113      	cbz	r3, b34a <uart_nrfx_isr+0xe>
		irq_callback(irq_cb_data);
    b344:	4a02      	ldr	r2, [pc, #8]	; (b350 <uart_nrfx_isr+0x14>)
    b346:	6810      	ldr	r0, [r2, #0]
    b348:	4798      	blx	r3
	}
}
    b34a:	bd08      	pop	{r3, pc}
    b34c:	200022b8 	.word	0x200022b8
    b350:	200022bc 	.word	0x200022bc

0000b354 <uart_nrfx_irq_tx_disable>:
{
    b354:	b508      	push	{r3, lr}
    p_reg->INTENCLR = mask;
    b356:	4b05      	ldr	r3, [pc, #20]	; (b36c <uart_nrfx_irq_tx_disable+0x18>)
    b358:	2280      	movs	r2, #128	; 0x80
    b35a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    b35e:	330c      	adds	r3, #12
    b360:	2201      	movs	r2, #1
    b362:	601a      	str	r2, [r3, #0]
	device_busy_clear(dev);
    b364:	f005 fabe 	bl	108e4 <device_busy_clear>
}
    b368:	bd08      	pop	{r3, pc}
    b36a:	bf00      	nop
    b36c:	40002000 	.word	0x40002000

0000b370 <uart_nrfx_irq_tx_enable>:
{
    b370:	b508      	push	{r3, lr}
	device_busy_set(dev);
    b372:	f005 fab6 	bl	108e2 <device_busy_set>
    b376:	4b0d      	ldr	r3, [pc, #52]	; (b3ac <uart_nrfx_irq_tx_enable+0x3c>)
    b378:	2201      	movs	r2, #1
    b37a:	601a      	str	r2, [r3, #0]
    p_reg->INTENSET = mask;
    b37c:	3b08      	subs	r3, #8
    b37e:	2280      	movs	r2, #128	; 0x80
    b380:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    b384:	f04f 0220 	mov.w	r2, #32
    b388:	f3ef 8311 	mrs	r3, BASEPRI
    b38c:	f382 8811 	msr	BASEPRI, r2
    b390:	f3bf 8f6f 	isb	sy
	if (uart_sw_event_txdrdy) {
    b394:	4a06      	ldr	r2, [pc, #24]	; (b3b0 <uart_nrfx_irq_tx_enable+0x40>)
    b396:	7812      	ldrb	r2, [r2, #0]
    b398:	b11a      	cbz	r2, b3a2 <uart_nrfx_irq_tx_enable+0x32>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    b39a:	4a06      	ldr	r2, [pc, #24]	; (b3b4 <uart_nrfx_irq_tx_enable+0x44>)
    b39c:	2104      	movs	r1, #4
    b39e:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
	__asm__ volatile(
    b3a2:	f383 8811 	msr	BASEPRI, r3
    b3a6:	f3bf 8f6f 	isb	sy
}
    b3aa:	bd08      	pop	{r3, pc}
    b3ac:	40002008 	.word	0x40002008
    b3b0:	200027d7 	.word	0x200027d7
    b3b4:	e000e100 	.word	0xe000e100

0000b3b8 <uart_nrfx_init>:
 * @param dev UART device struct
 *
 * @return 0 on success
 */
static int uart_nrfx_init(struct device *dev)
{
    b3b8:	b510      	push	{r4, lr}
    b3ba:	b082      	sub	sp, #8
}


__STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
    b3bc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    b3c0:	2240      	movs	r2, #64	; 0x40
    b3c2:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    b3c6:	2203      	movs	r2, #3
    b3c8:	f8c3 2718 	str.w	r2, [r3, #1816]	; 0x718
    b3cc:	2200      	movs	r2, #0
    b3ce:	f8c3 2720 	str.w	r2, [r3, #1824]	; 0x720
    p_reg->PSEL.RXD = pselrxd;
    b3d2:	4b12      	ldr	r3, [pc, #72]	; (b41c <uart_nrfx_init+0x64>)
    b3d4:	2208      	movs	r2, #8
    b3d6:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->PSEL.TXD = pseltxd;
    b3da:	2206      	movs	r2, #6
    b3dc:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c
			       DT_NORDIC_NRF_UART_UART_0_RTS_PIN,
			       DT_NORDIC_NRF_UART_UART_0_CTS_PIN);
#endif

	/* Set initial configuration */
	err = uart_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
    b3e0:	6881      	ldr	r1, [r0, #8]
    b3e2:	f7ff fee7 	bl	b1b4 <uart_nrfx_configure>
	if (err) {
    b3e6:	4604      	mov	r4, r0
    b3e8:	b110      	cbz	r0, b3f0 <uart_nrfx_init+0x38>
	defined(DT_NORDIC_NRF_UART_UART_0_CTS_PIN)
	k_delayed_work_init(&uart0_cb.tx_timeout_work, tx_timeout);
#endif
#endif
	return 0;
}
    b3ea:	4620      	mov	r0, r4
    b3ec:	b002      	add	sp, #8
    b3ee:	bd10      	pop	{r4, pc}
    p_reg->ENABLE = UART_ENABLE_ENABLE_Enabled;
    b3f0:	4b0a      	ldr	r3, [pc, #40]	; (b41c <uart_nrfx_init+0x64>)
    b3f2:	2204      	movs	r2, #4
    b3f4:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    b3f8:	4909      	ldr	r1, [pc, #36]	; (b420 <uart_nrfx_init+0x68>)
    b3fa:	2200      	movs	r2, #0
    b3fc:	600a      	str	r2, [r1, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    b3fe:	6809      	ldr	r1, [r1, #0]
    b400:	9101      	str	r1, [sp, #4]
    (void)dummy;
    b402:	9901      	ldr	r1, [sp, #4]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    b404:	2101      	movs	r1, #1
    b406:	6019      	str	r1, [r3, #0]
	uart_sw_event_txdrdy = 1U;
    b408:	4b06      	ldr	r3, [pc, #24]	; (b424 <uart_nrfx_init+0x6c>)
    b40a:	7019      	strb	r1, [r3, #0]
	IRQ_CONNECT(DT_NORDIC_NRF_UART_UART_0_IRQ,
    b40c:	2002      	movs	r0, #2
    b40e:	f7fe f87d 	bl	950c <z_irq_priority_set>
	irq_enable(DT_NORDIC_NRF_UART_UART_0_IRQ);
    b412:	2002      	movs	r0, #2
    b414:	f7fe f848 	bl	94a8 <z_arch_irq_enable>
	return 0;
    b418:	e7e7      	b.n	b3ea <uart_nrfx_init+0x32>
    b41a:	bf00      	nop
    b41c:	40002000 	.word	0x40002000
    b420:	40002108 	.word	0x40002108
    b424:	200027d7 	.word	0x200027d7

0000b428 <update_rf_payload_format_esb_dpl>:

static void update_rf_payload_format_esb_dpl(u32_t payload_length)
{
#if (CONFIG_NRF_ESB_MAX_PAYLOAD_LENGTH <= 32)
	/* Using 6 bits for length */
	NRF_RADIO->PCNF0 = (0 << RADIO_PCNF0_S0LEN_Pos) |
    b428:	4a07      	ldr	r2, [pc, #28]	; (b448 <update_rf_payload_format_esb_dpl+0x20>)
    b42a:	4b08      	ldr	r3, [pc, #32]	; (b44c <update_rf_payload_format_esb_dpl+0x24>)
    b42c:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
			   (3 << RADIO_PCNF0_S1LEN_Pos);
#endif
	NRF_RADIO->PCNF1 =
		(RADIO_PCNF1_WHITEEN_Disabled << RADIO_PCNF1_WHITEEN_Pos) |
		(RADIO_PCNF1_ENDIAN_Big << RADIO_PCNF1_ENDIAN_Pos) |
		((esb_addr.addr_length - 1) << RADIO_PCNF1_BALEN_Pos) |
    b430:	4b07      	ldr	r3, [pc, #28]	; (b450 <update_rf_payload_format_esb_dpl+0x28>)
    b432:	7c5b      	ldrb	r3, [r3, #17]
    b434:	3b01      	subs	r3, #1
    b436:	041b      	lsls	r3, r3, #16
		(0 << RADIO_PCNF1_STATLEN_Pos) |
    b438:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    b43c:	f043 0320 	orr.w	r3, r3, #32
	NRF_RADIO->PCNF1 =
    b440:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
		(CONFIG_NRF_ESB_MAX_PAYLOAD_LENGTH << RADIO_PCNF1_MAXLEN_Pos);
}
    b444:	4770      	bx	lr
    b446:	bf00      	nop
    b448:	40001000 	.word	0x40001000
    b44c:	00030006 	.word	0x00030006
    b450:	200071b4 	.word	0x200071b4

0000b454 <update_rf_payload_format_esb>:

static void update_rf_payload_format_esb(u32_t payload_length)
{
	NRF_RADIO->PCNF0 = (1 << RADIO_PCNF0_S0LEN_Pos) |
    b454:	4907      	ldr	r1, [pc, #28]	; (b474 <update_rf_payload_format_esb+0x20>)
    b456:	4b08      	ldr	r3, [pc, #32]	; (b478 <update_rf_payload_format_esb+0x24>)
    b458:	f8c1 3514 	str.w	r3, [r1, #1300]	; 0x514
			   (1 << RADIO_PCNF0_S1LEN_Pos);

	NRF_RADIO->PCNF1 =
		(RADIO_PCNF1_WHITEEN_Disabled << RADIO_PCNF1_WHITEEN_Pos) |
		(RADIO_PCNF1_ENDIAN_Big << RADIO_PCNF1_ENDIAN_Pos) |
		((esb_addr.addr_length - 1) << RADIO_PCNF1_BALEN_Pos) |
    b45c:	4b07      	ldr	r3, [pc, #28]	; (b47c <update_rf_payload_format_esb+0x28>)
    b45e:	7c5a      	ldrb	r2, [r3, #17]
    b460:	3a01      	subs	r2, #1
		(payload_length << RADIO_PCNF1_STATLEN_Pos) |
    b462:	0203      	lsls	r3, r0, #8
		((esb_addr.addr_length - 1) << RADIO_PCNF1_BALEN_Pos) |
    b464:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
		(payload_length << RADIO_PCNF1_STATLEN_Pos) |
    b468:	4303      	orrs	r3, r0
    b46a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
	NRF_RADIO->PCNF1 =
    b46e:	f8c1 3518 	str.w	r3, [r1, #1304]	; 0x518
		(payload_length << RADIO_PCNF1_MAXLEN_Pos);
}
    b472:	4770      	bx	lr
    b474:	40001000 	.word	0x40001000
    b478:	00010100 	.word	0x00010100
    b47c:	200071b4 	.word	0x200071b4

0000b480 <update_radio_tx_power>:
	}
}

static void update_radio_tx_power(void)
{
	NRF_RADIO->TXPOWER = esb_cfg.tx_output_power
    b480:	4b02      	ldr	r3, [pc, #8]	; (b48c <update_radio_tx_power+0xc>)
    b482:	7a9a      	ldrb	r2, [r3, #10]
    b484:	4b02      	ldr	r3, [pc, #8]	; (b490 <update_radio_tx_power+0x10>)
    b486:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c
			     << RADIO_TXPOWER_TXPOWER_Pos;
}
    b48a:	4770      	bx	lr
    b48c:	200022c4 	.word	0x200022c4
    b490:	40001000 	.word	0x40001000

0000b494 <update_radio_bitrate>:

static bool update_radio_bitrate(void)
{
	NRF_RADIO->MODE = esb_cfg.bitrate << RADIO_MODE_MODE_Pos;
    b494:	4b0f      	ldr	r3, [pc, #60]	; (b4d4 <update_radio_bitrate+0x40>)
    b496:	7a1b      	ldrb	r3, [r3, #8]
    b498:	4a0f      	ldr	r2, [pc, #60]	; (b4d8 <update_radio_bitrate+0x44>)
    b49a:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510

	switch (esb_cfg.bitrate) {
    b49e:	2b04      	cmp	r3, #4
    b4a0:	d815      	bhi.n	b4ce <update_radio_bitrate+0x3a>
    b4a2:	e8df f003 	tbb	[pc, r3]
    b4a6:	0308      	.short	0x0308
    b4a8:	0e14      	.short	0x0e14
    b4aa:	03          	.byte	0x03
    b4ab:	00          	.byte	0x00
	case NRF_ESB_BITRATE_2MBPS:
#ifdef CONFIG_SOC_SERIES_NRF52X
	case NRF_ESB_BITRATE_2MBPS_BLE:
#endif
		wait_for_ack_timeout_us = RX_ACK_TIMEOUT_US_2MBPS;
    b4ac:	4b0b      	ldr	r3, [pc, #44]	; (b4dc <update_radio_bitrate+0x48>)
    b4ae:	22a0      	movs	r2, #160	; 0xa0
    b4b0:	601a      	str	r2, [r3, #0]
	default:
		/* Should not be reached */
		return false;
	}

	return true;
    b4b2:	2001      	movs	r0, #1
		break;
    b4b4:	4770      	bx	lr
		wait_for_ack_timeout_us = RX_ACK_TIMEOUT_US_1MBPS;
    b4b6:	4b09      	ldr	r3, [pc, #36]	; (b4dc <update_radio_bitrate+0x48>)
    b4b8:	f44f 7296 	mov.w	r2, #300	; 0x12c
    b4bc:	601a      	str	r2, [r3, #0]
	return true;
    b4be:	2001      	movs	r0, #1
		break;
    b4c0:	4770      	bx	lr
		wait_for_ack_timeout_us = RX_ACK_TIMEOUT_US_1MBPS_BLE;
    b4c2:	4b06      	ldr	r3, [pc, #24]	; (b4dc <update_radio_bitrate+0x48>)
    b4c4:	f44f 7296 	mov.w	r2, #300	; 0x12c
    b4c8:	601a      	str	r2, [r3, #0]
	return true;
    b4ca:	2001      	movs	r0, #1
		break;
    b4cc:	4770      	bx	lr
		return false;
    b4ce:	2000      	movs	r0, #0
}
    b4d0:	4770      	bx	lr
    b4d2:	bf00      	nop
    b4d4:	200022c4 	.word	0x200022c4
    b4d8:	40001000 	.word	0x40001000
    b4dc:	2000260c 	.word	0x2000260c

0000b4e0 <update_radio_protocol>:

static bool update_radio_protocol(void)
{
	switch (esb_cfg.protocol) {
    b4e0:	4b08      	ldr	r3, [pc, #32]	; (b504 <update_radio_protocol+0x24>)
    b4e2:	781b      	ldrb	r3, [r3, #0]
    b4e4:	b133      	cbz	r3, b4f4 <update_radio_protocol+0x14>
    b4e6:	2b01      	cmp	r3, #1
    b4e8:	d109      	bne.n	b4fe <update_radio_protocol+0x1e>
	case NRF_ESB_PROTOCOL_ESB_DPL:
		update_rf_payload_format = update_rf_payload_format_esb_dpl;
    b4ea:	4b07      	ldr	r3, [pc, #28]	; (b508 <update_radio_protocol+0x28>)
    b4ec:	4a07      	ldr	r2, [pc, #28]	; (b50c <update_radio_protocol+0x2c>)
    b4ee:	601a      	str	r2, [r3, #0]

	default:
		/* Should not be reached */
		return false;
	}
	return true;
    b4f0:	2001      	movs	r0, #1
		break;
    b4f2:	4770      	bx	lr
		update_rf_payload_format = update_rf_payload_format_esb;
    b4f4:	4b04      	ldr	r3, [pc, #16]	; (b508 <update_radio_protocol+0x28>)
    b4f6:	4a06      	ldr	r2, [pc, #24]	; (b510 <update_radio_protocol+0x30>)
    b4f8:	601a      	str	r2, [r3, #0]
	return true;
    b4fa:	2001      	movs	r0, #1
		break;
    b4fc:	4770      	bx	lr
		return false;
    b4fe:	2000      	movs	r0, #0
}
    b500:	4770      	bx	lr
    b502:	bf00      	nop
    b504:	200022c4 	.word	0x200022c4
    b508:	20002608 	.word	0x20002608
    b50c:	0000b429 	.word	0x0000b429
    b510:	0000b455 	.word	0x0000b455

0000b514 <update_radio_crc>:

static bool update_radio_crc(void)
{
	switch (esb_cfg.crc) {
    b514:	4b13      	ldr	r3, [pc, #76]	; (b564 <update_radio_crc+0x50>)
    b516:	7a5b      	ldrb	r3, [r3, #9]
    b518:	2b01      	cmp	r3, #1
    b51a:	d018      	beq.n	b54e <update_radio_crc+0x3a>
    b51c:	b25a      	sxtb	r2, r3
    b51e:	b14a      	cbz	r2, b534 <update_radio_crc+0x20>
    b520:	2b02      	cmp	r3, #2
    b522:	d11d      	bne.n	b560 <update_radio_crc+0x4c>
	case NRF_ESB_CRC_16BIT:
		NRF_RADIO->CRCINIT = 0xFFFFUL;  /* Initial value */
    b524:	4b10      	ldr	r3, [pc, #64]	; (b568 <update_radio_crc+0x54>)
    b526:	f64f 72ff 	movw	r2, #65535	; 0xffff
    b52a:	f8c3 253c 	str.w	r2, [r3, #1340]	; 0x53c
		NRF_RADIO->CRCPOLY = 0x11021UL; /* CRC poly: x^16+x^12^x^5+1 */
    b52e:	4a0f      	ldr	r2, [pc, #60]	; (b56c <update_radio_crc+0x58>)
    b530:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538

	default:
		return false;
	}

	NRF_RADIO->CRCINIT = 0xFFFFUL;  /* Initial value */
    b534:	4b0c      	ldr	r3, [pc, #48]	; (b568 <update_radio_crc+0x54>)
    b536:	f64f 72ff 	movw	r2, #65535	; 0xffff
    b53a:	f8c3 253c 	str.w	r2, [r3, #1340]	; 0x53c
	NRF_RADIO->CRCPOLY = 0x11021UL; /* CRC poly: x^16+x^12^x^5+1 */
    b53e:	4a0b      	ldr	r2, [pc, #44]	; (b56c <update_radio_crc+0x58>)
    b540:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
	NRF_RADIO->CRCCNF = NRF_ESB_CRC_16BIT << RADIO_CRCCNF_LEN_Pos;
    b544:	2202      	movs	r2, #2
    b546:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534

	return true;
    b54a:	2001      	movs	r0, #1
    b54c:	4770      	bx	lr
		NRF_RADIO->CRCINIT = 0xFFUL;  /* Initial value */
    b54e:	4b06      	ldr	r3, [pc, #24]	; (b568 <update_radio_crc+0x54>)
    b550:	22ff      	movs	r2, #255	; 0xff
    b552:	f8c3 253c 	str.w	r2, [r3, #1340]	; 0x53c
		NRF_RADIO->CRCPOLY = 0x107UL; /* CRC poly: x^8+x^2^x^1+1 */
    b556:	f240 1207 	movw	r2, #263	; 0x107
    b55a:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
		break;
    b55e:	e7e9      	b.n	b534 <update_radio_crc+0x20>
		return false;
    b560:	2000      	movs	r0, #0
}
    b562:	4770      	bx	lr
    b564:	200022c4 	.word	0x200022c4
    b568:	40001000 	.word	0x40001000
    b56c:	00011021 	.word	0x00011021

0000b570 <update_radio_parameters>:

static bool update_radio_parameters(void)
{
    b570:	b538      	push	{r3, r4, r5, lr}
	bool params_valid = true;

	update_radio_tx_power();
    b572:	f7ff ff85 	bl	b480 <update_radio_tx_power>
	params_valid &= update_radio_bitrate();
    b576:	f7ff ff8d 	bl	b494 <update_radio_bitrate>
    b57a:	4604      	mov	r4, r0
	params_valid &= update_radio_protocol();
    b57c:	f7ff ffb0 	bl	b4e0 <update_radio_protocol>
    b580:	4004      	ands	r4, r0
    b582:	b2e4      	uxtb	r4, r4
	params_valid &= update_radio_crc();
    b584:	f7ff ffc6 	bl	b514 <update_radio_crc>
    b588:	4004      	ands	r4, r0
	update_rf_payload_format(esb_cfg.payload_length);
    b58a:	4d06      	ldr	r5, [pc, #24]	; (b5a4 <update_radio_parameters+0x34>)
    b58c:	4b06      	ldr	r3, [pc, #24]	; (b5a8 <update_radio_parameters+0x38>)
    b58e:	681b      	ldr	r3, [r3, #0]
    b590:	7ce8      	ldrb	r0, [r5, #19]
    b592:	4798      	blx	r3
	params_valid &=
	    (esb_cfg.retransmit_delay >= RETRANSMIT_DELAY_MIN);
    b594:	89a8      	ldrh	r0, [r5, #12]

	return params_valid;
}
    b596:	f5b0 7fd9 	cmp.w	r0, #434	; 0x1b2
    b59a:	bf94      	ite	ls
    b59c:	2000      	movls	r0, #0
    b59e:	f004 0001 	andhi.w	r0, r4, #1
    b5a2:	bd38      	pop	{r3, r4, r5, pc}
    b5a4:	200022c4 	.word	0x200022c4
    b5a8:	20002608 	.word	0x20002608

0000b5ac <reset_fifos>:

static void reset_fifos(void)
{
	tx_fifo.back = 0;
    b5ac:	4a04      	ldr	r2, [pc, #16]	; (b5c0 <reset_fifos+0x14>)
    b5ae:	2300      	movs	r3, #0
    b5b0:	6213      	str	r3, [r2, #32]
	tx_fifo.front = 0;
    b5b2:	6253      	str	r3, [r2, #36]	; 0x24
	tx_fifo.count = 0;
    b5b4:	6293      	str	r3, [r2, #40]	; 0x28

	rx_fifo.back = 0;
    b5b6:	4a03      	ldr	r2, [pc, #12]	; (b5c4 <reset_fifos+0x18>)
    b5b8:	6213      	str	r3, [r2, #32]
	rx_fifo.front = 0;
    b5ba:	6253      	str	r3, [r2, #36]	; 0x24
	rx_fifo.count = 0;
    b5bc:	6293      	str	r3, [r2, #40]	; 0x28
}
    b5be:	4770      	bx	lr
    b5c0:	20002490 	.word	0x20002490
    b5c4:	200022f8 	.word	0x200022f8

0000b5c8 <initialize_fifos>:

static void initialize_fifos(void)
{
    b5c8:	b508      	push	{r3, lr}
	static struct nrf_esb_payload rx_payload[CONFIG_NRF_ESB_RX_FIFO_SIZE];
	static struct nrf_esb_payload tx_payload[CONFIG_NRF_ESB_TX_FIFO_SIZE];

	reset_fifos();
    b5ca:	f7ff ffef 	bl	b5ac <reset_fifos>

	for (size_t i = 0; i < CONFIG_NRF_ESB_TX_FIFO_SIZE; i++) {
    b5ce:	2300      	movs	r3, #0
    b5d0:	e009      	b.n	b5e6 <initialize_fifos+0x1e>
		tx_fifo.payload[i] = &tx_payload[i];
    b5d2:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
    b5d6:	eb03 0182 	add.w	r1, r3, r2, lsl #2
    b5da:	4a0b      	ldr	r2, [pc, #44]	; (b608 <initialize_fifos+0x40>)
    b5dc:	440a      	add	r2, r1
    b5de:	490b      	ldr	r1, [pc, #44]	; (b60c <initialize_fifos+0x44>)
    b5e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (size_t i = 0; i < CONFIG_NRF_ESB_TX_FIFO_SIZE; i++) {
    b5e4:	3301      	adds	r3, #1
    b5e6:	2b07      	cmp	r3, #7
    b5e8:	d9f3      	bls.n	b5d2 <initialize_fifos+0xa>
	}

	for (size_t i = 0; i < CONFIG_NRF_ESB_RX_FIFO_SIZE; i++) {
    b5ea:	2300      	movs	r3, #0
    b5ec:	e009      	b.n	b602 <initialize_fifos+0x3a>
		rx_fifo.payload[i] = &rx_payload[i];
    b5ee:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
    b5f2:	eb03 0182 	add.w	r1, r3, r2, lsl #2
    b5f6:	4a06      	ldr	r2, [pc, #24]	; (b610 <initialize_fifos+0x48>)
    b5f8:	440a      	add	r2, r1
    b5fa:	4906      	ldr	r1, [pc, #24]	; (b614 <initialize_fifos+0x4c>)
    b5fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (size_t i = 0; i < CONFIG_NRF_ESB_RX_FIFO_SIZE; i++) {
    b600:	3301      	adds	r3, #1
    b602:	2b07      	cmp	r3, #7
    b604:	d9f3      	bls.n	b5ee <initialize_fifos+0x26>
	}
}
    b606:	bd08      	pop	{r3, pc}
    b608:	200024bc 	.word	0x200024bc
    b60c:	20002490 	.word	0x20002490
    b610:	20002324 	.word	0x20002324
    b614:	200022f8 	.word	0x200022f8

0000b618 <tx_fifo_remove_last>:

static void tx_fifo_remove_last(void)
{
	if (tx_fifo.count == 0) {
    b618:	4b0d      	ldr	r3, [pc, #52]	; (b650 <tx_fifo_remove_last+0x38>)
    b61a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    b61c:	b1bb      	cbz	r3, b64e <tx_fifo_remove_last+0x36>
	__asm__ volatile(
    b61e:	f04f 0320 	mov.w	r3, #32
    b622:	f3ef 8111 	mrs	r1, BASEPRI
    b626:	f383 8811 	msr	BASEPRI, r3
    b62a:	f3bf 8f6f 	isb	sy
		return;
	}

	u32_t key = irq_lock();

	tx_fifo.count--;
    b62e:	4a08      	ldr	r2, [pc, #32]	; (b650 <tx_fifo_remove_last+0x38>)
    b630:	6a93      	ldr	r3, [r2, #40]	; 0x28
    b632:	3b01      	subs	r3, #1
    b634:	6293      	str	r3, [r2, #40]	; 0x28
	if (++tx_fifo.front >= CONFIG_NRF_ESB_TX_FIFO_SIZE) {
    b636:	6a53      	ldr	r3, [r2, #36]	; 0x24
    b638:	3301      	adds	r3, #1
    b63a:	6253      	str	r3, [r2, #36]	; 0x24
    b63c:	2b07      	cmp	r3, #7
    b63e:	d902      	bls.n	b646 <tx_fifo_remove_last+0x2e>
		tx_fifo.front = 0;
    b640:	4613      	mov	r3, r2
    b642:	2200      	movs	r2, #0
    b644:	625a      	str	r2, [r3, #36]	; 0x24
	__asm__ volatile(
    b646:	f381 8811 	msr	BASEPRI, r1
    b64a:	f3bf 8f6f 	isb	sy
	}

	irq_unlock(key);
}
    b64e:	4770      	bx	lr
    b650:	20002490 	.word	0x20002490

0000b654 <sys_timer_init>:
}

static void sys_timer_init(void)
{
	/* Configure the system timer with a 1 MHz base frequency */
	ESB_SYS_TIMER->PRESCALER = 4;
    b654:	4b05      	ldr	r3, [pc, #20]	; (b66c <sys_timer_init+0x18>)
    b656:	2204      	movs	r2, #4
    b658:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	ESB_SYS_TIMER->BITMODE = TIMER_BITMODE_BITMODE_16Bit;
    b65c:	2200      	movs	r2, #0
    b65e:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	ESB_SYS_TIMER->SHORTS = TIMER_SHORTS_COMPARE1_CLEAR_Msk |
    b662:	f240 2202 	movw	r2, #514	; 0x202
    b666:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
				TIMER_SHORTS_COMPARE1_STOP_Msk;
}
    b66a:	4770      	bx	lr
    b66c:	4000a000 	.word	0x4000a000

0000b670 <ppi_init>:

static void ppi_init(void)
{
	NRF_PPI->CH[CONFIG_NRF_ESB_PPI_TIMER_START].EEP =
    b670:	4b11      	ldr	r3, [pc, #68]	; (b6b8 <ppi_init+0x48>)
    b672:	4a12      	ldr	r2, [pc, #72]	; (b6bc <ppi_init+0x4c>)
    b674:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
		(u32_t)&NRF_RADIO->EVENTS_READY;
	NRF_PPI->CH[CONFIG_NRF_ESB_PPI_TIMER_START].TEP =
    b678:	f502 420f 	add.w	r2, r2, #36608	; 0x8f00
    b67c:	f8c3 253c 	str.w	r2, [r3, #1340]	; 0x53c
		(u32_t)&ESB_SYS_TIMER->TASKS_START;

	NRF_PPI->CH[CONFIG_NRF_ESB_PPI_TIMER_STOP].EEP =
    b680:	f5a2 420e 	sub.w	r2, r2, #36352	; 0x8e00
    b684:	3afc      	subs	r2, #252	; 0xfc
    b686:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
		(u32_t)&NRF_RADIO->EVENTS_ADDRESS;
	NRF_PPI->CH[CONFIG_NRF_ESB_PPI_TIMER_STOP].TEP =
    b68a:	f502 420f 	add.w	r2, r2, #36608	; 0x8f00
    b68e:	320c      	adds	r2, #12
    b690:	f8c3 2544 	str.w	r2, [r3, #1348]	; 0x544
		(u32_t)&ESB_SYS_TIMER->TASKS_SHUTDOWN;

	NRF_PPI->CH[CONFIG_NRF_ESB_PPI_RX_TIMEOUT].EEP =
    b694:	f502 7298 	add.w	r2, r2, #304	; 0x130
    b698:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
		(u32_t)&ESB_SYS_TIMER->EVENTS_COMPARE[0];
	NRF_PPI->CH[CONFIG_NRF_ESB_PPI_RX_TIMEOUT].TEP =
    b69c:	f5a2 4211 	sub.w	r2, r2, #37120	; 0x9100
    b6a0:	3a30      	subs	r2, #48	; 0x30
    b6a2:	f8c3 254c 	str.w	r2, [r3, #1356]	; 0x54c
		(u32_t)&NRF_RADIO->TASKS_DISABLE;

	NRF_PPI->CH[CONFIG_NRF_ESB_PPI_TX_START].EEP =
    b6a6:	f502 4211 	add.w	r2, r2, #37120	; 0x9100
    b6aa:	3234      	adds	r2, #52	; 0x34
    b6ac:	f8c3 2550 	str.w	r2, [r3, #1360]	; 0x550
		(u32_t)&ESB_SYS_TIMER->EVENTS_COMPARE[1];
	NRF_PPI->CH[CONFIG_NRF_ESB_PPI_TX_START].TEP =
    b6b0:	4a03      	ldr	r2, [pc, #12]	; (b6c0 <ppi_init+0x50>)
    b6b2:	f8c3 2554 	str.w	r2, [r3, #1364]	; 0x554
		(u32_t)&NRF_RADIO->TASKS_TXEN;
}
    b6b6:	4770      	bx	lr
    b6b8:	4001f000 	.word	0x4001f000
    b6bc:	40001100 	.word	0x40001100
    b6c0:	40001000 	.word	0x40001000

0000b6c4 <on_radio_disabled_tx>:
		start_tx_transaction();
	}
}

static void on_radio_disabled_tx(void)
{
    b6c4:	b510      	push	{r4, lr}
	/* Remove the DISABLED -> RXEN shortcut, to make sure the radio stays
	 * disabled after the RX window
	 */
	NRF_RADIO->SHORTS = radio_shorts_common;
    b6c6:	4819      	ldr	r0, [pc, #100]	; (b72c <on_radio_disabled_tx+0x68>)
    b6c8:	f240 1313 	movw	r3, #275	; 0x113
    b6cc:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200

	/* Make sure the timer is started the next time the radio is ready,
	 * and that it will disable the radio automatically if no packet is
	 * received by the time defined in wait_for_ack_timeout_us
	 */
	ESB_SYS_TIMER->CC[0] = wait_for_ack_timeout_us;
    b6d0:	4b17      	ldr	r3, [pc, #92]	; (b730 <on_radio_disabled_tx+0x6c>)
    b6d2:	681a      	ldr	r2, [r3, #0]
    b6d4:	4b17      	ldr	r3, [pc, #92]	; (b734 <on_radio_disabled_tx+0x70>)
    b6d6:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
	ESB_SYS_TIMER->CC[1] = esb_cfg.retransmit_delay - 130;
    b6da:	4917      	ldr	r1, [pc, #92]	; (b738 <on_radio_disabled_tx+0x74>)
    b6dc:	898a      	ldrh	r2, [r1, #12]
    b6de:	3a82      	subs	r2, #130	; 0x82
    b6e0:	f8c3 2544 	str.w	r2, [r3, #1348]	; 0x544
	ESB_SYS_TIMER->TASKS_CLEAR = 1;
    b6e4:	2401      	movs	r4, #1
    b6e6:	60dc      	str	r4, [r3, #12]
	ESB_SYS_TIMER->EVENTS_COMPARE[0] = 0;
    b6e8:	2200      	movs	r2, #0
    b6ea:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	ESB_SYS_TIMER->EVENTS_COMPARE[1] = 0;
    b6ee:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
	/* Remove */
	ESB_SYS_TIMER->TASKS_START = 1;
    b6f2:	601c      	str	r4, [r3, #0]

	NRF_PPI->CHENSET = (1 << CONFIG_NRF_ESB_PPI_TIMER_START) |
    b6f4:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
    b6f8:	24e0      	movs	r4, #224	; 0xe0
    b6fa:	f8c3 4504 	str.w	r4, [r3, #1284]	; 0x504
			   (1 << CONFIG_NRF_ESB_PPI_RX_TIMEOUT) |
			   (1 << CONFIG_NRF_ESB_PPI_TIMER_STOP);
	NRF_PPI->CHENCLR = (1 << CONFIG_NRF_ESB_PPI_TX_START);
    b6fe:	f44f 7480 	mov.w	r4, #256	; 0x100
    b702:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
	NRF_RADIO->EVENTS_END = 0;
    b706:	f8c0 210c 	str.w	r2, [r0, #268]	; 0x10c

	if (esb_cfg.protocol == NRF_ESB_PROTOCOL_ESB) {
    b70a:	780b      	ldrb	r3, [r1, #0]
    b70c:	b91b      	cbnz	r3, b716 <on_radio_disabled_tx+0x52>
		update_rf_payload_format(0);
    b70e:	4b0b      	ldr	r3, [pc, #44]	; (b73c <on_radio_disabled_tx+0x78>)
    b710:	681b      	ldr	r3, [r3, #0]
    b712:	4610      	mov	r0, r2
    b714:	4798      	blx	r3
	}

	NRF_RADIO->PACKETPTR = (u32_t)rx_payload_buffer;
    b716:	4a0a      	ldr	r2, [pc, #40]	; (b740 <on_radio_disabled_tx+0x7c>)
    b718:	4b04      	ldr	r3, [pc, #16]	; (b72c <on_radio_disabled_tx+0x68>)
    b71a:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	on_radio_disabled = on_radio_disabled_tx_wait_for_ack;
    b71e:	4b09      	ldr	r3, [pc, #36]	; (b744 <on_radio_disabled_tx+0x80>)
    b720:	4a09      	ldr	r2, [pc, #36]	; (b748 <on_radio_disabled_tx+0x84>)
    b722:	601a      	str	r2, [r3, #0]
	esb_state = ESB_STATE_PTX_RX_ACK;
    b724:	4b09      	ldr	r3, [pc, #36]	; (b74c <on_radio_disabled_tx+0x88>)
    b726:	2203      	movs	r2, #3
    b728:	701a      	strb	r2, [r3, #0]
}
    b72a:	bd10      	pop	{r4, pc}
    b72c:	40001000 	.word	0x40001000
    b730:	2000260c 	.word	0x2000260c
    b734:	4000a000 	.word	0x4000a000
    b738:	200022c4 	.word	0x200022c4
    b73c:	20002608 	.word	0x20002608
    b740:	2000244c 	.word	0x2000244c
    b744:	200022e8 	.word	0x200022e8
    b748:	0000bc89 	.word	0x0000bc89
    b74c:	200027d9 	.word	0x200027d9

0000b750 <clear_events_restart_rx>:
		}
	}
}

static void clear_events_restart_rx(void)
{
    b750:	b510      	push	{r4, lr}
	NRF_RADIO->SHORTS = radio_shorts_common;
    b752:	4c11      	ldr	r4, [pc, #68]	; (b798 <clear_events_restart_rx+0x48>)
    b754:	f240 1313 	movw	r3, #275	; 0x113
    b758:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
	update_rf_payload_format(esb_cfg.payload_length);
    b75c:	4b0f      	ldr	r3, [pc, #60]	; (b79c <clear_events_restart_rx+0x4c>)
    b75e:	681b      	ldr	r3, [r3, #0]
    b760:	4a0f      	ldr	r2, [pc, #60]	; (b7a0 <clear_events_restart_rx+0x50>)
    b762:	7cd0      	ldrb	r0, [r2, #19]
    b764:	4798      	blx	r3
	NRF_RADIO->PACKETPTR = (u32_t)rx_payload_buffer;
    b766:	4b0f      	ldr	r3, [pc, #60]	; (b7a4 <clear_events_restart_rx+0x54>)
    b768:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
	NRF_RADIO->EVENTS_DISABLED = 0;
    b76c:	2300      	movs	r3, #0
    b76e:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
	NRF_RADIO->TASKS_DISABLE = 1;
    b772:	2301      	movs	r3, #1
    b774:	6123      	str	r3, [r4, #16]

	while (NRF_RADIO->EVENTS_DISABLED == 0) {
    b776:	4b08      	ldr	r3, [pc, #32]	; (b798 <clear_events_restart_rx+0x48>)
    b778:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
    b77c:	2b00      	cmp	r3, #0
    b77e:	d0fa      	beq.n	b776 <clear_events_restart_rx+0x26>
		/* wait for register to settle */
	}

	NRF_RADIO->EVENTS_DISABLED = 0;
    b780:	4b05      	ldr	r3, [pc, #20]	; (b798 <clear_events_restart_rx+0x48>)
    b782:	2200      	movs	r2, #0
    b784:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
	NRF_RADIO->SHORTS = radio_shorts_common |
    b788:	f240 1217 	movw	r2, #279	; 0x117
    b78c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
			    RADIO_SHORTS_DISABLED_TXEN_Msk;

	NRF_RADIO->TASKS_RXEN = 1;
    b790:	2201      	movs	r2, #1
    b792:	605a      	str	r2, [r3, #4]
}
    b794:	bd10      	pop	{r4, pc}
    b796:	bf00      	nop
    b798:	40001000 	.word	0x40001000
    b79c:	20002608 	.word	0x20002608
    b7a0:	200022c4 	.word	0x200022c4
    b7a4:	2000244c 	.word	0x2000244c

0000b7a8 <on_radio_disabled_rx_ack>:
		}
	}
}

static void on_radio_disabled_rx_ack(void)
{
    b7a8:	b510      	push	{r4, lr}
	NRF_RADIO->SHORTS = radio_shorts_common |
    b7aa:	4c0a      	ldr	r4, [pc, #40]	; (b7d4 <on_radio_disabled_rx_ack+0x2c>)
    b7ac:	f240 1317 	movw	r3, #279	; 0x117
    b7b0:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
			    RADIO_SHORTS_DISABLED_TXEN_Msk;
	update_rf_payload_format(esb_cfg.payload_length);
    b7b4:	4b08      	ldr	r3, [pc, #32]	; (b7d8 <on_radio_disabled_rx_ack+0x30>)
    b7b6:	681b      	ldr	r3, [r3, #0]
    b7b8:	4a08      	ldr	r2, [pc, #32]	; (b7dc <on_radio_disabled_rx_ack+0x34>)
    b7ba:	7cd0      	ldrb	r0, [r2, #19]
    b7bc:	4798      	blx	r3

	NRF_RADIO->PACKETPTR = (u32_t)rx_payload_buffer;
    b7be:	4b08      	ldr	r3, [pc, #32]	; (b7e0 <on_radio_disabled_rx_ack+0x38>)
    b7c0:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
	on_radio_disabled = on_radio_disabled_rx;
    b7c4:	4b07      	ldr	r3, [pc, #28]	; (b7e4 <on_radio_disabled_rx_ack+0x3c>)
    b7c6:	4a08      	ldr	r2, [pc, #32]	; (b7e8 <on_radio_disabled_rx_ack+0x40>)
    b7c8:	601a      	str	r2, [r3, #0]

	esb_state = ESB_STATE_PRX;
    b7ca:	4b08      	ldr	r3, [pc, #32]	; (b7ec <on_radio_disabled_rx_ack+0x44>)
    b7cc:	2204      	movs	r2, #4
    b7ce:	701a      	strb	r2, [r3, #0]
}
    b7d0:	bd10      	pop	{r4, pc}
    b7d2:	bf00      	nop
    b7d4:	40001000 	.word	0x40001000
    b7d8:	20002608 	.word	0x20002608
    b7dc:	200022c4 	.word	0x200022c4
    b7e0:	2000244c 	.word	0x2000244c
    b7e4:	200022e8 	.word	0x200022e8
    b7e8:	0000b9b9 	.word	0x0000b9b9
    b7ec:	200027d9 	.word	0x200027d9

0000b7f0 <RADIO_IRQHandler>:

	irq_unlock(key);
}

static void RADIO_IRQHandler(void)
{
    b7f0:	b508      	push	{r3, lr}
	if (NRF_RADIO->EVENTS_READY &&
    b7f2:	4b19      	ldr	r3, [pc, #100]	; (b858 <RADIO_IRQHandler+0x68>)
    b7f4:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    b7f8:	b163      	cbz	r3, b814 <RADIO_IRQHandler+0x24>
	    (NRF_RADIO->INTENSET & RADIO_INTENSET_READY_Msk)) {
    b7fa:	4b17      	ldr	r3, [pc, #92]	; (b858 <RADIO_IRQHandler+0x68>)
    b7fc:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
	if (NRF_RADIO->EVENTS_READY &&
    b800:	f013 0f01 	tst.w	r3, #1
    b804:	d006      	beq.n	b814 <RADIO_IRQHandler+0x24>
		NRF_RADIO->EVENTS_READY = 0;
    b806:	4b14      	ldr	r3, [pc, #80]	; (b858 <RADIO_IRQHandler+0x68>)
    b808:	2200      	movs	r2, #0
    b80a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
		ESB_SYS_TIMER->TASKS_START;
    b80e:	f503 4310 	add.w	r3, r3, #36864	; 0x9000
    b812:	681b      	ldr	r3, [r3, #0]
	}

	if (NRF_RADIO->EVENTS_END &&
    b814:	4b10      	ldr	r3, [pc, #64]	; (b858 <RADIO_IRQHandler+0x68>)
    b816:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
    b81a:	b14b      	cbz	r3, b830 <RADIO_IRQHandler+0x40>
	    (NRF_RADIO->INTENSET & RADIO_INTENSET_END_Msk)) {
    b81c:	4b0e      	ldr	r3, [pc, #56]	; (b858 <RADIO_IRQHandler+0x68>)
    b81e:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
	if (NRF_RADIO->EVENTS_END &&
    b822:	f013 0f08 	tst.w	r3, #8
    b826:	d003      	beq.n	b830 <RADIO_IRQHandler+0x40>
		NRF_RADIO->EVENTS_END = 0;
    b828:	4b0b      	ldr	r3, [pc, #44]	; (b858 <RADIO_IRQHandler+0x68>)
    b82a:	2200      	movs	r2, #0
    b82c:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
		if (on_radio_end) {
			on_radio_end();
		}
	}

	if (NRF_RADIO->EVENTS_DISABLED &&
    b830:	4b09      	ldr	r3, [pc, #36]	; (b858 <RADIO_IRQHandler+0x68>)
    b832:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
    b836:	b16b      	cbz	r3, b854 <RADIO_IRQHandler+0x64>
	    (NRF_RADIO->INTENSET & RADIO_INTENSET_DISABLED_Msk)) {
    b838:	4b07      	ldr	r3, [pc, #28]	; (b858 <RADIO_IRQHandler+0x68>)
    b83a:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
	if (NRF_RADIO->EVENTS_DISABLED &&
    b83e:	f013 0f10 	tst.w	r3, #16
    b842:	d007      	beq.n	b854 <RADIO_IRQHandler+0x64>
		NRF_RADIO->EVENTS_DISABLED = 0;
    b844:	4b04      	ldr	r3, [pc, #16]	; (b858 <RADIO_IRQHandler+0x68>)
    b846:	2200      	movs	r2, #0
    b848:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
		/* Call the correct on_radio_disable function, depending on the
		 * current protocol state.
		 */
		if (on_radio_disabled) {
    b84c:	4b03      	ldr	r3, [pc, #12]	; (b85c <RADIO_IRQHandler+0x6c>)
    b84e:	681b      	ldr	r3, [r3, #0]
    b850:	b103      	cbz	r3, b854 <RADIO_IRQHandler+0x64>
			on_radio_disabled();
    b852:	4798      	blx	r3
		}
	}
}
    b854:	bd08      	pop	{r3, pc}
    b856:	bf00      	nop
    b858:	40001000 	.word	0x40001000
    b85c:	200022e8 	.word	0x200022e8

0000b860 <rx_fifo_push_rfbuf>:
	if (rx_fifo.count >= CONFIG_NRF_ESB_RX_FIFO_SIZE) {
    b860:	4b29      	ldr	r3, [pc, #164]	; (b908 <rx_fifo_push_rfbuf+0xa8>)
    b862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    b864:	2b07      	cmp	r3, #7
    b866:	d84a      	bhi.n	b8fe <rx_fifo_push_rfbuf+0x9e>
{
    b868:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (esb_cfg.protocol == NRF_ESB_PROTOCOL_ESB_DPL) {
    b86c:	4b27      	ldr	r3, [pc, #156]	; (b90c <rx_fifo_push_rfbuf+0xac>)
    b86e:	781b      	ldrb	r3, [r3, #0]
    b870:	2b01      	cmp	r3, #1
    b872:	d032      	beq.n	b8da <rx_fifo_push_rfbuf+0x7a>
	} else if (esb_cfg.mode == NRF_ESB_MODE_PTX) {
    b874:	4b25      	ldr	r3, [pc, #148]	; (b90c <rx_fifo_push_rfbuf+0xac>)
    b876:	785b      	ldrb	r3, [r3, #1]
    b878:	2b00      	cmp	r3, #0
    b87a:	d138      	bne.n	b8ee <rx_fifo_push_rfbuf+0x8e>
		rx_fifo.payload[rx_fifo.back]->length = 0;
    b87c:	4b22      	ldr	r3, [pc, #136]	; (b908 <rx_fifo_push_rfbuf+0xa8>)
    b87e:	6a1a      	ldr	r2, [r3, #32]
    b880:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    b884:	2200      	movs	r2, #0
    b886:	701a      	strb	r2, [r3, #0]
    b888:	4688      	mov	r8, r1
    b88a:	4606      	mov	r6, r0
	memcpy(rx_fifo.payload[rx_fifo.back]->data, &rx_payload_buffer[2],
    b88c:	4c1e      	ldr	r4, [pc, #120]	; (b908 <rx_fifo_push_rfbuf+0xa8>)
    b88e:	6a23      	ldr	r3, [r4, #32]
    b890:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
    b894:	4f1e      	ldr	r7, [pc, #120]	; (b910 <rx_fifo_push_rfbuf+0xb0>)
    b896:	f810 2b05 	ldrb.w	r2, [r0], #5
    b89a:	1cb9      	adds	r1, r7, #2
    b89c:	f004 fe48 	bl	10530 <memcpy>
	rx_fifo.payload[rx_fifo.back]->pipe = pipe;
    b8a0:	6a23      	ldr	r3, [r4, #32]
    b8a2:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
    b8a6:	706e      	strb	r6, [r5, #1]
	rx_fifo.payload[rx_fifo.back]->rssi = NRF_RADIO->RSSISAMPLE;
    b8a8:	4a1a      	ldr	r2, [pc, #104]	; (b914 <rx_fifo_push_rfbuf+0xb4>)
    b8aa:	f8d2 2548 	ldr.w	r2, [r2, #1352]	; 0x548
    b8ae:	70aa      	strb	r2, [r5, #2]
	rx_fifo.payload[rx_fifo.back]->pid = pid;
    b8b0:	f885 8004 	strb.w	r8, [r5, #4]
	rx_fifo.payload[rx_fifo.back]->noack = !(rx_payload_buffer[1] & 0x01);
    b8b4:	787a      	ldrb	r2, [r7, #1]
    b8b6:	f082 0201 	eor.w	r2, r2, #1
    b8ba:	f002 0201 	and.w	r2, r2, #1
    b8be:	70ea      	strb	r2, [r5, #3]
	if (++rx_fifo.back >= CONFIG_NRF_ESB_RX_FIFO_SIZE) {
    b8c0:	3301      	adds	r3, #1
    b8c2:	6223      	str	r3, [r4, #32]
    b8c4:	2b07      	cmp	r3, #7
    b8c6:	d901      	bls.n	b8cc <rx_fifo_push_rfbuf+0x6c>
		rx_fifo.back = 0;
    b8c8:	2200      	movs	r2, #0
    b8ca:	6222      	str	r2, [r4, #32]
	rx_fifo.count++;
    b8cc:	4a0e      	ldr	r2, [pc, #56]	; (b908 <rx_fifo_push_rfbuf+0xa8>)
    b8ce:	6a93      	ldr	r3, [r2, #40]	; 0x28
    b8d0:	3301      	adds	r3, #1
    b8d2:	6293      	str	r3, [r2, #40]	; 0x28
	return true;
    b8d4:	2001      	movs	r0, #1
}
    b8d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (rx_payload_buffer[0] > CONFIG_NRF_ESB_MAX_PAYLOAD_LENGTH) {
    b8da:	4b0d      	ldr	r3, [pc, #52]	; (b910 <rx_fifo_push_rfbuf+0xb0>)
    b8dc:	781b      	ldrb	r3, [r3, #0]
    b8de:	2b20      	cmp	r3, #32
    b8e0:	d80f      	bhi.n	b902 <rx_fifo_push_rfbuf+0xa2>
		rx_fifo.payload[rx_fifo.back]->length = rx_payload_buffer[0];
    b8e2:	4a09      	ldr	r2, [pc, #36]	; (b908 <rx_fifo_push_rfbuf+0xa8>)
    b8e4:	6a14      	ldr	r4, [r2, #32]
    b8e6:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
    b8ea:	7013      	strb	r3, [r2, #0]
    b8ec:	e7cc      	b.n	b888 <rx_fifo_push_rfbuf+0x28>
		rx_fifo.payload[rx_fifo.back]->length = esb_cfg.payload_length;
    b8ee:	4b06      	ldr	r3, [pc, #24]	; (b908 <rx_fifo_push_rfbuf+0xa8>)
    b8f0:	6a1a      	ldr	r2, [r3, #32]
    b8f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    b8f6:	4a05      	ldr	r2, [pc, #20]	; (b90c <rx_fifo_push_rfbuf+0xac>)
    b8f8:	7cd2      	ldrb	r2, [r2, #19]
    b8fa:	701a      	strb	r2, [r3, #0]
    b8fc:	e7c4      	b.n	b888 <rx_fifo_push_rfbuf+0x28>
		return false;
    b8fe:	2000      	movs	r0, #0
}
    b900:	4770      	bx	lr
			return false;
    b902:	2000      	movs	r0, #0
    b904:	e7e7      	b.n	b8d6 <rx_fifo_push_rfbuf+0x76>
    b906:	bf00      	nop
    b908:	200022f8 	.word	0x200022f8
    b90c:	200022c4 	.word	0x200022c4
    b910:	2000244c 	.word	0x2000244c
    b914:	40001000 	.word	0x40001000

0000b918 <on_radio_disabled_rx_dpl>:
{
    b918:	b538      	push	{r3, r4, r5, lr}
	if (tx_fifo.count > 0 &&
    b91a:	4b20      	ldr	r3, [pc, #128]	; (b99c <on_radio_disabled_rx_dpl+0x84>)
    b91c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    b91e:	b14b      	cbz	r3, b934 <on_radio_disabled_rx_dpl+0x1c>
	    (tx_fifo.payload[tx_fifo.front]->pipe == NRF_RADIO->RXMATCH)) {
    b920:	4a1e      	ldr	r2, [pc, #120]	; (b99c <on_radio_disabled_rx_dpl+0x84>)
    b922:	6a54      	ldr	r4, [r2, #36]	; 0x24
    b924:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
    b928:	7855      	ldrb	r5, [r2, #1]
    b92a:	4a1d      	ldr	r2, [pc, #116]	; (b9a0 <on_radio_disabled_rx_dpl+0x88>)
    b92c:	f8d2 2408 	ldr.w	r2, [r2, #1032]	; 0x408
	if (tx_fifo.count > 0 &&
    b930:	4295      	cmp	r5, r2
    b932:	d00c      	beq.n	b94e <on_radio_disabled_rx_dpl+0x36>
		pipe_info->ack_payload = false;
    b934:	2400      	movs	r4, #0
    b936:	70cc      	strb	r4, [r1, #3]
		update_rf_payload_format(0);
    b938:	4b1a      	ldr	r3, [pc, #104]	; (b9a4 <on_radio_disabled_rx_dpl+0x8c>)
    b93a:	681b      	ldr	r3, [r3, #0]
    b93c:	4620      	mov	r0, r4
    b93e:	4798      	blx	r3
		tx_payload_buffer[0] = 0;
    b940:	4b19      	ldr	r3, [pc, #100]	; (b9a8 <on_radio_disabled_rx_dpl+0x90>)
    b942:	701c      	strb	r4, [r3, #0]
	tx_payload_buffer[1] = rx_payload_buffer[1];
    b944:	4b19      	ldr	r3, [pc, #100]	; (b9ac <on_radio_disabled_rx_dpl+0x94>)
    b946:	785a      	ldrb	r2, [r3, #1]
    b948:	4b17      	ldr	r3, [pc, #92]	; (b9a8 <on_radio_disabled_rx_dpl+0x90>)
    b94a:	705a      	strb	r2, [r3, #1]
}
    b94c:	bd38      	pop	{r3, r4, r5, pc}
		if (pipe_info->ack_payload && !retransmit_payload) {
    b94e:	78ca      	ldrb	r2, [r1, #3]
    b950:	b172      	cbz	r2, b970 <on_radio_disabled_rx_dpl+0x58>
    b952:	b968      	cbnz	r0, b970 <on_radio_disabled_rx_dpl+0x58>
			if (++tx_fifo.front >= CONFIG_NRF_ESB_TX_FIFO_SIZE) {
    b954:	3401      	adds	r4, #1
    b956:	4a11      	ldr	r2, [pc, #68]	; (b99c <on_radio_disabled_rx_dpl+0x84>)
    b958:	6254      	str	r4, [r2, #36]	; 0x24
    b95a:	2c07      	cmp	r4, #7
    b95c:	d900      	bls.n	b960 <on_radio_disabled_rx_dpl+0x48>
				tx_fifo.front = 0;
    b95e:	6250      	str	r0, [r2, #36]	; 0x24
			tx_fifo.count--;
    b960:	3b01      	subs	r3, #1
    b962:	4a0e      	ldr	r2, [pc, #56]	; (b99c <on_radio_disabled_rx_dpl+0x84>)
    b964:	6293      	str	r3, [r2, #40]	; 0x28
			interrupt_flags |= INT_TX_SUCCESS_MSK;
    b966:	4a12      	ldr	r2, [pc, #72]	; (b9b0 <on_radio_disabled_rx_dpl+0x98>)
    b968:	6813      	ldr	r3, [r2, #0]
    b96a:	f043 0301 	orr.w	r3, r3, #1
    b96e:	6013      	str	r3, [r2, #0]
		pipe_info->ack_payload = true;
    b970:	2301      	movs	r3, #1
    b972:	70cb      	strb	r3, [r1, #3]
		current_payload = tx_fifo.payload[tx_fifo.front];
    b974:	4b09      	ldr	r3, [pc, #36]	; (b99c <on_radio_disabled_rx_dpl+0x84>)
    b976:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    b978:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    b97c:	4c0d      	ldr	r4, [pc, #52]	; (b9b4 <on_radio_disabled_rx_dpl+0x9c>)
    b97e:	6023      	str	r3, [r4, #0]
		update_rf_payload_format(current_payload->length);
    b980:	4a08      	ldr	r2, [pc, #32]	; (b9a4 <on_radio_disabled_rx_dpl+0x8c>)
    b982:	6812      	ldr	r2, [r2, #0]
    b984:	7818      	ldrb	r0, [r3, #0]
    b986:	4790      	blx	r2
		tx_payload_buffer[0] = current_payload->length;
    b988:	6821      	ldr	r1, [r4, #0]
    b98a:	f811 2b05 	ldrb.w	r2, [r1], #5
    b98e:	4806      	ldr	r0, [pc, #24]	; (b9a8 <on_radio_disabled_rx_dpl+0x90>)
    b990:	f800 2b02 	strb.w	r2, [r0], #2
		memcpy(&tx_payload_buffer[2], current_payload->data,
    b994:	f004 fdcc 	bl	10530 <memcpy>
    b998:	e7d4      	b.n	b944 <on_radio_disabled_rx_dpl+0x2c>
    b99a:	bf00      	nop
    b99c:	20002490 	.word	0x20002490
    b9a0:	40001000 	.word	0x40001000
    b9a4:	20002608 	.word	0x20002608
    b9a8:	200025e4 	.word	0x200025e4
    b9ac:	2000244c 	.word	0x2000244c
    b9b0:	200022e0 	.word	0x200022e0
    b9b4:	200022c0 	.word	0x200022c0

0000b9b8 <on_radio_disabled_rx>:
{
    b9b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (NRF_RADIO->CRCSTATUS == 0) {
    b9ba:	4b3e      	ldr	r3, [pc, #248]	; (bab4 <on_radio_disabled_rx+0xfc>)
    b9bc:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    b9c0:	2b00      	cmp	r3, #0
    b9c2:	d03f      	beq.n	ba44 <on_radio_disabled_rx+0x8c>
	if (rx_fifo.count >= CONFIG_NRF_ESB_RX_FIFO_SIZE) {
    b9c4:	4b3c      	ldr	r3, [pc, #240]	; (bab8 <on_radio_disabled_rx+0x100>)
    b9c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    b9c8:	2b07      	cmp	r3, #7
    b9ca:	d83e      	bhi.n	ba4a <on_radio_disabled_rx+0x92>
	pipe_info = &rx_pipe_info[NRF_RADIO->RXMATCH];
    b9cc:	4a39      	ldr	r2, [pc, #228]	; (bab4 <on_radio_disabled_rx+0xfc>)
    b9ce:	f8d2 4408 	ldr.w	r4, [r2, #1032]	; 0x408
    b9d2:	4b3a      	ldr	r3, [pc, #232]	; (babc <on_radio_disabled_rx+0x104>)
    b9d4:	eb03 0184 	add.w	r1, r3, r4, lsl #2
	if (NRF_RADIO->RXCRC == pipe_info->crc &&
    b9d8:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
    b9dc:	f833 3024 	ldrh.w	r3, [r3, r4, lsl #2]
    b9e0:	429a      	cmp	r2, r3
    b9e2:	d035      	beq.n	ba50 <on_radio_disabled_rx+0x98>
	bool send_rx_event = true;
    b9e4:	2501      	movs	r5, #1
	bool retransmit_payload = false;
    b9e6:	2000      	movs	r0, #0
	pipe_info->pid = rx_payload_buffer[1] >> 1;
    b9e8:	4b35      	ldr	r3, [pc, #212]	; (bac0 <on_radio_disabled_rx+0x108>)
    b9ea:	785a      	ldrb	r2, [r3, #1]
    b9ec:	4b33      	ldr	r3, [pc, #204]	; (babc <on_radio_disabled_rx+0x104>)
    b9ee:	eb03 0684 	add.w	r6, r3, r4, lsl #2
    b9f2:	0857      	lsrs	r7, r2, #1
    b9f4:	70b7      	strb	r7, [r6, #2]
	pipe_info->crc = NRF_RADIO->RXCRC;
    b9f6:	4e2f      	ldr	r6, [pc, #188]	; (bab4 <on_radio_disabled_rx+0xfc>)
    b9f8:	f8d6 640c 	ldr.w	r6, [r6, #1036]	; 0x40c
    b9fc:	f823 6024 	strh.w	r6, [r3, r4, lsl #2]
	if ((esb_cfg.selective_auto_ack == false) ||
    ba00:	4b30      	ldr	r3, [pc, #192]	; (bac4 <on_radio_disabled_rx+0x10c>)
    ba02:	7d1b      	ldrb	r3, [r3, #20]
    ba04:	b113      	cbz	r3, ba0c <on_radio_disabled_rx+0x54>
    ba06:	f012 0f01 	tst.w	r2, #1
    ba0a:	d038      	beq.n	ba7e <on_radio_disabled_rx+0xc6>
		NRF_RADIO->SHORTS = radio_shorts_common |
    ba0c:	4b29      	ldr	r3, [pc, #164]	; (bab4 <on_radio_disabled_rx+0xfc>)
    ba0e:	f240 121b 	movw	r2, #283	; 0x11b
    ba12:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
		switch (esb_cfg.protocol) {
    ba16:	4b2b      	ldr	r3, [pc, #172]	; (bac4 <on_radio_disabled_rx+0x10c>)
    ba18:	781b      	ldrb	r3, [r3, #0]
    ba1a:	b32b      	cbz	r3, ba68 <on_radio_disabled_rx+0xb0>
    ba1c:	2b01      	cmp	r3, #1
    ba1e:	d101      	bne.n	ba24 <on_radio_disabled_rx+0x6c>
			on_radio_disabled_rx_dpl(retransmit_payload, pipe_info);
    ba20:	f7ff ff7a 	bl	b918 <on_radio_disabled_rx_dpl>
		esb_state = ESB_STATE_PRX_SEND_ACK;
    ba24:	4b28      	ldr	r3, [pc, #160]	; (bac8 <on_radio_disabled_rx+0x110>)
    ba26:	2205      	movs	r2, #5
    ba28:	701a      	strb	r2, [r3, #0]
		NRF_RADIO->TXADDRESS = NRF_RADIO->RXMATCH;
    ba2a:	4b22      	ldr	r3, [pc, #136]	; (bab4 <on_radio_disabled_rx+0xfc>)
    ba2c:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
    ba30:	f8c3 252c 	str.w	r2, [r3, #1324]	; 0x52c
		NRF_RADIO->PACKETPTR = (u32_t)tx_payload_buffer;
    ba34:	4a25      	ldr	r2, [pc, #148]	; (bacc <on_radio_disabled_rx+0x114>)
    ba36:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
		on_radio_disabled = on_radio_disabled_rx_ack;
    ba3a:	4b25      	ldr	r3, [pc, #148]	; (bad0 <on_radio_disabled_rx+0x118>)
    ba3c:	4a25      	ldr	r2, [pc, #148]	; (bad4 <on_radio_disabled_rx+0x11c>)
    ba3e:	601a      	str	r2, [r3, #0]
	if (send_rx_event) {
    ba40:	bb05      	cbnz	r5, ba84 <on_radio_disabled_rx+0xcc>
}
    ba42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		clear_events_restart_rx();
    ba44:	f7ff fe84 	bl	b750 <clear_events_restart_rx>
		return;
    ba48:	e7fb      	b.n	ba42 <on_radio_disabled_rx+0x8a>
		clear_events_restart_rx();
    ba4a:	f7ff fe81 	bl	b750 <clear_events_restart_rx>
		return;
    ba4e:	e7f8      	b.n	ba42 <on_radio_disabled_rx+0x8a>
	    (rx_payload_buffer[1] >> 1) == pipe_info->pid) {
    ba50:	4b1b      	ldr	r3, [pc, #108]	; (bac0 <on_radio_disabled_rx+0x108>)
    ba52:	785a      	ldrb	r2, [r3, #1]
    ba54:	788b      	ldrb	r3, [r1, #2]
	if (NRF_RADIO->RXCRC == pipe_info->crc &&
    ba56:	ebb3 0f52 	cmp.w	r3, r2, lsr #1
    ba5a:	d002      	beq.n	ba62 <on_radio_disabled_rx+0xaa>
	bool send_rx_event = true;
    ba5c:	2501      	movs	r5, #1
	bool retransmit_payload = false;
    ba5e:	2000      	movs	r0, #0
    ba60:	e7c2      	b.n	b9e8 <on_radio_disabled_rx+0x30>
		send_rx_event = false;
    ba62:	2500      	movs	r5, #0
		retransmit_payload = true;
    ba64:	2001      	movs	r0, #1
    ba66:	e7bf      	b.n	b9e8 <on_radio_disabled_rx+0x30>
			update_rf_payload_format(0);
    ba68:	4b1b      	ldr	r3, [pc, #108]	; (bad8 <on_radio_disabled_rx+0x120>)
    ba6a:	681b      	ldr	r3, [r3, #0]
    ba6c:	2000      	movs	r0, #0
    ba6e:	4798      	blx	r3
			tx_payload_buffer[0] = rx_payload_buffer[0];
    ba70:	4b13      	ldr	r3, [pc, #76]	; (bac0 <on_radio_disabled_rx+0x108>)
    ba72:	781a      	ldrb	r2, [r3, #0]
    ba74:	4b15      	ldr	r3, [pc, #84]	; (bacc <on_radio_disabled_rx+0x114>)
    ba76:	701a      	strb	r2, [r3, #0]
			tx_payload_buffer[1] = 0;
    ba78:	2200      	movs	r2, #0
    ba7a:	705a      	strb	r2, [r3, #1]
			break;
    ba7c:	e7d2      	b.n	ba24 <on_radio_disabled_rx+0x6c>
		clear_events_restart_rx();
    ba7e:	f7ff fe67 	bl	b750 <clear_events_restart_rx>
    ba82:	e7dd      	b.n	ba40 <on_radio_disabled_rx+0x88>
		if (rx_fifo_push_rfbuf(NRF_RADIO->RXMATCH, pipe_info->pid)) {
    ba84:	4b0b      	ldr	r3, [pc, #44]	; (bab4 <on_radio_disabled_rx+0xfc>)
    ba86:	f8d3 0408 	ldr.w	r0, [r3, #1032]	; 0x408
    ba8a:	4b0c      	ldr	r3, [pc, #48]	; (babc <on_radio_disabled_rx+0x104>)
    ba8c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    ba90:	78a1      	ldrb	r1, [r4, #2]
    ba92:	b2c0      	uxtb	r0, r0
    ba94:	f7ff fee4 	bl	b860 <rx_fifo_push_rfbuf>
    ba98:	2800      	cmp	r0, #0
    ba9a:	d0d2      	beq.n	ba42 <on_radio_disabled_rx+0x8a>
			interrupt_flags |= INT_RX_DATA_RECEIVED_MSK;
    ba9c:	4a0f      	ldr	r2, [pc, #60]	; (badc <on_radio_disabled_rx+0x124>)
    ba9e:	6813      	ldr	r3, [r2, #0]
    baa0:	f043 0304 	orr.w	r3, r3, #4
    baa4:	6013      	str	r3, [r2, #0]
    baa6:	4b0e      	ldr	r3, [pc, #56]	; (bae0 <on_radio_disabled_rx+0x128>)
    baa8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    baac:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    bab0:	e7c7      	b.n	ba42 <on_radio_disabled_rx+0x8a>
    bab2:	bf00      	nop
    bab4:	40001000 	.word	0x40001000
    bab8:	200022f8 	.word	0x200022f8
    babc:	20002470 	.word	0x20002470
    bac0:	2000244c 	.word	0x2000244c
    bac4:	200022c4 	.word	0x200022c4
    bac8:	200027d9 	.word	0x200027d9
    bacc:	200025e4 	.word	0x200025e4
    bad0:	200022e8 	.word	0x200022e8
    bad4:	0000b7a9 	.word	0x0000b7a9
    bad8:	20002608 	.word	0x20002608
    badc:	200022e0 	.word	0x200022e0
    bae0:	e000e100 	.word	0xe000e100

0000bae4 <start_tx_transaction>:
{
    bae4:	b538      	push	{r3, r4, r5, lr}
	last_tx_attempts = 1;
    bae6:	4b48      	ldr	r3, [pc, #288]	; (bc08 <start_tx_transaction+0x124>)
    bae8:	2201      	movs	r2, #1
    baea:	601a      	str	r2, [r3, #0]
	current_payload = tx_fifo.payload[tx_fifo.front];
    baec:	4b47      	ldr	r3, [pc, #284]	; (bc0c <start_tx_transaction+0x128>)
    baee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    baf0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    baf4:	4b46      	ldr	r3, [pc, #280]	; (bc10 <start_tx_transaction+0x12c>)
    baf6:	6019      	str	r1, [r3, #0]
	switch (esb_cfg.protocol) {
    baf8:	4b46      	ldr	r3, [pc, #280]	; (bc14 <start_tx_transaction+0x130>)
    bafa:	781b      	ldrb	r3, [r3, #0]
    bafc:	b323      	cbz	r3, bb48 <start_tx_transaction+0x64>
    bafe:	2b01      	cmp	r3, #1
    bb00:	d045      	beq.n	bb8e <start_tx_transaction+0xaa>
	NRF_RADIO->TXADDRESS = current_payload->pipe;
    bb02:	4b43      	ldr	r3, [pc, #268]	; (bc10 <start_tx_transaction+0x12c>)
    bb04:	681b      	ldr	r3, [r3, #0]
    bb06:	785a      	ldrb	r2, [r3, #1]
    bb08:	4c43      	ldr	r4, [pc, #268]	; (bc18 <start_tx_transaction+0x134>)
    bb0a:	f8c4 252c 	str.w	r2, [r4, #1324]	; 0x52c
	NRF_RADIO->RXADDRESSES = 1 << current_payload->pipe;
    bb0e:	785b      	ldrb	r3, [r3, #1]
    bb10:	2501      	movs	r5, #1
    bb12:	fa05 f303 	lsl.w	r3, r5, r3
    bb16:	f8c4 3530 	str.w	r3, [r4, #1328]	; 0x530
	NRF_RADIO->FREQUENCY = esb_addr.rf_channel;
    bb1a:	4b40      	ldr	r3, [pc, #256]	; (bc1c <start_tx_transaction+0x138>)
    bb1c:	7cdb      	ldrb	r3, [r3, #19]
    bb1e:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
	NRF_RADIO->PACKETPTR = (u32_t)tx_payload_buffer;
    bb22:	4b3f      	ldr	r3, [pc, #252]	; (bc20 <start_tx_transaction+0x13c>)
    bb24:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    bb28:	4b3e      	ldr	r3, [pc, #248]	; (bc24 <start_tx_transaction+0x140>)
    bb2a:	2202      	movs	r2, #2
    bb2c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	irq_enable(RADIO_IRQn);
    bb30:	4628      	mov	r0, r5
    bb32:	f7fd fcb9 	bl	94a8 <z_arch_irq_enable>
	NRF_RADIO->EVENTS_ADDRESS = 0;
    bb36:	2300      	movs	r3, #0
    bb38:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
	NRF_RADIO->EVENTS_PAYLOAD = 0;
    bb3c:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
	NRF_RADIO->EVENTS_DISABLED = 0;
    bb40:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
	NRF_RADIO->TASKS_TXEN = 1;
    bb44:	6025      	str	r5, [r4, #0]
}
    bb46:	bd38      	pop	{r3, r4, r5, pc}
		update_rf_payload_format(current_payload->length);
    bb48:	4b37      	ldr	r3, [pc, #220]	; (bc28 <start_tx_transaction+0x144>)
    bb4a:	681b      	ldr	r3, [r3, #0]
    bb4c:	7808      	ldrb	r0, [r1, #0]
    bb4e:	4798      	blx	r3
		tx_payload_buffer[0] = current_payload->pid;
    bb50:	4b2f      	ldr	r3, [pc, #188]	; (bc10 <start_tx_transaction+0x12c>)
    bb52:	6819      	ldr	r1, [r3, #0]
    bb54:	790b      	ldrb	r3, [r1, #4]
    bb56:	4832      	ldr	r0, [pc, #200]	; (bc20 <start_tx_transaction+0x13c>)
    bb58:	7003      	strb	r3, [r0, #0]
		tx_payload_buffer[1] = 0;
    bb5a:	2300      	movs	r3, #0
    bb5c:	7043      	strb	r3, [r0, #1]
		memcpy(&tx_payload_buffer[2], current_payload->data,
    bb5e:	f811 2b05 	ldrb.w	r2, [r1], #5
    bb62:	3002      	adds	r0, #2
    bb64:	f004 fce4 	bl	10530 <memcpy>
		NRF_RADIO->SHORTS = radio_shorts_common |
    bb68:	4b2b      	ldr	r3, [pc, #172]	; (bc18 <start_tx_transaction+0x134>)
    bb6a:	f240 121b 	movw	r2, #283	; 0x11b
    bb6e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
		NRF_RADIO->INTENSET = RADIO_INTENSET_DISABLED_Msk |
    bb72:	2211      	movs	r2, #17
    bb74:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		retransmits_remaining = esb_cfg.retransmit_count;
    bb78:	4b26      	ldr	r3, [pc, #152]	; (bc14 <start_tx_transaction+0x130>)
    bb7a:	89da      	ldrh	r2, [r3, #14]
    bb7c:	4b2b      	ldr	r3, [pc, #172]	; (bc2c <start_tx_transaction+0x148>)
    bb7e:	601a      	str	r2, [r3, #0]
		on_radio_disabled = on_radio_disabled_tx;
    bb80:	4b2b      	ldr	r3, [pc, #172]	; (bc30 <start_tx_transaction+0x14c>)
    bb82:	4a2c      	ldr	r2, [pc, #176]	; (bc34 <start_tx_transaction+0x150>)
    bb84:	601a      	str	r2, [r3, #0]
		esb_state = ESB_STATE_PTX_TX_ACK;
    bb86:	4b2c      	ldr	r3, [pc, #176]	; (bc38 <start_tx_transaction+0x154>)
    bb88:	2202      	movs	r2, #2
    bb8a:	701a      	strb	r2, [r3, #0]
		break;
    bb8c:	e7b9      	b.n	bb02 <start_tx_transaction+0x1e>
		ack = !current_payload->noack || !esb_cfg.selective_auto_ack;
    bb8e:	78ca      	ldrb	r2, [r1, #3]
    bb90:	b122      	cbz	r2, bb9c <start_tx_transaction+0xb8>
    bb92:	4b20      	ldr	r3, [pc, #128]	; (bc14 <start_tx_transaction+0x130>)
    bb94:	7d1b      	ldrb	r3, [r3, #20]
    bb96:	bb33      	cbnz	r3, bbe6 <start_tx_transaction+0x102>
    bb98:	2401      	movs	r4, #1
    bb9a:	e000      	b.n	bb9e <start_tx_transaction+0xba>
    bb9c:	2401      	movs	r4, #1
		tx_payload_buffer[0] = current_payload->length;
    bb9e:	780b      	ldrb	r3, [r1, #0]
    bba0:	481f      	ldr	r0, [pc, #124]	; (bc20 <start_tx_transaction+0x13c>)
    bba2:	7003      	strb	r3, [r0, #0]
		tx_payload_buffer[1] = current_payload->pid << 1;
    bba4:	790b      	ldrb	r3, [r1, #4]
    bba6:	005b      	lsls	r3, r3, #1
    bba8:	b2db      	uxtb	r3, r3
		tx_payload_buffer[1] |= current_payload->noack ? 0x00 : 0x01;
    bbaa:	2a00      	cmp	r2, #0
    bbac:	bf08      	it	eq
    bbae:	f043 0301 	orreq.w	r3, r3, #1
    bbb2:	7043      	strb	r3, [r0, #1]
		memcpy(&tx_payload_buffer[2], current_payload->data,
    bbb4:	f811 2b05 	ldrb.w	r2, [r1], #5
    bbb8:	3002      	adds	r0, #2
    bbba:	f004 fcb9 	bl	10530 <memcpy>
		if (ack) {
    bbbe:	b1a4      	cbz	r4, bbea <start_tx_transaction+0x106>
			NRF_RADIO->SHORTS = radio_shorts_common |
    bbc0:	4b15      	ldr	r3, [pc, #84]	; (bc18 <start_tx_transaction+0x134>)
    bbc2:	f240 121b 	movw	r2, #283	; 0x11b
    bbc6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
			NRF_RADIO->INTENSET = RADIO_INTENSET_DISABLED_Msk |
    bbca:	2211      	movs	r2, #17
    bbcc:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
			retransmits_remaining = esb_cfg.retransmit_count;
    bbd0:	4b10      	ldr	r3, [pc, #64]	; (bc14 <start_tx_transaction+0x130>)
    bbd2:	89da      	ldrh	r2, [r3, #14]
    bbd4:	4b15      	ldr	r3, [pc, #84]	; (bc2c <start_tx_transaction+0x148>)
    bbd6:	601a      	str	r2, [r3, #0]
			on_radio_disabled = on_radio_disabled_tx;
    bbd8:	4b15      	ldr	r3, [pc, #84]	; (bc30 <start_tx_transaction+0x14c>)
    bbda:	4a16      	ldr	r2, [pc, #88]	; (bc34 <start_tx_transaction+0x150>)
    bbdc:	601a      	str	r2, [r3, #0]
			esb_state = ESB_STATE_PTX_TX_ACK;
    bbde:	4b16      	ldr	r3, [pc, #88]	; (bc38 <start_tx_transaction+0x154>)
    bbe0:	2202      	movs	r2, #2
    bbe2:	701a      	strb	r2, [r3, #0]
    bbe4:	e78d      	b.n	bb02 <start_tx_transaction+0x1e>
		ack = !current_payload->noack || !esb_cfg.selective_auto_ack;
    bbe6:	2400      	movs	r4, #0
    bbe8:	e7d9      	b.n	bb9e <start_tx_transaction+0xba>
			NRF_RADIO->SHORTS = radio_shorts_common;
    bbea:	4b0b      	ldr	r3, [pc, #44]	; (bc18 <start_tx_transaction+0x134>)
    bbec:	f240 1213 	movw	r2, #275	; 0x113
    bbf0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
			NRF_RADIO->INTENSET = RADIO_INTENSET_DISABLED_Msk;
    bbf4:	2210      	movs	r2, #16
    bbf6:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
			on_radio_disabled = on_radio_disabled_tx_noack;
    bbfa:	4b0d      	ldr	r3, [pc, #52]	; (bc30 <start_tx_transaction+0x14c>)
    bbfc:	4a0f      	ldr	r2, [pc, #60]	; (bc3c <start_tx_transaction+0x158>)
    bbfe:	601a      	str	r2, [r3, #0]
			esb_state = ESB_STATE_PTX_TX;
    bc00:	4b0d      	ldr	r3, [pc, #52]	; (bc38 <start_tx_transaction+0x154>)
    bc02:	2201      	movs	r2, #1
    bc04:	701a      	strb	r2, [r3, #0]
    bc06:	e77c      	b.n	bb02 <start_tx_transaction+0x1e>
    bc08:	200022e4 	.word	0x200022e4
    bc0c:	20002490 	.word	0x20002490
    bc10:	200022c0 	.word	0x200022c0
    bc14:	200022c4 	.word	0x200022c4
    bc18:	40001000 	.word	0x40001000
    bc1c:	200071b4 	.word	0x200071b4
    bc20:	200025e4 	.word	0x200025e4
    bc24:	e000e100 	.word	0xe000e100
    bc28:	20002608 	.word	0x20002608
    bc2c:	200022f4 	.word	0x200022f4
    bc30:	200022e8 	.word	0x200022e8
    bc34:	0000b6c5 	.word	0x0000b6c5
    bc38:	200027d9 	.word	0x200027d9
    bc3c:	0000bc41 	.word	0x0000bc41

0000bc40 <on_radio_disabled_tx_noack>:
{
    bc40:	b508      	push	{r3, lr}
	interrupt_flags |= INT_TX_SUCCESS_MSK;
    bc42:	4a0d      	ldr	r2, [pc, #52]	; (bc78 <on_radio_disabled_tx_noack+0x38>)
    bc44:	6813      	ldr	r3, [r2, #0]
    bc46:	f043 0301 	orr.w	r3, r3, #1
    bc4a:	6013      	str	r3, [r2, #0]
	tx_fifo_remove_last();
    bc4c:	f7ff fce4 	bl	b618 <tx_fifo_remove_last>
	if (tx_fifo.count == 0) {
    bc50:	4b0a      	ldr	r3, [pc, #40]	; (bc7c <on_radio_disabled_tx_noack+0x3c>)
    bc52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    bc54:	b943      	cbnz	r3, bc68 <on_radio_disabled_tx_noack+0x28>
		esb_state = ESB_STATE_IDLE;
    bc56:	4b0a      	ldr	r3, [pc, #40]	; (bc80 <on_radio_disabled_tx_noack+0x40>)
    bc58:	2200      	movs	r2, #0
    bc5a:	701a      	strb	r2, [r3, #0]
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    bc5c:	4b09      	ldr	r3, [pc, #36]	; (bc84 <on_radio_disabled_tx_noack+0x44>)
    bc5e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    bc62:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
    bc66:	bd08      	pop	{r3, pc}
    bc68:	4b06      	ldr	r3, [pc, #24]	; (bc84 <on_radio_disabled_tx_noack+0x44>)
    bc6a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    bc6e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
		start_tx_transaction();
    bc72:	f7ff ff37 	bl	bae4 <start_tx_transaction>
}
    bc76:	e7f6      	b.n	bc66 <on_radio_disabled_tx_noack+0x26>
    bc78:	200022e0 	.word	0x200022e0
    bc7c:	20002490 	.word	0x20002490
    bc80:	200027d9 	.word	0x200027d9
    bc84:	e000e100 	.word	0xe000e100

0000bc88 <on_radio_disabled_tx_wait_for_ack>:
{
    bc88:	b510      	push	{r4, lr}
	NRF_PPI->CHENCLR = (1 << CONFIG_NRF_ESB_PPI_TIMER_START) |
    bc8a:	4b4c      	ldr	r3, [pc, #304]	; (bdbc <on_radio_disabled_tx_wait_for_ack+0x134>)
    bc8c:	22e0      	movs	r2, #224	; 0xe0
    bc8e:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	if (NRF_RADIO->EVENTS_END && NRF_RADIO->CRCSTATUS != 0) {
    bc92:	f5a3 33f0 	sub.w	r3, r3, #122880	; 0x1e000
    bc96:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
    bc9a:	b11b      	cbz	r3, bca4 <on_radio_disabled_tx_wait_for_ack+0x1c>
    bc9c:	4b48      	ldr	r3, [pc, #288]	; (bdc0 <on_radio_disabled_tx_wait_for_ack+0x138>)
    bc9e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    bca2:	bb0b      	cbnz	r3, bce8 <on_radio_disabled_tx_wait_for_ack+0x60>
		if (retransmits_remaining-- == 0) {
    bca4:	4a47      	ldr	r2, [pc, #284]	; (bdc4 <on_radio_disabled_tx_wait_for_ack+0x13c>)
    bca6:	6813      	ldr	r3, [r2, #0]
    bca8:	1e59      	subs	r1, r3, #1
    bcaa:	6011      	str	r1, [r2, #0]
    bcac:	2b00      	cmp	r3, #0
    bcae:	d161      	bne.n	bd74 <on_radio_disabled_tx_wait_for_ack+0xec>
			ESB_SYS_TIMER->TASKS_SHUTDOWN = 1;
    bcb0:	4b45      	ldr	r3, [pc, #276]	; (bdc8 <on_radio_disabled_tx_wait_for_ack+0x140>)
    bcb2:	2201      	movs	r2, #1
    bcb4:	611a      	str	r2, [r3, #16]
			NRF_PPI->CHENCLR = (1 << CONFIG_NRF_ESB_PPI_TX_START);
    bcb6:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
    bcba:	f44f 7280 	mov.w	r2, #256	; 0x100
    bcbe:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
			last_tx_attempts = esb_cfg.retransmit_count + 1;
    bcc2:	4b42      	ldr	r3, [pc, #264]	; (bdcc <on_radio_disabled_tx_wait_for_ack+0x144>)
    bcc4:	89db      	ldrh	r3, [r3, #14]
    bcc6:	3301      	adds	r3, #1
    bcc8:	4a41      	ldr	r2, [pc, #260]	; (bdd0 <on_radio_disabled_tx_wait_for_ack+0x148>)
    bcca:	6013      	str	r3, [r2, #0]
			interrupt_flags |= INT_TX_FAILED_MSK;
    bccc:	4a41      	ldr	r2, [pc, #260]	; (bdd4 <on_radio_disabled_tx_wait_for_ack+0x14c>)
    bcce:	6813      	ldr	r3, [r2, #0]
    bcd0:	f043 0302 	orr.w	r3, r3, #2
    bcd4:	6013      	str	r3, [r2, #0]
			esb_state = ESB_STATE_IDLE;
    bcd6:	4b40      	ldr	r3, [pc, #256]	; (bdd8 <on_radio_disabled_tx_wait_for_ack+0x150>)
    bcd8:	2200      	movs	r2, #0
    bcda:	701a      	strb	r2, [r3, #0]
    bcdc:	4b3f      	ldr	r3, [pc, #252]	; (bddc <on_radio_disabled_tx_wait_for_ack+0x154>)
    bcde:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    bce2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
    bce6:	bd10      	pop	{r4, pc}
		ESB_SYS_TIMER->TASKS_SHUTDOWN = 1;
    bce8:	4b37      	ldr	r3, [pc, #220]	; (bdc8 <on_radio_disabled_tx_wait_for_ack+0x140>)
    bcea:	2201      	movs	r2, #1
    bcec:	611a      	str	r2, [r3, #16]
		NRF_PPI->CHENCLR = (1 << CONFIG_NRF_ESB_PPI_TX_START);
    bcee:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
    bcf2:	f44f 7280 	mov.w	r2, #256	; 0x100
    bcf6:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
		interrupt_flags |= INT_TX_SUCCESS_MSK;
    bcfa:	4a36      	ldr	r2, [pc, #216]	; (bdd4 <on_radio_disabled_tx_wait_for_ack+0x14c>)
    bcfc:	6813      	ldr	r3, [r2, #0]
    bcfe:	f043 0301 	orr.w	r3, r3, #1
    bd02:	6013      	str	r3, [r2, #0]
		last_tx_attempts = esb_cfg.retransmit_count -
    bd04:	4c31      	ldr	r4, [pc, #196]	; (bdcc <on_radio_disabled_tx_wait_for_ack+0x144>)
    bd06:	89e3      	ldrh	r3, [r4, #14]
    bd08:	4a2e      	ldr	r2, [pc, #184]	; (bdc4 <on_radio_disabled_tx_wait_for_ack+0x13c>)
    bd0a:	6812      	ldr	r2, [r2, #0]
    bd0c:	1a9b      	subs	r3, r3, r2
				   retransmits_remaining + 1;
    bd0e:	3301      	adds	r3, #1
		last_tx_attempts = esb_cfg.retransmit_count -
    bd10:	4a2f      	ldr	r2, [pc, #188]	; (bdd0 <on_radio_disabled_tx_wait_for_ack+0x148>)
    bd12:	6013      	str	r3, [r2, #0]
		tx_fifo_remove_last();
    bd14:	f7ff fc80 	bl	b618 <tx_fifo_remove_last>
		if (esb_cfg.protocol != NRF_ESB_PROTOCOL_ESB &&
    bd18:	7823      	ldrb	r3, [r4, #0]
    bd1a:	b113      	cbz	r3, bd22 <on_radio_disabled_tx_wait_for_ack+0x9a>
		    rx_payload_buffer[0] > 0) {
    bd1c:	4b30      	ldr	r3, [pc, #192]	; (bde0 <on_radio_disabled_tx_wait_for_ack+0x158>)
    bd1e:	781b      	ldrb	r3, [r3, #0]
		if (esb_cfg.protocol != NRF_ESB_PROTOCOL_ESB &&
    bd20:	b97b      	cbnz	r3, bd42 <on_radio_disabled_tx_wait_for_ack+0xba>
		if ((tx_fifo.count == 0) ||
    bd22:	4b30      	ldr	r3, [pc, #192]	; (bde4 <on_radio_disabled_tx_wait_for_ack+0x15c>)
    bd24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    bd26:	b11b      	cbz	r3, bd30 <on_radio_disabled_tx_wait_for_ack+0xa8>
		    (esb_cfg.tx_mode == NRF_ESB_TXMODE_MANUAL)) {
    bd28:	4b28      	ldr	r3, [pc, #160]	; (bdcc <on_radio_disabled_tx_wait_for_ack+0x144>)
    bd2a:	7c1b      	ldrb	r3, [r3, #16]
		if ((tx_fifo.count == 0) ||
    bd2c:	2b01      	cmp	r3, #1
    bd2e:	d119      	bne.n	bd64 <on_radio_disabled_tx_wait_for_ack+0xdc>
			esb_state = ESB_STATE_IDLE;
    bd30:	4b29      	ldr	r3, [pc, #164]	; (bdd8 <on_radio_disabled_tx_wait_for_ack+0x150>)
    bd32:	2200      	movs	r2, #0
    bd34:	701a      	strb	r2, [r3, #0]
    bd36:	4b29      	ldr	r3, [pc, #164]	; (bddc <on_radio_disabled_tx_wait_for_ack+0x154>)
    bd38:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    bd3c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    bd40:	e7d1      	b.n	bce6 <on_radio_disabled_tx_wait_for_ack+0x5e>
			if (rx_fifo_push_rfbuf((u8_t)NRF_RADIO->TXADDRESS,
    bd42:	4b1f      	ldr	r3, [pc, #124]	; (bdc0 <on_radio_disabled_tx_wait_for_ack+0x138>)
    bd44:	f8d3 052c 	ldr.w	r0, [r3, #1324]	; 0x52c
					       rx_payload_buffer[1] >> 1)) {
    bd48:	4b25      	ldr	r3, [pc, #148]	; (bde0 <on_radio_disabled_tx_wait_for_ack+0x158>)
    bd4a:	7859      	ldrb	r1, [r3, #1]
			if (rx_fifo_push_rfbuf((u8_t)NRF_RADIO->TXADDRESS,
    bd4c:	0849      	lsrs	r1, r1, #1
    bd4e:	b2c0      	uxtb	r0, r0
    bd50:	f7ff fd86 	bl	b860 <rx_fifo_push_rfbuf>
    bd54:	2800      	cmp	r0, #0
    bd56:	d0e4      	beq.n	bd22 <on_radio_disabled_tx_wait_for_ack+0x9a>
				interrupt_flags |=
    bd58:	4a1e      	ldr	r2, [pc, #120]	; (bdd4 <on_radio_disabled_tx_wait_for_ack+0x14c>)
    bd5a:	6813      	ldr	r3, [r2, #0]
    bd5c:	f043 0304 	orr.w	r3, r3, #4
    bd60:	6013      	str	r3, [r2, #0]
    bd62:	e7de      	b.n	bd22 <on_radio_disabled_tx_wait_for_ack+0x9a>
    bd64:	4b1d      	ldr	r3, [pc, #116]	; (bddc <on_radio_disabled_tx_wait_for_ack+0x154>)
    bd66:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    bd6a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
			start_tx_transaction();
    bd6e:	f7ff feb9 	bl	bae4 <start_tx_transaction>
    bd72:	e7b8      	b.n	bce6 <on_radio_disabled_tx_wait_for_ack+0x5e>
			NRF_RADIO->SHORTS = radio_shorts_common |
    bd74:	4c12      	ldr	r4, [pc, #72]	; (bdc0 <on_radio_disabled_tx_wait_for_ack+0x138>)
    bd76:	f240 131b 	movw	r3, #283	; 0x11b
    bd7a:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
			update_rf_payload_format(current_payload->length);
    bd7e:	4b1a      	ldr	r3, [pc, #104]	; (bde8 <on_radio_disabled_tx_wait_for_ack+0x160>)
    bd80:	681a      	ldr	r2, [r3, #0]
    bd82:	4b1a      	ldr	r3, [pc, #104]	; (bdec <on_radio_disabled_tx_wait_for_ack+0x164>)
    bd84:	681b      	ldr	r3, [r3, #0]
    bd86:	7810      	ldrb	r0, [r2, #0]
    bd88:	4798      	blx	r3
			NRF_RADIO->PACKETPTR = (u32_t)tx_payload_buffer;
    bd8a:	4b19      	ldr	r3, [pc, #100]	; (bdf0 <on_radio_disabled_tx_wait_for_ack+0x168>)
    bd8c:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
			on_radio_disabled = on_radio_disabled_tx;
    bd90:	4b18      	ldr	r3, [pc, #96]	; (bdf4 <on_radio_disabled_tx_wait_for_ack+0x16c>)
    bd92:	4a19      	ldr	r2, [pc, #100]	; (bdf8 <on_radio_disabled_tx_wait_for_ack+0x170>)
    bd94:	601a      	str	r2, [r3, #0]
			esb_state = ESB_STATE_PTX_TX_ACK;
    bd96:	4b10      	ldr	r3, [pc, #64]	; (bdd8 <on_radio_disabled_tx_wait_for_ack+0x150>)
    bd98:	2202      	movs	r2, #2
    bd9a:	701a      	strb	r2, [r3, #0]
			ESB_SYS_TIMER->TASKS_START = 1;
    bd9c:	4b0a      	ldr	r3, [pc, #40]	; (bdc8 <on_radio_disabled_tx_wait_for_ack+0x140>)
    bd9e:	2201      	movs	r2, #1
    bda0:	601a      	str	r2, [r3, #0]
			NRF_PPI->CHENSET = (1 << CONFIG_NRF_ESB_PPI_TX_START);
    bda2:	4a06      	ldr	r2, [pc, #24]	; (bdbc <on_radio_disabled_tx_wait_for_ack+0x134>)
    bda4:	f44f 7180 	mov.w	r1, #256	; 0x100
    bda8:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
			if (ESB_SYS_TIMER->EVENTS_COMPARE[1]) {
    bdac:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
    bdb0:	2b00      	cmp	r3, #0
    bdb2:	d098      	beq.n	bce6 <on_radio_disabled_tx_wait_for_ack+0x5e>
				NRF_RADIO->TASKS_TXEN = 1;
    bdb4:	2201      	movs	r2, #1
    bdb6:	6022      	str	r2, [r4, #0]
}
    bdb8:	e795      	b.n	bce6 <on_radio_disabled_tx_wait_for_ack+0x5e>
    bdba:	bf00      	nop
    bdbc:	4001f000 	.word	0x4001f000
    bdc0:	40001000 	.word	0x40001000
    bdc4:	200022f4 	.word	0x200022f4
    bdc8:	4000a000 	.word	0x4000a000
    bdcc:	200022c4 	.word	0x200022c4
    bdd0:	200022e4 	.word	0x200022e4
    bdd4:	200022e0 	.word	0x200022e0
    bdd8:	200027d9 	.word	0x200027d9
    bddc:	e000e100 	.word	0xe000e100
    bde0:	2000244c 	.word	0x2000244c
    bde4:	20002490 	.word	0x20002490
    bde8:	200022c0 	.word	0x200022c0
    bdec:	20002608 	.word	0x20002608
    bdf0:	200025e4 	.word	0x200025e4
    bdf4:	200022e8 	.word	0x200022e8
    bdf8:	0000b6c5 	.word	0x0000b6c5

0000bdfc <get_and_clear_irqs>:
{
    bdfc:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(interrupts != NULL);
    bdfe:	4604      	mov	r4, r0
    be00:	b188      	cbz	r0, be26 <get_and_clear_irqs+0x2a>
	__asm__ volatile(
    be02:	f04f 0320 	mov.w	r3, #32
    be06:	f3ef 8211 	mrs	r2, BASEPRI
    be0a:	f383 8811 	msr	BASEPRI, r3
    be0e:	f3bf 8f6f 	isb	sy
	*interrupts = interrupt_flags;
    be12:	4b0c      	ldr	r3, [pc, #48]	; (be44 <get_and_clear_irqs+0x48>)
    be14:	6819      	ldr	r1, [r3, #0]
    be16:	6021      	str	r1, [r4, #0]
	interrupt_flags = 0;
    be18:	2100      	movs	r1, #0
    be1a:	6019      	str	r1, [r3, #0]
	__asm__ volatile(
    be1c:	f382 8811 	msr	BASEPRI, r2
    be20:	f3bf 8f6f 	isb	sy
}
    be24:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT_NO_MSG(interrupts != NULL);
    be26:	4d08      	ldr	r5, [pc, #32]	; (be48 <get_and_clear_irqs+0x4c>)
    be28:	f44f 7363 	mov.w	r3, #908	; 0x38c
    be2c:	462a      	mov	r2, r5
    be2e:	4907      	ldr	r1, [pc, #28]	; (be4c <get_and_clear_irqs+0x50>)
    be30:	4807      	ldr	r0, [pc, #28]	; (be50 <get_and_clear_irqs+0x54>)
    be32:	f003 fd24 	bl	f87e <printk>
    be36:	f44f 7163 	mov.w	r1, #908	; 0x38c
    be3a:	4628      	mov	r0, r5
    be3c:	f003 fda5 	bl	f98a <assert_post_action>
    be40:	e7df      	b.n	be02 <get_and_clear_irqs+0x6>
    be42:	bf00      	nop
    be44:	200022e0 	.word	0x200022e0
    be48:	00013180 	.word	0x00013180
    be4c:	000131c4 	.word	0x000131c4
    be50:	00010f8c 	.word	0x00010f8c

0000be54 <SWI0_EGU0_IRQHandler>:

static void ESB_EVT_IRQHandler(void)
{
    be54:	b500      	push	{lr}
    be56:	b085      	sub	sp, #20
	u32_t interrupts;
	struct nrf_esb_evt event;

	event.tx_attempts = last_tx_attempts;
    be58:	4b15      	ldr	r3, [pc, #84]	; (beb0 <SWI0_EGU0_IRQHandler+0x5c>)
    be5a:	681b      	ldr	r3, [r3, #0]
    be5c:	9302      	str	r3, [sp, #8]

	get_and_clear_irqs(&interrupts);
    be5e:	a803      	add	r0, sp, #12
    be60:	f7ff ffcc 	bl	bdfc <get_and_clear_irqs>
	if (event_handler != NULL) {
    be64:	4b13      	ldr	r3, [pc, #76]	; (beb4 <SWI0_EGU0_IRQHandler+0x60>)
    be66:	681b      	ldr	r3, [r3, #0]
    be68:	b1f3      	cbz	r3, bea8 <SWI0_EGU0_IRQHandler+0x54>
		if (interrupts & INT_TX_SUCCESS_MSK) {
    be6a:	9a03      	ldr	r2, [sp, #12]
    be6c:	f012 0f01 	tst.w	r2, #1
    be70:	d004      	beq.n	be7c <SWI0_EGU0_IRQHandler+0x28>
			event.evt_id = NRF_ESB_EVENT_TX_SUCCESS;
    be72:	2200      	movs	r2, #0
    be74:	f88d 2004 	strb.w	r2, [sp, #4]
			event_handler(&event);
    be78:	a801      	add	r0, sp, #4
    be7a:	4798      	blx	r3
		}
		if (interrupts & INT_TX_FAILED_MSK) {
    be7c:	9b03      	ldr	r3, [sp, #12]
    be7e:	f013 0f02 	tst.w	r3, #2
    be82:	d006      	beq.n	be92 <SWI0_EGU0_IRQHandler+0x3e>
			event.evt_id = NRF_ESB_EVENT_TX_FAILED;
    be84:	2301      	movs	r3, #1
    be86:	f88d 3004 	strb.w	r3, [sp, #4]
			event_handler(&event);
    be8a:	4b0a      	ldr	r3, [pc, #40]	; (beb4 <SWI0_EGU0_IRQHandler+0x60>)
    be8c:	681b      	ldr	r3, [r3, #0]
    be8e:	a801      	add	r0, sp, #4
    be90:	4798      	blx	r3
		}
		if (interrupts & INT_RX_DATA_RECEIVED_MSK) {
    be92:	9b03      	ldr	r3, [sp, #12]
    be94:	f013 0f04 	tst.w	r3, #4
    be98:	d006      	beq.n	bea8 <SWI0_EGU0_IRQHandler+0x54>
			event.evt_id = NRF_ESB_EVENT_RX_RECEIVED;
    be9a:	2302      	movs	r3, #2
    be9c:	f88d 3004 	strb.w	r3, [sp, #4]
			event_handler(&event);
    bea0:	4b04      	ldr	r3, [pc, #16]	; (beb4 <SWI0_EGU0_IRQHandler+0x60>)
    bea2:	681b      	ldr	r3, [r3, #0]
    bea4:	a801      	add	r0, sp, #4
    bea6:	4798      	blx	r3
		}
	}
}
    bea8:	b005      	add	sp, #20
    beaa:	f85d fb04 	ldr.w	pc, [sp], #4
    beae:	bf00      	nop
    beb0:	200022e4 	.word	0x200022e4
    beb4:	200022dc 	.word	0x200022dc

0000beb8 <update_radio_addresses>:
{
    beb8:	b538      	push	{r3, r4, r5, lr}
    beba:	4604      	mov	r4, r0
	if ((update_mask & ADDR_UPDATE_MASK_BASE0) != 0) {
    bebc:	f010 0f01 	tst.w	r0, #1
    bec0:	d106      	bne.n	bed0 <update_radio_addresses+0x18>
	if ((update_mask & ADDR_UPDATE_MASK_BASE1) != 0) {
    bec2:	f014 0f02 	tst.w	r4, #2
    bec6:	d10a      	bne.n	bede <update_radio_addresses+0x26>
	if ((update_mask & ADDR_UPDATE_MASK_PREFIX) != 0) {
    bec8:	f014 0f04 	tst.w	r4, #4
    becc:	d10e      	bne.n	beec <update_radio_addresses+0x34>
}
    bece:	bd38      	pop	{r3, r4, r5, pc}
		NRF_RADIO->BASE0 = addr_conv(esb_addr.base_addr_p0);
    bed0:	480e      	ldr	r0, [pc, #56]	; (bf0c <update_radio_addresses+0x54>)
    bed2:	f004 fd01 	bl	108d8 <addr_conv>
    bed6:	4b0e      	ldr	r3, [pc, #56]	; (bf10 <update_radio_addresses+0x58>)
    bed8:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
    bedc:	e7f1      	b.n	bec2 <update_radio_addresses+0xa>
		NRF_RADIO->BASE1 = addr_conv(esb_addr.base_addr_p1);
    bede:	480d      	ldr	r0, [pc, #52]	; (bf14 <update_radio_addresses+0x5c>)
    bee0:	f004 fcfa 	bl	108d8 <addr_conv>
    bee4:	4b0a      	ldr	r3, [pc, #40]	; (bf10 <update_radio_addresses+0x58>)
    bee6:	f8c3 0520 	str.w	r0, [r3, #1312]	; 0x520
    beea:	e7ed      	b.n	bec8 <update_radio_addresses+0x10>
			bytewise_bit_swap(&esb_addr.pipe_prefixes[0]);
    beec:	4d07      	ldr	r5, [pc, #28]	; (bf0c <update_radio_addresses+0x54>)
    beee:	f105 0008 	add.w	r0, r5, #8
    bef2:	f004 fcdb 	bl	108ac <bytewise_bit_swap>
		NRF_RADIO->PREFIX0 =
    bef6:	4c06      	ldr	r4, [pc, #24]	; (bf10 <update_radio_addresses+0x58>)
    bef8:	f8c4 0524 	str.w	r0, [r4, #1316]	; 0x524
			bytewise_bit_swap(&esb_addr.pipe_prefixes[4]);
    befc:	f105 000c 	add.w	r0, r5, #12
    bf00:	f004 fcd4 	bl	108ac <bytewise_bit_swap>
		NRF_RADIO->PREFIX1 =
    bf04:	f8c4 0528 	str.w	r0, [r4, #1320]	; 0x528
}
    bf08:	e7e1      	b.n	bece <update_radio_addresses+0x16>
    bf0a:	bf00      	nop
    bf0c:	200071b4 	.word	0x200071b4
    bf10:	40001000 	.word	0x40001000
    bf14:	200071b8 	.word	0x200071b8

0000bf18 <nrf_esb_disable>:

	return 0;
}

void nrf_esb_disable(void)
{
    bf18:	b510      	push	{r4, lr}
	/*  Clear PPI */
	NRF_PPI->CHENCLR = (1 << CONFIG_NRF_ESB_PPI_TIMER_START) |
    bf1a:	4b0f      	ldr	r3, [pc, #60]	; (bf58 <nrf_esb_disable+0x40>)
    bf1c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
    bf20:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
			   (1 << CONFIG_NRF_ESB_PPI_TIMER_STOP) |
			   (1 << CONFIG_NRF_ESB_PPI_RX_TIMEOUT) |
			   (1 << CONFIG_NRF_ESB_PPI_TX_START);

	esb_state = ESB_STATE_IDLE;
    bf24:	2400      	movs	r4, #0
    bf26:	4b0d      	ldr	r3, [pc, #52]	; (bf5c <nrf_esb_disable+0x44>)
    bf28:	701c      	strb	r4, [r3, #0]
	esb_initialized = false;
    bf2a:	4b0d      	ldr	r3, [pc, #52]	; (bf60 <nrf_esb_disable+0x48>)
    bf2c:	701c      	strb	r4, [r3, #0]

	reset_fifos();
    bf2e:	f7ff fb3d 	bl	b5ac <reset_fifos>

	memset(rx_pipe_info, 0, sizeof(rx_pipe_info));
    bf32:	2220      	movs	r2, #32
    bf34:	4621      	mov	r1, r4
    bf36:	480b      	ldr	r0, [pc, #44]	; (bf64 <nrf_esb_disable+0x4c>)
    bf38:	f004 fb1d 	bl	10576 <memset>
	memset(pids, 0, sizeof(pids));
    bf3c:	2208      	movs	r2, #8
    bf3e:	4621      	mov	r1, r4
    bf40:	4809      	ldr	r0, [pc, #36]	; (bf68 <nrf_esb_disable+0x50>)
    bf42:	f004 fb18 	bl	10576 <memset>

	/*  Disable the radio */
	irq_disable(ESB_EVT_IRQ);
    bf46:	2014      	movs	r0, #20
    bf48:	f7fd fabe 	bl	94c8 <z_arch_irq_disable>

	NRF_RADIO->SHORTS =
    bf4c:	4b07      	ldr	r3, [pc, #28]	; (bf6c <nrf_esb_disable+0x54>)
    bf4e:	2203      	movs	r2, #3
    bf50:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	    RADIO_SHORTS_READY_START_Enabled << RADIO_SHORTS_READY_START_Pos |
	    RADIO_SHORTS_END_DISABLE_Enabled << RADIO_SHORTS_END_DISABLE_Pos;
}
    bf54:	bd10      	pop	{r4, pc}
    bf56:	bf00      	nop
    bf58:	4001f000 	.word	0x4001f000
    bf5c:	200027d9 	.word	0x200027d9
    bf60:	200027d8 	.word	0x200027d8
    bf64:	20002470 	.word	0x20002470
    bf68:	200022ec 	.word	0x200022ec
    bf6c:	40001000 	.word	0x40001000

0000bf70 <nrf_esb_init>:
	if (config == NULL) {
    bf70:	2800      	cmp	r0, #0
    bf72:	d053      	beq.n	c01c <nrf_esb_init+0xac>
{
    bf74:	b538      	push	{r3, r4, r5, lr}
    bf76:	4605      	mov	r5, r0
	if (esb_initialized) {
    bf78:	4b2a      	ldr	r3, [pc, #168]	; (c024 <nrf_esb_init+0xb4>)
    bf7a:	781b      	ldrb	r3, [r3, #0]
    bf7c:	2b00      	cmp	r3, #0
    bf7e:	d14a      	bne.n	c016 <nrf_esb_init+0xa6>
	event_handler = config->event_handler;
    bf80:	686a      	ldr	r2, [r5, #4]
    bf82:	4b29      	ldr	r3, [pc, #164]	; (c028 <nrf_esb_init+0xb8>)
    bf84:	601a      	str	r2, [r3, #0]
	memcpy(&esb_cfg, config, sizeof(esb_cfg));
    bf86:	2218      	movs	r2, #24
    bf88:	4629      	mov	r1, r5
    bf8a:	4828      	ldr	r0, [pc, #160]	; (c02c <nrf_esb_init+0xbc>)
    bf8c:	f004 fad0 	bl	10530 <memcpy>
	interrupt_flags = 0;
    bf90:	2400      	movs	r4, #0
    bf92:	4b27      	ldr	r3, [pc, #156]	; (c030 <nrf_esb_init+0xc0>)
    bf94:	601c      	str	r4, [r3, #0]
	memset(rx_pipe_info, 0, sizeof(rx_pipe_info));
    bf96:	2220      	movs	r2, #32
    bf98:	4621      	mov	r1, r4
    bf9a:	4826      	ldr	r0, [pc, #152]	; (c034 <nrf_esb_init+0xc4>)
    bf9c:	f004 faeb 	bl	10576 <memset>
	memset(pids, 0, sizeof(pids));
    bfa0:	2208      	movs	r2, #8
    bfa2:	4621      	mov	r1, r4
    bfa4:	4824      	ldr	r0, [pc, #144]	; (c038 <nrf_esb_init+0xc8>)
    bfa6:	f004 fae6 	bl	10576 <memset>
	update_radio_parameters();
    bfaa:	f7ff fae1 	bl	b570 <update_radio_parameters>
	NRF_RADIO->BASE0 = 0xE7E7E7E7;
    bfae:	4b23      	ldr	r3, [pc, #140]	; (c03c <nrf_esb_init+0xcc>)
    bfb0:	f04f 32e7 	mov.w	r2, #3890735079	; 0xe7e7e7e7
    bfb4:	f8c3 251c 	str.w	r2, [r3, #1308]	; 0x51c
	NRF_RADIO->BASE1 = 0x43434343;
    bfb8:	f04f 3243 	mov.w	r2, #1128481603	; 0x43434343
    bfbc:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
	NRF_RADIO->PREFIX0 = 0x23C343E7;
    bfc0:	4a1f      	ldr	r2, [pc, #124]	; (c040 <nrf_esb_init+0xd0>)
    bfc2:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
	NRF_RADIO->PREFIX1 = 0x13E363A3;
    bfc6:	4a1f      	ldr	r2, [pc, #124]	; (c044 <nrf_esb_init+0xd4>)
    bfc8:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
	initialize_fifos();
    bfcc:	f7ff fafc 	bl	b5c8 <initialize_fifos>
	sys_timer_init();
    bfd0:	f7ff fb40 	bl	b654 <sys_timer_init>
	ppi_init();
    bfd4:	f7ff fb4c 	bl	b670 <ppi_init>
	IRQ_DIRECT_CONNECT(NRF5_IRQ_RADIO_IRQn, config->radio_irq_priority,
    bfd8:	4622      	mov	r2, r4
    bfda:	7c69      	ldrb	r1, [r5, #17]
    bfdc:	2001      	movs	r0, #1
    bfde:	f7fd fa95 	bl	950c <z_irq_priority_set>
	IRQ_DIRECT_CONNECT(NRF5_IRQ_SWI0_IRQn, config->event_irq_priority,
    bfe2:	4622      	mov	r2, r4
    bfe4:	7ca9      	ldrb	r1, [r5, #18]
    bfe6:	2014      	movs	r0, #20
    bfe8:	f7fd fa90 	bl	950c <z_irq_priority_set>
	IRQ_DIRECT_CONNECT(ESB_SYS_TIMER_IRQn, config->event_irq_priority,
    bfec:	4622      	mov	r2, r4
    bfee:	7ca9      	ldrb	r1, [r5, #18]
    bff0:	200a      	movs	r0, #10
    bff2:	f7fd fa8b 	bl	950c <z_irq_priority_set>
	irq_enable(NRF5_IRQ_RADIO_IRQn);
    bff6:	2001      	movs	r0, #1
    bff8:	f7fd fa56 	bl	94a8 <z_arch_irq_enable>
	irq_enable(NRF5_IRQ_SWI0_IRQn);
    bffc:	2014      	movs	r0, #20
    bffe:	f7fd fa53 	bl	94a8 <z_arch_irq_enable>
	irq_enable(ESB_SYS_TIMER_IRQn);
    c002:	200a      	movs	r0, #10
    c004:	f7fd fa50 	bl	94a8 <z_arch_irq_enable>
	esb_state = ESB_STATE_IDLE;
    c008:	4b0f      	ldr	r3, [pc, #60]	; (c048 <nrf_esb_init+0xd8>)
    c00a:	701c      	strb	r4, [r3, #0]
	esb_initialized = true;
    c00c:	4b05      	ldr	r3, [pc, #20]	; (c024 <nrf_esb_init+0xb4>)
    c00e:	2201      	movs	r2, #1
    c010:	701a      	strb	r2, [r3, #0]
	return 0;
    c012:	4620      	mov	r0, r4
}
    c014:	bd38      	pop	{r3, r4, r5, pc}
		nrf_esb_disable();
    c016:	f7ff ff7f 	bl	bf18 <nrf_esb_disable>
    c01a:	e7b1      	b.n	bf80 <nrf_esb_init+0x10>
		return -EINVAL;
    c01c:	f06f 0015 	mvn.w	r0, #21
}
    c020:	4770      	bx	lr
    c022:	bf00      	nop
    c024:	200027d8 	.word	0x200027d8
    c028:	200022dc 	.word	0x200022dc
    c02c:	200022c4 	.word	0x200022c4
    c030:	200022e0 	.word	0x200022e0
    c034:	20002470 	.word	0x20002470
    c038:	200022ec 	.word	0x200022ec
    c03c:	40001000 	.word	0x40001000
    c040:	23c343e7 	.word	0x23c343e7
    c044:	13e363a3 	.word	0x13e363a3
    c048:	200027d9 	.word	0x200027d9

0000c04c <nrf_esb_write_payload>:
	return (esb_state == ESB_STATE_IDLE);
}

int nrf_esb_write_payload(const struct nrf_esb_payload *payload)
{
	if (!esb_initialized) {
    c04c:	4b37      	ldr	r3, [pc, #220]	; (c12c <nrf_esb_write_payload+0xe0>)
    c04e:	781b      	ldrb	r3, [r3, #0]
    c050:	2b00      	cmp	r3, #0
    c052:	d055      	beq.n	c100 <nrf_esb_write_payload+0xb4>
		return -EACCES;
	}
	if (payload == NULL) {
    c054:	2800      	cmp	r0, #0
    c056:	d056      	beq.n	c106 <nrf_esb_write_payload+0xba>
		return -EINVAL;
	}
	if (payload->length == 0 ||
    c058:	7802      	ldrb	r2, [r0, #0]
    c05a:	1e53      	subs	r3, r2, #1
    c05c:	b2db      	uxtb	r3, r3
    c05e:	2b1f      	cmp	r3, #31
    c060:	d854      	bhi.n	c10c <nrf_esb_write_payload+0xc0>
	    payload->length > CONFIG_NRF_ESB_MAX_PAYLOAD_LENGTH ||
	    (esb_cfg.protocol == NRF_ESB_PROTOCOL_ESB &&
    c062:	4b33      	ldr	r3, [pc, #204]	; (c130 <nrf_esb_write_payload+0xe4>)
    c064:	781b      	ldrb	r3, [r3, #0]
	    payload->length > CONFIG_NRF_ESB_MAX_PAYLOAD_LENGTH ||
    c066:	b91b      	cbnz	r3, c070 <nrf_esb_write_payload+0x24>
	     payload->length > esb_cfg.payload_length)) {
    c068:	4b31      	ldr	r3, [pc, #196]	; (c130 <nrf_esb_write_payload+0xe4>)
    c06a:	7cdb      	ldrb	r3, [r3, #19]
	    (esb_cfg.protocol == NRF_ESB_PROTOCOL_ESB &&
    c06c:	429a      	cmp	r2, r3
    c06e:	d850      	bhi.n	c112 <nrf_esb_write_payload+0xc6>
		return -EMSGSIZE;
	}
	if (tx_fifo.count >= CONFIG_NRF_ESB_TX_FIFO_SIZE) {
    c070:	4b30      	ldr	r3, [pc, #192]	; (c134 <nrf_esb_write_payload+0xe8>)
    c072:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    c074:	2b07      	cmp	r3, #7
    c076:	d84f      	bhi.n	c118 <nrf_esb_write_payload+0xcc>
		return -ENOMEM;
	}
	if (payload->pipe >= CONFIG_NRF_ESB_PIPE_COUNT) {
    c078:	7843      	ldrb	r3, [r0, #1]
    c07a:	2b07      	cmp	r3, #7
    c07c:	d84f      	bhi.n	c11e <nrf_esb_write_payload+0xd2>
{
    c07e:	b570      	push	{r4, r5, r6, lr}
    c080:	4604      	mov	r4, r0
	__asm__ volatile(
    c082:	f04f 0320 	mov.w	r3, #32
    c086:	f3ef 8611 	mrs	r6, BASEPRI
    c08a:	f383 8811 	msr	BASEPRI, r3
    c08e:	f3bf 8f6f 	isb	sy
		return -EINVAL;
	}

	u32_t key = irq_lock();

	memcpy(tx_fifo.payload[tx_fifo.back], payload,
    c092:	4d28      	ldr	r5, [pc, #160]	; (c134 <nrf_esb_write_payload+0xe8>)
    c094:	6a2b      	ldr	r3, [r5, #32]
    c096:	2225      	movs	r2, #37	; 0x25
    c098:	4601      	mov	r1, r0
    c09a:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
    c09e:	f004 fa47 	bl	10530 <memcpy>
	       sizeof(struct nrf_esb_payload));

	pids[payload->pipe] = (pids[payload->pipe] + 1) % (PID_MAX + 1);
    c0a2:	7860      	ldrb	r0, [r4, #1]
    c0a4:	4a24      	ldr	r2, [pc, #144]	; (c138 <nrf_esb_write_payload+0xec>)
    c0a6:	5c13      	ldrb	r3, [r2, r0]
    c0a8:	3301      	adds	r3, #1
    c0aa:	4259      	negs	r1, r3
    c0ac:	f003 0303 	and.w	r3, r3, #3
    c0b0:	f001 0103 	and.w	r1, r1, #3
    c0b4:	bf58      	it	pl
    c0b6:	424b      	negpl	r3, r1
    c0b8:	5413      	strb	r3, [r2, r0]
	tx_fifo.payload[tx_fifo.back]->pid = pids[payload->pipe];
    c0ba:	7860      	ldrb	r0, [r4, #1]
    c0bc:	6a2b      	ldr	r3, [r5, #32]
    c0be:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
    c0c2:	5c12      	ldrb	r2, [r2, r0]
    c0c4:	710a      	strb	r2, [r1, #4]

	if (++tx_fifo.back >= CONFIG_NRF_ESB_TX_FIFO_SIZE) {
    c0c6:	3301      	adds	r3, #1
    c0c8:	622b      	str	r3, [r5, #32]
    c0ca:	2b07      	cmp	r3, #7
    c0cc:	d901      	bls.n	c0d2 <nrf_esb_write_payload+0x86>
		tx_fifo.back = 0;
    c0ce:	2200      	movs	r2, #0
    c0d0:	622a      	str	r2, [r5, #32]
	}

	tx_fifo.count++;
    c0d2:	4a18      	ldr	r2, [pc, #96]	; (c134 <nrf_esb_write_payload+0xe8>)
    c0d4:	6a93      	ldr	r3, [r2, #40]	; 0x28
    c0d6:	3301      	adds	r3, #1
    c0d8:	6293      	str	r3, [r2, #40]	; 0x28
	__asm__ volatile(
    c0da:	f386 8811 	msr	BASEPRI, r6
    c0de:	f3bf 8f6f 	isb	sy

	irq_unlock(key);

	if (esb_cfg.mode == NRF_ESB_MODE_PTX &&
    c0e2:	4b13      	ldr	r3, [pc, #76]	; (c130 <nrf_esb_write_payload+0xe4>)
    c0e4:	785b      	ldrb	r3, [r3, #1]
    c0e6:	b9eb      	cbnz	r3, c124 <nrf_esb_write_payload+0xd8>
	    esb_cfg.tx_mode == NRF_ESB_TXMODE_AUTO &&
    c0e8:	4b11      	ldr	r3, [pc, #68]	; (c130 <nrf_esb_write_payload+0xe4>)
    c0ea:	7c1b      	ldrb	r3, [r3, #16]
	if (esb_cfg.mode == NRF_ESB_MODE_PTX &&
    c0ec:	b9e3      	cbnz	r3, c128 <nrf_esb_write_payload+0xdc>
	    esb_state == ESB_STATE_IDLE) {
    c0ee:	4b13      	ldr	r3, [pc, #76]	; (c13c <nrf_esb_write_payload+0xf0>)
    c0f0:	781b      	ldrb	r3, [r3, #0]
	    esb_cfg.tx_mode == NRF_ESB_TXMODE_AUTO &&
    c0f2:	b10b      	cbz	r3, c0f8 <nrf_esb_write_payload+0xac>
		start_tx_transaction();
	}

	return 0;
    c0f4:	2000      	movs	r0, #0
    c0f6:	e016      	b.n	c126 <nrf_esb_write_payload+0xda>
		start_tx_transaction();
    c0f8:	f7ff fcf4 	bl	bae4 <start_tx_transaction>
	return 0;
    c0fc:	2000      	movs	r0, #0
    c0fe:	e012      	b.n	c126 <nrf_esb_write_payload+0xda>
		return -EACCES;
    c100:	f06f 000c 	mvn.w	r0, #12
    c104:	4770      	bx	lr
		return -EINVAL;
    c106:	f06f 0015 	mvn.w	r0, #21
    c10a:	4770      	bx	lr
		return -EMSGSIZE;
    c10c:	f06f 0023 	mvn.w	r0, #35	; 0x23
    c110:	4770      	bx	lr
    c112:	f06f 0023 	mvn.w	r0, #35	; 0x23
    c116:	4770      	bx	lr
		return -ENOMEM;
    c118:	f06f 000b 	mvn.w	r0, #11
    c11c:	4770      	bx	lr
		return -EINVAL;
    c11e:	f06f 0015 	mvn.w	r0, #21
}
    c122:	4770      	bx	lr
	return 0;
    c124:	2000      	movs	r0, #0
}
    c126:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
    c128:	2000      	movs	r0, #0
    c12a:	e7fc      	b.n	c126 <nrf_esb_write_payload+0xda>
    c12c:	200027d8 	.word	0x200027d8
    c130:	200022c4 	.word	0x200022c4
    c134:	20002490 	.word	0x20002490
    c138:	200022ec 	.word	0x200022ec
    c13c:	200027d9 	.word	0x200027d9

0000c140 <nrf_esb_read_rx_payload>:

int nrf_esb_read_rx_payload(struct nrf_esb_payload *payload)
{
    c140:	b538      	push	{r3, r4, r5, lr}
	if (!esb_initialized) {
    c142:	4b1f      	ldr	r3, [pc, #124]	; (c1c0 <nrf_esb_read_rx_payload+0x80>)
    c144:	781b      	ldrb	r3, [r3, #0]
    c146:	2b00      	cmp	r3, #0
    c148:	d031      	beq.n	c1ae <nrf_esb_read_rx_payload+0x6e>
		return -EACCES;
	}
	if (payload == NULL) {
    c14a:	2800      	cmp	r0, #0
    c14c:	d032      	beq.n	c1b4 <nrf_esb_read_rx_payload+0x74>
		return -EINVAL;
	}

	if (rx_fifo.count == 0) {
    c14e:	4b1d      	ldr	r3, [pc, #116]	; (c1c4 <nrf_esb_read_rx_payload+0x84>)
    c150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    c152:	2b00      	cmp	r3, #0
    c154:	d031      	beq.n	c1ba <nrf_esb_read_rx_payload+0x7a>
	__asm__ volatile(
    c156:	f04f 0320 	mov.w	r3, #32
    c15a:	f3ef 8511 	mrs	r5, BASEPRI
    c15e:	f383 8811 	msr	BASEPRI, r3
    c162:	f3bf 8f6f 	isb	sy
		return -ENODATA;
	}

	u32_t key = irq_lock();

	payload->length = rx_fifo.payload[rx_fifo.front]->length;
    c166:	4c17      	ldr	r4, [pc, #92]	; (c1c4 <nrf_esb_read_rx_payload+0x84>)
    c168:	6a63      	ldr	r3, [r4, #36]	; 0x24
    c16a:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
    c16e:	780a      	ldrb	r2, [r1, #0]
    c170:	7002      	strb	r2, [r0, #0]
	payload->pipe = rx_fifo.payload[rx_fifo.front]->pipe;
    c172:	784b      	ldrb	r3, [r1, #1]
    c174:	7043      	strb	r3, [r0, #1]
	payload->rssi = rx_fifo.payload[rx_fifo.front]->rssi;
    c176:	f991 3002 	ldrsb.w	r3, [r1, #2]
    c17a:	7083      	strb	r3, [r0, #2]
	payload->pid = rx_fifo.payload[rx_fifo.front]->pid;
    c17c:	790b      	ldrb	r3, [r1, #4]
    c17e:	7103      	strb	r3, [r0, #4]
	payload->noack = rx_fifo.payload[rx_fifo.front]->noack;
    c180:	78cb      	ldrb	r3, [r1, #3]
    c182:	70c3      	strb	r3, [r0, #3]
	memcpy(payload->data, rx_fifo.payload[rx_fifo.front]->data,
    c184:	3105      	adds	r1, #5
    c186:	3005      	adds	r0, #5
    c188:	f004 f9d2 	bl	10530 <memcpy>
	       payload->length);

	if (++rx_fifo.front >= CONFIG_NRF_ESB_RX_FIFO_SIZE) {
    c18c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    c18e:	3301      	adds	r3, #1
    c190:	6263      	str	r3, [r4, #36]	; 0x24
    c192:	2b07      	cmp	r3, #7
    c194:	d901      	bls.n	c19a <nrf_esb_read_rx_payload+0x5a>
		rx_fifo.front = 0;
    c196:	2200      	movs	r2, #0
    c198:	6262      	str	r2, [r4, #36]	; 0x24
	}

	rx_fifo.count--;
    c19a:	4a0a      	ldr	r2, [pc, #40]	; (c1c4 <nrf_esb_read_rx_payload+0x84>)
    c19c:	6a93      	ldr	r3, [r2, #40]	; 0x28
    c19e:	3b01      	subs	r3, #1
    c1a0:	6293      	str	r3, [r2, #40]	; 0x28
	__asm__ volatile(
    c1a2:	f385 8811 	msr	BASEPRI, r5
    c1a6:	f3bf 8f6f 	isb	sy

	irq_unlock(key);

	return 0;
    c1aa:	2000      	movs	r0, #0
}
    c1ac:	bd38      	pop	{r3, r4, r5, pc}
		return -EACCES;
    c1ae:	f06f 000c 	mvn.w	r0, #12
    c1b2:	e7fb      	b.n	c1ac <nrf_esb_read_rx_payload+0x6c>
		return -EINVAL;
    c1b4:	f06f 0015 	mvn.w	r0, #21
    c1b8:	e7f8      	b.n	c1ac <nrf_esb_read_rx_payload+0x6c>
		return -ENODATA;
    c1ba:	f06f 004d 	mvn.w	r0, #77	; 0x4d
    c1be:	e7f5      	b.n	c1ac <nrf_esb_read_rx_payload+0x6c>
    c1c0:	200027d8 	.word	0x200027d8
    c1c4:	200022f8 	.word	0x200022f8

0000c1c8 <nrf_esb_start_rx>:

	return 0;
}

int nrf_esb_start_rx(void)
{
    c1c8:	b538      	push	{r3, r4, r5, lr}
	if (esb_state != ESB_STATE_IDLE) {
    c1ca:	4b1b      	ldr	r3, [pc, #108]	; (c238 <nrf_esb_start_rx+0x70>)
    c1cc:	781b      	ldrb	r3, [r3, #0]
    c1ce:	bb7b      	cbnz	r3, c230 <nrf_esb_start_rx+0x68>
		return -EBUSY;
	}

	NRF_RADIO->INTENCLR = 0xFFFFFFFF;
    c1d0:	4c1a      	ldr	r4, [pc, #104]	; (c23c <nrf_esb_start_rx+0x74>)
    c1d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    c1d6:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
	NRF_RADIO->EVENTS_DISABLED = 0;
    c1da:	2500      	movs	r5, #0
    c1dc:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
	on_radio_disabled = on_radio_disabled_rx;
    c1e0:	4b17      	ldr	r3, [pc, #92]	; (c240 <nrf_esb_start_rx+0x78>)
    c1e2:	4a18      	ldr	r2, [pc, #96]	; (c244 <nrf_esb_start_rx+0x7c>)
    c1e4:	601a      	str	r2, [r3, #0]

	NRF_RADIO->SHORTS = radio_shorts_common |
    c1e6:	f240 1317 	movw	r3, #279	; 0x117
    c1ea:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
			    RADIO_SHORTS_DISABLED_TXEN_Msk;
	NRF_RADIO->INTENSET = RADIO_INTENSET_DISABLED_Msk;
    c1ee:	2310      	movs	r3, #16
    c1f0:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
	esb_state = ESB_STATE_PRX;
    c1f4:	4b10      	ldr	r3, [pc, #64]	; (c238 <nrf_esb_start_rx+0x70>)
    c1f6:	2204      	movs	r2, #4
    c1f8:	701a      	strb	r2, [r3, #0]

	NRF_RADIO->RXADDRESSES = esb_addr.rx_pipes_enabled;
    c1fa:	4b13      	ldr	r3, [pc, #76]	; (c248 <nrf_esb_start_rx+0x80>)
    c1fc:	7c9a      	ldrb	r2, [r3, #18]
    c1fe:	f8c4 2530 	str.w	r2, [r4, #1328]	; 0x530
	NRF_RADIO->FREQUENCY = esb_addr.rf_channel;
    c202:	7cdb      	ldrb	r3, [r3, #19]
    c204:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
	NRF_RADIO->PACKETPTR = (u32_t)rx_payload_buffer;
    c208:	4b10      	ldr	r3, [pc, #64]	; (c24c <nrf_esb_start_rx+0x84>)
    c20a:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    c20e:	4b10      	ldr	r3, [pc, #64]	; (c250 <nrf_esb_start_rx+0x88>)
    c210:	2202      	movs	r2, #2
    c212:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180

	NVIC_ClearPendingIRQ(RADIO_IRQn);
	irq_enable(RADIO_IRQn);
    c216:	2001      	movs	r0, #1
    c218:	f7fd f946 	bl	94a8 <z_arch_irq_enable>

	NRF_RADIO->EVENTS_ADDRESS = 0;
    c21c:	f8c4 5104 	str.w	r5, [r4, #260]	; 0x104
	NRF_RADIO->EVENTS_PAYLOAD = 0;
    c220:	f8c4 5108 	str.w	r5, [r4, #264]	; 0x108
	NRF_RADIO->EVENTS_DISABLED = 0;
    c224:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110

	NRF_RADIO->TASKS_RXEN = 1;
    c228:	2301      	movs	r3, #1
    c22a:	6063      	str	r3, [r4, #4]

	return 0;
    c22c:	4628      	mov	r0, r5
}
    c22e:	bd38      	pop	{r3, r4, r5, pc}
		return -EBUSY;
    c230:	f06f 000f 	mvn.w	r0, #15
    c234:	e7fb      	b.n	c22e <nrf_esb_start_rx+0x66>
    c236:	bf00      	nop
    c238:	200027d9 	.word	0x200027d9
    c23c:	40001000 	.word	0x40001000
    c240:	200022e8 	.word	0x200022e8
    c244:	0000b9b9 	.word	0x0000b9b9
    c248:	200071b4 	.word	0x200071b4
    c24c:	2000244c 	.word	0x2000244c
    c250:	e000e100 	.word	0xe000e100

0000c254 <nrf_esb_stop_rx>:

int nrf_esb_stop_rx(void)
{
	if (esb_state != ESB_STATE_PRX && esb_state != ESB_STATE_PRX_SEND_ACK) {
    c254:	4b11      	ldr	r3, [pc, #68]	; (c29c <nrf_esb_stop_rx+0x48>)
    c256:	781b      	ldrb	r3, [r3, #0]
    c258:	b2db      	uxtb	r3, r3
    c25a:	2b04      	cmp	r3, #4
    c25c:	d004      	beq.n	c268 <nrf_esb_stop_rx+0x14>
    c25e:	4b0f      	ldr	r3, [pc, #60]	; (c29c <nrf_esb_stop_rx+0x48>)
    c260:	781b      	ldrb	r3, [r3, #0]
    c262:	b2db      	uxtb	r3, r3
    c264:	2b05      	cmp	r3, #5
    c266:	d116      	bne.n	c296 <nrf_esb_stop_rx+0x42>
		return -EINVAL;
	}

	NRF_RADIO->SHORTS = 0;
    c268:	4b0d      	ldr	r3, [pc, #52]	; (c2a0 <nrf_esb_stop_rx+0x4c>)
    c26a:	2200      	movs	r2, #0
    c26c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	NRF_RADIO->INTENCLR = 0xFFFFFFFF;
    c270:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    c274:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
	on_radio_disabled = NULL;
    c278:	490a      	ldr	r1, [pc, #40]	; (c2a4 <nrf_esb_stop_rx+0x50>)
    c27a:	600a      	str	r2, [r1, #0]
	NRF_RADIO->EVENTS_DISABLED = 0;
    c27c:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
	NRF_RADIO->TASKS_DISABLE = 1;
    c280:	2201      	movs	r2, #1
    c282:	611a      	str	r2, [r3, #16]
	while (NRF_RADIO->EVENTS_DISABLED == 0) {
    c284:	4b06      	ldr	r3, [pc, #24]	; (c2a0 <nrf_esb_stop_rx+0x4c>)
    c286:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
    c28a:	2b00      	cmp	r3, #0
    c28c:	d0fa      	beq.n	c284 <nrf_esb_stop_rx+0x30>
		/* wait for register to settle */
	}

	esb_state = ESB_STATE_IDLE;
    c28e:	2000      	movs	r0, #0
    c290:	4b02      	ldr	r3, [pc, #8]	; (c29c <nrf_esb_stop_rx+0x48>)
    c292:	7018      	strb	r0, [r3, #0]

	return 0;
    c294:	4770      	bx	lr
		return -EINVAL;
    c296:	f06f 0015 	mvn.w	r0, #21
}
    c29a:	4770      	bx	lr
    c29c:	200027d9 	.word	0x200027d9
    c2a0:	40001000 	.word	0x40001000
    c2a4:	200022e8 	.word	0x200022e8

0000c2a8 <nrf_esb_pop_tx>:
	return 0;
}

int nrf_esb_pop_tx(void)
{
	if (!esb_initialized) {
    c2a8:	4b13      	ldr	r3, [pc, #76]	; (c2f8 <nrf_esb_pop_tx+0x50>)
    c2aa:	781b      	ldrb	r3, [r3, #0]
    c2ac:	b1eb      	cbz	r3, c2ea <nrf_esb_pop_tx+0x42>
		return -EACCES;
	}
	if (tx_fifo.count == 0) {
    c2ae:	4b13      	ldr	r3, [pc, #76]	; (c2fc <nrf_esb_pop_tx+0x54>)
    c2b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    c2b2:	b1eb      	cbz	r3, c2f0 <nrf_esb_pop_tx+0x48>
	__asm__ volatile(
    c2b4:	f04f 0320 	mov.w	r3, #32
    c2b8:	f3ef 8111 	mrs	r1, BASEPRI
    c2bc:	f383 8811 	msr	BASEPRI, r3
    c2c0:	f3bf 8f6f 	isb	sy
		return -ENODATA;
	}

	u32_t key = irq_lock();

	if (++tx_fifo.back >= CONFIG_NRF_ESB_TX_FIFO_SIZE) {
    c2c4:	4a0d      	ldr	r2, [pc, #52]	; (c2fc <nrf_esb_pop_tx+0x54>)
    c2c6:	6a13      	ldr	r3, [r2, #32]
    c2c8:	3301      	adds	r3, #1
    c2ca:	6213      	str	r3, [r2, #32]
    c2cc:	2b07      	cmp	r3, #7
    c2ce:	d902      	bls.n	c2d6 <nrf_esb_pop_tx+0x2e>
		tx_fifo.back = 0;
    c2d0:	4613      	mov	r3, r2
    c2d2:	2200      	movs	r2, #0
    c2d4:	621a      	str	r2, [r3, #32]
	}
	tx_fifo.count--;
    c2d6:	4a09      	ldr	r2, [pc, #36]	; (c2fc <nrf_esb_pop_tx+0x54>)
    c2d8:	6a93      	ldr	r3, [r2, #40]	; 0x28
    c2da:	3b01      	subs	r3, #1
    c2dc:	6293      	str	r3, [r2, #40]	; 0x28
	__asm__ volatile(
    c2de:	f381 8811 	msr	BASEPRI, r1
    c2e2:	f3bf 8f6f 	isb	sy

	irq_unlock(key);

	return 0;
    c2e6:	2000      	movs	r0, #0
    c2e8:	4770      	bx	lr
		return -EACCES;
    c2ea:	f06f 000c 	mvn.w	r0, #12
    c2ee:	4770      	bx	lr
		return -ENODATA;
    c2f0:	f06f 004d 	mvn.w	r0, #77	; 0x4d
}
    c2f4:	4770      	bx	lr
    c2f6:	bf00      	nop
    c2f8:	200027d8 	.word	0x200027d8
    c2fc:	20002490 	.word	0x20002490

0000c300 <nrf_esb_set_base_address_0>:

	return 0;
}

int nrf_esb_set_base_address_0(const u8_t *addr)
{
    c300:	b508      	push	{r3, lr}
	if (esb_state != ESB_STATE_IDLE) {
    c302:	4b0a      	ldr	r3, [pc, #40]	; (c32c <nrf_esb_set_base_address_0+0x2c>)
    c304:	781b      	ldrb	r3, [r3, #0]
    c306:	b953      	cbnz	r3, c31e <nrf_esb_set_base_address_0+0x1e>
		return -EBUSY;
	}
	if (addr == NULL) {
    c308:	b160      	cbz	r0, c324 <nrf_esb_set_base_address_0+0x24>
    c30a:	4601      	mov	r1, r0
			return -EINVAL;
		}
	}
#endif

	memcpy(esb_addr.base_addr_p0, addr, sizeof(esb_addr.base_addr_p0));
    c30c:	2204      	movs	r2, #4
    c30e:	4808      	ldr	r0, [pc, #32]	; (c330 <nrf_esb_set_base_address_0+0x30>)
    c310:	f004 f90e 	bl	10530 <memcpy>

	update_radio_addresses(ADDR_UPDATE_MASK_BASE0);
    c314:	2001      	movs	r0, #1
    c316:	f7ff fdcf 	bl	beb8 <update_radio_addresses>
	apply_address_workarounds();

	return 0;
    c31a:	2000      	movs	r0, #0
}
    c31c:	bd08      	pop	{r3, pc}
		return -EBUSY;
    c31e:	f06f 000f 	mvn.w	r0, #15
    c322:	e7fb      	b.n	c31c <nrf_esb_set_base_address_0+0x1c>
		return -EINVAL;
    c324:	f06f 0015 	mvn.w	r0, #21
    c328:	e7f8      	b.n	c31c <nrf_esb_set_base_address_0+0x1c>
    c32a:	bf00      	nop
    c32c:	200027d9 	.word	0x200027d9
    c330:	200071b4 	.word	0x200071b4

0000c334 <nrf_esb_set_base_address_1>:

int nrf_esb_set_base_address_1(const u8_t *addr)
{
    c334:	b508      	push	{r3, lr}
	if (esb_state != ESB_STATE_IDLE) {
    c336:	4b0a      	ldr	r3, [pc, #40]	; (c360 <nrf_esb_set_base_address_1+0x2c>)
    c338:	781b      	ldrb	r3, [r3, #0]
    c33a:	b953      	cbnz	r3, c352 <nrf_esb_set_base_address_1+0x1e>
		return -EBUSY;
	}
	if (addr == NULL) {
    c33c:	b160      	cbz	r0, c358 <nrf_esb_set_base_address_1+0x24>
    c33e:	4601      	mov	r1, r0
			return -EINVAL;
		}
	}
#endif

	memcpy(esb_addr.base_addr_p1, addr, sizeof(esb_addr.base_addr_p1));
    c340:	2204      	movs	r2, #4
    c342:	4808      	ldr	r0, [pc, #32]	; (c364 <nrf_esb_set_base_address_1+0x30>)
    c344:	f004 f8f4 	bl	10530 <memcpy>

	update_radio_addresses(ADDR_UPDATE_MASK_BASE1);
    c348:	2002      	movs	r0, #2
    c34a:	f7ff fdb5 	bl	beb8 <update_radio_addresses>
	apply_address_workarounds();

	return 0;
    c34e:	2000      	movs	r0, #0
}
    c350:	bd08      	pop	{r3, pc}
		return -EBUSY;
    c352:	f06f 000f 	mvn.w	r0, #15
    c356:	e7fb      	b.n	c350 <nrf_esb_set_base_address_1+0x1c>
		return -EINVAL;
    c358:	f06f 0015 	mvn.w	r0, #21
    c35c:	e7f8      	b.n	c350 <nrf_esb_set_base_address_1+0x1c>
    c35e:	bf00      	nop
    c360:	200027d9 	.word	0x200027d9
    c364:	200071b8 	.word	0x200071b8

0000c368 <nrf_esb_set_prefixes>:

int nrf_esb_set_prefixes(const u8_t *prefixes, u8_t num_pipes)
{
    c368:	b538      	push	{r3, r4, r5, lr}
	if (esb_state != ESB_STATE_IDLE) {
    c36a:	4b11      	ldr	r3, [pc, #68]	; (c3b0 <nrf_esb_set_prefixes+0x48>)
    c36c:	781b      	ldrb	r3, [r3, #0]
    c36e:	b9b3      	cbnz	r3, c39e <nrf_esb_set_prefixes+0x36>
		return -EBUSY;
	}
	if (prefixes == NULL) {
    c370:	b1c0      	cbz	r0, c3a4 <nrf_esb_set_prefixes+0x3c>
		return -EINVAL;
	}
	if (!(num_pipes <= CONFIG_NRF_ESB_PIPE_COUNT)) {
    c372:	2908      	cmp	r1, #8
    c374:	d819      	bhi.n	c3aa <nrf_esb_set_prefixes+0x42>
    c376:	460c      	mov	r4, r1
    c378:	4601      	mov	r1, r0
			}
		}
	}
#endif

	memcpy(esb_addr.pipe_prefixes, prefixes, num_pipes);
    c37a:	4d0e      	ldr	r5, [pc, #56]	; (c3b4 <nrf_esb_set_prefixes+0x4c>)
    c37c:	4622      	mov	r2, r4
    c37e:	f105 0008 	add.w	r0, r5, #8
    c382:	f004 f8d5 	bl	10530 <memcpy>
	esb_addr.num_pipes = num_pipes;
    c386:	742c      	strb	r4, [r5, #16]
	esb_addr.rx_pipes_enabled = BIT_MASK_UINT_8(num_pipes);
    c388:	f1c4 0408 	rsb	r4, r4, #8
    c38c:	21ff      	movs	r1, #255	; 0xff
    c38e:	fa41 f404 	asr.w	r4, r1, r4
    c392:	74ac      	strb	r4, [r5, #18]

	update_radio_addresses(ADDR_UPDATE_MASK_PREFIX);
    c394:	2004      	movs	r0, #4
    c396:	f7ff fd8f 	bl	beb8 <update_radio_addresses>
	apply_address_workarounds();

	return 0;
    c39a:	2000      	movs	r0, #0
}
    c39c:	bd38      	pop	{r3, r4, r5, pc}
		return -EBUSY;
    c39e:	f06f 000f 	mvn.w	r0, #15
    c3a2:	e7fb      	b.n	c39c <nrf_esb_set_prefixes+0x34>
		return -EINVAL;
    c3a4:	f06f 0015 	mvn.w	r0, #21
    c3a8:	e7f8      	b.n	c39c <nrf_esb_set_prefixes+0x34>
		return -EINVAL;
    c3aa:	f06f 0015 	mvn.w	r0, #21
    c3ae:	e7f5      	b.n	c39c <nrf_esb_set_prefixes+0x34>
    c3b0:	200027d9 	.word	0x200027d9
    c3b4:	200071b4 	.word	0x200071b4

0000c3b8 <z_sys_device_do_config_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_device_do_config_level(s32_t level)
{
    c3b8:	b538      	push	{r3, r4, r5, lr}
    c3ba:	4605      	mov	r5, r0
		__device_APPLICATION_start,
		/* End marker */
		__device_init_end,
	};

	for (info = config_levels[level]; info < config_levels[level+1];
    c3bc:	4b0a      	ldr	r3, [pc, #40]	; (c3e8 <z_sys_device_do_config_level+0x30>)
    c3be:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    c3c2:	e000      	b.n	c3c6 <z_sys_device_do_config_level+0xe>
								info++) {
    c3c4:	340c      	adds	r4, #12
	for (info = config_levels[level]; info < config_levels[level+1];
    c3c6:	1c6b      	adds	r3, r5, #1
    c3c8:	4a07      	ldr	r2, [pc, #28]	; (c3e8 <z_sys_device_do_config_level+0x30>)
    c3ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c3ce:	42a3      	cmp	r3, r4
    c3d0:	d908      	bls.n	c3e4 <z_sys_device_do_config_level+0x2c>
		int retval;
		struct device_config *device_conf = info->config;
    c3d2:	6823      	ldr	r3, [r4, #0]

		retval = device_conf->init(info);
    c3d4:	685b      	ldr	r3, [r3, #4]
    c3d6:	4620      	mov	r0, r4
    c3d8:	4798      	blx	r3
		if (retval != 0) {
    c3da:	2800      	cmp	r0, #0
    c3dc:	d0f2      	beq.n	c3c4 <z_sys_device_do_config_level+0xc>
			/* Initialization failed. Clear the API struct so that
			 * device_get_binding() will not succeed for it.
			 */
			info->driver_api = NULL;
    c3de:	2300      	movs	r3, #0
    c3e0:	6063      	str	r3, [r4, #4]
    c3e2:	e7ef      	b.n	c3c4 <z_sys_device_do_config_level+0xc>
		} else {
			z_object_init(info);
		}
	}
}
    c3e4:	bd38      	pop	{r3, r4, r5, pc}
    c3e6:	bf00      	nop
    c3e8:	000131e0 	.word	0x000131e0

0000c3ec <z_impl_device_get_binding>:

struct device *z_impl_device_get_binding(const char *name)
{
    c3ec:	b538      	push	{r3, r4, r5, lr}
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed.  Reserve string comparisons for a fallback.
	 */
	for (info = __device_init_start; info != __device_init_end; info++) {
    c3ee:	4c11      	ldr	r4, [pc, #68]	; (c434 <z_impl_device_get_binding+0x48>)
    c3f0:	e000      	b.n	c3f4 <z_impl_device_get_binding+0x8>
    c3f2:	340c      	adds	r4, #12
    c3f4:	4b10      	ldr	r3, [pc, #64]	; (c438 <z_impl_device_get_binding+0x4c>)
    c3f6:	429c      	cmp	r4, r3
    c3f8:	d008      	beq.n	c40c <z_impl_device_get_binding+0x20>
		if ((info->driver_api != NULL) &&
    c3fa:	6863      	ldr	r3, [r4, #4]
    c3fc:	2b00      	cmp	r3, #0
    c3fe:	d0f8      	beq.n	c3f2 <z_impl_device_get_binding+0x6>
		    (info->config->name == name)) {
    c400:	6823      	ldr	r3, [r4, #0]
    c402:	681b      	ldr	r3, [r3, #0]
		if ((info->driver_api != NULL) &&
    c404:	4283      	cmp	r3, r0
    c406:	d1f4      	bne.n	c3f2 <z_impl_device_get_binding+0x6>
			return info;
		}
	}

	return NULL;
}
    c408:	4620      	mov	r0, r4
    c40a:	bd38      	pop	{r3, r4, r5, pc}
    c40c:	4605      	mov	r5, r0
	for (info = __device_init_start; info != __device_init_end; info++) {
    c40e:	4c09      	ldr	r4, [pc, #36]	; (c434 <z_impl_device_get_binding+0x48>)
    c410:	e000      	b.n	c414 <z_impl_device_get_binding+0x28>
    c412:	340c      	adds	r4, #12
    c414:	4b08      	ldr	r3, [pc, #32]	; (c438 <z_impl_device_get_binding+0x4c>)
    c416:	429c      	cmp	r4, r3
    c418:	d00a      	beq.n	c430 <z_impl_device_get_binding+0x44>
		if (info->driver_api == NULL) {
    c41a:	6863      	ldr	r3, [r4, #4]
    c41c:	2b00      	cmp	r3, #0
    c41e:	d0f8      	beq.n	c412 <z_impl_device_get_binding+0x26>
		if (strcmp(name, info->config->name) == 0) {
    c420:	6823      	ldr	r3, [r4, #0]
    c422:	6819      	ldr	r1, [r3, #0]
    c424:	4628      	mov	r0, r5
    c426:	f004 f863 	bl	104f0 <strcmp>
    c42a:	2800      	cmp	r0, #0
    c42c:	d1f1      	bne.n	c412 <z_impl_device_get_binding+0x26>
    c42e:	e7eb      	b.n	c408 <z_impl_device_get_binding+0x1c>
	return NULL;
    c430:	2400      	movs	r4, #0
    c432:	e7e9      	b.n	c408 <z_impl_device_get_binding+0x1c>
    c434:	200071d0 	.word	0x200071d0
    c438:	2000729c 	.word	0x2000729c

0000c43c <set_kernel_idle_time_in_ticks>:
 */
#ifndef CONFIG_SMP
static void set_kernel_idle_time_in_ticks(s32_t ticks)
{
#ifdef CONFIG_SYS_POWER_MANAGEMENT
	_kernel.idle = ticks;
    c43c:	4b01      	ldr	r3, [pc, #4]	; (c444 <set_kernel_idle_time_in_ticks+0x8>)
    c43e:	6218      	str	r0, [r3, #32]
#endif
}
    c440:	4770      	bx	lr
    c442:	bf00      	nop
    c444:	200026f4 	.word	0x200026f4

0000c448 <init_idle_thread>:
	arch_nop();
}

#if defined(CONFIG_MULTITHREADING)
static void init_idle_thread(struct k_thread *thr, k_thread_stack_t *stack)
{
    c448:	b510      	push	{r4, lr}
    c44a:	b086      	sub	sp, #24
    c44c:	4604      	mov	r4, r0
#ifdef CONFIG_SMP
	thr->base.is_idle = 1U;
#endif

	z_setup_new_thread(thr, stack,
    c44e:	4b0a      	ldr	r3, [pc, #40]	; (c478 <init_idle_thread+0x30>)
    c450:	9305      	str	r3, [sp, #20]
    c452:	2301      	movs	r3, #1
    c454:	9304      	str	r3, [sp, #16]
    c456:	230f      	movs	r3, #15
    c458:	9303      	str	r3, [sp, #12]
    c45a:	2300      	movs	r3, #0
    c45c:	9302      	str	r3, [sp, #8]
    c45e:	9301      	str	r3, [sp, #4]
    c460:	9300      	str	r3, [sp, #0]
    c462:	4b06      	ldr	r3, [pc, #24]	; (c47c <init_idle_thread+0x34>)
    c464:	f44f 72a0 	mov.w	r2, #320	; 0x140
    c468:	f002 f9ce 	bl	e808 <z_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    c46c:	7b63      	ldrb	r3, [r4, #13]
    c46e:	f023 0304 	bic.w	r3, r3, #4
    c472:	7363      	strb	r3, [r4, #13]
			  IDLE_STACK_SIZE, idle, NULL, NULL, NULL,
			  K_LOWEST_THREAD_PRIO, K_ESSENTIAL, IDLE_THREAD_NAME);
	z_mark_thread_as_started(thr);
}
    c474:	b006      	add	sp, #24
    c476:	bd10      	pop	{r4, pc}
    c478:	00013240 	.word	0x00013240
    c47c:	00010911 	.word	0x00010911

0000c480 <prepare_multithreading>:
 *
 * @return N/A
 */
#ifdef CONFIG_MULTITHREADING
static void prepare_multithreading(struct k_thread *dummy_thread)
{
    c480:	b510      	push	{r4, lr}
    c482:	b086      	sub	sp, #24
	dummy_thread->mem_domain_info.mem_domain = 0;
#endif
#endif

	/* _kernel.ready_q is all zeroes */
	z_sched_init();
    c484:	f001 fe56 	bl	e134 <z_sched_init>
	 * - the main thread will be the one to run first
	 * - no other thread is initialized yet and thus their priority fields
	 *   contain garbage, which would prevent the cache loading algorithm
	 *   to work as intended
	 */
	_kernel.ready_q.cache = _main_thread;
    c488:	4c19      	ldr	r4, [pc, #100]	; (c4f0 <prepare_multithreading+0x70>)
    c48a:	4b1a      	ldr	r3, [pc, #104]	; (c4f4 <prepare_multithreading+0x74>)
    c48c:	625c      	str	r4, [r3, #36]	; 0x24
#endif

	z_setup_new_thread(_main_thread, _main_stack,
    c48e:	4b1a      	ldr	r3, [pc, #104]	; (c4f8 <prepare_multithreading+0x78>)
    c490:	9305      	str	r3, [sp, #20]
    c492:	2301      	movs	r3, #1
    c494:	9304      	str	r3, [sp, #16]
    c496:	2300      	movs	r3, #0
    c498:	9303      	str	r3, [sp, #12]
    c49a:	9302      	str	r3, [sp, #8]
    c49c:	9301      	str	r3, [sp, #4]
    c49e:	9300      	str	r3, [sp, #0]
    c4a0:	4b16      	ldr	r3, [pc, #88]	; (c4fc <prepare_multithreading+0x7c>)
    c4a2:	f44f 6280 	mov.w	r2, #1024	; 0x400
    c4a6:	4916      	ldr	r1, [pc, #88]	; (c500 <prepare_multithreading+0x80>)
    c4a8:	4620      	mov	r0, r4
    c4aa:	f002 f9ad 	bl	e808 <z_setup_new_thread>
    c4ae:	7b63      	ldrb	r3, [r4, #13]
    c4b0:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
    c4b4:	7363      	strb	r3, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    c4b6:	f013 0f1b 	tst.w	r3, #27
    c4ba:	d105      	bne.n	c4c8 <prepare_multithreading+0x48>
	return node->next != NULL;
    c4bc:	69a3      	ldr	r3, [r4, #24]
    c4be:	b10b      	cbz	r3, c4c4 <prepare_multithreading+0x44>
    c4c0:	2300      	movs	r3, #0
    c4c2:	e002      	b.n	c4ca <prepare_multithreading+0x4a>
    c4c4:	2301      	movs	r3, #1
    c4c6:	e000      	b.n	c4ca <prepare_multithreading+0x4a>
    c4c8:	2300      	movs	r3, #0
	return true;
}

static ALWAYS_INLINE void z_ready_thread(struct k_thread *thread)
{
	if (z_is_thread_ready(thread)) {
    c4ca:	b963      	cbnz	r3, c4e6 <prepare_multithreading+0x66>

	z_mark_thread_as_started(_main_thread);
	z_ready_thread(_main_thread);

#ifdef CONFIG_MULTITHREADING
	init_idle_thread(_idle_thread, _idle_stack);
    c4cc:	4c0d      	ldr	r4, [pc, #52]	; (c504 <prepare_multithreading+0x84>)
    c4ce:	490e      	ldr	r1, [pc, #56]	; (c508 <prepare_multithreading+0x88>)
    c4d0:	4620      	mov	r0, r4
    c4d2:	f7ff ffb9 	bl	c448 <init_idle_thread>
	_kernel.cpus[0].idle_thread = _idle_thread;
    c4d6:	4b07      	ldr	r3, [pc, #28]	; (c4f4 <prepare_multithreading+0x74>)
    c4d8:	60dc      	str	r4, [r3, #12]
	list->head = (sys_dnode_t *)list;
    c4da:	f103 0218 	add.w	r2, r3, #24
    c4de:	619a      	str	r2, [r3, #24]
	list->tail = (sys_dnode_t *)list;
    c4e0:	61da      	str	r2, [r3, #28]
		+ CONFIG_ISR_STACK_SIZE;
#endif

	initialize_timeouts();

}
    c4e2:	b006      	add	sp, #24
    c4e4:	bd10      	pop	{r4, pc}
		z_add_thread_to_ready_q(thread);
    c4e6:	4802      	ldr	r0, [pc, #8]	; (c4f0 <prepare_multithreading+0x70>)
    c4e8:	f001 f98c 	bl	d804 <z_add_thread_to_ready_q>
    c4ec:	e7ee      	b.n	c4cc <prepare_multithreading+0x4c>
    c4ee:	bf00      	nop
    c4f0:	2000267c 	.word	0x2000267c
    c4f4:	200026f4 	.word	0x200026f4
    c4f8:	00013248 	.word	0x00013248
    c4fc:	0000c5a1 	.word	0x0000c5a1
    c500:	20004ae0 	.word	0x20004ae0
    c504:	20002610 	.word	0x20002610
    c508:	20004ee0 	.word	0x20004ee0

0000c50c <switch_to_main_thread>:

static void switch_to_main_thread(void)
{
    c50c:	b508      	push	{r3, lr}
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arch_configure_static_mpu_regions();
    c50e:	f7fd f995 	bl	983c <z_arch_configure_static_mpu_regions>
		MPU_GUARD_ALIGN_AND_SIZE;
#else
	start_of_main_stack =
		Z_THREAD_STACK_BUFFER(main_stack) + main_stack_size;
#endif
	start_of_main_stack = (void *)STACK_ROUND_DOWN(start_of_main_stack);
    c512:	4c0c      	ldr	r4, [pc, #48]	; (c544 <switch_to_main_thread+0x38>)
    c514:	f024 0407 	bic.w	r4, r4, #7

#ifdef CONFIG_TRACING
	z_sys_trace_thread_switched_out();
#endif
	_current = main_thread;
    c518:	480b      	ldr	r0, [pc, #44]	; (c548 <switch_to_main_thread+0x3c>)
    c51a:	4b0c      	ldr	r3, [pc, #48]	; (c54c <switch_to_main_thread+0x40>)
    c51c:	6098      	str	r0, [r3, #8]
#ifdef CONFIG_ARM_MPU
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arch_configure_dynamic_mpu_regions(main_thread);
    c51e:	f003 ff94 	bl	1044a <z_arch_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    c522:	4b0b      	ldr	r3, [pc, #44]	; (c550 <switch_to_main_thread+0x44>)
    c524:	4618      	mov	r0, r3
    c526:	f384 8809 	msr	PSP, r4
    c52a:	b663      	cpsie	if
    c52c:	f04f 0100 	mov.w	r1, #0
    c530:	f381 8811 	msr	BASEPRI, r1
    c534:	f3bf 8f6f 	isb	sy
    c538:	2100      	movs	r1, #0
    c53a:	2200      	movs	r2, #0
    c53c:	2300      	movs	r3, #0
    c53e:	f003 f8eb 	bl	f718 <z_thread_entry>
	"bl z_thread_entry \n\t"   /* z_thread_entry(_main, 0, 0, 0); */
	:
	: "r" (_main), "r" (start_of_main_stack)
	);

	CODE_UNREACHABLE;
    c542:	bf00      	nop
    c544:	20004ee0 	.word	0x20004ee0
    c548:	2000267c 	.word	0x2000267c
    c54c:	200026f4 	.word	0x200026f4
    c550:	0000c5a1 	.word	0x0000c5a1

0000c554 <z_bss_zero>:
{
    c554:	b508      	push	{r3, lr}
		     ((u32_t) &__bss_end - (u32_t) &__bss_start));
    c556:	4803      	ldr	r0, [pc, #12]	; (c564 <z_bss_zero+0x10>)
	(void)memset(&__bss_start, 0,
    c558:	4a03      	ldr	r2, [pc, #12]	; (c568 <z_bss_zero+0x14>)
    c55a:	1a12      	subs	r2, r2, r0
    c55c:	2100      	movs	r1, #0
    c55e:	f004 f80a 	bl	10576 <memset>
}
    c562:	bd08      	pop	{r3, pc}
    c564:	20000000 	.word	0x20000000
    c568:	200027dc 	.word	0x200027dc

0000c56c <z_data_copy>:
{
    c56c:	b508      	push	{r3, lr}
		 ((u32_t) &__data_ram_end - (u32_t) &__data_ram_start));
    c56e:	4806      	ldr	r0, [pc, #24]	; (c588 <z_data_copy+0x1c>)
	(void)memcpy(&__data_ram_start, &__data_rom_start,
    c570:	4a06      	ldr	r2, [pc, #24]	; (c58c <z_data_copy+0x20>)
    c572:	1a12      	subs	r2, r2, r0
    c574:	4906      	ldr	r1, [pc, #24]	; (c590 <z_data_copy+0x24>)
    c576:	f003 ffdb 	bl	10530 <memcpy>
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
    c57a:	4a06      	ldr	r2, [pc, #24]	; (c594 <z_data_copy+0x28>)
    c57c:	4906      	ldr	r1, [pc, #24]	; (c598 <z_data_copy+0x2c>)
    c57e:	4807      	ldr	r0, [pc, #28]	; (c59c <z_data_copy+0x30>)
    c580:	f003 ffd6 	bl	10530 <memcpy>
}
    c584:	bd08      	pop	{r3, pc}
    c586:	bf00      	nop
    c588:	20007060 	.word	0x20007060
    c58c:	20007590 	.word	0x20007590
    c590:	00013604 	.word	0x00013604
    c594:	00000000 	.word	0x00000000
    c598:	00013604 	.word	0x00013604
    c59c:	20000000 	.word	0x20000000

0000c5a0 <bg_thread_main>:
{
    c5a0:	b508      	push	{r3, lr}
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_POST_KERNEL);
    c5a2:	2002      	movs	r0, #2
    c5a4:	f7ff ff08 	bl	c3b8 <z_sys_device_do_config_level>
	PRINT_BOOT_BANNER();
    c5a8:	4807      	ldr	r0, [pc, #28]	; (c5c8 <bg_thread_main+0x28>)
    c5aa:	f003 f968 	bl	f87e <printk>
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_APPLICATION);
    c5ae:	2003      	movs	r0, #3
    c5b0:	f7ff ff02 	bl	c3b8 <z_sys_device_do_config_level>
	z_init_static_threads();
    c5b4:	f002 fa42 	bl	ea3c <z_init_static_threads>
	main();
    c5b8:	f7f4 faee 	bl	b98 <main>
	_main_thread->base.user_options &= ~K_ESSENTIAL;
    c5bc:	4a03      	ldr	r2, [pc, #12]	; (c5cc <bg_thread_main+0x2c>)
    c5be:	7b13      	ldrb	r3, [r2, #12]
    c5c0:	f023 0301 	bic.w	r3, r3, #1
    c5c4:	7313      	strb	r3, [r2, #12]
}
    c5c6:	bd08      	pop	{r3, pc}
    c5c8:	000131fc 	.word	0x000131fc
    c5cc:	2000267c 	.word	0x2000267c

0000c5d0 <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
    c5d0:	b500      	push	{lr}
    c5d2:	b09d      	sub	sp, #116	; 0x74
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	if (IS_ENABLED(CONFIG_LOG)) {
		log_core_init();
    c5d4:	f7f8 fbba 	bl	4d4c <log_core_init>
#if defined(CONFIG_MPU_REQUIRES_POWER_OF_TWO_ALIGNMENT) && \
	defined(CONFIG_USERSPACE)
	u32_t msp = (u32_t)(Z_THREAD_STACK_BUFFER(_interrupt_stack) +
			    CONFIG_ISR_STACK_SIZE - MPU_GUARD_ALIGN_AND_SIZE);
#else
	u32_t msp = (u32_t)(Z_THREAD_STACK_BUFFER(_interrupt_stack) +
    c5d8:	4b16      	ldr	r3, [pc, #88]	; (c634 <z_cstart+0x64>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    c5da:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    c5de:	4b16      	ldr	r3, [pc, #88]	; (c638 <z_cstart+0x68>)
    c5e0:	695a      	ldr	r2, [r3, #20]
    c5e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    c5e6:	615a      	str	r2, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    c5e8:	22e0      	movs	r2, #224	; 0xe0
    c5ea:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
    c5ee:	2400      	movs	r4, #0
    c5f0:	77dc      	strb	r4, [r3, #31]
    c5f2:	761c      	strb	r4, [r3, #24]
    c5f4:	765c      	strb	r4, [r3, #25]
    c5f6:	769c      	strb	r4, [r3, #26]
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    c5f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    c5fa:	f442 22e0 	orr.w	r2, r2, #458752	; 0x70000
    c5fe:	625a      	str	r2, [r3, #36]	; 0x24
	z_FaultInit();
    c600:	f7fc ff4a 	bl	9498 <z_FaultInit>
	z_CpuIdleInit();
    c604:	f7fd f80c 	bl	9620 <z_CpuIdleInit>

	/* perform any architecture-specific initialization */
	kernel_arch_init();

#ifdef CONFIG_MULTITHREADING
	struct k_thread dummy_thread = {
    c608:	ad01      	add	r5, sp, #4
    c60a:	226c      	movs	r2, #108	; 0x6c
    c60c:	4621      	mov	r1, r4
    c60e:	4628      	mov	r0, r5
    c610:	f003 ffb1 	bl	10576 <memset>
    c614:	2601      	movs	r6, #1
    c616:	f88d 6011 	strb.w	r6, [sp, #17]
# ifdef CONFIG_SCHED_CPU_MASK
		 .base.cpu_mask = -1,
# endif
	};

	_current = &dummy_thread;
    c61a:	4b08      	ldr	r3, [pc, #32]	; (c63c <z_cstart+0x6c>)
    c61c:	609d      	str	r5, [r3, #8]
#ifdef CONFIG_USERSPACE
	z_app_shmem_bss_zero();
#endif

	/* perform basic hardware initialization */
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    c61e:	4620      	mov	r0, r4
    c620:	f7ff feca 	bl	c3b8 <z_sys_device_do_config_level>
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    c624:	4630      	mov	r0, r6
    c626:	f7ff fec7 	bl	c3b8 <z_sys_device_do_config_level>
#ifdef CONFIG_STACK_CANARIES
	__stack_chk_guard = z_early_boot_rand32_get();
#endif

#ifdef CONFIG_MULTITHREADING
	prepare_multithreading(&dummy_thread);
    c62a:	4628      	mov	r0, r5
    c62c:	f7ff ff28 	bl	c480 <prepare_multithreading>
	switch_to_main_thread();
    c630:	f7ff ff6c 	bl	c50c <switch_to_main_thread>
    c634:	20005820 	.word	0x20005820
    c638:	e000ed00 	.word	0xe000ed00
    c63c:	200026f4 	.word	0x200026f4

0000c640 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(struct device *dev)
{
    c640:	b510      	push	{r4, lr}
	ARG_UNUSED(dev);

	struct k_mem_slab *slab;

	for (slab = _k_mem_slab_list_start;
    c642:	4c05      	ldr	r4, [pc, #20]	; (c658 <init_mem_slab_module+0x18>)
    c644:	4b05      	ldr	r3, [pc, #20]	; (c65c <init_mem_slab_module+0x1c>)
    c646:	429c      	cmp	r4, r3
    c648:	d204      	bcs.n	c654 <init_mem_slab_module+0x14>
	     slab < _k_mem_slab_list_end;
	     slab++) {
		create_free_list(slab);
    c64a:	4620      	mov	r0, r4
    c64c:	f004 f96c 	bl	10928 <create_free_list>
	     slab++) {
    c650:	341c      	adds	r4, #28
    c652:	e7f7      	b.n	c644 <init_mem_slab_module+0x4>
		SYS_TRACING_OBJ_INIT(k_mem_slab, slab);
		z_object_init(slab);
	}
	return 0;
}
    c654:	2000      	movs	r0, #0
    c656:	bd10      	pop	{r4, pc}
    c658:	200073e8 	.word	0x200073e8
    c65c:	20007404 	.word	0x20007404

0000c660 <k_mem_slab_init>:
SYS_INIT(init_mem_slab_module, PRE_KERNEL_1,
	 CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

void k_mem_slab_init(struct k_mem_slab *slab, void *buffer,
		    size_t block_size, u32_t num_blocks)
{
    c660:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c664:	4604      	mov	r4, r0
    c666:	460d      	mov	r5, r1
    c668:	4616      	mov	r6, r2
    c66a:	461f      	mov	r7, r3
	/* block size must be word aligned */
	__ASSERT((slab->block_size & (sizeof(void *) - 1)) == 0,
    c66c:	68c3      	ldr	r3, [r0, #12]
    c66e:	f013 0f03 	tst.w	r3, #3
    c672:	d10b      	bne.n	c68c <k_mem_slab_init+0x2c>
		 "block size not word aligned");

	slab->num_blocks = num_blocks;
    c674:	60a7      	str	r7, [r4, #8]
	slab->block_size = block_size;
    c676:	60e6      	str	r6, [r4, #12]
	slab->buffer = buffer;
    c678:	6125      	str	r5, [r4, #16]
	slab->num_used = 0U;
    c67a:	2300      	movs	r3, #0
    c67c:	61a3      	str	r3, [r4, #24]
	create_free_list(slab);
    c67e:	4620      	mov	r0, r4
    c680:	f004 f952 	bl	10928 <create_free_list>
	list->head = (sys_dnode_t *)list;
    c684:	6024      	str	r4, [r4, #0]
	list->tail = (sys_dnode_t *)list;
    c686:	6064      	str	r4, [r4, #4]
	z_waitq_init(&slab->wait_q);
	SYS_TRACING_OBJ_INIT(k_mem_slab, slab);

	z_object_init(slab);
}
    c688:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT((slab->block_size & (sizeof(void *) - 1)) == 0,
    c68c:	f8df 8028 	ldr.w	r8, [pc, #40]	; c6b8 <k_mem_slab_init+0x58>
    c690:	2350      	movs	r3, #80	; 0x50
    c692:	4642      	mov	r2, r8
    c694:	4905      	ldr	r1, [pc, #20]	; (c6ac <k_mem_slab_init+0x4c>)
    c696:	4806      	ldr	r0, [pc, #24]	; (c6b0 <k_mem_slab_init+0x50>)
    c698:	f003 f8f1 	bl	f87e <printk>
    c69c:	4805      	ldr	r0, [pc, #20]	; (c6b4 <k_mem_slab_init+0x54>)
    c69e:	f003 f8ee 	bl	f87e <printk>
    c6a2:	2150      	movs	r1, #80	; 0x50
    c6a4:	4640      	mov	r0, r8
    c6a6:	f003 f970 	bl	f98a <assert_post_action>
    c6aa:	e7e3      	b.n	c674 <k_mem_slab_init+0x14>
    c6ac:	0001326c 	.word	0x0001326c
    c6b0:	00010f8c 	.word	0x00010f8c
    c6b4:	0001329c 	.word	0x0001329c
    c6b8:	00013258 	.word	0x00013258

0000c6bc <k_mem_slab_alloc>:

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, s32_t timeout)
{
    c6bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c6c0:	4604      	mov	r4, r0
    c6c2:	460e      	mov	r6, r1
    c6c4:	4617      	mov	r7, r2
	__asm__ volatile(
    c6c6:	f04f 0320 	mov.w	r3, #32
    c6ca:	f3ef 8511 	mrs	r5, BASEPRI
    c6ce:	f383 8811 	msr	BASEPRI, r3
    c6d2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
    c6d6:	4832      	ldr	r0, [pc, #200]	; (c7a0 <k_mem_slab_alloc+0xe4>)
    c6d8:	f002 f8b0 	bl	e83c <z_spin_lock_valid>
    c6dc:	b1e8      	cbz	r0, c71a <k_mem_slab_alloc+0x5e>
	z_spin_lock_set_owner(l);
    c6de:	4830      	ldr	r0, [pc, #192]	; (c7a0 <k_mem_slab_alloc+0xe4>)
    c6e0:	f002 f8cc 	bl	e87c <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	int result;

	/* block size must be word aligned */
	__ASSERT((slab->block_size & (sizeof(void *) - 1)) == 0,
    c6e4:	68e3      	ldr	r3, [r4, #12]
    c6e6:	f013 0f03 	tst.w	r3, #3
    c6ea:	d126      	bne.n	c73a <k_mem_slab_alloc+0x7e>
		 "block size not word aligned");

	if (slab->free_list != NULL) {
    c6ec:	6963      	ldr	r3, [r4, #20]
    c6ee:	2b00      	cmp	r3, #0
    c6f0:	d033      	beq.n	c75a <k_mem_slab_alloc+0x9e>
		/* take a free block */
		*mem = slab->free_list;
    c6f2:	6033      	str	r3, [r6, #0]
		slab->free_list = *(char **)(slab->free_list);
    c6f4:	6963      	ldr	r3, [r4, #20]
    c6f6:	681b      	ldr	r3, [r3, #0]
    c6f8:	6163      	str	r3, [r4, #20]
		slab->num_used++;
    c6fa:	69a3      	ldr	r3, [r4, #24]
    c6fc:	3301      	adds	r3, #1
    c6fe:	61a3      	str	r3, [r4, #24]
		result = 0;
    c700:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
    c702:	4827      	ldr	r0, [pc, #156]	; (c7a0 <k_mem_slab_alloc+0xe4>)
    c704:	f002 f8aa 	bl	e85c <z_spin_unlock_valid>
    c708:	2800      	cmp	r0, #0
    c70a:	d03a      	beq.n	c782 <k_mem_slab_alloc+0xc6>
	__asm__ volatile(
    c70c:	f385 8811 	msr	BASEPRI, r5
    c710:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);

	return result;
}
    c714:	4620      	mov	r0, r4
    c716:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
    c71a:	f8df 80a0 	ldr.w	r8, [pc, #160]	; c7bc <k_mem_slab_alloc+0x100>
    c71e:	234e      	movs	r3, #78	; 0x4e
    c720:	4642      	mov	r2, r8
    c722:	4920      	ldr	r1, [pc, #128]	; (c7a4 <k_mem_slab_alloc+0xe8>)
    c724:	4820      	ldr	r0, [pc, #128]	; (c7a8 <k_mem_slab_alloc+0xec>)
    c726:	f003 f8aa 	bl	f87e <printk>
    c72a:	4820      	ldr	r0, [pc, #128]	; (c7ac <k_mem_slab_alloc+0xf0>)
    c72c:	f003 f8a7 	bl	f87e <printk>
    c730:	214e      	movs	r1, #78	; 0x4e
    c732:	4640      	mov	r0, r8
    c734:	f003 f929 	bl	f98a <assert_post_action>
    c738:	e7d1      	b.n	c6de <k_mem_slab_alloc+0x22>
	__ASSERT((slab->block_size & (sizeof(void *) - 1)) == 0,
    c73a:	f8df 808c 	ldr.w	r8, [pc, #140]	; c7c8 <k_mem_slab_alloc+0x10c>
    c73e:	2364      	movs	r3, #100	; 0x64
    c740:	4642      	mov	r2, r8
    c742:	491b      	ldr	r1, [pc, #108]	; (c7b0 <k_mem_slab_alloc+0xf4>)
    c744:	4818      	ldr	r0, [pc, #96]	; (c7a8 <k_mem_slab_alloc+0xec>)
    c746:	f003 f89a 	bl	f87e <printk>
    c74a:	481a      	ldr	r0, [pc, #104]	; (c7b4 <k_mem_slab_alloc+0xf8>)
    c74c:	f003 f897 	bl	f87e <printk>
    c750:	2164      	movs	r1, #100	; 0x64
    c752:	4640      	mov	r0, r8
    c754:	f003 f919 	bl	f98a <assert_post_action>
    c758:	e7c8      	b.n	c6ec <k_mem_slab_alloc+0x30>
	} else if (timeout == K_NO_WAIT) {
    c75a:	b927      	cbnz	r7, c766 <k_mem_slab_alloc+0xaa>
		*mem = NULL;
    c75c:	2300      	movs	r3, #0
    c75e:	6033      	str	r3, [r6, #0]
		result = -ENOMEM;
    c760:	f06f 040b 	mvn.w	r4, #11
    c764:	e7cd      	b.n	c702 <k_mem_slab_alloc+0x46>
		result = z_pend_curr(&lock, key, &slab->wait_q, timeout);
    c766:	463b      	mov	r3, r7
    c768:	4622      	mov	r2, r4
    c76a:	4629      	mov	r1, r5
    c76c:	480c      	ldr	r0, [pc, #48]	; (c7a0 <k_mem_slab_alloc+0xe4>)
    c76e:	f001 fb5b 	bl	de28 <z_pend_curr>
		if (result == 0) {
    c772:	4604      	mov	r4, r0
    c774:	2800      	cmp	r0, #0
    c776:	d1cd      	bne.n	c714 <k_mem_slab_alloc+0x58>
			*mem = _current->base.swap_data;
    c778:	4b0f      	ldr	r3, [pc, #60]	; (c7b8 <k_mem_slab_alloc+0xfc>)
    c77a:	689b      	ldr	r3, [r3, #8]
    c77c:	695b      	ldr	r3, [r3, #20]
    c77e:	6033      	str	r3, [r6, #0]
		return result;
    c780:	e7c8      	b.n	c714 <k_mem_slab_alloc+0x58>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
    c782:	4e0e      	ldr	r6, [pc, #56]	; (c7bc <k_mem_slab_alloc+0x100>)
    c784:	2361      	movs	r3, #97	; 0x61
    c786:	4632      	mov	r2, r6
    c788:	490d      	ldr	r1, [pc, #52]	; (c7c0 <k_mem_slab_alloc+0x104>)
    c78a:	4807      	ldr	r0, [pc, #28]	; (c7a8 <k_mem_slab_alloc+0xec>)
    c78c:	f003 f877 	bl	f87e <printk>
    c790:	480c      	ldr	r0, [pc, #48]	; (c7c4 <k_mem_slab_alloc+0x108>)
    c792:	f003 f874 	bl	f87e <printk>
    c796:	2161      	movs	r1, #97	; 0x61
    c798:	4630      	mov	r0, r6
    c79a:	f003 f8f6 	bl	f98a <assert_post_action>
    c79e:	e7b5      	b.n	c70c <k_mem_slab_alloc+0x50>
    c7a0:	200026e8 	.word	0x200026e8
    c7a4:	00012790 	.word	0x00012790
    c7a8:	00010f8c 	.word	0x00010f8c
    c7ac:	000127a8 	.word	0x000127a8
    c7b0:	0001326c 	.word	0x0001326c
    c7b4:	0001329c 	.word	0x0001329c
    c7b8:	200026f4 	.word	0x200026f4
    c7bc:	00012778 	.word	0x00012778
    c7c0:	000127c0 	.word	0x000127c0
    c7c4:	000127d8 	.word	0x000127d8
    c7c8:	00013258 	.word	0x00013258

0000c7cc <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    c7cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c7ce:	4604      	mov	r4, r0
    c7d0:	460d      	mov	r5, r1
	__asm__ volatile(
    c7d2:	f04f 0320 	mov.w	r3, #32
    c7d6:	f3ef 8611 	mrs	r6, BASEPRI
    c7da:	f383 8811 	msr	BASEPRI, r3
    c7de:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
    c7e2:	482a      	ldr	r0, [pc, #168]	; (c88c <k_mem_slab_free+0xc0>)
    c7e4:	f002 f82a 	bl	e83c <z_spin_lock_valid>
    c7e8:	b198      	cbz	r0, c812 <k_mem_slab_free+0x46>
	z_spin_lock_set_owner(l);
    c7ea:	4828      	ldr	r0, [pc, #160]	; (c88c <k_mem_slab_free+0xc0>)
    c7ec:	f002 f846 	bl	e87c <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    c7f0:	4620      	mov	r0, r4
    c7f2:	f001 fc01 	bl	dff8 <z_unpend_first_thread>

	if (pending_thread != NULL) {
    c7f6:	4603      	mov	r3, r0
    c7f8:	b338      	cbz	r0, c84a <k_mem_slab_free+0x7e>
		z_set_thread_return_value_with_data(pending_thread, 0, *mem);
    c7fa:	682a      	ldr	r2, [r5, #0]
}

static ALWAYS_INLINE void
z_set_thread_return_value(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    c7fc:	2100      	movs	r1, #0
    c7fe:	6681      	str	r1, [r0, #104]	; 0x68
	thread->base.swap_data = data;
    c800:	6142      	str	r2, [r0, #20]
	u8_t state = thread->base.thread_state;
    c802:	7b42      	ldrb	r2, [r0, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    c804:	f012 0f1f 	tst.w	r2, #31
    c808:	d114      	bne.n	c834 <k_mem_slab_free+0x68>
	return node->next != NULL;
    c80a:	6982      	ldr	r2, [r0, #24]
    c80c:	b182      	cbz	r2, c830 <k_mem_slab_free+0x64>
    c80e:	2200      	movs	r2, #0
    c810:	e011      	b.n	c836 <k_mem_slab_free+0x6a>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
    c812:	4f1f      	ldr	r7, [pc, #124]	; (c890 <k_mem_slab_free+0xc4>)
    c814:	234e      	movs	r3, #78	; 0x4e
    c816:	463a      	mov	r2, r7
    c818:	491e      	ldr	r1, [pc, #120]	; (c894 <k_mem_slab_free+0xc8>)
    c81a:	481f      	ldr	r0, [pc, #124]	; (c898 <k_mem_slab_free+0xcc>)
    c81c:	f003 f82f 	bl	f87e <printk>
    c820:	481e      	ldr	r0, [pc, #120]	; (c89c <k_mem_slab_free+0xd0>)
    c822:	f003 f82c 	bl	f87e <printk>
    c826:	214e      	movs	r1, #78	; 0x4e
    c828:	4638      	mov	r0, r7
    c82a:	f003 f8ae 	bl	f98a <assert_post_action>
    c82e:	e7dc      	b.n	c7ea <k_mem_slab_free+0x1e>
    c830:	2201      	movs	r2, #1
    c832:	e000      	b.n	c836 <k_mem_slab_free+0x6a>
    c834:	2200      	movs	r2, #0
	if (z_is_thread_ready(thread)) {
    c836:	b922      	cbnz	r2, c842 <k_mem_slab_free+0x76>
		z_ready_thread(pending_thread);
		z_reschedule(&lock, key);
    c838:	4631      	mov	r1, r6
    c83a:	4814      	ldr	r0, [pc, #80]	; (c88c <k_mem_slab_free+0xc0>)
    c83c:	f000 fd72 	bl	d324 <z_reschedule>
		**(char ***)mem = slab->free_list;
		slab->free_list = *(char **)mem;
		slab->num_used--;
		k_spin_unlock(&lock, key);
	}
}
    c840:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		z_add_thread_to_ready_q(thread);
    c842:	4618      	mov	r0, r3
    c844:	f000 ffde 	bl	d804 <z_add_thread_to_ready_q>
    c848:	e7f6      	b.n	c838 <k_mem_slab_free+0x6c>
		**(char ***)mem = slab->free_list;
    c84a:	682b      	ldr	r3, [r5, #0]
    c84c:	6962      	ldr	r2, [r4, #20]
    c84e:	601a      	str	r2, [r3, #0]
		slab->free_list = *(char **)mem;
    c850:	682b      	ldr	r3, [r5, #0]
    c852:	6163      	str	r3, [r4, #20]
		slab->num_used--;
    c854:	69a3      	ldr	r3, [r4, #24]
    c856:	3b01      	subs	r3, #1
    c858:	61a3      	str	r3, [r4, #24]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
    c85a:	480c      	ldr	r0, [pc, #48]	; (c88c <k_mem_slab_free+0xc0>)
    c85c:	f001 fffe 	bl	e85c <z_spin_unlock_valid>
    c860:	b120      	cbz	r0, c86c <k_mem_slab_free+0xa0>
	__asm__ volatile(
    c862:	f386 8811 	msr	BASEPRI, r6
    c866:	f3bf 8f6f 	isb	sy
}
    c86a:	e7e9      	b.n	c840 <k_mem_slab_free+0x74>
    c86c:	4c08      	ldr	r4, [pc, #32]	; (c890 <k_mem_slab_free+0xc4>)
    c86e:	2361      	movs	r3, #97	; 0x61
    c870:	4622      	mov	r2, r4
    c872:	490b      	ldr	r1, [pc, #44]	; (c8a0 <k_mem_slab_free+0xd4>)
    c874:	4808      	ldr	r0, [pc, #32]	; (c898 <k_mem_slab_free+0xcc>)
    c876:	f003 f802 	bl	f87e <printk>
    c87a:	480a      	ldr	r0, [pc, #40]	; (c8a4 <k_mem_slab_free+0xd8>)
    c87c:	f002 ffff 	bl	f87e <printk>
    c880:	2161      	movs	r1, #97	; 0x61
    c882:	4620      	mov	r0, r4
    c884:	f003 f881 	bl	f98a <assert_post_action>
    c888:	e7eb      	b.n	c862 <k_mem_slab_free+0x96>
    c88a:	bf00      	nop
    c88c:	200026e8 	.word	0x200026e8
    c890:	00012778 	.word	0x00012778
    c894:	00012790 	.word	0x00012790
    c898:	00010f8c 	.word	0x00010f8c
    c89c:	000127a8 	.word	0x000127a8
    c8a0:	000127c0 	.word	0x000127c0
    c8a4:	000127d8 	.word	0x000127d8

0000c8a8 <get_pool>:

static struct k_spinlock lock;

static struct k_mem_pool *get_pool(int id)
{
	return &_k_mem_pool_list_start[id];
    c8a8:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    c8ac:	0083      	lsls	r3, r0, #2
}
    c8ae:	4801      	ldr	r0, [pc, #4]	; (c8b4 <get_pool+0xc>)
    c8b0:	4418      	add	r0, r3
    c8b2:	4770      	bx	lr
    c8b4:	20007404 	.word	0x20007404

0000c8b8 <pool_id>:

static int pool_id(struct k_mem_pool *pool)
{
	return pool - &_k_mem_pool_list_start[0];
    c8b8:	4b03      	ldr	r3, [pc, #12]	; (c8c8 <pool_id+0x10>)
    c8ba:	1ac0      	subs	r0, r0, r3
    c8bc:	1080      	asrs	r0, r0, #2
}
    c8be:	4b03      	ldr	r3, [pc, #12]	; (c8cc <pool_id+0x14>)
    c8c0:	fb03 f000 	mul.w	r0, r3, r0
    c8c4:	4770      	bx	lr
    c8c6:	bf00      	nop
    c8c8:	20007404 	.word	0x20007404
    c8cc:	b6db6db7 	.word	0xb6db6db7

0000c8d0 <init_static_pools>:
	z_waitq_init(&p->wait_q);
	z_sys_mem_pool_base_init(&p->base);
}

int init_static_pools(struct device *unused)
{
    c8d0:	b510      	push	{r4, lr}
	ARG_UNUSED(unused);
	struct k_mem_pool *p;

	for (p = _k_mem_pool_list_start; p < _k_mem_pool_list_end; p++) {
    c8d2:	4c05      	ldr	r4, [pc, #20]	; (c8e8 <init_static_pools+0x18>)
    c8d4:	4b05      	ldr	r3, [pc, #20]	; (c8ec <init_static_pools+0x1c>)
    c8d6:	429c      	cmp	r4, r3
    c8d8:	d204      	bcs.n	c8e4 <init_static_pools+0x14>
		k_mem_pool_init(p);
    c8da:	4620      	mov	r0, r4
    c8dc:	f004 f832 	bl	10944 <k_mem_pool_init>
	for (p = _k_mem_pool_list_start; p < _k_mem_pool_list_end; p++) {
    c8e0:	341c      	adds	r4, #28
    c8e2:	e7f7      	b.n	c8d4 <init_static_pools+0x4>
	}

	return 0;
}
    c8e4:	2000      	movs	r0, #0
    c8e6:	bd10      	pop	{r4, pc}
    c8e8:	20007404 	.word	0x20007404
    c8ec:	2000743c 	.word	0x2000743c

0000c8f0 <k_mem_pool_alloc>:

SYS_INIT(init_static_pools, PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

int k_mem_pool_alloc(struct k_mem_pool *p, struct k_mem_block *block,
		     size_t size, s32_t timeout)
{
    c8f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c8f4:	b085      	sub	sp, #20
    c8f6:	4606      	mov	r6, r0
    c8f8:	460d      	mov	r5, r1
    c8fa:	4692      	mov	sl, r2
    c8fc:	461f      	mov	r7, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    c8fe:	f3ef 8305 	mrs	r3, IPSR
		|| (vector && !(SCB->ICSR & SCB_ICSR_RETTOBASE_Msk))
    c902:	2b0d      	cmp	r3, #13
    c904:	d807      	bhi.n	c916 <k_mem_pool_alloc+0x26>
    c906:	b173      	cbz	r3, c926 <k_mem_pool_alloc+0x36>
    c908:	4b41      	ldr	r3, [pc, #260]	; (ca10 <k_mem_pool_alloc+0x120>)
    c90a:	685b      	ldr	r3, [r3, #4]
    c90c:	f413 6f00 	tst.w	r3, #2048	; 0x800
    c910:	d00b      	beq.n	c92a <k_mem_pool_alloc+0x3a>
    c912:	2300      	movs	r3, #0
    c914:	e000      	b.n	c918 <k_mem_pool_alloc+0x28>
    c916:	2301      	movs	r3, #1
	int ret;
	s64_t end = 0;

	__ASSERT(!(z_is_in_isr() && timeout != K_NO_WAIT), "");
    c918:	b103      	cbz	r3, c91c <k_mem_pool_alloc+0x2c>
    c91a:	b947      	cbnz	r7, c92e <k_mem_pool_alloc+0x3e>

	if (timeout > 0) {
    c91c:	2f00      	cmp	r7, #0
    c91e:	dc16      	bgt.n	c94e <k_mem_pool_alloc+0x5e>
	s64_t end = 0;
    c920:	2200      	movs	r2, #0
    c922:	4690      	mov	r8, r2
    c924:	e052      	b.n	c9cc <k_mem_pool_alloc+0xdc>
    c926:	2300      	movs	r3, #0
    c928:	e7f6      	b.n	c918 <k_mem_pool_alloc+0x28>
    c92a:	2301      	movs	r3, #1
    c92c:	e7f4      	b.n	c918 <k_mem_pool_alloc+0x28>
	__ASSERT(!(z_is_in_isr() && timeout != K_NO_WAIT), "");
    c92e:	f8df 80f0 	ldr.w	r8, [pc, #240]	; ca20 <k_mem_pool_alloc+0x130>
    c932:	2339      	movs	r3, #57	; 0x39
    c934:	4642      	mov	r2, r8
    c936:	4937      	ldr	r1, [pc, #220]	; (ca14 <k_mem_pool_alloc+0x124>)
    c938:	4837      	ldr	r0, [pc, #220]	; (ca18 <k_mem_pool_alloc+0x128>)
    c93a:	f002 ffa0 	bl	f87e <printk>
    c93e:	4837      	ldr	r0, [pc, #220]	; (ca1c <k_mem_pool_alloc+0x12c>)
    c940:	f002 ff9d 	bl	f87e <printk>
    c944:	2139      	movs	r1, #57	; 0x39
    c946:	4640      	mov	r0, r8
    c948:	f003 f81f 	bl	f98a <assert_post_action>
    c94c:	e7e6      	b.n	c91c <k_mem_pool_alloc+0x2c>
		end = z_tick_get() + z_ms_to_ticks(timeout);
    c94e:	f002 fb8b 	bl	f068 <z_tick_get>
    c952:	4680      	mov	r8, r0
{
#ifdef CONFIG_SYS_CLOCK_EXISTS

#ifdef _NEED_PRECISE_TICK_MS_CONVERSION
	/* use 64-bit math to keep precision */
	return (s32_t)ceiling_fraction(
    c954:	17fb      	asrs	r3, r7, #31
    c956:	03d9      	lsls	r1, r3, #15
    c958:	ea41 4157 	orr.w	r1, r1, r7, lsr #17
    c95c:	03f8      	lsls	r0, r7, #15
    c95e:	f8df c0c4 	ldr.w	ip, [pc, #196]	; ca24 <k_mem_pool_alloc+0x134>
    c962:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
    c966:	2300      	movs	r3, #0
    c968:	eb10 000c 	adds.w	r0, r0, ip
    c96c:	f04f 0c00 	mov.w	ip, #0
    c970:	eb41 010c 	adc.w	r1, r1, ip
    c974:	f7f3 fbc4 	bl	100 <__aeabi_ldivmod>
    c978:	eb18 0200 	adds.w	r2, r8, r0
    c97c:	4690      	mov	r8, r2
    c97e:	e025      	b.n	c9cc <k_mem_pool_alloc+0xdc>
			if (ret != -EAGAIN) {
				break;
			}
		}

		if (ret == -EAGAIN) {
    c980:	f114 0f0b 	cmn.w	r4, #11
    c984:	d035      	beq.n	c9f2 <k_mem_pool_alloc+0x102>
			ret = -ENOMEM;
		}

		block->id.pool = pool_id(p);
    c986:	4630      	mov	r0, r6
    c988:	f7ff ff96 	bl	c8b8 <pool_id>
    c98c:	7128      	strb	r0, [r5, #4]
		block->id.level = level_num;
    c98e:	796b      	ldrb	r3, [r5, #5]
    c990:	9a02      	ldr	r2, [sp, #8]
    c992:	f362 0303 	bfi	r3, r2, #0, #4
    c996:	716b      	strb	r3, [r5, #5]
		block->id.block = block_num;
    c998:	686b      	ldr	r3, [r5, #4]
    c99a:	9a03      	ldr	r2, [sp, #12]
    c99c:	f362 331f 	bfi	r3, r2, #12, #20
    c9a0:	606b      	str	r3, [r5, #4]

		if (ret == 0 || timeout == K_NO_WAIT ||
    c9a2:	b384      	cbz	r4, ca06 <k_mem_pool_alloc+0x116>
    c9a4:	b37f      	cbz	r7, ca06 <k_mem_pool_alloc+0x116>
    c9a6:	f114 0f0c 	cmn.w	r4, #12
    c9aa:	d12c      	bne.n	ca06 <k_mem_pool_alloc+0x116>
		    ret != -ENOMEM) {
			return ret;
		}

		z_pend_curr_unlocked(&p->wait_q, timeout);
    c9ac:	f106 0114 	add.w	r1, r6, #20
	__asm__ volatile(
    c9b0:	f04f 0320 	mov.w	r3, #32
    c9b4:	f3ef 8011 	mrs	r0, BASEPRI
    c9b8:	f383 8811 	msr	BASEPRI, r3
    c9bc:	f3bf 8f6f 	isb	sy
	(void) z_pend_curr_irqlock(z_arch_irq_lock(), wait_q, timeout);
    c9c0:	463a      	mov	r2, r7
    c9c2:	f001 f9cb 	bl	dd5c <z_pend_curr_irqlock>

		if (timeout != K_FOREVER) {
    c9c6:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
    c9ca:	d115      	bne.n	c9f8 <k_mem_pool_alloc+0x108>
		for (int i = 0; i < 2; i++) {
    c9cc:	f04f 0b00 	mov.w	fp, #0
    c9d0:	f1bb 0f01 	cmp.w	fp, #1
    c9d4:	dcd4      	bgt.n	c980 <k_mem_pool_alloc+0x90>
			ret = z_sys_mem_pool_block_alloc(&p->base, size,
    c9d6:	9500      	str	r5, [sp, #0]
    c9d8:	ab03      	add	r3, sp, #12
    c9da:	aa02      	add	r2, sp, #8
    c9dc:	4651      	mov	r1, sl
    c9de:	4630      	mov	r0, r6
    c9e0:	f002 fde9 	bl	f5b6 <z_sys_mem_pool_block_alloc>
    c9e4:	4604      	mov	r4, r0
			if (ret != -EAGAIN) {
    c9e6:	f110 0f0b 	cmn.w	r0, #11
    c9ea:	d1c9      	bne.n	c980 <k_mem_pool_alloc+0x90>
		for (int i = 0; i < 2; i++) {
    c9ec:	f10b 0b01 	add.w	fp, fp, #1
    c9f0:	e7ee      	b.n	c9d0 <k_mem_pool_alloc+0xe0>
			ret = -ENOMEM;
    c9f2:	f06f 040b 	mvn.w	r4, #11
    c9f6:	e7c6      	b.n	c986 <k_mem_pool_alloc+0x96>
			timeout = end - z_tick_get();
    c9f8:	f002 fb36 	bl	f068 <z_tick_get>

			if (timeout < 0) {
    c9fc:	ebb8 0700 	subs.w	r7, r8, r0
    ca00:	d5e4      	bpl.n	c9cc <k_mem_pool_alloc+0xdc>
				break;
			}
		}
	}

	return -EAGAIN;
    ca02:	f06f 040a 	mvn.w	r4, #10
}
    ca06:	4620      	mov	r0, r4
    ca08:	b005      	add	sp, #20
    ca0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ca0e:	bf00      	nop
    ca10:	e000ed00 	.word	0xe000ed00
    ca14:	000132d0 	.word	0x000132d0
    ca18:	00010f8c 	.word	0x00010f8c
    ca1c:	000111e0 	.word	0x000111e0
    ca20:	000132bc 	.word	0x000132bc
    ca24:	0004ffff 	.word	0x0004ffff

0000ca28 <k_mem_pool_free_id>:

void k_mem_pool_free_id(struct k_mem_block_id *id)
{
    ca28:	b570      	push	{r4, r5, r6, lr}
    ca2a:	4604      	mov	r4, r0
	int need_sched = 0;
	struct k_mem_pool *p = get_pool(id->pool);
    ca2c:	7800      	ldrb	r0, [r0, #0]
    ca2e:	f7ff ff3b 	bl	c8a8 <get_pool>
    ca32:	4605      	mov	r5, r0

	z_sys_mem_pool_block_free(&p->base, id->level, id->block);
    ca34:	7861      	ldrb	r1, [r4, #1]
    ca36:	6822      	ldr	r2, [r4, #0]
    ca38:	0b12      	lsrs	r2, r2, #12
    ca3a:	f001 010f 	and.w	r1, r1, #15
    ca3e:	f002 fe49 	bl	f6d4 <z_sys_mem_pool_block_free>
    ca42:	f04f 0320 	mov.w	r3, #32
    ca46:	f3ef 8411 	mrs	r4, BASEPRI
    ca4a:	f383 8811 	msr	BASEPRI, r3
    ca4e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
    ca52:	481c      	ldr	r0, [pc, #112]	; (cac4 <k_mem_pool_free_id+0x9c>)
    ca54:	f001 fef2 	bl	e83c <z_spin_lock_valid>
    ca58:	b160      	cbz	r0, ca74 <k_mem_pool_free_id+0x4c>
	z_spin_lock_set_owner(l);
    ca5a:	481a      	ldr	r0, [pc, #104]	; (cac4 <k_mem_pool_free_id+0x9c>)
    ca5c:	f001 ff0e 	bl	e87c <z_spin_lock_set_owner>
	 * is unsynchronized.  Maybe we want to put the lock into the
	 * wait_q instead and make the API safe?)
	 */
	k_spinlock_key_t key = k_spin_lock(&lock);

	need_sched = z_unpend_all(&p->wait_q);
    ca60:	f105 0014 	add.w	r0, r5, #20
    ca64:	f004 f801 	bl	10a6a <z_unpend_all>

	if (need_sched != 0) {
    ca68:	b198      	cbz	r0, ca92 <k_mem_pool_free_id+0x6a>
		z_reschedule(&lock, key);
    ca6a:	4621      	mov	r1, r4
    ca6c:	4815      	ldr	r0, [pc, #84]	; (cac4 <k_mem_pool_free_id+0x9c>)
    ca6e:	f000 fc59 	bl	d324 <z_reschedule>
	} else {
		k_spin_unlock(&lock, key);
	}
}
    ca72:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
    ca74:	4e14      	ldr	r6, [pc, #80]	; (cac8 <k_mem_pool_free_id+0xa0>)
    ca76:	234e      	movs	r3, #78	; 0x4e
    ca78:	4632      	mov	r2, r6
    ca7a:	4914      	ldr	r1, [pc, #80]	; (cacc <k_mem_pool_free_id+0xa4>)
    ca7c:	4814      	ldr	r0, [pc, #80]	; (cad0 <k_mem_pool_free_id+0xa8>)
    ca7e:	f002 fefe 	bl	f87e <printk>
    ca82:	4814      	ldr	r0, [pc, #80]	; (cad4 <k_mem_pool_free_id+0xac>)
    ca84:	f002 fefb 	bl	f87e <printk>
    ca88:	214e      	movs	r1, #78	; 0x4e
    ca8a:	4630      	mov	r0, r6
    ca8c:	f002 ff7d 	bl	f98a <assert_post_action>
    ca90:	e7e3      	b.n	ca5a <k_mem_pool_free_id+0x32>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
    ca92:	480c      	ldr	r0, [pc, #48]	; (cac4 <k_mem_pool_free_id+0x9c>)
    ca94:	f001 fee2 	bl	e85c <z_spin_unlock_valid>
    ca98:	b120      	cbz	r0, caa4 <k_mem_pool_free_id+0x7c>
	__asm__ volatile(
    ca9a:	f384 8811 	msr	BASEPRI, r4
    ca9e:	f3bf 8f6f 	isb	sy
    caa2:	e7e6      	b.n	ca72 <k_mem_pool_free_id+0x4a>
    caa4:	4d08      	ldr	r5, [pc, #32]	; (cac8 <k_mem_pool_free_id+0xa0>)
    caa6:	2361      	movs	r3, #97	; 0x61
    caa8:	462a      	mov	r2, r5
    caaa:	490b      	ldr	r1, [pc, #44]	; (cad8 <k_mem_pool_free_id+0xb0>)
    caac:	4808      	ldr	r0, [pc, #32]	; (cad0 <k_mem_pool_free_id+0xa8>)
    caae:	f002 fee6 	bl	f87e <printk>
    cab2:	480a      	ldr	r0, [pc, #40]	; (cadc <k_mem_pool_free_id+0xb4>)
    cab4:	f002 fee3 	bl	f87e <printk>
    cab8:	2161      	movs	r1, #97	; 0x61
    caba:	4628      	mov	r0, r5
    cabc:	f002 ff65 	bl	f98a <assert_post_action>
    cac0:	e7eb      	b.n	ca9a <k_mem_pool_free_id+0x72>
    cac2:	bf00      	nop
    cac4:	200026ec 	.word	0x200026ec
    cac8:	00012778 	.word	0x00012778
    cacc:	00012790 	.word	0x00012790
    cad0:	00010f8c 	.word	0x00010f8c
    cad4:	000127a8 	.word	0x000127a8
    cad8:	000127c0 	.word	0x000127c0
    cadc:	000127d8 	.word	0x000127d8

0000cae0 <z_thread_malloc>:
	thread->resource_pool = _HEAP_MEM_POOL;
}
#endif

void *z_thread_malloc(size_t size)
{
    cae0:	b508      	push	{r3, lr}
    cae2:	4601      	mov	r1, r0
	void *ret;

	if (_current->resource_pool != NULL) {
    cae4:	4b03      	ldr	r3, [pc, #12]	; (caf4 <z_thread_malloc+0x14>)
    cae6:	689b      	ldr	r3, [r3, #8]
    cae8:	6e18      	ldr	r0, [r3, #96]	; 0x60
    caea:	b108      	cbz	r0, caf0 <z_thread_malloc+0x10>
		ret = k_mem_pool_malloc(_current->resource_pool, size);
    caec:	f003 ff37 	bl	1095e <k_mem_pool_malloc>
	} else {
		ret = NULL;
	}

	return ret;
}
    caf0:	bd08      	pop	{r3, pc}
    caf2:	bf00      	nop
    caf4:	200026f4 	.word	0x200026f4

0000caf8 <z_impl_k_mutex_lock>:
		z_thread_priority_set(mutex->owner, new_prio);
	}
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, s32_t timeout)
{
    caf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cafc:	4604      	mov	r4, r0
    cafe:	460d      	mov	r5, r1
    cb00:	f3ef 8305 	mrs	r3, IPSR
    cb04:	2b0d      	cmp	r3, #13
    cb06:	d807      	bhi.n	cb18 <z_impl_k_mutex_lock+0x20>
    cb08:	b33b      	cbz	r3, cb5a <z_impl_k_mutex_lock+0x62>
    cb0a:	4b71      	ldr	r3, [pc, #452]	; (ccd0 <z_impl_k_mutex_lock+0x1d8>)
    cb0c:	685b      	ldr	r3, [r3, #4]
    cb0e:	f413 6f00 	tst.w	r3, #2048	; 0x800
    cb12:	d024      	beq.n	cb5e <z_impl_k_mutex_lock+0x66>
    cb14:	2300      	movs	r3, #0
    cb16:	e000      	b.n	cb1a <z_impl_k_mutex_lock+0x22>
    cb18:	2301      	movs	r3, #1
}

static inline void z_sched_lock(void)
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!z_is_in_isr(), "");
    cb1a:	bb13      	cbnz	r3, cb62 <z_impl_k_mutex_lock+0x6a>
	__ASSERT(_current->base.sched_locked != 1, "");
    cb1c:	4b6d      	ldr	r3, [pc, #436]	; (ccd4 <z_impl_k_mutex_lock+0x1dc>)
    cb1e:	689b      	ldr	r3, [r3, #8]
    cb20:	7bdb      	ldrb	r3, [r3, #15]
    cb22:	2b01      	cmp	r3, #1
    cb24:	d02e      	beq.n	cb84 <z_impl_k_mutex_lock+0x8c>

	--_current->base.sched_locked;
    cb26:	4b6b      	ldr	r3, [pc, #428]	; (ccd4 <z_impl_k_mutex_lock+0x1dc>)
    cb28:	689a      	ldr	r2, [r3, #8]
    cb2a:	7bd3      	ldrb	r3, [r2, #15]
    cb2c:	3b01      	subs	r3, #1
    cb2e:	73d3      	strb	r3, [r2, #15]
	k_spinlock_key_t key;

	sys_trace_void(SYS_TRACE_ID_MUTEX_LOCK);
	z_sched_lock();

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    cb30:	68e3      	ldr	r3, [r4, #12]
    cb32:	2b00      	cmp	r3, #0
    cb34:	d137      	bne.n	cba6 <z_impl_k_mutex_lock+0xae>

		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
					_current->base.prio :
    cb36:	2b00      	cmp	r3, #0
    cb38:	d161      	bne.n	cbfe <z_impl_k_mutex_lock+0x106>
    cb3a:	4a66      	ldr	r2, [pc, #408]	; (ccd4 <z_impl_k_mutex_lock+0x1dc>)
    cb3c:	6892      	ldr	r2, [r2, #8]
    cb3e:	f992 200e 	ldrsb.w	r2, [r2, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    cb42:	6122      	str	r2, [r4, #16]
					mutex->owner_orig_prio;

		mutex->lock_count++;
    cb44:	3301      	adds	r3, #1
    cb46:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
    cb48:	4b62      	ldr	r3, [pc, #392]	; (ccd4 <z_impl_k_mutex_lock+0x1dc>)
    cb4a:	689b      	ldr	r3, [r3, #8]
    cb4c:	60a3      	str	r3, [r4, #8]

		K_DEBUG("%p took mutex %p, count: %d, orig prio: %d\n",
			_current, mutex, mutex->lock_count,
			mutex->owner_orig_prio);

		k_sched_unlock();
    cb4e:	f000 fdb9 	bl	d6c4 <k_sched_unlock>
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);

		return 0;
    cb52:	2500      	movs	r5, #0

	k_sched_unlock();

	sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
	return -EAGAIN;
}
    cb54:	4628      	mov	r0, r5
    cb56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    cb5a:	2300      	movs	r3, #0
    cb5c:	e7dd      	b.n	cb1a <z_impl_k_mutex_lock+0x22>
    cb5e:	2301      	movs	r3, #1
    cb60:	e7db      	b.n	cb1a <z_impl_k_mutex_lock+0x22>
	__ASSERT(!z_is_in_isr(), "");
    cb62:	4e5d      	ldr	r6, [pc, #372]	; (ccd8 <z_impl_k_mutex_lock+0x1e0>)
    cb64:	f44f 7380 	mov.w	r3, #256	; 0x100
    cb68:	4632      	mov	r2, r6
    cb6a:	495c      	ldr	r1, [pc, #368]	; (ccdc <z_impl_k_mutex_lock+0x1e4>)
    cb6c:	485c      	ldr	r0, [pc, #368]	; (cce0 <z_impl_k_mutex_lock+0x1e8>)
    cb6e:	f002 fe86 	bl	f87e <printk>
    cb72:	485c      	ldr	r0, [pc, #368]	; (cce4 <z_impl_k_mutex_lock+0x1ec>)
    cb74:	f002 fe83 	bl	f87e <printk>
    cb78:	f44f 7180 	mov.w	r1, #256	; 0x100
    cb7c:	4630      	mov	r0, r6
    cb7e:	f002 ff04 	bl	f98a <assert_post_action>
    cb82:	e7cb      	b.n	cb1c <z_impl_k_mutex_lock+0x24>
	__ASSERT(_current->base.sched_locked != 1, "");
    cb84:	4e54      	ldr	r6, [pc, #336]	; (ccd8 <z_impl_k_mutex_lock+0x1e0>)
    cb86:	f240 1301 	movw	r3, #257	; 0x101
    cb8a:	4632      	mov	r2, r6
    cb8c:	4956      	ldr	r1, [pc, #344]	; (cce8 <z_impl_k_mutex_lock+0x1f0>)
    cb8e:	4854      	ldr	r0, [pc, #336]	; (cce0 <z_impl_k_mutex_lock+0x1e8>)
    cb90:	f002 fe75 	bl	f87e <printk>
    cb94:	4853      	ldr	r0, [pc, #332]	; (cce4 <z_impl_k_mutex_lock+0x1ec>)
    cb96:	f002 fe72 	bl	f87e <printk>
    cb9a:	f240 1101 	movw	r1, #257	; 0x101
    cb9e:	4630      	mov	r0, r6
    cba0:	f002 fef3 	bl	f98a <assert_post_action>
    cba4:	e7bf      	b.n	cb26 <z_impl_k_mutex_lock+0x2e>
	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    cba6:	68a1      	ldr	r1, [r4, #8]
    cba8:	4a4a      	ldr	r2, [pc, #296]	; (ccd4 <z_impl_k_mutex_lock+0x1dc>)
    cbaa:	6892      	ldr	r2, [r2, #8]
    cbac:	4291      	cmp	r1, r2
    cbae:	d0c2      	beq.n	cb36 <z_impl_k_mutex_lock+0x3e>
	if (unlikely(timeout == (s32_t)K_NO_WAIT)) {
    cbb0:	b33d      	cbz	r5, cc02 <z_impl_k_mutex_lock+0x10a>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    cbb2:	f991 100e 	ldrsb.w	r1, [r1, #14]
    cbb6:	f992 000e 	ldrsb.w	r0, [r2, #14]
    cbba:	f003 fef3 	bl	109a4 <new_prio_for_inheritance>
    cbbe:	4606      	mov	r6, r0
	__asm__ volatile(
    cbc0:	f04f 0320 	mov.w	r3, #32
    cbc4:	f3ef 8711 	mrs	r7, BASEPRI
    cbc8:	f383 8811 	msr	BASEPRI, r3
    cbcc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
    cbd0:	4846      	ldr	r0, [pc, #280]	; (ccec <z_impl_k_mutex_lock+0x1f4>)
    cbd2:	f001 fe33 	bl	e83c <z_spin_lock_valid>
    cbd6:	b1c8      	cbz	r0, cc0c <z_impl_k_mutex_lock+0x114>
	z_spin_lock_set_owner(l);
    cbd8:	4844      	ldr	r0, [pc, #272]	; (ccec <z_impl_k_mutex_lock+0x1f4>)
    cbda:	f001 fe4f 	bl	e87c <z_spin_lock_set_owner>
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    cbde:	68a3      	ldr	r3, [r4, #8]
    cbe0:	f993 300e 	ldrsb.w	r3, [r3, #14]
    cbe4:	42b3      	cmp	r3, r6
    cbe6:	dc21      	bgt.n	cc2c <z_impl_k_mutex_lock+0x134>
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    cbe8:	462b      	mov	r3, r5
    cbea:	4622      	mov	r2, r4
    cbec:	4639      	mov	r1, r7
    cbee:	483f      	ldr	r0, [pc, #252]	; (ccec <z_impl_k_mutex_lock+0x1f4>)
    cbf0:	f001 f91a 	bl	de28 <z_pend_curr>
	if (got_mutex == 0) {
    cbf4:	4605      	mov	r5, r0
    cbf6:	b9f0      	cbnz	r0, cc36 <z_impl_k_mutex_lock+0x13e>
		k_sched_unlock();
    cbf8:	f000 fd64 	bl	d6c4 <k_sched_unlock>
		return 0;
    cbfc:	e7aa      	b.n	cb54 <z_impl_k_mutex_lock+0x5c>
					_current->base.prio :
    cbfe:	6922      	ldr	r2, [r4, #16]
    cc00:	e79f      	b.n	cb42 <z_impl_k_mutex_lock+0x4a>
		k_sched_unlock();
    cc02:	f000 fd5f 	bl	d6c4 <k_sched_unlock>
		return -EBUSY;
    cc06:	f06f 050f 	mvn.w	r5, #15
    cc0a:	e7a3      	b.n	cb54 <z_impl_k_mutex_lock+0x5c>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
    cc0c:	f8df 80e8 	ldr.w	r8, [pc, #232]	; ccf8 <z_impl_k_mutex_lock+0x200>
    cc10:	234e      	movs	r3, #78	; 0x4e
    cc12:	4642      	mov	r2, r8
    cc14:	4936      	ldr	r1, [pc, #216]	; (ccf0 <z_impl_k_mutex_lock+0x1f8>)
    cc16:	4832      	ldr	r0, [pc, #200]	; (cce0 <z_impl_k_mutex_lock+0x1e8>)
    cc18:	f002 fe31 	bl	f87e <printk>
    cc1c:	4835      	ldr	r0, [pc, #212]	; (ccf4 <z_impl_k_mutex_lock+0x1fc>)
    cc1e:	f002 fe2e 	bl	f87e <printk>
    cc22:	214e      	movs	r1, #78	; 0x4e
    cc24:	4640      	mov	r0, r8
    cc26:	f002 feb0 	bl	f98a <assert_post_action>
    cc2a:	e7d5      	b.n	cbd8 <z_impl_k_mutex_lock+0xe0>
		adjust_owner_prio(mutex, new_prio);
    cc2c:	4631      	mov	r1, r6
    cc2e:	4620      	mov	r0, r4
    cc30:	f003 fec1 	bl	109b6 <adjust_owner_prio>
    cc34:	e7d8      	b.n	cbe8 <z_impl_k_mutex_lock+0xf0>
	return list->head == list;
    cc36:	6823      	ldr	r3, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    cc38:	429c      	cmp	r4, r3
    cc3a:	d028      	beq.n	cc8e <z_impl_k_mutex_lock+0x196>
	new_prio = mutex->owner_orig_prio;
    cc3c:	6925      	ldr	r5, [r4, #16]
		new_prio_for_inheritance(waiter->base.prio, new_prio) :
    cc3e:	b12b      	cbz	r3, cc4c <z_impl_k_mutex_lock+0x154>
    cc40:	4629      	mov	r1, r5
    cc42:	f993 000e 	ldrsb.w	r0, [r3, #14]
    cc46:	f003 fead 	bl	109a4 <new_prio_for_inheritance>
    cc4a:	4605      	mov	r5, r0
    cc4c:	f04f 0320 	mov.w	r3, #32
    cc50:	f3ef 8711 	mrs	r7, BASEPRI
    cc54:	f383 8811 	msr	BASEPRI, r3
    cc58:	f3bf 8f6f 	isb	sy
    cc5c:	4823      	ldr	r0, [pc, #140]	; (ccec <z_impl_k_mutex_lock+0x1f4>)
    cc5e:	f001 fded 	bl	e83c <z_spin_lock_valid>
    cc62:	b1b0      	cbz	r0, cc92 <z_impl_k_mutex_lock+0x19a>
	z_spin_lock_set_owner(l);
    cc64:	4e21      	ldr	r6, [pc, #132]	; (ccec <z_impl_k_mutex_lock+0x1f4>)
    cc66:	4630      	mov	r0, r6
    cc68:	f001 fe08 	bl	e87c <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, new_prio);
    cc6c:	4629      	mov	r1, r5
    cc6e:	4620      	mov	r0, r4
    cc70:	f003 fea1 	bl	109b6 <adjust_owner_prio>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
    cc74:	4630      	mov	r0, r6
    cc76:	f001 fdf1 	bl	e85c <z_spin_unlock_valid>
    cc7a:	b1c8      	cbz	r0, ccb0 <z_impl_k_mutex_lock+0x1b8>
	__asm__ volatile(
    cc7c:	f387 8811 	msr	BASEPRI, r7
    cc80:	f3bf 8f6f 	isb	sy
	k_sched_unlock();
    cc84:	f000 fd1e 	bl	d6c4 <k_sched_unlock>
	return -EAGAIN;
    cc88:	f06f 050a 	mvn.w	r5, #10
    cc8c:	e762      	b.n	cb54 <z_impl_k_mutex_lock+0x5c>
	new_prio = mutex->owner_orig_prio;
    cc8e:	6925      	ldr	r5, [r4, #16]
	new_prio = (waiter != NULL) ?
    cc90:	e7dc      	b.n	cc4c <z_impl_k_mutex_lock+0x154>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
    cc92:	4e19      	ldr	r6, [pc, #100]	; (ccf8 <z_impl_k_mutex_lock+0x200>)
    cc94:	234e      	movs	r3, #78	; 0x4e
    cc96:	4632      	mov	r2, r6
    cc98:	4915      	ldr	r1, [pc, #84]	; (ccf0 <z_impl_k_mutex_lock+0x1f8>)
    cc9a:	4811      	ldr	r0, [pc, #68]	; (cce0 <z_impl_k_mutex_lock+0x1e8>)
    cc9c:	f002 fdef 	bl	f87e <printk>
    cca0:	4814      	ldr	r0, [pc, #80]	; (ccf4 <z_impl_k_mutex_lock+0x1fc>)
    cca2:	f002 fdec 	bl	f87e <printk>
    cca6:	214e      	movs	r1, #78	; 0x4e
    cca8:	4630      	mov	r0, r6
    ccaa:	f002 fe6e 	bl	f98a <assert_post_action>
    ccae:	e7d9      	b.n	cc64 <z_impl_k_mutex_lock+0x16c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
    ccb0:	4c11      	ldr	r4, [pc, #68]	; (ccf8 <z_impl_k_mutex_lock+0x200>)
    ccb2:	2361      	movs	r3, #97	; 0x61
    ccb4:	4622      	mov	r2, r4
    ccb6:	4911      	ldr	r1, [pc, #68]	; (ccfc <z_impl_k_mutex_lock+0x204>)
    ccb8:	4809      	ldr	r0, [pc, #36]	; (cce0 <z_impl_k_mutex_lock+0x1e8>)
    ccba:	f002 fde0 	bl	f87e <printk>
    ccbe:	4810      	ldr	r0, [pc, #64]	; (cd00 <z_impl_k_mutex_lock+0x208>)
    ccc0:	f002 fddd 	bl	f87e <printk>
    ccc4:	2161      	movs	r1, #97	; 0x61
    ccc6:	4620      	mov	r0, r4
    ccc8:	f002 fe5f 	bl	f98a <assert_post_action>
    cccc:	e7d6      	b.n	cc7c <z_impl_k_mutex_lock+0x184>
    ccce:	bf00      	nop
    ccd0:	e000ed00 	.word	0xe000ed00
    ccd4:	200026f4 	.word	0x200026f4
    ccd8:	000132f0 	.word	0x000132f0
    ccdc:	0001330c 	.word	0x0001330c
    cce0:	00010f8c 	.word	0x00010f8c
    cce4:	000111e0 	.word	0x000111e0
    cce8:	0001331c 	.word	0x0001331c
    ccec:	200026f0 	.word	0x200026f0
    ccf0:	00012790 	.word	0x00012790
    ccf4:	000127a8 	.word	0x000127a8
    ccf8:	00012778 	.word	0x00012778
    ccfc:	000127c0 	.word	0x000127c0
    cd00:	000127d8 	.word	0x000127d8

0000cd04 <z_impl_k_mutex_unlock>:
	return z_impl_k_mutex_lock((struct k_mutex *)mutex, (s32_t)timeout);
}
#endif

void z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    cd04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    cd06:	4604      	mov	r4, r0
	struct k_thread *new_owner;

	__ASSERT(mutex->lock_count > 0U, "");
    cd08:	68c3      	ldr	r3, [r0, #12]
    cd0a:	b1f3      	cbz	r3, cd4a <z_impl_k_mutex_unlock+0x46>
	__ASSERT(mutex->owner == _current, "");
    cd0c:	68a2      	ldr	r2, [r4, #8]
    cd0e:	4b6b      	ldr	r3, [pc, #428]	; (cebc <z_impl_k_mutex_unlock+0x1b8>)
    cd10:	689b      	ldr	r3, [r3, #8]
    cd12:	429a      	cmp	r2, r3
    cd14:	d00d      	beq.n	cd32 <z_impl_k_mutex_unlock+0x2e>
    cd16:	4d6a      	ldr	r5, [pc, #424]	; (cec0 <z_impl_k_mutex_unlock+0x1bc>)
    cd18:	23d5      	movs	r3, #213	; 0xd5
    cd1a:	462a      	mov	r2, r5
    cd1c:	4969      	ldr	r1, [pc, #420]	; (cec4 <z_impl_k_mutex_unlock+0x1c0>)
    cd1e:	486a      	ldr	r0, [pc, #424]	; (cec8 <z_impl_k_mutex_unlock+0x1c4>)
    cd20:	f002 fdad 	bl	f87e <printk>
    cd24:	4869      	ldr	r0, [pc, #420]	; (cecc <z_impl_k_mutex_unlock+0x1c8>)
    cd26:	f002 fdaa 	bl	f87e <printk>
    cd2a:	21d5      	movs	r1, #213	; 0xd5
    cd2c:	4628      	mov	r0, r5
    cd2e:	f002 fe2c 	bl	f98a <assert_post_action>
    cd32:	f3ef 8305 	mrs	r3, IPSR
    cd36:	2b0d      	cmp	r3, #13
    cd38:	d816      	bhi.n	cd68 <z_impl_k_mutex_unlock+0x64>
    cd3a:	b34b      	cbz	r3, cd90 <z_impl_k_mutex_unlock+0x8c>
    cd3c:	4b64      	ldr	r3, [pc, #400]	; (ced0 <z_impl_k_mutex_unlock+0x1cc>)
    cd3e:	685b      	ldr	r3, [r3, #4]
    cd40:	f413 6f00 	tst.w	r3, #2048	; 0x800
    cd44:	d026      	beq.n	cd94 <z_impl_k_mutex_unlock+0x90>
    cd46:	2300      	movs	r3, #0
    cd48:	e00f      	b.n	cd6a <z_impl_k_mutex_unlock+0x66>
	__ASSERT(mutex->lock_count > 0U, "");
    cd4a:	4d5d      	ldr	r5, [pc, #372]	; (cec0 <z_impl_k_mutex_unlock+0x1bc>)
    cd4c:	23d4      	movs	r3, #212	; 0xd4
    cd4e:	462a      	mov	r2, r5
    cd50:	4960      	ldr	r1, [pc, #384]	; (ced4 <z_impl_k_mutex_unlock+0x1d0>)
    cd52:	485d      	ldr	r0, [pc, #372]	; (cec8 <z_impl_k_mutex_unlock+0x1c4>)
    cd54:	f002 fd93 	bl	f87e <printk>
    cd58:	485c      	ldr	r0, [pc, #368]	; (cecc <z_impl_k_mutex_unlock+0x1c8>)
    cd5a:	f002 fd90 	bl	f87e <printk>
    cd5e:	21d4      	movs	r1, #212	; 0xd4
    cd60:	4628      	mov	r0, r5
    cd62:	f002 fe12 	bl	f98a <assert_post_action>
    cd66:	e7d1      	b.n	cd0c <z_impl_k_mutex_unlock+0x8>
    cd68:	2301      	movs	r3, #1
	__ASSERT(!z_is_in_isr(), "");
    cd6a:	b9ab      	cbnz	r3, cd98 <z_impl_k_mutex_unlock+0x94>
	__ASSERT(_current->base.sched_locked != 1, "");
    cd6c:	4b53      	ldr	r3, [pc, #332]	; (cebc <z_impl_k_mutex_unlock+0x1b8>)
    cd6e:	689b      	ldr	r3, [r3, #8]
    cd70:	7bdb      	ldrb	r3, [r3, #15]
    cd72:	2b01      	cmp	r3, #1
    cd74:	d021      	beq.n	cdba <z_impl_k_mutex_unlock+0xb6>
	--_current->base.sched_locked;
    cd76:	4b51      	ldr	r3, [pc, #324]	; (cebc <z_impl_k_mutex_unlock+0x1b8>)
    cd78:	689a      	ldr	r2, [r3, #8]
    cd7a:	7bd3      	ldrb	r3, [r2, #15]
    cd7c:	3b01      	subs	r3, #1
    cd7e:	73d3      	strb	r3, [r2, #15]
	sys_trace_void(SYS_TRACE_ID_MUTEX_UNLOCK);
	z_sched_lock();

	K_DEBUG("mutex %p lock_count: %d\n", mutex, mutex->lock_count);

	if (mutex->lock_count - 1U != 0U) {
    cd80:	68e3      	ldr	r3, [r4, #12]
    cd82:	2b01      	cmp	r3, #1
    cd84:	d02a      	beq.n	cddc <z_impl_k_mutex_unlock+0xd8>
		mutex->lock_count--;
    cd86:	3b01      	subs	r3, #1
    cd88:	60e3      	str	r3, [r4, #12]
		k_spin_unlock(&lock, key);
	}


k_mutex_unlock_return:
	k_sched_unlock();
    cd8a:	f000 fc9b 	bl	d6c4 <k_sched_unlock>
}
    cd8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    cd90:	2300      	movs	r3, #0
    cd92:	e7ea      	b.n	cd6a <z_impl_k_mutex_unlock+0x66>
    cd94:	2301      	movs	r3, #1
    cd96:	e7e8      	b.n	cd6a <z_impl_k_mutex_unlock+0x66>
	__ASSERT(!z_is_in_isr(), "");
    cd98:	4d4f      	ldr	r5, [pc, #316]	; (ced8 <z_impl_k_mutex_unlock+0x1d4>)
    cd9a:	f44f 7380 	mov.w	r3, #256	; 0x100
    cd9e:	462a      	mov	r2, r5
    cda0:	494e      	ldr	r1, [pc, #312]	; (cedc <z_impl_k_mutex_unlock+0x1d8>)
    cda2:	4849      	ldr	r0, [pc, #292]	; (cec8 <z_impl_k_mutex_unlock+0x1c4>)
    cda4:	f002 fd6b 	bl	f87e <printk>
    cda8:	4848      	ldr	r0, [pc, #288]	; (cecc <z_impl_k_mutex_unlock+0x1c8>)
    cdaa:	f002 fd68 	bl	f87e <printk>
    cdae:	f44f 7180 	mov.w	r1, #256	; 0x100
    cdb2:	4628      	mov	r0, r5
    cdb4:	f002 fde9 	bl	f98a <assert_post_action>
    cdb8:	e7d8      	b.n	cd6c <z_impl_k_mutex_unlock+0x68>
	__ASSERT(_current->base.sched_locked != 1, "");
    cdba:	4d47      	ldr	r5, [pc, #284]	; (ced8 <z_impl_k_mutex_unlock+0x1d4>)
    cdbc:	f240 1301 	movw	r3, #257	; 0x101
    cdc0:	462a      	mov	r2, r5
    cdc2:	4947      	ldr	r1, [pc, #284]	; (cee0 <z_impl_k_mutex_unlock+0x1dc>)
    cdc4:	4840      	ldr	r0, [pc, #256]	; (cec8 <z_impl_k_mutex_unlock+0x1c4>)
    cdc6:	f002 fd5a 	bl	f87e <printk>
    cdca:	4840      	ldr	r0, [pc, #256]	; (cecc <z_impl_k_mutex_unlock+0x1c8>)
    cdcc:	f002 fd57 	bl	f87e <printk>
    cdd0:	f240 1101 	movw	r1, #257	; 0x101
    cdd4:	4628      	mov	r0, r5
    cdd6:	f002 fdd8 	bl	f98a <assert_post_action>
    cdda:	e7cc      	b.n	cd76 <z_impl_k_mutex_unlock+0x72>
	__asm__ volatile(
    cddc:	f04f 0320 	mov.w	r3, #32
    cde0:	f3ef 8611 	mrs	r6, BASEPRI
    cde4:	f383 8811 	msr	BASEPRI, r3
    cde8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
    cdec:	483d      	ldr	r0, [pc, #244]	; (cee4 <z_impl_k_mutex_unlock+0x1e0>)
    cdee:	f001 fd25 	bl	e83c <z_spin_lock_valid>
    cdf2:	b1a8      	cbz	r0, ce20 <z_impl_k_mutex_unlock+0x11c>
	z_spin_lock_set_owner(l);
    cdf4:	483b      	ldr	r0, [pc, #236]	; (cee4 <z_impl_k_mutex_unlock+0x1e0>)
    cdf6:	f001 fd41 	bl	e87c <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    cdfa:	6921      	ldr	r1, [r4, #16]
    cdfc:	4620      	mov	r0, r4
    cdfe:	f003 fdda 	bl	109b6 <adjust_owner_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    ce02:	4620      	mov	r0, r4
    ce04:	f001 f8f8 	bl	dff8 <z_unpend_first_thread>
    ce08:	4605      	mov	r5, r0
	mutex->owner = new_owner;
    ce0a:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    ce0c:	2800      	cmp	r0, #0
    ce0e:	d03b      	beq.n	ce88 <z_impl_k_mutex_unlock+0x184>
	u8_t state = thread->base.thread_state;
    ce10:	7b43      	ldrb	r3, [r0, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    ce12:	f013 0f1f 	tst.w	r3, #31
    ce16:	d114      	bne.n	ce42 <z_impl_k_mutex_unlock+0x13e>
	return node->next != NULL;
    ce18:	6983      	ldr	r3, [r0, #24]
    ce1a:	b183      	cbz	r3, ce3e <z_impl_k_mutex_unlock+0x13a>
    ce1c:	2300      	movs	r3, #0
    ce1e:	e011      	b.n	ce44 <z_impl_k_mutex_unlock+0x140>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
    ce20:	4d31      	ldr	r5, [pc, #196]	; (cee8 <z_impl_k_mutex_unlock+0x1e4>)
    ce22:	234e      	movs	r3, #78	; 0x4e
    ce24:	462a      	mov	r2, r5
    ce26:	4931      	ldr	r1, [pc, #196]	; (ceec <z_impl_k_mutex_unlock+0x1e8>)
    ce28:	4827      	ldr	r0, [pc, #156]	; (cec8 <z_impl_k_mutex_unlock+0x1c4>)
    ce2a:	f002 fd28 	bl	f87e <printk>
    ce2e:	4830      	ldr	r0, [pc, #192]	; (cef0 <z_impl_k_mutex_unlock+0x1ec>)
    ce30:	f002 fd25 	bl	f87e <printk>
    ce34:	214e      	movs	r1, #78	; 0x4e
    ce36:	4628      	mov	r0, r5
    ce38:	f002 fda7 	bl	f98a <assert_post_action>
    ce3c:	e7da      	b.n	cdf4 <z_impl_k_mutex_unlock+0xf0>
    ce3e:	2301      	movs	r3, #1
    ce40:	e000      	b.n	ce44 <z_impl_k_mutex_unlock+0x140>
    ce42:	2300      	movs	r3, #0
	if (z_is_thread_ready(thread)) {
    ce44:	b96b      	cbnz	r3, ce62 <z_impl_k_mutex_unlock+0x15e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
    ce46:	4827      	ldr	r0, [pc, #156]	; (cee4 <z_impl_k_mutex_unlock+0x1e0>)
    ce48:	f001 fd08 	bl	e85c <z_spin_unlock_valid>
    ce4c:	b168      	cbz	r0, ce6a <z_impl_k_mutex_unlock+0x166>
	__asm__ volatile(
    ce4e:	f386 8811 	msr	BASEPRI, r6
    ce52:	f3bf 8f6f 	isb	sy
    ce56:	2300      	movs	r3, #0
    ce58:	66ab      	str	r3, [r5, #104]	; 0x68
		mutex->owner_orig_prio = new_owner->base.prio;
    ce5a:	f995 300e 	ldrsb.w	r3, [r5, #14]
    ce5e:	6123      	str	r3, [r4, #16]
    ce60:	e793      	b.n	cd8a <z_impl_k_mutex_unlock+0x86>
		z_add_thread_to_ready_q(thread);
    ce62:	4628      	mov	r0, r5
    ce64:	f000 fcce 	bl	d804 <z_add_thread_to_ready_q>
    ce68:	e7ed      	b.n	ce46 <z_impl_k_mutex_unlock+0x142>
    ce6a:	4f1f      	ldr	r7, [pc, #124]	; (cee8 <z_impl_k_mutex_unlock+0x1e4>)
    ce6c:	2361      	movs	r3, #97	; 0x61
    ce6e:	463a      	mov	r2, r7
    ce70:	4920      	ldr	r1, [pc, #128]	; (cef4 <z_impl_k_mutex_unlock+0x1f0>)
    ce72:	4815      	ldr	r0, [pc, #84]	; (cec8 <z_impl_k_mutex_unlock+0x1c4>)
    ce74:	f002 fd03 	bl	f87e <printk>
    ce78:	481f      	ldr	r0, [pc, #124]	; (cef8 <z_impl_k_mutex_unlock+0x1f4>)
    ce7a:	f002 fd00 	bl	f87e <printk>
    ce7e:	2161      	movs	r1, #97	; 0x61
    ce80:	4638      	mov	r0, r7
    ce82:	f002 fd82 	bl	f98a <assert_post_action>
    ce86:	e7e2      	b.n	ce4e <z_impl_k_mutex_unlock+0x14a>
		mutex->lock_count = 0U;
    ce88:	2300      	movs	r3, #0
    ce8a:	60e3      	str	r3, [r4, #12]
    ce8c:	4815      	ldr	r0, [pc, #84]	; (cee4 <z_impl_k_mutex_unlock+0x1e0>)
    ce8e:	f001 fce5 	bl	e85c <z_spin_unlock_valid>
    ce92:	b120      	cbz	r0, ce9e <z_impl_k_mutex_unlock+0x19a>
    ce94:	f386 8811 	msr	BASEPRI, r6
    ce98:	f3bf 8f6f 	isb	sy
    ce9c:	e775      	b.n	cd8a <z_impl_k_mutex_unlock+0x86>
    ce9e:	4c12      	ldr	r4, [pc, #72]	; (cee8 <z_impl_k_mutex_unlock+0x1e4>)
    cea0:	2361      	movs	r3, #97	; 0x61
    cea2:	4622      	mov	r2, r4
    cea4:	4913      	ldr	r1, [pc, #76]	; (cef4 <z_impl_k_mutex_unlock+0x1f0>)
    cea6:	4808      	ldr	r0, [pc, #32]	; (cec8 <z_impl_k_mutex_unlock+0x1c4>)
    cea8:	f002 fce9 	bl	f87e <printk>
    ceac:	4812      	ldr	r0, [pc, #72]	; (cef8 <z_impl_k_mutex_unlock+0x1f4>)
    ceae:	f002 fce6 	bl	f87e <printk>
    ceb2:	2161      	movs	r1, #97	; 0x61
    ceb4:	4620      	mov	r0, r4
    ceb6:	f002 fd68 	bl	f98a <assert_post_action>
    ceba:	e7eb      	b.n	ce94 <z_impl_k_mutex_unlock+0x190>
    cebc:	200026f4 	.word	0x200026f4
    cec0:	00013344 	.word	0x00013344
    cec4:	00013370 	.word	0x00013370
    cec8:	00010f8c 	.word	0x00010f8c
    cecc:	000111e0 	.word	0x000111e0
    ced0:	e000ed00 	.word	0xe000ed00
    ced4:	00013358 	.word	0x00013358
    ced8:	000132f0 	.word	0x000132f0
    cedc:	0001330c 	.word	0x0001330c
    cee0:	0001331c 	.word	0x0001331c
    cee4:	200026f0 	.word	0x200026f0
    cee8:	00012778 	.word	0x00012778
    ceec:	00012790 	.word	0x00012790
    cef0:	000127a8 	.word	0x000127a8
    cef4:	000127c0 	.word	0x000127c0
    cef8:	000127d8 	.word	0x000127d8

0000cefc <queue_insert>:
			       struct k_queue *);
#endif

static s32_t queue_insert(struct k_queue *queue, void *prev, void *data,
			  bool alloc)
{
    cefc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    cf00:	4605      	mov	r5, r0
    cf02:	460f      	mov	r7, r1
    cf04:	4614      	mov	r4, r2
    cf06:	4699      	mov	r9, r3
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
    cf08:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
    cf0c:	f04f 0320 	mov.w	r3, #32
    cf10:	f3ef 8811 	mrs	r8, BASEPRI
    cf14:	f383 8811 	msr	BASEPRI, r3
    cf18:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
    cf1c:	4630      	mov	r0, r6
    cf1e:	f001 fc8d 	bl	e83c <z_spin_lock_valid>
    cf22:	b198      	cbz	r0, cf4c <queue_insert+0x50>
	z_spin_lock_set_owner(l);
    cf24:	4630      	mov	r0, r6
    cf26:	f001 fca9 	bl	e87c <z_spin_lock_set_owner>
#if !defined(CONFIG_POLL)
	struct k_thread *first_pending_thread;

	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
    cf2a:	f105 000c 	add.w	r0, r5, #12
    cf2e:	f001 f863 	bl	dff8 <z_unpend_first_thread>

	if (first_pending_thread != NULL) {
    cf32:	b9d8      	cbnz	r0, cf6c <queue_insert+0x70>
		return 0;
	}
#endif /* !CONFIG_POLL */

	/* Only need to actually allocate if no threads are pending */
	if (alloc) {
    cf34:	f1b9 0f00 	cmp.w	r9, #0
    cf38:	d03b      	beq.n	cfb2 <queue_insert+0xb6>
		struct alloc_node *anode;

		anode = z_thread_malloc(sizeof(*anode));
    cf3a:	2008      	movs	r0, #8
    cf3c:	f7ff fdd0 	bl	cae0 <z_thread_malloc>
		if (anode == NULL) {
    cf40:	b1e8      	cbz	r0, cf7e <queue_insert+0x82>
			k_spin_unlock(&queue->lock, key);
			return -ENOMEM;
		}
		anode->data = data;
    cf42:	6044      	str	r4, [r0, #4]
 * @param flags A value between 0 and 3 to set the flags value
 */
static inline void sys_sfnode_init(sys_sfnode_t *node, u8_t flags)
{
	__ASSERT((flags & ~SYS_SFLIST_FLAGS_MASK) == 0U, "flags too large");
	node->next_and_flags = flags;
    cf44:	2201      	movs	r2, #1
    cf46:	6002      	str	r2, [r0, #0]
		sys_sfnode_init(&anode->node, 0x1);
		data = anode;
    cf48:	4604      	mov	r4, r0
    cf4a:	e034      	b.n	cfb6 <queue_insert+0xba>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
    cf4c:	f8df a0d4 	ldr.w	sl, [pc, #212]	; d024 <queue_insert+0x128>
    cf50:	234e      	movs	r3, #78	; 0x4e
    cf52:	4652      	mov	r2, sl
    cf54:	4930      	ldr	r1, [pc, #192]	; (d018 <queue_insert+0x11c>)
    cf56:	4831      	ldr	r0, [pc, #196]	; (d01c <queue_insert+0x120>)
    cf58:	f002 fc91 	bl	f87e <printk>
    cf5c:	4830      	ldr	r0, [pc, #192]	; (d020 <queue_insert+0x124>)
    cf5e:	f002 fc8e 	bl	f87e <printk>
    cf62:	214e      	movs	r1, #78	; 0x4e
    cf64:	4650      	mov	r0, sl
    cf66:	f002 fd10 	bl	f98a <assert_post_action>
    cf6a:	e7db      	b.n	cf24 <queue_insert+0x28>
		prepare_thread_to_run(first_pending_thread, data);
    cf6c:	4621      	mov	r1, r4
    cf6e:	f003 fd32 	bl	109d6 <prepare_thread_to_run>
		z_reschedule(&queue->lock, key);
    cf72:	4641      	mov	r1, r8
    cf74:	4630      	mov	r0, r6
    cf76:	f000 f9d5 	bl	d324 <z_reschedule>
		return 0;
    cf7a:	2000      	movs	r0, #0
    cf7c:	e04a      	b.n	d014 <queue_insert+0x118>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
    cf7e:	4630      	mov	r0, r6
    cf80:	f001 fc6c 	bl	e85c <z_spin_unlock_valid>
    cf84:	b130      	cbz	r0, cf94 <queue_insert+0x98>
	__asm__ volatile(
    cf86:	f388 8811 	msr	BASEPRI, r8
    cf8a:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
    cf8e:	f06f 000b 	mvn.w	r0, #11
    cf92:	e03f      	b.n	d014 <queue_insert+0x118>
    cf94:	4c23      	ldr	r4, [pc, #140]	; (d024 <queue_insert+0x128>)
    cf96:	2361      	movs	r3, #97	; 0x61
    cf98:	4622      	mov	r2, r4
    cf9a:	4923      	ldr	r1, [pc, #140]	; (d028 <queue_insert+0x12c>)
    cf9c:	481f      	ldr	r0, [pc, #124]	; (d01c <queue_insert+0x120>)
    cf9e:	f002 fc6e 	bl	f87e <printk>
    cfa2:	4822      	ldr	r0, [pc, #136]	; (d02c <queue_insert+0x130>)
    cfa4:	f002 fc6b 	bl	f87e <printk>
    cfa8:	2161      	movs	r1, #97	; 0x61
    cfaa:	4620      	mov	r0, r4
    cfac:	f002 fced 	bl	f98a <assert_post_action>
    cfb0:	e7e9      	b.n	cf86 <queue_insert+0x8a>
    cfb2:	2300      	movs	r3, #0
    cfb4:	6023      	str	r3, [r4, #0]
 */
static inline void sys_sflist_insert(sys_sflist_t *list,
				     sys_sfnode_t *prev,
				     sys_sfnode_t *node);

Z_GENLIST_INSERT(sflist, sfnode)
    cfb6:	b187      	cbz	r7, cfda <queue_insert+0xde>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
    cfb8:	683b      	ldr	r3, [r7, #0]
Z_GENLIST_INSERT(sflist, sfnode)
    cfba:	f033 0303 	bics.w	r3, r3, #3
    cfbe:	d11a      	bne.n	cff6 <queue_insert+0xfa>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    cfc0:	6823      	ldr	r3, [r4, #0]
    cfc2:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
    cfc6:	6023      	str	r3, [r4, #0]
	return list->tail;
    cfc8:	686a      	ldr	r2, [r5, #4]
Z_GENLIST_APPEND(sflist, sfnode)
    cfca:	b18a      	cbz	r2, cff0 <queue_insert+0xf4>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    cfcc:	6813      	ldr	r3, [r2, #0]
    cfce:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
    cfd2:	4323      	orrs	r3, r4
    cfd4:	6013      	str	r3, [r2, #0]
	list->tail = node;
    cfd6:	606c      	str	r4, [r5, #4]
    cfd8:	e017      	b.n	d00a <queue_insert+0x10e>
	return list->head;
    cfda:	682a      	ldr	r2, [r5, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    cfdc:	6823      	ldr	r3, [r4, #0]
    cfde:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
    cfe2:	4313      	orrs	r3, r2
    cfe4:	6023      	str	r3, [r4, #0]
	list->head = node;
    cfe6:	602c      	str	r4, [r5, #0]
	return list->tail;
    cfe8:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_PREPEND(sflist, sfnode)
    cfea:	b973      	cbnz	r3, d00a <queue_insert+0x10e>
	list->tail = node;
    cfec:	606c      	str	r4, [r5, #4]
    cfee:	e00c      	b.n	d00a <queue_insert+0x10e>
    cff0:	606c      	str	r4, [r5, #4]
	list->head = node;
    cff2:	602c      	str	r4, [r5, #0]
    cff4:	e009      	b.n	d00a <queue_insert+0x10e>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    cff6:	6822      	ldr	r2, [r4, #0]
    cff8:	f002 0203 	and.w	r2, r2, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
    cffc:	4313      	orrs	r3, r2
    cffe:	6023      	str	r3, [r4, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    d000:	683b      	ldr	r3, [r7, #0]
    d002:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
    d006:	431c      	orrs	r4, r3
    d008:	603c      	str	r4, [r7, #0]

#if defined(CONFIG_POLL)
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
#endif /* CONFIG_POLL */

	z_reschedule(&queue->lock, key);
    d00a:	4641      	mov	r1, r8
    d00c:	4630      	mov	r0, r6
    d00e:	f000 f989 	bl	d324 <z_reschedule>
	return 0;
    d012:	2000      	movs	r0, #0
}
    d014:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d018:	00012790 	.word	0x00012790
    d01c:	00010f8c 	.word	0x00010f8c
    d020:	000127a8 	.word	0x000127a8
    d024:	00012778 	.word	0x00012778
    d028:	000127c0 	.word	0x000127c0
    d02c:	000127d8 	.word	0x000127d8

0000d030 <z_impl_k_queue_get>:
	return val;
}
#endif /* CONFIG_POLL */

void *z_impl_k_queue_get(struct k_queue *queue, s32_t timeout)
{
    d030:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d034:	4604      	mov	r4, r0
    d036:	460f      	mov	r7, r1
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
    d038:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
    d03c:	f04f 0320 	mov.w	r3, #32
    d040:	f3ef 8611 	mrs	r6, BASEPRI
    d044:	f383 8811 	msr	BASEPRI, r3
    d048:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
    d04c:	4628      	mov	r0, r5
    d04e:	f001 fbf5 	bl	e83c <z_spin_lock_valid>
    d052:	b1d8      	cbz	r0, d08c <z_impl_k_queue_get+0x5c>
	z_spin_lock_set_owner(l);
    d054:	4628      	mov	r0, r5
    d056:	f001 fc11 	bl	e87c <z_spin_lock_set_owner>
	return list->head;
    d05a:	6820      	ldr	r0, [r4, #0]
	void *data;

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
    d05c:	2800      	cmp	r0, #0
    d05e:	d036      	beq.n	d0ce <z_impl_k_queue_get+0x9e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
    d060:	6803      	ldr	r3, [r0, #0]
    d062:	f023 0303 	bic.w	r3, r3, #3
	list->head = node;
    d066:	6023      	str	r3, [r4, #0]
	return list->tail;
    d068:	6862      	ldr	r2, [r4, #4]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
    d06a:	4290      	cmp	r0, r2
    d06c:	d01e      	beq.n	d0ac <z_impl_k_queue_get+0x7c>
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
    d06e:	2101      	movs	r1, #1
    d070:	f003 fcc8 	bl	10a04 <z_queue_node_peek>
    d074:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
    d076:	4628      	mov	r0, r5
    d078:	f001 fbf0 	bl	e85c <z_spin_unlock_valid>
    d07c:	b1c0      	cbz	r0, d0b0 <z_impl_k_queue_get+0x80>
	__asm__ volatile(
    d07e:	f386 8811 	msr	BASEPRI, r6
    d082:	f3bf 8f6f 	isb	sy
#else
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);

	return (ret != 0) ? NULL : _current->base.swap_data;
#endif /* CONFIG_POLL */
}
    d086:	4620      	mov	r0, r4
    d088:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
    d08c:	f8df 809c 	ldr.w	r8, [pc, #156]	; d12c <z_impl_k_queue_get+0xfc>
    d090:	234e      	movs	r3, #78	; 0x4e
    d092:	4642      	mov	r2, r8
    d094:	4922      	ldr	r1, [pc, #136]	; (d120 <z_impl_k_queue_get+0xf0>)
    d096:	4823      	ldr	r0, [pc, #140]	; (d124 <z_impl_k_queue_get+0xf4>)
    d098:	f002 fbf1 	bl	f87e <printk>
    d09c:	4822      	ldr	r0, [pc, #136]	; (d128 <z_impl_k_queue_get+0xf8>)
    d09e:	f002 fbee 	bl	f87e <printk>
    d0a2:	214e      	movs	r1, #78	; 0x4e
    d0a4:	4640      	mov	r0, r8
    d0a6:	f002 fc70 	bl	f98a <assert_post_action>
    d0aa:	e7d3      	b.n	d054 <z_impl_k_queue_get+0x24>
	list->tail = node;
    d0ac:	6063      	str	r3, [r4, #4]
    d0ae:	e7de      	b.n	d06e <z_impl_k_queue_get+0x3e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
    d0b0:	4d1e      	ldr	r5, [pc, #120]	; (d12c <z_impl_k_queue_get+0xfc>)
    d0b2:	2361      	movs	r3, #97	; 0x61
    d0b4:	462a      	mov	r2, r5
    d0b6:	491e      	ldr	r1, [pc, #120]	; (d130 <z_impl_k_queue_get+0x100>)
    d0b8:	481a      	ldr	r0, [pc, #104]	; (d124 <z_impl_k_queue_get+0xf4>)
    d0ba:	f002 fbe0 	bl	f87e <printk>
    d0be:	481d      	ldr	r0, [pc, #116]	; (d134 <z_impl_k_queue_get+0x104>)
    d0c0:	f002 fbdd 	bl	f87e <printk>
    d0c4:	2161      	movs	r1, #97	; 0x61
    d0c6:	4628      	mov	r0, r5
    d0c8:	f002 fc5f 	bl	f98a <assert_post_action>
    d0cc:	e7d7      	b.n	d07e <z_impl_k_queue_get+0x4e>
	if (timeout == K_NO_WAIT) {
    d0ce:	b15f      	cbz	r7, d0e8 <z_impl_k_queue_get+0xb8>
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
    d0d0:	463b      	mov	r3, r7
    d0d2:	f104 020c 	add.w	r2, r4, #12
    d0d6:	4631      	mov	r1, r6
    d0d8:	4628      	mov	r0, r5
    d0da:	f000 fea5 	bl	de28 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
    d0de:	b9e0      	cbnz	r0, d11a <z_impl_k_queue_get+0xea>
    d0e0:	4b15      	ldr	r3, [pc, #84]	; (d138 <z_impl_k_queue_get+0x108>)
    d0e2:	689b      	ldr	r3, [r3, #8]
    d0e4:	695c      	ldr	r4, [r3, #20]
    d0e6:	e7ce      	b.n	d086 <z_impl_k_queue_get+0x56>
    d0e8:	4628      	mov	r0, r5
    d0ea:	f001 fbb7 	bl	e85c <z_spin_unlock_valid>
    d0ee:	b128      	cbz	r0, d0fc <z_impl_k_queue_get+0xcc>
    d0f0:	f386 8811 	msr	BASEPRI, r6
    d0f4:	f3bf 8f6f 	isb	sy
		return NULL;
    d0f8:	2400      	movs	r4, #0
    d0fa:	e7c4      	b.n	d086 <z_impl_k_queue_get+0x56>
    d0fc:	4c0b      	ldr	r4, [pc, #44]	; (d12c <z_impl_k_queue_get+0xfc>)
    d0fe:	2361      	movs	r3, #97	; 0x61
    d100:	4622      	mov	r2, r4
    d102:	490b      	ldr	r1, [pc, #44]	; (d130 <z_impl_k_queue_get+0x100>)
    d104:	4807      	ldr	r0, [pc, #28]	; (d124 <z_impl_k_queue_get+0xf4>)
    d106:	f002 fbba 	bl	f87e <printk>
    d10a:	480a      	ldr	r0, [pc, #40]	; (d134 <z_impl_k_queue_get+0x104>)
    d10c:	f002 fbb7 	bl	f87e <printk>
    d110:	2161      	movs	r1, #97	; 0x61
    d112:	4620      	mov	r0, r4
    d114:	f002 fc39 	bl	f98a <assert_post_action>
    d118:	e7ea      	b.n	d0f0 <z_impl_k_queue_get+0xc0>
	return (ret != 0) ? NULL : _current->base.swap_data;
    d11a:	2400      	movs	r4, #0
    d11c:	e7b3      	b.n	d086 <z_impl_k_queue_get+0x56>
    d11e:	bf00      	nop
    d120:	00012790 	.word	0x00012790
    d124:	00010f8c 	.word	0x00010f8c
    d128:	000127a8 	.word	0x000127a8
    d12c:	00012778 	.word	0x00012778
    d130:	000127c0 	.word	0x000127c0
    d134:	000127d8 	.word	0x000127d8
    d138:	200026f4 	.word	0x200026f4

0000d13c <pended_on>:
	__ASSERT_NO_MSG(thread == _current || is_thread_dummy(thread));
	pend(thread, wait_q, timeout);
}

static _wait_q_t *pended_on(struct k_thread *thread)
{
    d13c:	b538      	push	{r3, r4, r5, lr}
    d13e:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(thread->base.pended_on);
    d140:	6883      	ldr	r3, [r0, #8]
    d142:	b10b      	cbz	r3, d148 <pended_on+0xc>

	return thread->base.pended_on;
}
    d144:	68a0      	ldr	r0, [r4, #8]
    d146:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT_NO_MSG(thread->base.pended_on);
    d148:	4d06      	ldr	r5, [pc, #24]	; (d164 <pended_on+0x28>)
    d14a:	f240 1383 	movw	r3, #387	; 0x183
    d14e:	462a      	mov	r2, r5
    d150:	4905      	ldr	r1, [pc, #20]	; (d168 <pended_on+0x2c>)
    d152:	4806      	ldr	r0, [pc, #24]	; (d16c <pended_on+0x30>)
    d154:	f002 fb93 	bl	f87e <printk>
    d158:	f240 1183 	movw	r1, #387	; 0x183
    d15c:	4628      	mov	r0, r5
    d15e:	f002 fc14 	bl	f98a <assert_post_action>
    d162:	e7ef      	b.n	d144 <pended_on+0x8>
    d164:	000133b8 	.word	0x000133b8
    d168:	000133cc 	.word	0x000133cc
    d16c:	00010f8c 	.word	0x00010f8c

0000d170 <reset_time_slice>:
{
    d170:	b508      	push	{r3, lr}
	_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
    d172:	f7fb febd 	bl	8ef0 <z_clock_elapsed>
    d176:	4b05      	ldr	r3, [pc, #20]	; (d18c <reset_time_slice+0x1c>)
    d178:	681b      	ldr	r3, [r3, #0]
    d17a:	4418      	add	r0, r3
    d17c:	4a04      	ldr	r2, [pc, #16]	; (d190 <reset_time_slice+0x20>)
    d17e:	6110      	str	r0, [r2, #16]
	z_set_timeout_expiry(slice_time, false);
    d180:	2100      	movs	r1, #0
    d182:	4618      	mov	r0, r3
    d184:	f001 fe50 	bl	ee28 <z_set_timeout_expiry>
}
    d188:	bd08      	pop	{r3, pc}
    d18a:	bf00      	nop
    d18c:	20002730 	.word	0x20002730
    d190:	200026f4 	.word	0x200026f4

0000d194 <k_sched_time_slice_set>:
{
    d194:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d198:	4604      	mov	r4, r0
    d19a:	460f      	mov	r7, r1
	LOCKED(&sched_spinlock) {
    d19c:	2500      	movs	r5, #0
	__asm__ volatile(
    d19e:	f04f 0320 	mov.w	r3, #32
    d1a2:	f3ef 8611 	mrs	r6, BASEPRI
    d1a6:	f383 8811 	msr	BASEPRI, r3
    d1aa:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
    d1ae:	4826      	ldr	r0, [pc, #152]	; (d248 <k_sched_time_slice_set+0xb4>)
    d1b0:	f001 fb44 	bl	e83c <z_spin_lock_valid>
    d1b4:	b118      	cbz	r0, d1be <k_sched_time_slice_set+0x2a>
	z_spin_lock_set_owner(l);
    d1b6:	4824      	ldr	r0, [pc, #144]	; (d248 <k_sched_time_slice_set+0xb4>)
    d1b8:	f001 fb60 	bl	e87c <z_spin_lock_set_owner>
	return k;
    d1bc:	e022      	b.n	d204 <k_sched_time_slice_set+0x70>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
    d1be:	f8df 8098 	ldr.w	r8, [pc, #152]	; d258 <k_sched_time_slice_set+0xc4>
    d1c2:	234e      	movs	r3, #78	; 0x4e
    d1c4:	4642      	mov	r2, r8
    d1c6:	4921      	ldr	r1, [pc, #132]	; (d24c <k_sched_time_slice_set+0xb8>)
    d1c8:	4821      	ldr	r0, [pc, #132]	; (d250 <k_sched_time_slice_set+0xbc>)
    d1ca:	f002 fb58 	bl	f87e <printk>
    d1ce:	4821      	ldr	r0, [pc, #132]	; (d254 <k_sched_time_slice_set+0xc0>)
    d1d0:	f002 fb55 	bl	f87e <printk>
    d1d4:	214e      	movs	r1, #78	; 0x4e
    d1d6:	4640      	mov	r0, r8
    d1d8:	f002 fbd7 	bl	f98a <assert_post_action>
    d1dc:	e7eb      	b.n	d1b6 <k_sched_time_slice_set+0x22>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
    d1de:	4d1e      	ldr	r5, [pc, #120]	; (d258 <k_sched_time_slice_set+0xc4>)
    d1e0:	2361      	movs	r3, #97	; 0x61
    d1e2:	462a      	mov	r2, r5
    d1e4:	491d      	ldr	r1, [pc, #116]	; (d25c <k_sched_time_slice_set+0xc8>)
    d1e6:	481a      	ldr	r0, [pc, #104]	; (d250 <k_sched_time_slice_set+0xbc>)
    d1e8:	f002 fb49 	bl	f87e <printk>
    d1ec:	481c      	ldr	r0, [pc, #112]	; (d260 <k_sched_time_slice_set+0xcc>)
    d1ee:	f002 fb46 	bl	f87e <printk>
    d1f2:	2161      	movs	r1, #97	; 0x61
    d1f4:	4628      	mov	r0, r5
    d1f6:	f002 fbc8 	bl	f98a <assert_post_action>
	__asm__ volatile(
    d1fa:	f386 8811 	msr	BASEPRI, r6
    d1fe:	f3bf 8f6f 	isb	sy
    d202:	2501      	movs	r5, #1
    d204:	b9f5      	cbnz	r5, d244 <k_sched_time_slice_set+0xb0>
		_current_cpu->slice_ticks = 0;
    d206:	4b17      	ldr	r3, [pc, #92]	; (d264 <k_sched_time_slice_set+0xd0>)
    d208:	2200      	movs	r2, #0
    d20a:	611a      	str	r2, [r3, #16]
    d20c:	17e3      	asrs	r3, r4, #31
    d20e:	03d9      	lsls	r1, r3, #15
    d210:	ea41 4154 	orr.w	r1, r1, r4, lsr #17
    d214:	03e0      	lsls	r0, r4, #15
    d216:	4d14      	ldr	r5, [pc, #80]	; (d268 <k_sched_time_slice_set+0xd4>)
    d218:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
    d21c:	2300      	movs	r3, #0
    d21e:	1940      	adds	r0, r0, r5
    d220:	f04f 0500 	mov.w	r5, #0
    d224:	eb45 0101 	adc.w	r1, r5, r1
    d228:	f7f2 ff6a 	bl	100 <__aeabi_ldivmod>
		slice_time = z_ms_to_ticks(slice);
    d22c:	4b0f      	ldr	r3, [pc, #60]	; (d26c <k_sched_time_slice_set+0xd8>)
    d22e:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
    d230:	4b0f      	ldr	r3, [pc, #60]	; (d270 <k_sched_time_slice_set+0xdc>)
    d232:	601f      	str	r7, [r3, #0]
		reset_time_slice();
    d234:	f7ff ff9c 	bl	d170 <reset_time_slice>
    d238:	4803      	ldr	r0, [pc, #12]	; (d248 <k_sched_time_slice_set+0xb4>)
    d23a:	f001 fb0f 	bl	e85c <z_spin_unlock_valid>
    d23e:	2800      	cmp	r0, #0
    d240:	d1db      	bne.n	d1fa <k_sched_time_slice_set+0x66>
    d242:	e7cc      	b.n	d1de <k_sched_time_slice_set+0x4a>
}
    d244:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d248:	20002728 	.word	0x20002728
    d24c:	00012790 	.word	0x00012790
    d250:	00010f8c 	.word	0x00010f8c
    d254:	000127a8 	.word	0x000127a8
    d258:	00012778 	.word	0x00012778
    d25c:	000127c0 	.word	0x000127c0
    d260:	000127d8 	.word	0x000127d8
    d264:	200026f4 	.word	0x200026f4
    d268:	0004ffff 	.word	0x0004ffff
    d26c:	20002730 	.word	0x20002730
    d270:	2000272c 	.word	0x2000272c

0000d274 <z_unpend_thread_no_timeout>:

	return ret;
}

ALWAYS_INLINE void z_unpend_thread_no_timeout(struct k_thread *thread)
{
    d274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d276:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
    d278:	2500      	movs	r5, #0
	__asm__ volatile(
    d27a:	f04f 0320 	mov.w	r3, #32
    d27e:	f3ef 8611 	mrs	r6, BASEPRI
    d282:	f383 8811 	msr	BASEPRI, r3
    d286:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
    d28a:	481f      	ldr	r0, [pc, #124]	; (d308 <z_unpend_thread_no_timeout+0x94>)
    d28c:	f001 fad6 	bl	e83c <z_spin_lock_valid>
    d290:	b118      	cbz	r0, d29a <z_unpend_thread_no_timeout+0x26>
	z_spin_lock_set_owner(l);
    d292:	481d      	ldr	r0, [pc, #116]	; (d308 <z_unpend_thread_no_timeout+0x94>)
    d294:	f001 faf2 	bl	e87c <z_spin_lock_set_owner>
	return k;
    d298:	e021      	b.n	d2de <z_unpend_thread_no_timeout+0x6a>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
    d29a:	4f1c      	ldr	r7, [pc, #112]	; (d30c <z_unpend_thread_no_timeout+0x98>)
    d29c:	234e      	movs	r3, #78	; 0x4e
    d29e:	463a      	mov	r2, r7
    d2a0:	491b      	ldr	r1, [pc, #108]	; (d310 <z_unpend_thread_no_timeout+0x9c>)
    d2a2:	481c      	ldr	r0, [pc, #112]	; (d314 <z_unpend_thread_no_timeout+0xa0>)
    d2a4:	f002 faeb 	bl	f87e <printk>
    d2a8:	481b      	ldr	r0, [pc, #108]	; (d318 <z_unpend_thread_no_timeout+0xa4>)
    d2aa:	f002 fae8 	bl	f87e <printk>
    d2ae:	214e      	movs	r1, #78	; 0x4e
    d2b0:	4638      	mov	r0, r7
    d2b2:	f002 fb6a 	bl	f98a <assert_post_action>
    d2b6:	e7ec      	b.n	d292 <z_unpend_thread_no_timeout+0x1e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
    d2b8:	4d14      	ldr	r5, [pc, #80]	; (d30c <z_unpend_thread_no_timeout+0x98>)
    d2ba:	2361      	movs	r3, #97	; 0x61
    d2bc:	462a      	mov	r2, r5
    d2be:	4917      	ldr	r1, [pc, #92]	; (d31c <z_unpend_thread_no_timeout+0xa8>)
    d2c0:	4814      	ldr	r0, [pc, #80]	; (d314 <z_unpend_thread_no_timeout+0xa0>)
    d2c2:	f002 fadc 	bl	f87e <printk>
    d2c6:	4816      	ldr	r0, [pc, #88]	; (d320 <z_unpend_thread_no_timeout+0xac>)
    d2c8:	f002 fad9 	bl	f87e <printk>
    d2cc:	2161      	movs	r1, #97	; 0x61
    d2ce:	4628      	mov	r0, r5
    d2d0:	f002 fb5b 	bl	f98a <assert_post_action>
	__asm__ volatile(
    d2d4:	f386 8811 	msr	BASEPRI, r6
    d2d8:	f3bf 8f6f 	isb	sy
    d2dc:	2501      	movs	r5, #1
    d2de:	b97d      	cbnz	r5, d300 <z_unpend_thread_no_timeout+0x8c>
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
    d2e0:	4620      	mov	r0, r4
    d2e2:	f7ff ff2b 	bl	d13c <pended_on>
    d2e6:	4621      	mov	r1, r4
    d2e8:	f000 f91c 	bl	d524 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    d2ec:	7b63      	ldrb	r3, [r4, #13]
    d2ee:	f023 0302 	bic.w	r3, r3, #2
    d2f2:	7363      	strb	r3, [r4, #13]
    d2f4:	4804      	ldr	r0, [pc, #16]	; (d308 <z_unpend_thread_no_timeout+0x94>)
    d2f6:	f001 fab1 	bl	e85c <z_spin_unlock_valid>
    d2fa:	2800      	cmp	r0, #0
    d2fc:	d1ea      	bne.n	d2d4 <z_unpend_thread_no_timeout+0x60>
    d2fe:	e7db      	b.n	d2b8 <z_unpend_thread_no_timeout+0x44>
		z_mark_thread_as_not_pending(thread);
	}

	thread->base.pended_on = NULL;
    d300:	2300      	movs	r3, #0
    d302:	60a3      	str	r3, [r4, #8]
}
    d304:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d306:	bf00      	nop
    d308:	20002728 	.word	0x20002728
    d30c:	00012778 	.word	0x00012778
    d310:	00012790 	.word	0x00012790
    d314:	00010f8c 	.word	0x00010f8c
    d318:	000127a8 	.word	0x000127a8
    d31c:	000127c0 	.word	0x000127c0
    d320:	000127d8 	.word	0x000127d8

0000d324 <z_reschedule>:

	return !z_is_in_isr();
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
    d324:	b538      	push	{r3, r4, r5, lr}
    d326:	460c      	mov	r4, r1
    d328:	f3ef 8305 	mrs	r3, IPSR
    d32c:	2b0d      	cmp	r3, #13
    d32e:	d807      	bhi.n	d340 <z_reschedule+0x1c>
    d330:	b17b      	cbz	r3, d352 <z_reschedule+0x2e>
    d332:	4b1d      	ldr	r3, [pc, #116]	; (d3a8 <z_reschedule+0x84>)
    d334:	685b      	ldr	r3, [r3, #4]
    d336:	f413 6f00 	tst.w	r3, #2048	; 0x800
    d33a:	d00c      	beq.n	d356 <z_reschedule+0x32>
    d33c:	2300      	movs	r3, #0
    d33e:	e000      	b.n	d342 <z_reschedule+0x1e>
    d340:	2301      	movs	r3, #1
	if (resched()) {
    d342:	b9cb      	cbnz	r3, d378 <z_reschedule+0x54>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
    d344:	f001 fa8a 	bl	e85c <z_spin_unlock_valid>
    d348:	b138      	cbz	r0, d35a <z_reschedule+0x36>
    d34a:	4620      	mov	r0, r4
    d34c:	f7fb fea2 	bl	9094 <__swap>
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
    d350:	bd38      	pop	{r3, r4, r5, pc}
    d352:	2300      	movs	r3, #0
    d354:	e7f5      	b.n	d342 <z_reschedule+0x1e>
    d356:	2301      	movs	r3, #1
    d358:	e7f3      	b.n	d342 <z_reschedule+0x1e>
    d35a:	4d14      	ldr	r5, [pc, #80]	; (d3ac <z_reschedule+0x88>)
    d35c:	2378      	movs	r3, #120	; 0x78
    d35e:	462a      	mov	r2, r5
    d360:	4913      	ldr	r1, [pc, #76]	; (d3b0 <z_reschedule+0x8c>)
    d362:	4814      	ldr	r0, [pc, #80]	; (d3b4 <z_reschedule+0x90>)
    d364:	f002 fa8b 	bl	f87e <printk>
    d368:	4813      	ldr	r0, [pc, #76]	; (d3b8 <z_reschedule+0x94>)
    d36a:	f002 fa88 	bl	f87e <printk>
    d36e:	2178      	movs	r1, #120	; 0x78
    d370:	4628      	mov	r0, r5
    d372:	f002 fb0a 	bl	f98a <assert_post_action>
    d376:	e7e8      	b.n	d34a <z_reschedule+0x26>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
    d378:	f001 fa70 	bl	e85c <z_spin_unlock_valid>
    d37c:	b120      	cbz	r0, d388 <z_reschedule+0x64>
    d37e:	f384 8811 	msr	BASEPRI, r4
    d382:	f3bf 8f6f 	isb	sy
    d386:	e7e3      	b.n	d350 <z_reschedule+0x2c>
    d388:	4d08      	ldr	r5, [pc, #32]	; (d3ac <z_reschedule+0x88>)
    d38a:	2361      	movs	r3, #97	; 0x61
    d38c:	462a      	mov	r2, r5
    d38e:	4908      	ldr	r1, [pc, #32]	; (d3b0 <z_reschedule+0x8c>)
    d390:	4808      	ldr	r0, [pc, #32]	; (d3b4 <z_reschedule+0x90>)
    d392:	f002 fa74 	bl	f87e <printk>
    d396:	4808      	ldr	r0, [pc, #32]	; (d3b8 <z_reschedule+0x94>)
    d398:	f002 fa71 	bl	f87e <printk>
    d39c:	2161      	movs	r1, #97	; 0x61
    d39e:	4628      	mov	r0, r5
    d3a0:	f002 faf3 	bl	f98a <assert_post_action>
    d3a4:	e7eb      	b.n	d37e <z_reschedule+0x5a>
    d3a6:	bf00      	nop
    d3a8:	e000ed00 	.word	0xe000ed00
    d3ac:	00012778 	.word	0x00012778
    d3b0:	000127c0 	.word	0x000127c0
    d3b4:	00010f8c 	.word	0x00010f8c
    d3b8:	000127d8 	.word	0x000127d8

0000d3bc <z_reschedule_irqlock>:

void z_reschedule_irqlock(u32_t key)
{
    d3bc:	b508      	push	{r3, lr}
    d3be:	f3ef 8305 	mrs	r3, IPSR
    d3c2:	2b0d      	cmp	r3, #13
    d3c4:	d807      	bhi.n	d3d6 <z_reschedule_irqlock+0x1a>
    d3c6:	b16b      	cbz	r3, d3e4 <z_reschedule_irqlock+0x28>
    d3c8:	4b0a      	ldr	r3, [pc, #40]	; (d3f4 <z_reschedule_irqlock+0x38>)
    d3ca:	685b      	ldr	r3, [r3, #4]
    d3cc:	f413 6f00 	tst.w	r3, #2048	; 0x800
    d3d0:	d00a      	beq.n	d3e8 <z_reschedule_irqlock+0x2c>
    d3d2:	2300      	movs	r3, #0
    d3d4:	e000      	b.n	d3d8 <z_reschedule_irqlock+0x1c>
    d3d6:	2301      	movs	r3, #1
	if (resched()) {
    d3d8:	b143      	cbz	r3, d3ec <z_reschedule_irqlock+0x30>
    d3da:	f380 8811 	msr	BASEPRI, r0
    d3de:	f3bf 8f6f 	isb	sy
		z_swap_irqlock(key);
	} else {
		irq_unlock(key);
	}
}
    d3e2:	bd08      	pop	{r3, pc}
    d3e4:	2300      	movs	r3, #0
    d3e6:	e7f7      	b.n	d3d8 <z_reschedule_irqlock+0x1c>
    d3e8:	2301      	movs	r3, #1
    d3ea:	e7f5      	b.n	d3d8 <z_reschedule_irqlock+0x1c>
    d3ec:	f7fb fe52 	bl	9094 <__swap>
#ifdef CONFIG_TRACING
	sys_trace_thread_switched_in();
#endif
#endif

	return ret;
    d3f0:	e7f7      	b.n	d3e2 <z_reschedule_irqlock+0x26>
    d3f2:	bf00      	nop
    d3f4:	e000ed00 	.word	0xe000ed00

0000d3f8 <k_sched_lock>:

void k_sched_lock(void)
{
    d3f8:	b570      	push	{r4, r5, r6, lr}
	LOCKED(&sched_spinlock) {
    d3fa:	2400      	movs	r4, #0
	__asm__ volatile(
    d3fc:	f04f 0320 	mov.w	r3, #32
    d400:	f3ef 8511 	mrs	r5, BASEPRI
    d404:	f383 8811 	msr	BASEPRI, r3
    d408:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
    d40c:	4838      	ldr	r0, [pc, #224]	; (d4f0 <k_sched_lock+0xf8>)
    d40e:	f001 fa15 	bl	e83c <z_spin_lock_valid>
    d412:	b118      	cbz	r0, d41c <k_sched_lock+0x24>
	z_spin_lock_set_owner(l);
    d414:	4836      	ldr	r0, [pc, #216]	; (d4f0 <k_sched_lock+0xf8>)
    d416:	f001 fa31 	bl	e87c <z_spin_lock_set_owner>
	return k;
    d41a:	e026      	b.n	d46a <k_sched_lock+0x72>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
    d41c:	4e35      	ldr	r6, [pc, #212]	; (d4f4 <k_sched_lock+0xfc>)
    d41e:	234e      	movs	r3, #78	; 0x4e
    d420:	4632      	mov	r2, r6
    d422:	4935      	ldr	r1, [pc, #212]	; (d4f8 <k_sched_lock+0x100>)
    d424:	4835      	ldr	r0, [pc, #212]	; (d4fc <k_sched_lock+0x104>)
    d426:	f002 fa2a 	bl	f87e <printk>
    d42a:	4835      	ldr	r0, [pc, #212]	; (d500 <k_sched_lock+0x108>)
    d42c:	f002 fa27 	bl	f87e <printk>
    d430:	214e      	movs	r1, #78	; 0x4e
    d432:	4630      	mov	r0, r6
    d434:	f002 faa9 	bl	f98a <assert_post_action>
    d438:	e7ec      	b.n	d414 <k_sched_lock+0x1c>
    d43a:	2301      	movs	r3, #1
	__ASSERT(!z_is_in_isr(), "");
    d43c:	f013 0f01 	tst.w	r3, #1
    d440:	d123      	bne.n	d48a <k_sched_lock+0x92>
	__ASSERT(_current->base.sched_locked != 1, "");
    d442:	4b30      	ldr	r3, [pc, #192]	; (d504 <k_sched_lock+0x10c>)
    d444:	689b      	ldr	r3, [r3, #8]
    d446:	7bdb      	ldrb	r3, [r3, #15]
    d448:	2b01      	cmp	r3, #1
    d44a:	d02f      	beq.n	d4ac <k_sched_lock+0xb4>
	--_current->base.sched_locked;
    d44c:	4b2d      	ldr	r3, [pc, #180]	; (d504 <k_sched_lock+0x10c>)
    d44e:	689a      	ldr	r2, [r3, #8]
    d450:	7bd3      	ldrb	r3, [r2, #15]
    d452:	3b01      	subs	r3, #1
    d454:	73d3      	strb	r3, [r2, #15]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
    d456:	4826      	ldr	r0, [pc, #152]	; (d4f0 <k_sched_lock+0xf8>)
    d458:	f001 fa00 	bl	e85c <z_spin_unlock_valid>
    d45c:	2800      	cmp	r0, #0
    d45e:	d036      	beq.n	d4ce <k_sched_lock+0xd6>
	__asm__ volatile(
    d460:	f385 8811 	msr	BASEPRI, r5
    d464:	f3bf 8f6f 	isb	sy
    d468:	2401      	movs	r4, #1
    d46a:	4623      	mov	r3, r4
    d46c:	2c00      	cmp	r4, #0
    d46e:	d13d      	bne.n	d4ec <k_sched_lock+0xf4>
    d470:	f3ef 8205 	mrs	r2, IPSR
    d474:	2a0d      	cmp	r2, #13
    d476:	d8e0      	bhi.n	d43a <k_sched_lock+0x42>
    d478:	2a00      	cmp	r2, #0
    d47a:	d0df      	beq.n	d43c <k_sched_lock+0x44>
    d47c:	4a22      	ldr	r2, [pc, #136]	; (d508 <k_sched_lock+0x110>)
    d47e:	6852      	ldr	r2, [r2, #4]
    d480:	f412 6f00 	tst.w	r2, #2048	; 0x800
    d484:	d1da      	bne.n	d43c <k_sched_lock+0x44>
    d486:	2301      	movs	r3, #1
    d488:	e7d8      	b.n	d43c <k_sched_lock+0x44>
	__ASSERT(!z_is_in_isr(), "");
    d48a:	4c20      	ldr	r4, [pc, #128]	; (d50c <k_sched_lock+0x114>)
    d48c:	f44f 7380 	mov.w	r3, #256	; 0x100
    d490:	4622      	mov	r2, r4
    d492:	491f      	ldr	r1, [pc, #124]	; (d510 <k_sched_lock+0x118>)
    d494:	4819      	ldr	r0, [pc, #100]	; (d4fc <k_sched_lock+0x104>)
    d496:	f002 f9f2 	bl	f87e <printk>
    d49a:	481e      	ldr	r0, [pc, #120]	; (d514 <k_sched_lock+0x11c>)
    d49c:	f002 f9ef 	bl	f87e <printk>
    d4a0:	f44f 7180 	mov.w	r1, #256	; 0x100
    d4a4:	4620      	mov	r0, r4
    d4a6:	f002 fa70 	bl	f98a <assert_post_action>
    d4aa:	e7ca      	b.n	d442 <k_sched_lock+0x4a>
	__ASSERT(_current->base.sched_locked != 1, "");
    d4ac:	4c17      	ldr	r4, [pc, #92]	; (d50c <k_sched_lock+0x114>)
    d4ae:	f240 1301 	movw	r3, #257	; 0x101
    d4b2:	4622      	mov	r2, r4
    d4b4:	4918      	ldr	r1, [pc, #96]	; (d518 <k_sched_lock+0x120>)
    d4b6:	4811      	ldr	r0, [pc, #68]	; (d4fc <k_sched_lock+0x104>)
    d4b8:	f002 f9e1 	bl	f87e <printk>
    d4bc:	4815      	ldr	r0, [pc, #84]	; (d514 <k_sched_lock+0x11c>)
    d4be:	f002 f9de 	bl	f87e <printk>
    d4c2:	f240 1101 	movw	r1, #257	; 0x101
    d4c6:	4620      	mov	r0, r4
    d4c8:	f002 fa5f 	bl	f98a <assert_post_action>
    d4cc:	e7be      	b.n	d44c <k_sched_lock+0x54>
    d4ce:	4c09      	ldr	r4, [pc, #36]	; (d4f4 <k_sched_lock+0xfc>)
    d4d0:	2361      	movs	r3, #97	; 0x61
    d4d2:	4622      	mov	r2, r4
    d4d4:	4911      	ldr	r1, [pc, #68]	; (d51c <k_sched_lock+0x124>)
    d4d6:	4809      	ldr	r0, [pc, #36]	; (d4fc <k_sched_lock+0x104>)
    d4d8:	f002 f9d1 	bl	f87e <printk>
    d4dc:	4810      	ldr	r0, [pc, #64]	; (d520 <k_sched_lock+0x128>)
    d4de:	f002 f9ce 	bl	f87e <printk>
    d4e2:	2161      	movs	r1, #97	; 0x61
    d4e4:	4620      	mov	r0, r4
    d4e6:	f002 fa50 	bl	f98a <assert_post_action>
    d4ea:	e7b9      	b.n	d460 <k_sched_lock+0x68>
		z_sched_lock();
	}
}
    d4ec:	bd70      	pop	{r4, r5, r6, pc}
    d4ee:	bf00      	nop
    d4f0:	20002728 	.word	0x20002728
    d4f4:	00012778 	.word	0x00012778
    d4f8:	00012790 	.word	0x00012790
    d4fc:	00010f8c 	.word	0x00010f8c
    d500:	000127a8 	.word	0x000127a8
    d504:	200026f4 	.word	0x200026f4
    d508:	e000ed00 	.word	0xe000ed00
    d50c:	000132f0 	.word	0x000132f0
    d510:	0001330c 	.word	0x0001330c
    d514:	000111e0 	.word	0x000111e0
    d518:	0001331c 	.word	0x0001331c
    d51c:	000127c0 	.word	0x000127c0
    d520:	000127d8 	.word	0x000127d8

0000d524 <z_priq_dumb_remove>:

	sys_dlist_append(pq, &thread->base.qnode_dlist);
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
    d524:	b538      	push	{r3, r4, r5, lr}
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
    d526:	4b14      	ldr	r3, [pc, #80]	; (d578 <z_priq_dumb_remove+0x54>)
    d528:	4283      	cmp	r3, r0
    d52a:	d00d      	beq.n	d548 <z_priq_dumb_remove+0x24>
    d52c:	460c      	mov	r4, r1
	return thread == _idle_thread;
    d52e:	4b13      	ldr	r3, [pc, #76]	; (d57c <z_priq_dumb_remove+0x58>)
    d530:	681b      	ldr	r3, [r3, #0]
	    z_is_thread_prevented_from_running(thread)) {
		return;
	}
#endif

	__ASSERT_NO_MSG(!is_idle(thread));
    d532:	4299      	cmp	r1, r3
    d534:	d011      	beq.n	d55a <z_priq_dumb_remove+0x36>
	node->prev->next = node->next;
    d536:	6862      	ldr	r2, [r4, #4]
    d538:	6823      	ldr	r3, [r4, #0]
    d53a:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
    d53c:	6862      	ldr	r2, [r4, #4]
    d53e:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    d540:	2300      	movs	r3, #0
    d542:	6023      	str	r3, [r4, #0]
	node->prev = NULL;
    d544:	6063      	str	r3, [r4, #4]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
    d546:	bd38      	pop	{r3, r4, r5, pc}
	if (pq == &_kernel.ready_q.runq && thread == _current &&
    d548:	3b28      	subs	r3, #40	; 0x28
    d54a:	689b      	ldr	r3, [r3, #8]
    d54c:	428b      	cmp	r3, r1
    d54e:	d1ed      	bne.n	d52c <z_priq_dumb_remove+0x8>
	u8_t state = thread->base.thread_state;
    d550:	7b4b      	ldrb	r3, [r1, #13]
    d552:	f013 0f1f 	tst.w	r3, #31
    d556:	d0e9      	beq.n	d52c <z_priq_dumb_remove+0x8>
    d558:	e7f5      	b.n	d546 <z_priq_dumb_remove+0x22>
	__ASSERT_NO_MSG(!is_idle(thread));
    d55a:	4d09      	ldr	r5, [pc, #36]	; (d580 <z_priq_dumb_remove+0x5c>)
    d55c:	f44f 7323 	mov.w	r3, #652	; 0x28c
    d560:	462a      	mov	r2, r5
    d562:	4908      	ldr	r1, [pc, #32]	; (d584 <z_priq_dumb_remove+0x60>)
    d564:	4808      	ldr	r0, [pc, #32]	; (d588 <z_priq_dumb_remove+0x64>)
    d566:	f002 f98a 	bl	f87e <printk>
    d56a:	f44f 7123 	mov.w	r1, #652	; 0x28c
    d56e:	4628      	mov	r0, r5
    d570:	f002 fa0b 	bl	f98a <assert_post_action>
    d574:	e7df      	b.n	d536 <z_priq_dumb_remove+0x12>
    d576:	bf00      	nop
    d578:	2000271c 	.word	0x2000271c
    d57c:	000131f8 	.word	0x000131f8
    d580:	000133b8 	.word	0x000133b8
    d584:	00013450 	.word	0x00013450
    d588:	00010f8c 	.word	0x00010f8c

0000d58c <z_unpend_thread>:
{
    d58c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d58e:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
    d590:	2500      	movs	r5, #0
	__asm__ volatile(
    d592:	f04f 0320 	mov.w	r3, #32
    d596:	f3ef 8611 	mrs	r6, BASEPRI
    d59a:	f383 8811 	msr	BASEPRI, r3
    d59e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
    d5a2:	4821      	ldr	r0, [pc, #132]	; (d628 <z_unpend_thread+0x9c>)
    d5a4:	f001 f94a 	bl	e83c <z_spin_lock_valid>
    d5a8:	b118      	cbz	r0, d5b2 <z_unpend_thread+0x26>
	z_spin_lock_set_owner(l);
    d5aa:	481f      	ldr	r0, [pc, #124]	; (d628 <z_unpend_thread+0x9c>)
    d5ac:	f001 f966 	bl	e87c <z_spin_lock_set_owner>
	return k;
    d5b0:	e021      	b.n	d5f6 <z_unpend_thread+0x6a>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
    d5b2:	4f1e      	ldr	r7, [pc, #120]	; (d62c <z_unpend_thread+0xa0>)
    d5b4:	234e      	movs	r3, #78	; 0x4e
    d5b6:	463a      	mov	r2, r7
    d5b8:	491d      	ldr	r1, [pc, #116]	; (d630 <z_unpend_thread+0xa4>)
    d5ba:	481e      	ldr	r0, [pc, #120]	; (d634 <z_unpend_thread+0xa8>)
    d5bc:	f002 f95f 	bl	f87e <printk>
    d5c0:	481d      	ldr	r0, [pc, #116]	; (d638 <z_unpend_thread+0xac>)
    d5c2:	f002 f95c 	bl	f87e <printk>
    d5c6:	214e      	movs	r1, #78	; 0x4e
    d5c8:	4638      	mov	r0, r7
    d5ca:	f002 f9de 	bl	f98a <assert_post_action>
    d5ce:	e7ec      	b.n	d5aa <z_unpend_thread+0x1e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
    d5d0:	4d16      	ldr	r5, [pc, #88]	; (d62c <z_unpend_thread+0xa0>)
    d5d2:	2361      	movs	r3, #97	; 0x61
    d5d4:	462a      	mov	r2, r5
    d5d6:	4919      	ldr	r1, [pc, #100]	; (d63c <z_unpend_thread+0xb0>)
    d5d8:	4816      	ldr	r0, [pc, #88]	; (d634 <z_unpend_thread+0xa8>)
    d5da:	f002 f950 	bl	f87e <printk>
    d5de:	4818      	ldr	r0, [pc, #96]	; (d640 <z_unpend_thread+0xb4>)
    d5e0:	f002 f94d 	bl	f87e <printk>
    d5e4:	2161      	movs	r1, #97	; 0x61
    d5e6:	4628      	mov	r0, r5
    d5e8:	f002 f9cf 	bl	f98a <assert_post_action>
	__asm__ volatile(
    d5ec:	f386 8811 	msr	BASEPRI, r6
    d5f0:	f3bf 8f6f 	isb	sy
    d5f4:	2501      	movs	r5, #1
    d5f6:	b97d      	cbnz	r5, d618 <z_unpend_thread+0x8c>
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
    d5f8:	4620      	mov	r0, r4
    d5fa:	f7ff fd9f 	bl	d13c <pended_on>
    d5fe:	4621      	mov	r1, r4
    d600:	f7ff ff90 	bl	d524 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    d604:	7b63      	ldrb	r3, [r4, #13]
    d606:	f023 0302 	bic.w	r3, r3, #2
    d60a:	7363      	strb	r3, [r4, #13]
    d60c:	4806      	ldr	r0, [pc, #24]	; (d628 <z_unpend_thread+0x9c>)
    d60e:	f001 f925 	bl	e85c <z_spin_unlock_valid>
    d612:	2800      	cmp	r0, #0
    d614:	d1ea      	bne.n	d5ec <z_unpend_thread+0x60>
    d616:	e7db      	b.n	d5d0 <z_unpend_thread+0x44>
	thread->base.pended_on = NULL;
    d618:	2300      	movs	r3, #0
    d61a:	60a3      	str	r3, [r4, #8]
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    d61c:	f104 0018 	add.w	r0, r4, #24
    d620:	f001 fb5a 	bl	ecd8 <z_abort_timeout>
}
    d624:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d626:	bf00      	nop
    d628:	20002728 	.word	0x20002728
    d62c:	00012778 	.word	0x00012778
    d630:	00012790 	.word	0x00012790
    d634:	00010f8c 	.word	0x00010f8c
    d638:	000127a8 	.word	0x000127a8
    d63c:	000127c0 	.word	0x000127c0
    d640:	000127d8 	.word	0x000127d8

0000d644 <update_cache>:
{
    d644:	b538      	push	{r3, r4, r5, lr}
    d646:	4605      	mov	r5, r0
	struct k_thread *th = _priq_run_best(&_kernel.ready_q.runq);
    d648:	4818      	ldr	r0, [pc, #96]	; (d6ac <update_cache+0x68>)
    d64a:	f003 fa07 	bl	10a5c <z_priq_dumb_best>
	return th ? th : _current_cpu->idle_thread;
    d64e:	4604      	mov	r4, r0
    d650:	b188      	cbz	r0, d676 <update_cache+0x32>
	if (preempt_ok != 0) {
    d652:	bb15      	cbnz	r5, d69a <update_cache+0x56>
	__ASSERT(_current != NULL, "");
    d654:	4b16      	ldr	r3, [pc, #88]	; (d6b0 <update_cache+0x6c>)
    d656:	689b      	ldr	r3, [r3, #8]
    d658:	b183      	cbz	r3, d67c <update_cache+0x38>
	if (z_is_thread_prevented_from_running(_current)) {
    d65a:	4b15      	ldr	r3, [pc, #84]	; (d6b0 <update_cache+0x6c>)
    d65c:	689b      	ldr	r3, [r3, #8]
	u8_t state = thread->base.thread_state;
    d65e:	7b5a      	ldrb	r2, [r3, #13]
    d660:	f012 0f1f 	tst.w	r2, #31
    d664:	d119      	bne.n	d69a <update_cache+0x56>
	return node->next != NULL;
    d666:	69a2      	ldr	r2, [r4, #24]
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    d668:	b9ba      	cbnz	r2, d69a <update_cache+0x56>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
    d66a:	89da      	ldrh	r2, [r3, #14]
	if (is_preempt(_current) || is_metairq(th)) {
    d66c:	2a7f      	cmp	r2, #127	; 0x7f
    d66e:	d914      	bls.n	d69a <update_cache+0x56>
		_kernel.ready_q.cache = _current;
    d670:	4a0f      	ldr	r2, [pc, #60]	; (d6b0 <update_cache+0x6c>)
    d672:	6253      	str	r3, [r2, #36]	; 0x24
    d674:	e019      	b.n	d6aa <update_cache+0x66>
	return th ? th : _current_cpu->idle_thread;
    d676:	4b0e      	ldr	r3, [pc, #56]	; (d6b0 <update_cache+0x6c>)
    d678:	68dc      	ldr	r4, [r3, #12]
    d67a:	e7ea      	b.n	d652 <update_cache+0xe>
	__ASSERT(_current != NULL, "");
    d67c:	4d0d      	ldr	r5, [pc, #52]	; (d6b4 <update_cache+0x70>)
    d67e:	237f      	movs	r3, #127	; 0x7f
    d680:	462a      	mov	r2, r5
    d682:	490d      	ldr	r1, [pc, #52]	; (d6b8 <update_cache+0x74>)
    d684:	480d      	ldr	r0, [pc, #52]	; (d6bc <update_cache+0x78>)
    d686:	f002 f8fa 	bl	f87e <printk>
    d68a:	480d      	ldr	r0, [pc, #52]	; (d6c0 <update_cache+0x7c>)
    d68c:	f002 f8f7 	bl	f87e <printk>
    d690:	217f      	movs	r1, #127	; 0x7f
    d692:	4628      	mov	r0, r5
    d694:	f002 f979 	bl	f98a <assert_post_action>
    d698:	e7df      	b.n	d65a <update_cache+0x16>
		if (th != _current) {
    d69a:	4b05      	ldr	r3, [pc, #20]	; (d6b0 <update_cache+0x6c>)
    d69c:	689b      	ldr	r3, [r3, #8]
    d69e:	42a3      	cmp	r3, r4
    d6a0:	d001      	beq.n	d6a6 <update_cache+0x62>
			reset_time_slice();
    d6a2:	f7ff fd65 	bl	d170 <reset_time_slice>
		_kernel.ready_q.cache = th;
    d6a6:	4b02      	ldr	r3, [pc, #8]	; (d6b0 <update_cache+0x6c>)
    d6a8:	625c      	str	r4, [r3, #36]	; 0x24
}
    d6aa:	bd38      	pop	{r3, r4, r5, pc}
    d6ac:	2000271c 	.word	0x2000271c
    d6b0:	200026f4 	.word	0x200026f4
    d6b4:	000133b8 	.word	0x000133b8
    d6b8:	000133e4 	.word	0x000133e4
    d6bc:	00010f8c 	.word	0x00010f8c
    d6c0:	000111e0 	.word	0x000111e0

0000d6c4 <k_sched_unlock>:
{
    d6c4:	b570      	push	{r4, r5, r6, lr}
	__ASSERT(_current->base.sched_locked != 0, "");
    d6c6:	4b42      	ldr	r3, [pc, #264]	; (d7d0 <k_sched_unlock+0x10c>)
    d6c8:	689b      	ldr	r3, [r3, #8]
    d6ca:	7bdb      	ldrb	r3, [r3, #15]
    d6cc:	b15b      	cbz	r3, d6e6 <k_sched_unlock+0x22>
    d6ce:	f3ef 8305 	mrs	r3, IPSR
    d6d2:	2b0d      	cmp	r3, #13
    d6d4:	d818      	bhi.n	d708 <k_sched_unlock+0x44>
    d6d6:	b353      	cbz	r3, d72e <k_sched_unlock+0x6a>
    d6d8:	4b3e      	ldr	r3, [pc, #248]	; (d7d4 <k_sched_unlock+0x110>)
    d6da:	685b      	ldr	r3, [r3, #4]
    d6dc:	f413 6f00 	tst.w	r3, #2048	; 0x800
    d6e0:	d027      	beq.n	d732 <k_sched_unlock+0x6e>
    d6e2:	2300      	movs	r3, #0
    d6e4:	e011      	b.n	d70a <k_sched_unlock+0x46>
    d6e6:	4c3c      	ldr	r4, [pc, #240]	; (d7d8 <k_sched_unlock+0x114>)
    d6e8:	f240 2321 	movw	r3, #545	; 0x221
    d6ec:	4622      	mov	r2, r4
    d6ee:	493b      	ldr	r1, [pc, #236]	; (d7dc <k_sched_unlock+0x118>)
    d6f0:	483b      	ldr	r0, [pc, #236]	; (d7e0 <k_sched_unlock+0x11c>)
    d6f2:	f002 f8c4 	bl	f87e <printk>
    d6f6:	483b      	ldr	r0, [pc, #236]	; (d7e4 <k_sched_unlock+0x120>)
    d6f8:	f002 f8c1 	bl	f87e <printk>
    d6fc:	f240 2121 	movw	r1, #545	; 0x221
    d700:	4620      	mov	r0, r4
    d702:	f002 f942 	bl	f98a <assert_post_action>
    d706:	e7e2      	b.n	d6ce <k_sched_unlock+0xa>
    d708:	2301      	movs	r3, #1
	__ASSERT(!z_is_in_isr(), "");
    d70a:	b9a3      	cbnz	r3, d736 <k_sched_unlock+0x72>
	LOCKED(&sched_spinlock) {
    d70c:	2400      	movs	r4, #0
	__asm__ volatile(
    d70e:	f04f 0320 	mov.w	r3, #32
    d712:	f3ef 8511 	mrs	r5, BASEPRI
    d716:	f383 8811 	msr	BASEPRI, r3
    d71a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
    d71e:	4832      	ldr	r0, [pc, #200]	; (d7e8 <k_sched_unlock+0x124>)
    d720:	f001 f88c 	bl	e83c <z_spin_lock_valid>
    d724:	b1c0      	cbz	r0, d758 <k_sched_unlock+0x94>
	z_spin_lock_set_owner(l);
    d726:	4830      	ldr	r0, [pc, #192]	; (d7e8 <k_sched_unlock+0x124>)
    d728:	f001 f8a8 	bl	e87c <z_spin_lock_set_owner>
	return k;
    d72c:	e036      	b.n	d79c <k_sched_unlock+0xd8>
    d72e:	2300      	movs	r3, #0
    d730:	e7eb      	b.n	d70a <k_sched_unlock+0x46>
    d732:	2301      	movs	r3, #1
    d734:	e7e9      	b.n	d70a <k_sched_unlock+0x46>
	__ASSERT(!z_is_in_isr(), "");
    d736:	4c28      	ldr	r4, [pc, #160]	; (d7d8 <k_sched_unlock+0x114>)
    d738:	f240 2322 	movw	r3, #546	; 0x222
    d73c:	4622      	mov	r2, r4
    d73e:	492b      	ldr	r1, [pc, #172]	; (d7ec <k_sched_unlock+0x128>)
    d740:	4827      	ldr	r0, [pc, #156]	; (d7e0 <k_sched_unlock+0x11c>)
    d742:	f002 f89c 	bl	f87e <printk>
    d746:	4827      	ldr	r0, [pc, #156]	; (d7e4 <k_sched_unlock+0x120>)
    d748:	f002 f899 	bl	f87e <printk>
    d74c:	f240 2122 	movw	r1, #546	; 0x222
    d750:	4620      	mov	r0, r4
    d752:	f002 f91a 	bl	f98a <assert_post_action>
    d756:	e7d9      	b.n	d70c <k_sched_unlock+0x48>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
    d758:	4e25      	ldr	r6, [pc, #148]	; (d7f0 <k_sched_unlock+0x12c>)
    d75a:	234e      	movs	r3, #78	; 0x4e
    d75c:	4632      	mov	r2, r6
    d75e:	4925      	ldr	r1, [pc, #148]	; (d7f4 <k_sched_unlock+0x130>)
    d760:	481f      	ldr	r0, [pc, #124]	; (d7e0 <k_sched_unlock+0x11c>)
    d762:	f002 f88c 	bl	f87e <printk>
    d766:	4824      	ldr	r0, [pc, #144]	; (d7f8 <k_sched_unlock+0x134>)
    d768:	f002 f889 	bl	f87e <printk>
    d76c:	214e      	movs	r1, #78	; 0x4e
    d76e:	4630      	mov	r0, r6
    d770:	f002 f90b 	bl	f98a <assert_post_action>
    d774:	e7d7      	b.n	d726 <k_sched_unlock+0x62>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
    d776:	4c1e      	ldr	r4, [pc, #120]	; (d7f0 <k_sched_unlock+0x12c>)
    d778:	2361      	movs	r3, #97	; 0x61
    d77a:	4622      	mov	r2, r4
    d77c:	491f      	ldr	r1, [pc, #124]	; (d7fc <k_sched_unlock+0x138>)
    d77e:	4818      	ldr	r0, [pc, #96]	; (d7e0 <k_sched_unlock+0x11c>)
    d780:	f002 f87d 	bl	f87e <printk>
    d784:	481e      	ldr	r0, [pc, #120]	; (d800 <k_sched_unlock+0x13c>)
    d786:	f002 f87a 	bl	f87e <printk>
    d78a:	2161      	movs	r1, #97	; 0x61
    d78c:	4620      	mov	r0, r4
    d78e:	f002 f8fc 	bl	f98a <assert_post_action>
	__asm__ volatile(
    d792:	f385 8811 	msr	BASEPRI, r5
    d796:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    d79a:	2401      	movs	r4, #1
    d79c:	b96c      	cbnz	r4, d7ba <k_sched_unlock+0xf6>
		++_current->base.sched_locked;
    d79e:	4b0c      	ldr	r3, [pc, #48]	; (d7d0 <k_sched_unlock+0x10c>)
    d7a0:	689a      	ldr	r2, [r3, #8]
    d7a2:	7bd3      	ldrb	r3, [r2, #15]
    d7a4:	3301      	adds	r3, #1
    d7a6:	73d3      	strb	r3, [r2, #15]
		update_cache(1);
    d7a8:	2001      	movs	r0, #1
    d7aa:	f7ff ff4b 	bl	d644 <update_cache>
    d7ae:	480e      	ldr	r0, [pc, #56]	; (d7e8 <k_sched_unlock+0x124>)
    d7b0:	f001 f854 	bl	e85c <z_spin_unlock_valid>
    d7b4:	2800      	cmp	r0, #0
    d7b6:	d1ec      	bne.n	d792 <k_sched_unlock+0xce>
    d7b8:	e7dd      	b.n	d776 <k_sched_unlock+0xb2>
	__asm__ volatile(
    d7ba:	f04f 0320 	mov.w	r3, #32
    d7be:	f3ef 8011 	mrs	r0, BASEPRI
    d7c2:	f383 8811 	msr	BASEPRI, r3
    d7c6:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(z_arch_irq_lock());
    d7ca:	f7ff fdf7 	bl	d3bc <z_reschedule_irqlock>
}
    d7ce:	bd70      	pop	{r4, r5, r6, pc}
    d7d0:	200026f4 	.word	0x200026f4
    d7d4:	e000ed00 	.word	0xe000ed00
    d7d8:	000133b8 	.word	0x000133b8
    d7dc:	00013390 	.word	0x00013390
    d7e0:	00010f8c 	.word	0x00010f8c
    d7e4:	000111e0 	.word	0x000111e0
    d7e8:	20002728 	.word	0x20002728
    d7ec:	0001330c 	.word	0x0001330c
    d7f0:	00012778 	.word	0x00012778
    d7f4:	00012790 	.word	0x00012790
    d7f8:	000127a8 	.word	0x000127a8
    d7fc:	000127c0 	.word	0x000127c0
    d800:	000127d8 	.word	0x000127d8

0000d804 <z_add_thread_to_ready_q>:
{
    d804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d806:	4605      	mov	r5, r0
	LOCKED(&sched_spinlock) {
    d808:	2400      	movs	r4, #0
    d80a:	f04f 0320 	mov.w	r3, #32
    d80e:	f3ef 8611 	mrs	r6, BASEPRI
    d812:	f383 8811 	msr	BASEPRI, r3
    d816:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
    d81a:	4839      	ldr	r0, [pc, #228]	; (d900 <z_add_thread_to_ready_q+0xfc>)
    d81c:	f001 f80e 	bl	e83c <z_spin_lock_valid>
    d820:	b118      	cbz	r0, d82a <z_add_thread_to_ready_q+0x26>
	z_spin_lock_set_owner(l);
    d822:	4837      	ldr	r0, [pc, #220]	; (d900 <z_add_thread_to_ready_q+0xfc>)
    d824:	f001 f82a 	bl	e87c <z_spin_lock_set_owner>
	return k;
    d828:	e03d      	b.n	d8a6 <z_add_thread_to_ready_q+0xa2>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
    d82a:	4f36      	ldr	r7, [pc, #216]	; (d904 <z_add_thread_to_ready_q+0x100>)
    d82c:	234e      	movs	r3, #78	; 0x4e
    d82e:	463a      	mov	r2, r7
    d830:	4935      	ldr	r1, [pc, #212]	; (d908 <z_add_thread_to_ready_q+0x104>)
    d832:	4836      	ldr	r0, [pc, #216]	; (d90c <z_add_thread_to_ready_q+0x108>)
    d834:	f002 f823 	bl	f87e <printk>
    d838:	4835      	ldr	r0, [pc, #212]	; (d910 <z_add_thread_to_ready_q+0x10c>)
    d83a:	f002 f820 	bl	f87e <printk>
    d83e:	214e      	movs	r1, #78	; 0x4e
    d840:	4638      	mov	r0, r7
    d842:	f002 f8a2 	bl	f98a <assert_post_action>
    d846:	e7ec      	b.n	d822 <z_add_thread_to_ready_q+0x1e>
	__ASSERT_NO_MSG(!is_idle(thread));
    d848:	4c32      	ldr	r4, [pc, #200]	; (d914 <z_add_thread_to_ready_q+0x110>)
    d84a:	f240 2376 	movw	r3, #630	; 0x276
    d84e:	4622      	mov	r2, r4
    d850:	4931      	ldr	r1, [pc, #196]	; (d918 <z_add_thread_to_ready_q+0x114>)
    d852:	482e      	ldr	r0, [pc, #184]	; (d90c <z_add_thread_to_ready_q+0x108>)
    d854:	f002 f813 	bl	f87e <printk>
    d858:	f240 2176 	movw	r1, #630	; 0x276
    d85c:	4620      	mov	r0, r4
    d85e:	f002 f894 	bl	f98a <assert_post_action>
    d862:	e025      	b.n	d8b0 <z_add_thread_to_ready_q+0xac>
	node->prev = successor->prev;
    d864:	6863      	ldr	r3, [r4, #4]
    d866:	606b      	str	r3, [r5, #4]
	node->next = successor;
    d868:	602c      	str	r4, [r5, #0]
	successor->prev->next = node;
    d86a:	6863      	ldr	r3, [r4, #4]
    d86c:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    d86e:	6065      	str	r5, [r4, #4]
    d870:	e009      	b.n	d886 <z_add_thread_to_ready_q+0x82>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    d872:	2400      	movs	r4, #0
    d874:	e021      	b.n	d8ba <z_add_thread_to_ready_q+0xb6>
	node->next = list;
    d876:	4b29      	ldr	r3, [pc, #164]	; (d91c <z_add_thread_to_ready_q+0x118>)
    d878:	f103 0228 	add.w	r2, r3, #40	; 0x28
    d87c:	602a      	str	r2, [r5, #0]
	node->prev = list->tail;
    d87e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    d880:	606a      	str	r2, [r5, #4]
	list->tail->next = node;
    d882:	6015      	str	r5, [r2, #0]
	list->tail = node;
    d884:	62dd      	str	r5, [r3, #44]	; 0x2c
	thread->base.thread_state |= states;
    d886:	7b6b      	ldrb	r3, [r5, #13]
    d888:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    d88c:	736b      	strb	r3, [r5, #13]
		update_cache(0);
    d88e:	2000      	movs	r0, #0
    d890:	f7ff fed8 	bl	d644 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
    d894:	481a      	ldr	r0, [pc, #104]	; (d900 <z_add_thread_to_ready_q+0xfc>)
    d896:	f000 ffe1 	bl	e85c <z_spin_unlock_valid>
    d89a:	b300      	cbz	r0, d8de <z_add_thread_to_ready_q+0xda>
	__asm__ volatile(
    d89c:	f386 8811 	msr	BASEPRI, r6
    d8a0:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    d8a4:	2401      	movs	r4, #1
    d8a6:	bb4c      	cbnz	r4, d8fc <z_add_thread_to_ready_q+0xf8>
	return thread == _idle_thread;
    d8a8:	4b1d      	ldr	r3, [pc, #116]	; (d920 <z_add_thread_to_ready_q+0x11c>)
    d8aa:	681b      	ldr	r3, [r3, #0]
	__ASSERT_NO_MSG(!is_idle(thread));
    d8ac:	429d      	cmp	r5, r3
    d8ae:	d0cb      	beq.n	d848 <z_add_thread_to_ready_q+0x44>
	return list->head == list;
    d8b0:	4b1a      	ldr	r3, [pc, #104]	; (d91c <z_add_thread_to_ready_q+0x118>)
    d8b2:	f853 4f28 	ldr.w	r4, [r3, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    d8b6:	429c      	cmp	r4, r3
    d8b8:	d0db      	beq.n	d872 <z_add_thread_to_ready_q+0x6e>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    d8ba:	2c00      	cmp	r4, #0
    d8bc:	d0db      	beq.n	d876 <z_add_thread_to_ready_q+0x72>
		if (z_is_t1_higher_prio_than_t2(thread, t)) {
    d8be:	4621      	mov	r1, r4
    d8c0:	4628      	mov	r0, r5
    d8c2:	f003 f8c1 	bl	10a48 <z_is_t1_higher_prio_than_t2>
    d8c6:	2800      	cmp	r0, #0
    d8c8:	d1cc      	bne.n	d864 <z_add_thread_to_ready_q+0x60>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    d8ca:	2c00      	cmp	r4, #0
    d8cc:	d0d3      	beq.n	d876 <z_add_thread_to_ready_q+0x72>
	return (node == list->tail) ? NULL : node->next;
    d8ce:	4b13      	ldr	r3, [pc, #76]	; (d91c <z_add_thread_to_ready_q+0x118>)
    d8d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    d8d2:	429c      	cmp	r4, r3
    d8d4:	d0cf      	beq.n	d876 <z_add_thread_to_ready_q+0x72>
    d8d6:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    d8d8:	2c00      	cmp	r4, #0
    d8da:	d1ee      	bne.n	d8ba <z_add_thread_to_ready_q+0xb6>
    d8dc:	e7cb      	b.n	d876 <z_add_thread_to_ready_q+0x72>
    d8de:	4c09      	ldr	r4, [pc, #36]	; (d904 <z_add_thread_to_ready_q+0x100>)
    d8e0:	2361      	movs	r3, #97	; 0x61
    d8e2:	4622      	mov	r2, r4
    d8e4:	490f      	ldr	r1, [pc, #60]	; (d924 <z_add_thread_to_ready_q+0x120>)
    d8e6:	4809      	ldr	r0, [pc, #36]	; (d90c <z_add_thread_to_ready_q+0x108>)
    d8e8:	f001 ffc9 	bl	f87e <printk>
    d8ec:	480e      	ldr	r0, [pc, #56]	; (d928 <z_add_thread_to_ready_q+0x124>)
    d8ee:	f001 ffc6 	bl	f87e <printk>
    d8f2:	2161      	movs	r1, #97	; 0x61
    d8f4:	4620      	mov	r0, r4
    d8f6:	f002 f848 	bl	f98a <assert_post_action>
    d8fa:	e7cf      	b.n	d89c <z_add_thread_to_ready_q+0x98>
}
    d8fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d8fe:	bf00      	nop
    d900:	20002728 	.word	0x20002728
    d904:	00012778 	.word	0x00012778
    d908:	00012790 	.word	0x00012790
    d90c:	00010f8c 	.word	0x00010f8c
    d910:	000127a8 	.word	0x000127a8
    d914:	000133b8 	.word	0x000133b8
    d918:	00013450 	.word	0x00013450
    d91c:	200026f4 	.word	0x200026f4
    d920:	000131f8 	.word	0x000131f8
    d924:	000127c0 	.word	0x000127c0
    d928:	000127d8 	.word	0x000127d8

0000d92c <z_thread_timeout>:
{
    d92c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d930:	4604      	mov	r4, r0
	struct k_thread *th = CONTAINER_OF(to, struct k_thread, base.timeout);
    d932:	f1a0 0518 	sub.w	r5, r0, #24
	if (th->base.pended_on != NULL) {
    d936:	f850 3c10 	ldr.w	r3, [r0, #-16]
    d93a:	2b00      	cmp	r3, #0
    d93c:	d049      	beq.n	d9d2 <z_thread_timeout+0xa6>
	LOCKED(&sched_spinlock) {
    d93e:	2600      	movs	r6, #0
	__asm__ volatile(
    d940:	f04f 0320 	mov.w	r3, #32
    d944:	f3ef 8711 	mrs	r7, BASEPRI
    d948:	f383 8811 	msr	BASEPRI, r3
    d94c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
    d950:	482b      	ldr	r0, [pc, #172]	; (da00 <z_thread_timeout+0xd4>)
    d952:	f000 ff73 	bl	e83c <z_spin_lock_valid>
    d956:	b118      	cbz	r0, d960 <z_thread_timeout+0x34>
	z_spin_lock_set_owner(l);
    d958:	4829      	ldr	r0, [pc, #164]	; (da00 <z_thread_timeout+0xd4>)
    d95a:	f000 ff8f 	bl	e87c <z_spin_lock_set_owner>
	return k;
    d95e:	e022      	b.n	d9a6 <z_thread_timeout+0x7a>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
    d960:	f8df 80ac 	ldr.w	r8, [pc, #172]	; da10 <z_thread_timeout+0xe4>
    d964:	234e      	movs	r3, #78	; 0x4e
    d966:	4642      	mov	r2, r8
    d968:	4926      	ldr	r1, [pc, #152]	; (da04 <z_thread_timeout+0xd8>)
    d96a:	4827      	ldr	r0, [pc, #156]	; (da08 <z_thread_timeout+0xdc>)
    d96c:	f001 ff87 	bl	f87e <printk>
    d970:	4826      	ldr	r0, [pc, #152]	; (da0c <z_thread_timeout+0xe0>)
    d972:	f001 ff84 	bl	f87e <printk>
    d976:	214e      	movs	r1, #78	; 0x4e
    d978:	4640      	mov	r0, r8
    d97a:	f002 f806 	bl	f98a <assert_post_action>
    d97e:	e7eb      	b.n	d958 <z_thread_timeout+0x2c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
    d980:	4e23      	ldr	r6, [pc, #140]	; (da10 <z_thread_timeout+0xe4>)
    d982:	2361      	movs	r3, #97	; 0x61
    d984:	4632      	mov	r2, r6
    d986:	4923      	ldr	r1, [pc, #140]	; (da14 <z_thread_timeout+0xe8>)
    d988:	481f      	ldr	r0, [pc, #124]	; (da08 <z_thread_timeout+0xdc>)
    d98a:	f001 ff78 	bl	f87e <printk>
    d98e:	4822      	ldr	r0, [pc, #136]	; (da18 <z_thread_timeout+0xec>)
    d990:	f001 ff75 	bl	f87e <printk>
    d994:	2161      	movs	r1, #97	; 0x61
    d996:	4630      	mov	r0, r6
    d998:	f001 fff7 	bl	f98a <assert_post_action>
	__asm__ volatile(
    d99c:	f387 8811 	msr	BASEPRI, r7
    d9a0:	f3bf 8f6f 	isb	sy
    d9a4:	2601      	movs	r6, #1
    d9a6:	b98e      	cbnz	r6, d9cc <z_thread_timeout+0xa0>
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
    d9a8:	4628      	mov	r0, r5
    d9aa:	f7ff fbc7 	bl	d13c <pended_on>
    d9ae:	4629      	mov	r1, r5
    d9b0:	f7ff fdb8 	bl	d524 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    d9b4:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    d9b8:	f023 0302 	bic.w	r3, r3, #2
    d9bc:	f804 3c0b 	strb.w	r3, [r4, #-11]
    d9c0:	480f      	ldr	r0, [pc, #60]	; (da00 <z_thread_timeout+0xd4>)
    d9c2:	f000 ff4b 	bl	e85c <z_spin_unlock_valid>
    d9c6:	2800      	cmp	r0, #0
    d9c8:	d1e8      	bne.n	d99c <z_thread_timeout+0x70>
    d9ca:	e7d9      	b.n	d980 <z_thread_timeout+0x54>
	thread->base.pended_on = NULL;
    d9cc:	2300      	movs	r3, #0
    d9ce:	f844 3c10 	str.w	r3, [r4, #-16]
	thread->base.thread_state &= ~_THREAD_PRESTART;
    d9d2:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    d9d6:	f003 03eb 	and.w	r3, r3, #235	; 0xeb
    d9da:	f804 3c0b 	strb.w	r3, [r4, #-11]
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    d9de:	f013 0f0b 	tst.w	r3, #11
    d9e2:	d105      	bne.n	d9f0 <z_thread_timeout+0xc4>
	return node->next != NULL;
    d9e4:	6823      	ldr	r3, [r4, #0]
    d9e6:	b10b      	cbz	r3, d9ec <z_thread_timeout+0xc0>
    d9e8:	2300      	movs	r3, #0
    d9ea:	e002      	b.n	d9f2 <z_thread_timeout+0xc6>
    d9ec:	2301      	movs	r3, #1
    d9ee:	e000      	b.n	d9f2 <z_thread_timeout+0xc6>
    d9f0:	2300      	movs	r3, #0
	if (z_is_thread_ready(thread)) {
    d9f2:	b90b      	cbnz	r3, d9f8 <z_thread_timeout+0xcc>
}
    d9f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		z_add_thread_to_ready_q(thread);
    d9f8:	4628      	mov	r0, r5
    d9fa:	f7ff ff03 	bl	d804 <z_add_thread_to_ready_q>
    d9fe:	e7f9      	b.n	d9f4 <z_thread_timeout+0xc8>
    da00:	20002728 	.word	0x20002728
    da04:	00012790 	.word	0x00012790
    da08:	00010f8c 	.word	0x00010f8c
    da0c:	000127a8 	.word	0x000127a8
    da10:	00012778 	.word	0x00012778
    da14:	000127c0 	.word	0x000127c0
    da18:	000127d8 	.word	0x000127d8

0000da1c <z_move_thread_to_end_of_prio_q>:
{
    da1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    da1e:	4605      	mov	r5, r0
	LOCKED(&sched_spinlock) {
    da20:	2400      	movs	r4, #0
	__asm__ volatile(
    da22:	f04f 0320 	mov.w	r3, #32
    da26:	f3ef 8611 	mrs	r6, BASEPRI
    da2a:	f383 8811 	msr	BASEPRI, r3
    da2e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
    da32:	483e      	ldr	r0, [pc, #248]	; (db2c <z_move_thread_to_end_of_prio_q+0x110>)
    da34:	f000 ff02 	bl	e83c <z_spin_lock_valid>
    da38:	b118      	cbz	r0, da42 <z_move_thread_to_end_of_prio_q+0x26>
	z_spin_lock_set_owner(l);
    da3a:	483c      	ldr	r0, [pc, #240]	; (db2c <z_move_thread_to_end_of_prio_q+0x110>)
    da3c:	f000 ff1e 	bl	e87c <z_spin_lock_set_owner>
	return k;
    da40:	e042      	b.n	dac8 <z_move_thread_to_end_of_prio_q+0xac>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
    da42:	4f3b      	ldr	r7, [pc, #236]	; (db30 <z_move_thread_to_end_of_prio_q+0x114>)
    da44:	234e      	movs	r3, #78	; 0x4e
    da46:	463a      	mov	r2, r7
    da48:	493a      	ldr	r1, [pc, #232]	; (db34 <z_move_thread_to_end_of_prio_q+0x118>)
    da4a:	483b      	ldr	r0, [pc, #236]	; (db38 <z_move_thread_to_end_of_prio_q+0x11c>)
    da4c:	f001 ff17 	bl	f87e <printk>
    da50:	483a      	ldr	r0, [pc, #232]	; (db3c <z_move_thread_to_end_of_prio_q+0x120>)
    da52:	f001 ff14 	bl	f87e <printk>
    da56:	214e      	movs	r1, #78	; 0x4e
    da58:	4638      	mov	r0, r7
    da5a:	f001 ff96 	bl	f98a <assert_post_action>
    da5e:	e7ec      	b.n	da3a <z_move_thread_to_end_of_prio_q+0x1e>
	__ASSERT_NO_MSG(!is_idle(thread));
    da60:	4c37      	ldr	r4, [pc, #220]	; (db40 <z_move_thread_to_end_of_prio_q+0x124>)
    da62:	f240 2376 	movw	r3, #630	; 0x276
    da66:	4622      	mov	r2, r4
    da68:	4936      	ldr	r1, [pc, #216]	; (db44 <z_move_thread_to_end_of_prio_q+0x128>)
    da6a:	4833      	ldr	r0, [pc, #204]	; (db38 <z_move_thread_to_end_of_prio_q+0x11c>)
    da6c:	f001 ff07 	bl	f87e <printk>
    da70:	f240 2176 	movw	r1, #630	; 0x276
    da74:	4620      	mov	r0, r4
    da76:	f001 ff88 	bl	f98a <assert_post_action>
    da7a:	e02f      	b.n	dadc <z_move_thread_to_end_of_prio_q+0xc0>
	node->prev = successor->prev;
    da7c:	6863      	ldr	r3, [r4, #4]
    da7e:	606b      	str	r3, [r5, #4]
	node->next = successor;
    da80:	602c      	str	r4, [r5, #0]
	successor->prev->next = node;
    da82:	6863      	ldr	r3, [r4, #4]
    da84:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    da86:	6065      	str	r5, [r4, #4]
    da88:	e009      	b.n	da9e <z_move_thread_to_end_of_prio_q+0x82>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    da8a:	2400      	movs	r4, #0
    da8c:	e02b      	b.n	dae6 <z_move_thread_to_end_of_prio_q+0xca>
	node->next = list;
    da8e:	4b2e      	ldr	r3, [pc, #184]	; (db48 <z_move_thread_to_end_of_prio_q+0x12c>)
    da90:	f103 0228 	add.w	r2, r3, #40	; 0x28
    da94:	602a      	str	r2, [r5, #0]
	node->prev = list->tail;
    da96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    da98:	606a      	str	r2, [r5, #4]
	list->tail->next = node;
    da9a:	6015      	str	r5, [r2, #0]
	list->tail = node;
    da9c:	62dd      	str	r5, [r3, #44]	; 0x2c
	thread->base.thread_state |= states;
    da9e:	7b6b      	ldrb	r3, [r5, #13]
    daa0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    daa4:	736b      	strb	r3, [r5, #13]
		update_cache(thread == _current);
    daa6:	4b28      	ldr	r3, [pc, #160]	; (db48 <z_move_thread_to_end_of_prio_q+0x12c>)
    daa8:	6898      	ldr	r0, [r3, #8]
    daaa:	42a8      	cmp	r0, r5
    daac:	bf14      	ite	ne
    daae:	2000      	movne	r0, #0
    dab0:	2001      	moveq	r0, #1
    dab2:	f7ff fdc7 	bl	d644 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
    dab6:	481d      	ldr	r0, [pc, #116]	; (db2c <z_move_thread_to_end_of_prio_q+0x110>)
    dab8:	f000 fed0 	bl	e85c <z_spin_unlock_valid>
    dabc:	b328      	cbz	r0, db0a <z_move_thread_to_end_of_prio_q+0xee>
	__asm__ volatile(
    dabe:	f386 8811 	msr	BASEPRI, r6
    dac2:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    dac6:	2401      	movs	r4, #1
    dac8:	2c00      	cmp	r4, #0
    daca:	d12d      	bne.n	db28 <z_move_thread_to_end_of_prio_q+0x10c>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
    dacc:	4629      	mov	r1, r5
    dace:	481f      	ldr	r0, [pc, #124]	; (db4c <z_move_thread_to_end_of_prio_q+0x130>)
    dad0:	f7ff fd28 	bl	d524 <z_priq_dumb_remove>
	return thread == _idle_thread;
    dad4:	4b1e      	ldr	r3, [pc, #120]	; (db50 <z_move_thread_to_end_of_prio_q+0x134>)
    dad6:	681b      	ldr	r3, [r3, #0]
	__ASSERT_NO_MSG(!is_idle(thread));
    dad8:	429d      	cmp	r5, r3
    dada:	d0c1      	beq.n	da60 <z_move_thread_to_end_of_prio_q+0x44>
	return list->head == list;
    dadc:	4b1a      	ldr	r3, [pc, #104]	; (db48 <z_move_thread_to_end_of_prio_q+0x12c>)
    dade:	f853 4f28 	ldr.w	r4, [r3, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    dae2:	429c      	cmp	r4, r3
    dae4:	d0d1      	beq.n	da8a <z_move_thread_to_end_of_prio_q+0x6e>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    dae6:	2c00      	cmp	r4, #0
    dae8:	d0d1      	beq.n	da8e <z_move_thread_to_end_of_prio_q+0x72>
		if (z_is_t1_higher_prio_than_t2(thread, t)) {
    daea:	4621      	mov	r1, r4
    daec:	4628      	mov	r0, r5
    daee:	f002 ffab 	bl	10a48 <z_is_t1_higher_prio_than_t2>
    daf2:	2800      	cmp	r0, #0
    daf4:	d1c2      	bne.n	da7c <z_move_thread_to_end_of_prio_q+0x60>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    daf6:	2c00      	cmp	r4, #0
    daf8:	d0c9      	beq.n	da8e <z_move_thread_to_end_of_prio_q+0x72>
	return (node == list->tail) ? NULL : node->next;
    dafa:	4b13      	ldr	r3, [pc, #76]	; (db48 <z_move_thread_to_end_of_prio_q+0x12c>)
    dafc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    dafe:	429c      	cmp	r4, r3
    db00:	d0c5      	beq.n	da8e <z_move_thread_to_end_of_prio_q+0x72>
    db02:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    db04:	2c00      	cmp	r4, #0
    db06:	d1ee      	bne.n	dae6 <z_move_thread_to_end_of_prio_q+0xca>
    db08:	e7c1      	b.n	da8e <z_move_thread_to_end_of_prio_q+0x72>
    db0a:	4c09      	ldr	r4, [pc, #36]	; (db30 <z_move_thread_to_end_of_prio_q+0x114>)
    db0c:	2361      	movs	r3, #97	; 0x61
    db0e:	4622      	mov	r2, r4
    db10:	4910      	ldr	r1, [pc, #64]	; (db54 <z_move_thread_to_end_of_prio_q+0x138>)
    db12:	4809      	ldr	r0, [pc, #36]	; (db38 <z_move_thread_to_end_of_prio_q+0x11c>)
    db14:	f001 feb3 	bl	f87e <printk>
    db18:	480f      	ldr	r0, [pc, #60]	; (db58 <z_move_thread_to_end_of_prio_q+0x13c>)
    db1a:	f001 feb0 	bl	f87e <printk>
    db1e:	2161      	movs	r1, #97	; 0x61
    db20:	4620      	mov	r0, r4
    db22:	f001 ff32 	bl	f98a <assert_post_action>
    db26:	e7ca      	b.n	dabe <z_move_thread_to_end_of_prio_q+0xa2>
}
    db28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    db2a:	bf00      	nop
    db2c:	20002728 	.word	0x20002728
    db30:	00012778 	.word	0x00012778
    db34:	00012790 	.word	0x00012790
    db38:	00010f8c 	.word	0x00010f8c
    db3c:	000127a8 	.word	0x000127a8
    db40:	000133b8 	.word	0x000133b8
    db44:	00013450 	.word	0x00013450
    db48:	200026f4 	.word	0x200026f4
    db4c:	2000271c 	.word	0x2000271c
    db50:	000131f8 	.word	0x000131f8
    db54:	000127c0 	.word	0x000127c0
    db58:	000127d8 	.word	0x000127d8

0000db5c <z_time_slice>:
{
    db5c:	b508      	push	{r3, lr}
	if (pending_current == _current) {
    db5e:	4b16      	ldr	r3, [pc, #88]	; (dbb8 <z_time_slice+0x5c>)
    db60:	689b      	ldr	r3, [r3, #8]
    db62:	4a16      	ldr	r2, [pc, #88]	; (dbbc <z_time_slice+0x60>)
    db64:	6812      	ldr	r2, [r2, #0]
    db66:	4293      	cmp	r3, r2
    db68:	d01c      	beq.n	dba4 <z_time_slice+0x48>
	pending_current = NULL;
    db6a:	4a14      	ldr	r2, [pc, #80]	; (dbbc <z_time_slice+0x60>)
    db6c:	2100      	movs	r1, #0
    db6e:	6011      	str	r1, [r2, #0]
	if (slice_time && sliceable(_current)) {
    db70:	4a13      	ldr	r2, [pc, #76]	; (dbc0 <z_time_slice+0x64>)
    db72:	6812      	ldr	r2, [r2, #0]
    db74:	b1c2      	cbz	r2, dba8 <z_time_slice+0x4c>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
    db76:	89da      	ldrh	r2, [r3, #14]
		&& !z_is_thread_timeout_active(t);
    db78:	2a7f      	cmp	r2, #127	; 0x7f
    db7a:	d815      	bhi.n	dba8 <z_time_slice+0x4c>
		&& !z_is_prio_higher(t->base.prio, slice_max_prio)
    db7c:	f993 100e 	ldrsb.w	r1, [r3, #14]
    db80:	4a10      	ldr	r2, [pc, #64]	; (dbc4 <z_time_slice+0x68>)
    db82:	6812      	ldr	r2, [r2, #0]
    db84:	4291      	cmp	r1, r2
    db86:	db0f      	blt.n	dba8 <z_time_slice+0x4c>
	return thread == _idle_thread;
    db88:	4a0f      	ldr	r2, [pc, #60]	; (dbc8 <z_time_slice+0x6c>)
    db8a:	6812      	ldr	r2, [r2, #0]
		&& !is_idle(t)
    db8c:	4293      	cmp	r3, r2
    db8e:	d00b      	beq.n	dba8 <z_time_slice+0x4c>
	return node->next != NULL;
    db90:	699a      	ldr	r2, [r3, #24]
		&& !z_is_thread_timeout_active(t);
    db92:	b94a      	cbnz	r2, dba8 <z_time_slice+0x4c>
		if (ticks >= _current_cpu->slice_ticks) {
    db94:	4a08      	ldr	r2, [pc, #32]	; (dbb8 <z_time_slice+0x5c>)
    db96:	6912      	ldr	r2, [r2, #16]
    db98:	4282      	cmp	r2, r0
    db9a:	dd06      	ble.n	dbaa <z_time_slice+0x4e>
			_current_cpu->slice_ticks -= ticks;
    db9c:	1a12      	subs	r2, r2, r0
    db9e:	4b06      	ldr	r3, [pc, #24]	; (dbb8 <z_time_slice+0x5c>)
    dba0:	611a      	str	r2, [r3, #16]
    dba2:	e001      	b.n	dba8 <z_time_slice+0x4c>
		reset_time_slice();
    dba4:	f7ff fae4 	bl	d170 <reset_time_slice>
}
    dba8:	bd08      	pop	{r3, pc}
			z_move_thread_to_end_of_prio_q(_current);
    dbaa:	4618      	mov	r0, r3
    dbac:	f7ff ff36 	bl	da1c <z_move_thread_to_end_of_prio_q>
			reset_time_slice();
    dbb0:	f7ff fade 	bl	d170 <reset_time_slice>
    dbb4:	e7f8      	b.n	dba8 <z_time_slice+0x4c>
    dbb6:	bf00      	nop
    dbb8:	200026f4 	.word	0x200026f4
    dbbc:	20002724 	.word	0x20002724
    dbc0:	20002730 	.word	0x20002730
    dbc4:	2000272c 	.word	0x2000272c
    dbc8:	000131f8 	.word	0x000131f8

0000dbcc <z_remove_thread_from_ready_q>:
{
    dbcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    dbce:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
    dbd0:	2500      	movs	r5, #0
	__asm__ volatile(
    dbd2:	f04f 0320 	mov.w	r3, #32
    dbd6:	f3ef 8611 	mrs	r6, BASEPRI
    dbda:	f383 8811 	msr	BASEPRI, r3
    dbde:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
    dbe2:	4823      	ldr	r0, [pc, #140]	; (dc70 <z_remove_thread_from_ready_q+0xa4>)
    dbe4:	f000 fe2a 	bl	e83c <z_spin_lock_valid>
    dbe8:	b118      	cbz	r0, dbf2 <z_remove_thread_from_ready_q+0x26>
	z_spin_lock_set_owner(l);
    dbea:	4821      	ldr	r0, [pc, #132]	; (dc70 <z_remove_thread_from_ready_q+0xa4>)
    dbec:	f000 fe46 	bl	e87c <z_spin_lock_set_owner>
	return k;
    dbf0:	e02a      	b.n	dc48 <z_remove_thread_from_ready_q+0x7c>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
    dbf2:	4f20      	ldr	r7, [pc, #128]	; (dc74 <z_remove_thread_from_ready_q+0xa8>)
    dbf4:	234e      	movs	r3, #78	; 0x4e
    dbf6:	463a      	mov	r2, r7
    dbf8:	491f      	ldr	r1, [pc, #124]	; (dc78 <z_remove_thread_from_ready_q+0xac>)
    dbfa:	4820      	ldr	r0, [pc, #128]	; (dc7c <z_remove_thread_from_ready_q+0xb0>)
    dbfc:	f001 fe3f 	bl	f87e <printk>
    dc00:	481f      	ldr	r0, [pc, #124]	; (dc80 <z_remove_thread_from_ready_q+0xb4>)
    dc02:	f001 fe3c 	bl	f87e <printk>
    dc06:	214e      	movs	r1, #78	; 0x4e
    dc08:	4638      	mov	r0, r7
    dc0a:	f001 febe 	bl	f98a <assert_post_action>
    dc0e:	e7ec      	b.n	dbea <z_remove_thread_from_ready_q+0x1e>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
    dc10:	4621      	mov	r1, r4
    dc12:	481c      	ldr	r0, [pc, #112]	; (dc84 <z_remove_thread_from_ready_q+0xb8>)
    dc14:	f7ff fc86 	bl	d524 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
    dc18:	7b63      	ldrb	r3, [r4, #13]
    dc1a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    dc1e:	7363      	strb	r3, [r4, #13]
    dc20:	e017      	b.n	dc52 <z_remove_thread_from_ready_q+0x86>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
    dc22:	4d14      	ldr	r5, [pc, #80]	; (dc74 <z_remove_thread_from_ready_q+0xa8>)
    dc24:	2361      	movs	r3, #97	; 0x61
    dc26:	462a      	mov	r2, r5
    dc28:	4917      	ldr	r1, [pc, #92]	; (dc88 <z_remove_thread_from_ready_q+0xbc>)
    dc2a:	4814      	ldr	r0, [pc, #80]	; (dc7c <z_remove_thread_from_ready_q+0xb0>)
    dc2c:	f001 fe27 	bl	f87e <printk>
    dc30:	4816      	ldr	r0, [pc, #88]	; (dc8c <z_remove_thread_from_ready_q+0xc0>)
    dc32:	f001 fe24 	bl	f87e <printk>
    dc36:	2161      	movs	r1, #97	; 0x61
    dc38:	4628      	mov	r0, r5
    dc3a:	f001 fea6 	bl	f98a <assert_post_action>
	__asm__ volatile(
    dc3e:	f386 8811 	msr	BASEPRI, r6
    dc42:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    dc46:	2501      	movs	r5, #1
    dc48:	b98d      	cbnz	r5, dc6e <z_remove_thread_from_ready_q+0xa2>
	return (thread->base.thread_state & state) != 0U;
    dc4a:	7b63      	ldrb	r3, [r4, #13]
		if (z_is_thread_queued(thread)) {
    dc4c:	f013 0f40 	tst.w	r3, #64	; 0x40
    dc50:	d1de      	bne.n	dc10 <z_remove_thread_from_ready_q+0x44>
		update_cache(thread == _current);
    dc52:	4b0f      	ldr	r3, [pc, #60]	; (dc90 <z_remove_thread_from_ready_q+0xc4>)
    dc54:	6898      	ldr	r0, [r3, #8]
    dc56:	42a0      	cmp	r0, r4
    dc58:	bf14      	ite	ne
    dc5a:	2000      	movne	r0, #0
    dc5c:	2001      	moveq	r0, #1
    dc5e:	f7ff fcf1 	bl	d644 <update_cache>
    dc62:	4803      	ldr	r0, [pc, #12]	; (dc70 <z_remove_thread_from_ready_q+0xa4>)
    dc64:	f000 fdfa 	bl	e85c <z_spin_unlock_valid>
    dc68:	2800      	cmp	r0, #0
    dc6a:	d1e8      	bne.n	dc3e <z_remove_thread_from_ready_q+0x72>
    dc6c:	e7d9      	b.n	dc22 <z_remove_thread_from_ready_q+0x56>
}
    dc6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    dc70:	20002728 	.word	0x20002728
    dc74:	00012778 	.word	0x00012778
    dc78:	00012790 	.word	0x00012790
    dc7c:	00010f8c 	.word	0x00010f8c
    dc80:	000127a8 	.word	0x000127a8
    dc84:	2000271c 	.word	0x2000271c
    dc88:	000127c0 	.word	0x000127c0
    dc8c:	000127d8 	.word	0x000127d8
    dc90:	200026f4 	.word	0x200026f4

0000dc94 <pend>:
{
    dc94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    dc96:	4605      	mov	r5, r0
    dc98:	460e      	mov	r6, r1
    dc9a:	4617      	mov	r7, r2
	z_remove_thread_from_ready_q(thread);
    dc9c:	f7ff ff96 	bl	dbcc <z_remove_thread_from_ready_q>
	thread->base.thread_state |= _THREAD_PENDING;
    dca0:	7b6b      	ldrb	r3, [r5, #13]
    dca2:	f043 0302 	orr.w	r3, r3, #2
    dca6:	736b      	strb	r3, [r5, #13]
	if (wait_q != NULL) {
    dca8:	b1ce      	cbz	r6, dcde <pend+0x4a>
		thread->base.pended_on = wait_q;
    dcaa:	60ae      	str	r6, [r5, #8]
	return thread == _idle_thread;
    dcac:	4b25      	ldr	r3, [pc, #148]	; (dd44 <pend+0xb0>)
    dcae:	681b      	ldr	r3, [r3, #0]
	__ASSERT_NO_MSG(!is_idle(thread));
    dcb0:	429d      	cmp	r5, r3
    dcb2:	d018      	beq.n	dce6 <pend+0x52>
	return list->head == list;
    dcb4:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    dcb6:	42a6      	cmp	r6, r4
    dcb8:	d02a      	beq.n	dd10 <pend+0x7c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    dcba:	b15c      	cbz	r4, dcd4 <pend+0x40>
		if (z_is_t1_higher_prio_than_t2(thread, t)) {
    dcbc:	4621      	mov	r1, r4
    dcbe:	4628      	mov	r0, r5
    dcc0:	f002 fec2 	bl	10a48 <z_is_t1_higher_prio_than_t2>
    dcc4:	b9e8      	cbnz	r0, dd02 <pend+0x6e>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    dcc6:	b12c      	cbz	r4, dcd4 <pend+0x40>
	return (node == list->tail) ? NULL : node->next;
    dcc8:	6873      	ldr	r3, [r6, #4]
    dcca:	429c      	cmp	r4, r3
    dccc:	d002      	beq.n	dcd4 <pend+0x40>
    dcce:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    dcd0:	2c00      	cmp	r4, #0
    dcd2:	d1f2      	bne.n	dcba <pend+0x26>
	node->next = list;
    dcd4:	602e      	str	r6, [r5, #0]
	node->prev = list->tail;
    dcd6:	6873      	ldr	r3, [r6, #4]
    dcd8:	606b      	str	r3, [r5, #4]
	list->tail->next = node;
    dcda:	601d      	str	r5, [r3, #0]
	list->tail = node;
    dcdc:	6075      	str	r5, [r6, #4]
	if (timeout != K_FOREVER) {
    dcde:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
    dce2:	d117      	bne.n	dd14 <pend+0x80>
}
    dce4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	__ASSERT_NO_MSG(!is_idle(thread));
    dce6:	4c18      	ldr	r4, [pc, #96]	; (dd48 <pend+0xb4>)
    dce8:	f240 2376 	movw	r3, #630	; 0x276
    dcec:	4622      	mov	r2, r4
    dcee:	4917      	ldr	r1, [pc, #92]	; (dd4c <pend+0xb8>)
    dcf0:	4817      	ldr	r0, [pc, #92]	; (dd50 <pend+0xbc>)
    dcf2:	f001 fdc4 	bl	f87e <printk>
    dcf6:	f240 2176 	movw	r1, #630	; 0x276
    dcfa:	4620      	mov	r0, r4
    dcfc:	f001 fe45 	bl	f98a <assert_post_action>
    dd00:	e7d8      	b.n	dcb4 <pend+0x20>
	node->prev = successor->prev;
    dd02:	6863      	ldr	r3, [r4, #4]
    dd04:	606b      	str	r3, [r5, #4]
	node->next = successor;
    dd06:	602c      	str	r4, [r5, #0]
	successor->prev->next = node;
    dd08:	6863      	ldr	r3, [r4, #4]
    dd0a:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    dd0c:	6065      	str	r5, [r4, #4]
    dd0e:	e7e6      	b.n	dcde <pend+0x4a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    dd10:	2400      	movs	r4, #0
    dd12:	e7d2      	b.n	dcba <pend+0x26>
    dd14:	17fb      	asrs	r3, r7, #31
    dd16:	03d9      	lsls	r1, r3, #15
    dd18:	ea41 4157 	orr.w	r1, r1, r7, lsr #17
    dd1c:	03f8      	lsls	r0, r7, #15
    dd1e:	4c0d      	ldr	r4, [pc, #52]	; (dd54 <pend+0xc0>)
    dd20:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
    dd24:	2300      	movs	r3, #0
    dd26:	1900      	adds	r0, r0, r4
    dd28:	f04f 0400 	mov.w	r4, #0
    dd2c:	eb44 0101 	adc.w	r1, r4, r1
    dd30:	f7f2 f9e6 	bl	100 <__aeabi_ldivmod>
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
    dd34:	1c42      	adds	r2, r0, #1
    dd36:	4908      	ldr	r1, [pc, #32]	; (dd58 <pend+0xc4>)
    dd38:	f105 0018 	add.w	r0, r5, #24
    dd3c:	f000 ff1e 	bl	eb7c <z_add_timeout>
}
    dd40:	e7d0      	b.n	dce4 <pend+0x50>
    dd42:	bf00      	nop
    dd44:	000131f8 	.word	0x000131f8
    dd48:	000133b8 	.word	0x000133b8
    dd4c:	00013450 	.word	0x00013450
    dd50:	00010f8c 	.word	0x00010f8c
    dd54:	0004ffff 	.word	0x0004ffff
    dd58:	0000d92d 	.word	0x0000d92d

0000dd5c <z_pend_curr_irqlock>:
{
    dd5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    dd5e:	4605      	mov	r5, r0
	pend(_current, wait_q, timeout);
    dd60:	4c28      	ldr	r4, [pc, #160]	; (de04 <z_pend_curr_irqlock+0xa8>)
    dd62:	68a0      	ldr	r0, [r4, #8]
    dd64:	f7ff ff96 	bl	dc94 <pend>
	pending_current = _current;
    dd68:	68a2      	ldr	r2, [r4, #8]
    dd6a:	4b27      	ldr	r3, [pc, #156]	; (de08 <z_pend_curr_irqlock+0xac>)
    dd6c:	601a      	str	r2, [r3, #0]
	ret = __swap(key);
    dd6e:	4628      	mov	r0, r5
    dd70:	f7fb f990 	bl	9094 <__swap>
    dd74:	4606      	mov	r6, r0
	LOCKED(&sched_spinlock) {
    dd76:	2400      	movs	r4, #0
	__asm__ volatile(
    dd78:	f04f 0320 	mov.w	r3, #32
    dd7c:	f3ef 8511 	mrs	r5, BASEPRI
    dd80:	f383 8811 	msr	BASEPRI, r3
    dd84:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
    dd88:	4820      	ldr	r0, [pc, #128]	; (de0c <z_pend_curr_irqlock+0xb0>)
    dd8a:	f000 fd57 	bl	e83c <z_spin_lock_valid>
    dd8e:	b118      	cbz	r0, dd98 <z_pend_curr_irqlock+0x3c>
	z_spin_lock_set_owner(l);
    dd90:	481e      	ldr	r0, [pc, #120]	; (de0c <z_pend_curr_irqlock+0xb0>)
    dd92:	f000 fd73 	bl	e87c <z_spin_lock_set_owner>
	return k;
    dd96:	e025      	b.n	dde4 <z_pend_curr_irqlock+0x88>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
    dd98:	4f1d      	ldr	r7, [pc, #116]	; (de10 <z_pend_curr_irqlock+0xb4>)
    dd9a:	234e      	movs	r3, #78	; 0x4e
    dd9c:	463a      	mov	r2, r7
    dd9e:	491d      	ldr	r1, [pc, #116]	; (de14 <z_pend_curr_irqlock+0xb8>)
    dda0:	481d      	ldr	r0, [pc, #116]	; (de18 <z_pend_curr_irqlock+0xbc>)
    dda2:	f001 fd6c 	bl	f87e <printk>
    dda6:	481d      	ldr	r0, [pc, #116]	; (de1c <z_pend_curr_irqlock+0xc0>)
    dda8:	f001 fd69 	bl	f87e <printk>
    ddac:	214e      	movs	r1, #78	; 0x4e
    ddae:	4638      	mov	r0, r7
    ddb0:	f001 fdeb 	bl	f98a <assert_post_action>
    ddb4:	e7ec      	b.n	dd90 <z_pend_curr_irqlock+0x34>
			pending_current = NULL;
    ddb6:	4b14      	ldr	r3, [pc, #80]	; (de08 <z_pend_curr_irqlock+0xac>)
    ddb8:	2200      	movs	r2, #0
    ddba:	601a      	str	r2, [r3, #0]
    ddbc:	e019      	b.n	ddf2 <z_pend_curr_irqlock+0x96>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
    ddbe:	4c14      	ldr	r4, [pc, #80]	; (de10 <z_pend_curr_irqlock+0xb4>)
    ddc0:	2361      	movs	r3, #97	; 0x61
    ddc2:	4622      	mov	r2, r4
    ddc4:	4916      	ldr	r1, [pc, #88]	; (de20 <z_pend_curr_irqlock+0xc4>)
    ddc6:	4814      	ldr	r0, [pc, #80]	; (de18 <z_pend_curr_irqlock+0xbc>)
    ddc8:	f001 fd59 	bl	f87e <printk>
    ddcc:	4815      	ldr	r0, [pc, #84]	; (de24 <z_pend_curr_irqlock+0xc8>)
    ddce:	f001 fd56 	bl	f87e <printk>
    ddd2:	2161      	movs	r1, #97	; 0x61
    ddd4:	4620      	mov	r0, r4
    ddd6:	f001 fdd8 	bl	f98a <assert_post_action>
	__asm__ volatile(
    ddda:	f385 8811 	msr	BASEPRI, r5
    ddde:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    dde2:	2401      	movs	r4, #1
    dde4:	b95c      	cbnz	r4, ddfe <z_pend_curr_irqlock+0xa2>
		if (pending_current == _current) {
    dde6:	4b07      	ldr	r3, [pc, #28]	; (de04 <z_pend_curr_irqlock+0xa8>)
    dde8:	689a      	ldr	r2, [r3, #8]
    ddea:	4b07      	ldr	r3, [pc, #28]	; (de08 <z_pend_curr_irqlock+0xac>)
    ddec:	681b      	ldr	r3, [r3, #0]
    ddee:	429a      	cmp	r2, r3
    ddf0:	d0e1      	beq.n	ddb6 <z_pend_curr_irqlock+0x5a>
    ddf2:	4806      	ldr	r0, [pc, #24]	; (de0c <z_pend_curr_irqlock+0xb0>)
    ddf4:	f000 fd32 	bl	e85c <z_spin_unlock_valid>
    ddf8:	2800      	cmp	r0, #0
    ddfa:	d1ee      	bne.n	ddda <z_pend_curr_irqlock+0x7e>
    ddfc:	e7df      	b.n	ddbe <z_pend_curr_irqlock+0x62>
}
    ddfe:	4630      	mov	r0, r6
    de00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    de02:	bf00      	nop
    de04:	200026f4 	.word	0x200026f4
    de08:	20002724 	.word	0x20002724
    de0c:	20002728 	.word	0x20002728
    de10:	00012778 	.word	0x00012778
    de14:	00012790 	.word	0x00012790
    de18:	00010f8c 	.word	0x00010f8c
    de1c:	000127a8 	.word	0x000127a8
    de20:	000127c0 	.word	0x000127c0
    de24:	000127d8 	.word	0x000127d8

0000de28 <z_pend_curr>:
{
    de28:	b538      	push	{r3, r4, r5, lr}
    de2a:	4605      	mov	r5, r0
    de2c:	460c      	mov	r4, r1
    de2e:	4611      	mov	r1, r2
	pending_current = _current;
    de30:	4a0e      	ldr	r2, [pc, #56]	; (de6c <z_pend_curr+0x44>)
    de32:	6890      	ldr	r0, [r2, #8]
    de34:	4a0e      	ldr	r2, [pc, #56]	; (de70 <z_pend_curr+0x48>)
    de36:	6010      	str	r0, [r2, #0]
	pend(_current, wait_q, timeout);
    de38:	461a      	mov	r2, r3
    de3a:	f7ff ff2b 	bl	dc94 <pend>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
    de3e:	4628      	mov	r0, r5
    de40:	f000 fd0c 	bl	e85c <z_spin_unlock_valid>
    de44:	b118      	cbz	r0, de4e <z_pend_curr+0x26>
    de46:	4620      	mov	r0, r4
    de48:	f7fb f924 	bl	9094 <__swap>
}
    de4c:	bd38      	pop	{r3, r4, r5, pc}
    de4e:	4d09      	ldr	r5, [pc, #36]	; (de74 <z_pend_curr+0x4c>)
    de50:	2378      	movs	r3, #120	; 0x78
    de52:	462a      	mov	r2, r5
    de54:	4908      	ldr	r1, [pc, #32]	; (de78 <z_pend_curr+0x50>)
    de56:	4809      	ldr	r0, [pc, #36]	; (de7c <z_pend_curr+0x54>)
    de58:	f001 fd11 	bl	f87e <printk>
    de5c:	4808      	ldr	r0, [pc, #32]	; (de80 <z_pend_curr+0x58>)
    de5e:	f001 fd0e 	bl	f87e <printk>
    de62:	2178      	movs	r1, #120	; 0x78
    de64:	4628      	mov	r0, r5
    de66:	f001 fd90 	bl	f98a <assert_post_action>
    de6a:	e7ec      	b.n	de46 <z_pend_curr+0x1e>
    de6c:	200026f4 	.word	0x200026f4
    de70:	20002724 	.word	0x20002724
    de74:	00012778 	.word	0x00012778
    de78:	000127c0 	.word	0x000127c0
    de7c:	00010f8c 	.word	0x00010f8c
    de80:	000127d8 	.word	0x000127d8

0000de84 <z_thread_priority_set>:
{
    de84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    de88:	4604      	mov	r4, r0
    de8a:	4688      	mov	r8, r1
	LOCKED(&sched_spinlock) {
    de8c:	2500      	movs	r5, #0
	__asm__ volatile(
    de8e:	f04f 0320 	mov.w	r3, #32
    de92:	f3ef 8611 	mrs	r6, BASEPRI
    de96:	f383 8811 	msr	BASEPRI, r3
    de9a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
    de9e:	484a      	ldr	r0, [pc, #296]	; (dfc8 <z_thread_priority_set+0x144>)
    dea0:	f000 fccc 	bl	e83c <z_spin_lock_valid>
    dea4:	b120      	cbz	r0, deb0 <z_thread_priority_set+0x2c>
	z_spin_lock_set_owner(l);
    dea6:	4848      	ldr	r0, [pc, #288]	; (dfc8 <z_thread_priority_set+0x144>)
    dea8:	f000 fce8 	bl	e87c <z_spin_lock_set_owner>
	bool need_sched = 0;
    deac:	2700      	movs	r7, #0
    deae:	e01d      	b.n	deec <z_thread_priority_set+0x68>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
    deb0:	4f46      	ldr	r7, [pc, #280]	; (dfcc <z_thread_priority_set+0x148>)
    deb2:	234e      	movs	r3, #78	; 0x4e
    deb4:	463a      	mov	r2, r7
    deb6:	4946      	ldr	r1, [pc, #280]	; (dfd0 <z_thread_priority_set+0x14c>)
    deb8:	4846      	ldr	r0, [pc, #280]	; (dfd4 <z_thread_priority_set+0x150>)
    deba:	f001 fce0 	bl	f87e <printk>
    debe:	4846      	ldr	r0, [pc, #280]	; (dfd8 <z_thread_priority_set+0x154>)
    dec0:	f001 fcdd 	bl	f87e <printk>
    dec4:	214e      	movs	r1, #78	; 0x4e
    dec6:	4638      	mov	r0, r7
    dec8:	f001 fd5f 	bl	f98a <assert_post_action>
    decc:	e7eb      	b.n	dea6 <z_thread_priority_set+0x22>
		if (need_sched) {
    dece:	f013 0701 	ands.w	r7, r3, #1
    ded2:	d117      	bne.n	df04 <z_thread_priority_set+0x80>
			thread->base.prio = prio;
    ded4:	f884 800e 	strb.w	r8, [r4, #14]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
    ded8:	483b      	ldr	r0, [pc, #236]	; (dfc8 <z_thread_priority_set+0x144>)
    deda:	f000 fcbf 	bl	e85c <z_spin_unlock_valid>
    dede:	2800      	cmp	r0, #0
    dee0:	d050      	beq.n	df84 <z_thread_priority_set+0x100>
	__asm__ volatile(
    dee2:	f386 8811 	msr	BASEPRI, r6
    dee6:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    deea:	2501      	movs	r5, #1
    deec:	462b      	mov	r3, r5
    deee:	2d00      	cmp	r5, #0
    def0:	d157      	bne.n	dfa2 <z_thread_priority_set+0x11e>
	u8_t state = thread->base.thread_state;
    def2:	7b62      	ldrb	r2, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    def4:	f012 0f1f 	tst.w	r2, #31
    def8:	d1e9      	bne.n	dece <z_thread_priority_set+0x4a>
	return node->next != NULL;
    defa:	69a2      	ldr	r2, [r4, #24]
    defc:	2a00      	cmp	r2, #0
    defe:	d1e6      	bne.n	dece <z_thread_priority_set+0x4a>
    df00:	2301      	movs	r3, #1
    df02:	e7e4      	b.n	dece <z_thread_priority_set+0x4a>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
    df04:	4621      	mov	r1, r4
    df06:	4835      	ldr	r0, [pc, #212]	; (dfdc <z_thread_priority_set+0x158>)
    df08:	f7ff fb0c 	bl	d524 <z_priq_dumb_remove>
			thread->base.prio = prio;
    df0c:	f884 800e 	strb.w	r8, [r4, #14]
	return thread == _idle_thread;
    df10:	4b33      	ldr	r3, [pc, #204]	; (dfe0 <z_thread_priority_set+0x15c>)
    df12:	681b      	ldr	r3, [r3, #0]
	__ASSERT_NO_MSG(!is_idle(thread));
    df14:	429c      	cmp	r4, r3
    df16:	d01e      	beq.n	df56 <z_thread_priority_set+0xd2>
	return list->head == list;
    df18:	4b32      	ldr	r3, [pc, #200]	; (dfe4 <z_thread_priority_set+0x160>)
    df1a:	f853 5f28 	ldr.w	r5, [r3, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    df1e:	429d      	cmp	r5, r3
    df20:	d02e      	beq.n	df80 <z_thread_priority_set+0xfc>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    df22:	b165      	cbz	r5, df3e <z_thread_priority_set+0xba>
		if (z_is_t1_higher_prio_than_t2(thread, t)) {
    df24:	4629      	mov	r1, r5
    df26:	4620      	mov	r0, r4
    df28:	f002 fd8e 	bl	10a48 <z_is_t1_higher_prio_than_t2>
    df2c:	bb08      	cbnz	r0, df72 <z_thread_priority_set+0xee>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    df2e:	b135      	cbz	r5, df3e <z_thread_priority_set+0xba>
	return (node == list->tail) ? NULL : node->next;
    df30:	4b2c      	ldr	r3, [pc, #176]	; (dfe4 <z_thread_priority_set+0x160>)
    df32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    df34:	429d      	cmp	r5, r3
    df36:	d002      	beq.n	df3e <z_thread_priority_set+0xba>
    df38:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    df3a:	2d00      	cmp	r5, #0
    df3c:	d1f1      	bne.n	df22 <z_thread_priority_set+0x9e>
	node->next = list;
    df3e:	4b29      	ldr	r3, [pc, #164]	; (dfe4 <z_thread_priority_set+0x160>)
    df40:	f103 0228 	add.w	r2, r3, #40	; 0x28
    df44:	6022      	str	r2, [r4, #0]
	node->prev = list->tail;
    df46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    df48:	6062      	str	r2, [r4, #4]
	list->tail->next = node;
    df4a:	6014      	str	r4, [r2, #0]
	list->tail = node;
    df4c:	62dc      	str	r4, [r3, #44]	; 0x2c
			update_cache(1);
    df4e:	2001      	movs	r0, #1
    df50:	f7ff fb78 	bl	d644 <update_cache>
    df54:	e7c0      	b.n	ded8 <z_thread_priority_set+0x54>
	__ASSERT_NO_MSG(!is_idle(thread));
    df56:	4d24      	ldr	r5, [pc, #144]	; (dfe8 <z_thread_priority_set+0x164>)
    df58:	f240 2376 	movw	r3, #630	; 0x276
    df5c:	462a      	mov	r2, r5
    df5e:	4923      	ldr	r1, [pc, #140]	; (dfec <z_thread_priority_set+0x168>)
    df60:	481c      	ldr	r0, [pc, #112]	; (dfd4 <z_thread_priority_set+0x150>)
    df62:	f001 fc8c 	bl	f87e <printk>
    df66:	f240 2176 	movw	r1, #630	; 0x276
    df6a:	4628      	mov	r0, r5
    df6c:	f001 fd0d 	bl	f98a <assert_post_action>
    df70:	e7d2      	b.n	df18 <z_thread_priority_set+0x94>
	node->prev = successor->prev;
    df72:	686b      	ldr	r3, [r5, #4]
    df74:	6063      	str	r3, [r4, #4]
	node->next = successor;
    df76:	6025      	str	r5, [r4, #0]
	successor->prev->next = node;
    df78:	686b      	ldr	r3, [r5, #4]
    df7a:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    df7c:	606c      	str	r4, [r5, #4]
    df7e:	e7e6      	b.n	df4e <z_thread_priority_set+0xca>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    df80:	2500      	movs	r5, #0
    df82:	e7ce      	b.n	df22 <z_thread_priority_set+0x9e>
    df84:	4d11      	ldr	r5, [pc, #68]	; (dfcc <z_thread_priority_set+0x148>)
    df86:	2361      	movs	r3, #97	; 0x61
    df88:	462a      	mov	r2, r5
    df8a:	4919      	ldr	r1, [pc, #100]	; (dff0 <z_thread_priority_set+0x16c>)
    df8c:	4811      	ldr	r0, [pc, #68]	; (dfd4 <z_thread_priority_set+0x150>)
    df8e:	f001 fc76 	bl	f87e <printk>
    df92:	4818      	ldr	r0, [pc, #96]	; (dff4 <z_thread_priority_set+0x170>)
    df94:	f001 fc73 	bl	f87e <printk>
    df98:	2161      	movs	r1, #97	; 0x61
    df9a:	4628      	mov	r0, r5
    df9c:	f001 fcf5 	bl	f98a <assert_post_action>
    dfa0:	e79f      	b.n	dee2 <z_thread_priority_set+0x5e>
	if (need_sched && _current->base.sched_locked == 0) {
    dfa2:	b11f      	cbz	r7, dfac <z_thread_priority_set+0x128>
    dfa4:	4b0f      	ldr	r3, [pc, #60]	; (dfe4 <z_thread_priority_set+0x160>)
    dfa6:	689b      	ldr	r3, [r3, #8]
    dfa8:	7bdb      	ldrb	r3, [r3, #15]
    dfaa:	b10b      	cbz	r3, dfb0 <z_thread_priority_set+0x12c>
}
    dfac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
    dfb0:	f04f 0320 	mov.w	r3, #32
    dfb4:	f3ef 8011 	mrs	r0, BASEPRI
    dfb8:	f383 8811 	msr	BASEPRI, r3
    dfbc:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(z_arch_irq_lock());
    dfc0:	f7ff f9fc 	bl	d3bc <z_reschedule_irqlock>
    dfc4:	e7f2      	b.n	dfac <z_thread_priority_set+0x128>
    dfc6:	bf00      	nop
    dfc8:	20002728 	.word	0x20002728
    dfcc:	00012778 	.word	0x00012778
    dfd0:	00012790 	.word	0x00012790
    dfd4:	00010f8c 	.word	0x00010f8c
    dfd8:	000127a8 	.word	0x000127a8
    dfdc:	2000271c 	.word	0x2000271c
    dfe0:	000131f8 	.word	0x000131f8
    dfe4:	200026f4 	.word	0x200026f4
    dfe8:	000133b8 	.word	0x000133b8
    dfec:	00013450 	.word	0x00013450
    dff0:	000127c0 	.word	0x000127c0
    dff4:	000127d8 	.word	0x000127d8

0000dff8 <z_unpend_first_thread>:
{
    dff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    dffa:	4607      	mov	r7, r0
	LOCKED(&sched_spinlock) {
    dffc:	2600      	movs	r6, #0
    dffe:	f04f 0320 	mov.w	r3, #32
    e002:	f3ef 8511 	mrs	r5, BASEPRI
    e006:	f383 8811 	msr	BASEPRI, r3
    e00a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
    e00e:	4842      	ldr	r0, [pc, #264]	; (e118 <z_unpend_first_thread+0x120>)
    e010:	f000 fc14 	bl	e83c <z_spin_lock_valid>
    e014:	b120      	cbz	r0, e020 <z_unpend_first_thread+0x28>
	z_spin_lock_set_owner(l);
    e016:	4840      	ldr	r0, [pc, #256]	; (e118 <z_unpend_first_thread+0x120>)
    e018:	f000 fc30 	bl	e87c <z_spin_lock_set_owner>
	struct k_thread *ret = NULL;
    e01c:	2400      	movs	r4, #0
    e01e:	e021      	b.n	e064 <z_unpend_first_thread+0x6c>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
    e020:	4c3e      	ldr	r4, [pc, #248]	; (e11c <z_unpend_first_thread+0x124>)
    e022:	234e      	movs	r3, #78	; 0x4e
    e024:	4622      	mov	r2, r4
    e026:	493e      	ldr	r1, [pc, #248]	; (e120 <z_unpend_first_thread+0x128>)
    e028:	483e      	ldr	r0, [pc, #248]	; (e124 <z_unpend_first_thread+0x12c>)
    e02a:	f001 fc28 	bl	f87e <printk>
    e02e:	483e      	ldr	r0, [pc, #248]	; (e128 <z_unpend_first_thread+0x130>)
    e030:	f001 fc25 	bl	f87e <printk>
    e034:	214e      	movs	r1, #78	; 0x4e
    e036:	4620      	mov	r0, r4
    e038:	f001 fca7 	bl	f98a <assert_post_action>
    e03c:	e7eb      	b.n	e016 <z_unpend_first_thread+0x1e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
    e03e:	4e37      	ldr	r6, [pc, #220]	; (e11c <z_unpend_first_thread+0x124>)
    e040:	2361      	movs	r3, #97	; 0x61
    e042:	4632      	mov	r2, r6
    e044:	4939      	ldr	r1, [pc, #228]	; (e12c <z_unpend_first_thread+0x134>)
    e046:	4837      	ldr	r0, [pc, #220]	; (e124 <z_unpend_first_thread+0x12c>)
    e048:	f001 fc19 	bl	f87e <printk>
    e04c:	4838      	ldr	r0, [pc, #224]	; (e130 <z_unpend_first_thread+0x138>)
    e04e:	f001 fc16 	bl	f87e <printk>
    e052:	2161      	movs	r1, #97	; 0x61
    e054:	4630      	mov	r0, r6
    e056:	f001 fc98 	bl	f98a <assert_post_action>
	__asm__ volatile(
    e05a:	f385 8811 	msr	BASEPRI, r5
    e05e:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    e062:	2601      	movs	r6, #1
    e064:	b94e      	cbnz	r6, e07a <z_unpend_first_thread+0x82>
		ret = _priq_wait_best(&wait_q->waitq);
    e066:	4638      	mov	r0, r7
    e068:	f002 fcf8 	bl	10a5c <z_priq_dumb_best>
    e06c:	4604      	mov	r4, r0
    e06e:	482a      	ldr	r0, [pc, #168]	; (e118 <z_unpend_first_thread+0x120>)
    e070:	f000 fbf4 	bl	e85c <z_spin_unlock_valid>
    e074:	2800      	cmp	r0, #0
    e076:	d1f0      	bne.n	e05a <z_unpend_first_thread+0x62>
    e078:	e7e1      	b.n	e03e <z_unpend_first_thread+0x46>

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
    e07a:	2c00      	cmp	r4, #0
    e07c:	d045      	beq.n	e10a <z_unpend_first_thread+0x112>
	LOCKED(&sched_spinlock) {
    e07e:	2500      	movs	r5, #0
	__asm__ volatile(
    e080:	f04f 0320 	mov.w	r3, #32
    e084:	f3ef 8611 	mrs	r6, BASEPRI
    e088:	f383 8811 	msr	BASEPRI, r3
    e08c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
    e090:	4821      	ldr	r0, [pc, #132]	; (e118 <z_unpend_first_thread+0x120>)
    e092:	f000 fbd3 	bl	e83c <z_spin_lock_valid>
    e096:	b118      	cbz	r0, e0a0 <z_unpend_first_thread+0xa8>
	z_spin_lock_set_owner(l);
    e098:	481f      	ldr	r0, [pc, #124]	; (e118 <z_unpend_first_thread+0x120>)
    e09a:	f000 fbef 	bl	e87c <z_spin_lock_set_owner>
	return k;
    e09e:	e021      	b.n	e0e4 <z_unpend_first_thread+0xec>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
    e0a0:	4f1e      	ldr	r7, [pc, #120]	; (e11c <z_unpend_first_thread+0x124>)
    e0a2:	234e      	movs	r3, #78	; 0x4e
    e0a4:	463a      	mov	r2, r7
    e0a6:	491e      	ldr	r1, [pc, #120]	; (e120 <z_unpend_first_thread+0x128>)
    e0a8:	481e      	ldr	r0, [pc, #120]	; (e124 <z_unpend_first_thread+0x12c>)
    e0aa:	f001 fbe8 	bl	f87e <printk>
    e0ae:	481e      	ldr	r0, [pc, #120]	; (e128 <z_unpend_first_thread+0x130>)
    e0b0:	f001 fbe5 	bl	f87e <printk>
    e0b4:	214e      	movs	r1, #78	; 0x4e
    e0b6:	4638      	mov	r0, r7
    e0b8:	f001 fc67 	bl	f98a <assert_post_action>
    e0bc:	e7ec      	b.n	e098 <z_unpend_first_thread+0xa0>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
    e0be:	4d17      	ldr	r5, [pc, #92]	; (e11c <z_unpend_first_thread+0x124>)
    e0c0:	2361      	movs	r3, #97	; 0x61
    e0c2:	462a      	mov	r2, r5
    e0c4:	4919      	ldr	r1, [pc, #100]	; (e12c <z_unpend_first_thread+0x134>)
    e0c6:	4817      	ldr	r0, [pc, #92]	; (e124 <z_unpend_first_thread+0x12c>)
    e0c8:	f001 fbd9 	bl	f87e <printk>
    e0cc:	4818      	ldr	r0, [pc, #96]	; (e130 <z_unpend_first_thread+0x138>)
    e0ce:	f001 fbd6 	bl	f87e <printk>
    e0d2:	2161      	movs	r1, #97	; 0x61
    e0d4:	4628      	mov	r0, r5
    e0d6:	f001 fc58 	bl	f98a <assert_post_action>
	__asm__ volatile(
    e0da:	f386 8811 	msr	BASEPRI, r6
    e0de:	f3bf 8f6f 	isb	sy
    e0e2:	2501      	movs	r5, #1
    e0e4:	b97d      	cbnz	r5, e106 <z_unpend_first_thread+0x10e>
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
    e0e6:	4620      	mov	r0, r4
    e0e8:	f7ff f828 	bl	d13c <pended_on>
    e0ec:	4621      	mov	r1, r4
    e0ee:	f7ff fa19 	bl	d524 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    e0f2:	7b63      	ldrb	r3, [r4, #13]
    e0f4:	f023 0302 	bic.w	r3, r3, #2
    e0f8:	7363      	strb	r3, [r4, #13]
    e0fa:	4807      	ldr	r0, [pc, #28]	; (e118 <z_unpend_first_thread+0x120>)
    e0fc:	f000 fbae 	bl	e85c <z_spin_unlock_valid>
    e100:	2800      	cmp	r0, #0
    e102:	d1ea      	bne.n	e0da <z_unpend_first_thread+0xe2>
    e104:	e7db      	b.n	e0be <z_unpend_first_thread+0xc6>
	thread->base.pended_on = NULL;
    e106:	2300      	movs	r3, #0
    e108:	60a3      	str	r3, [r4, #8]
	if (t != NULL) {
    e10a:	b11c      	cbz	r4, e114 <z_unpend_first_thread+0x11c>
	return z_abort_timeout(&thread->base.timeout);
    e10c:	f104 0018 	add.w	r0, r4, #24
    e110:	f000 fde2 	bl	ecd8 <z_abort_timeout>
}
    e114:	4620      	mov	r0, r4
    e116:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e118:	20002728 	.word	0x20002728
    e11c:	00012778 	.word	0x00012778
    e120:	00012790 	.word	0x00012790
    e124:	00010f8c 	.word	0x00010f8c
    e128:	000127a8 	.word	0x000127a8
    e12c:	000127c0 	.word	0x000127c0
    e130:	000127d8 	.word	0x000127d8

0000e134 <z_sched_init>:

	return need_sched;
}

void z_sched_init(void)
{
    e134:	b508      	push	{r3, lr}
	list->head = (sys_dnode_t *)list;
    e136:	4b05      	ldr	r3, [pc, #20]	; (e14c <z_sched_init+0x18>)
    e138:	f103 0228 	add.w	r2, r3, #40	; 0x28
    e13c:	629a      	str	r2, [r3, #40]	; 0x28
	list->tail = (sys_dnode_t *)list;
    e13e:	62da      	str	r2, [r3, #44]	; 0x2c
		sys_dlist_init(&_kernel.ready_q.runq.queues[i]);
	}
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    e140:	2100      	movs	r1, #0
    e142:	4608      	mov	r0, r1
    e144:	f7ff f826 	bl	d194 <k_sched_time_slice_set>
		CONFIG_TIMESLICE_PRIORITY);
#endif
}
    e148:	bd08      	pop	{r3, pc}
    e14a:	bf00      	nop
    e14c:	200026f4 	.word	0x200026f4

0000e150 <z_impl_k_yield>:
}
#endif
#endif

void z_impl_k_yield(void)
{
    e150:	b570      	push	{r4, r5, r6, lr}
    e152:	f3ef 8305 	mrs	r3, IPSR
    e156:	2b0d      	cmp	r3, #13
    e158:	d807      	bhi.n	e16a <z_impl_k_yield+0x1a>
    e15a:	b303      	cbz	r3, e19e <z_impl_k_yield+0x4e>
    e15c:	4b56      	ldr	r3, [pc, #344]	; (e2b8 <z_impl_k_yield+0x168>)
    e15e:	685b      	ldr	r3, [r3, #4]
    e160:	f413 6f00 	tst.w	r3, #2048	; 0x800
    e164:	d01d      	beq.n	e1a2 <z_impl_k_yield+0x52>
    e166:	2300      	movs	r3, #0
    e168:	e000      	b.n	e16c <z_impl_k_yield+0x1c>
    e16a:	2301      	movs	r3, #1
	__ASSERT(!z_is_in_isr(), "");
    e16c:	b9db      	cbnz	r3, e1a6 <z_impl_k_yield+0x56>

	if (!is_idle(_current)) {
    e16e:	4b53      	ldr	r3, [pc, #332]	; (e2bc <z_impl_k_yield+0x16c>)
    e170:	689a      	ldr	r2, [r3, #8]
	return thread == _idle_thread;
    e172:	4b53      	ldr	r3, [pc, #332]	; (e2c0 <z_impl_k_yield+0x170>)
    e174:	681b      	ldr	r3, [r3, #0]
	if (!is_idle(_current)) {
    e176:	429a      	cmp	r2, r3
    e178:	f000 8093 	beq.w	e2a2 <z_impl_k_yield+0x152>
		LOCKED(&sched_spinlock) {
    e17c:	2400      	movs	r4, #0
	__asm__ volatile(
    e17e:	f04f 0320 	mov.w	r3, #32
    e182:	f3ef 8611 	mrs	r6, BASEPRI
    e186:	f383 8811 	msr	BASEPRI, r3
    e18a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
    e18e:	484d      	ldr	r0, [pc, #308]	; (e2c4 <z_impl_k_yield+0x174>)
    e190:	f000 fb54 	bl	e83c <z_spin_lock_valid>
    e194:	b1c0      	cbz	r0, e1c8 <z_impl_k_yield+0x78>
	z_spin_lock_set_owner(l);
    e196:	484b      	ldr	r0, [pc, #300]	; (e2c4 <z_impl_k_yield+0x174>)
    e198:	f000 fb70 	bl	e87c <z_spin_lock_set_owner>
	return k;
    e19c:	e04e      	b.n	e23c <z_impl_k_yield+0xec>
    e19e:	2300      	movs	r3, #0
    e1a0:	e7e4      	b.n	e16c <z_impl_k_yield+0x1c>
    e1a2:	2301      	movs	r3, #1
    e1a4:	e7e2      	b.n	e16c <z_impl_k_yield+0x1c>
	__ASSERT(!z_is_in_isr(), "");
    e1a6:	4c48      	ldr	r4, [pc, #288]	; (e2c8 <z_impl_k_yield+0x178>)
    e1a8:	f240 337e 	movw	r3, #894	; 0x37e
    e1ac:	4622      	mov	r2, r4
    e1ae:	4947      	ldr	r1, [pc, #284]	; (e2cc <z_impl_k_yield+0x17c>)
    e1b0:	4847      	ldr	r0, [pc, #284]	; (e2d0 <z_impl_k_yield+0x180>)
    e1b2:	f001 fb64 	bl	f87e <printk>
    e1b6:	4847      	ldr	r0, [pc, #284]	; (e2d4 <z_impl_k_yield+0x184>)
    e1b8:	f001 fb61 	bl	f87e <printk>
    e1bc:	f240 317e 	movw	r1, #894	; 0x37e
    e1c0:	4620      	mov	r0, r4
    e1c2:	f001 fbe2 	bl	f98a <assert_post_action>
    e1c6:	e7d2      	b.n	e16e <z_impl_k_yield+0x1e>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
    e1c8:	4d43      	ldr	r5, [pc, #268]	; (e2d8 <z_impl_k_yield+0x188>)
    e1ca:	234e      	movs	r3, #78	; 0x4e
    e1cc:	462a      	mov	r2, r5
    e1ce:	4943      	ldr	r1, [pc, #268]	; (e2dc <z_impl_k_yield+0x18c>)
    e1d0:	483f      	ldr	r0, [pc, #252]	; (e2d0 <z_impl_k_yield+0x180>)
    e1d2:	f001 fb54 	bl	f87e <printk>
    e1d6:	4842      	ldr	r0, [pc, #264]	; (e2e0 <z_impl_k_yield+0x190>)
    e1d8:	f001 fb51 	bl	f87e <printk>
    e1dc:	214e      	movs	r1, #78	; 0x4e
    e1de:	4628      	mov	r0, r5
    e1e0:	f001 fbd3 	bl	f98a <assert_post_action>
    e1e4:	e7d7      	b.n	e196 <z_impl_k_yield+0x46>
	__ASSERT_NO_MSG(!is_idle(thread));
    e1e6:	4c38      	ldr	r4, [pc, #224]	; (e2c8 <z_impl_k_yield+0x178>)
    e1e8:	f240 2376 	movw	r3, #630	; 0x276
    e1ec:	4622      	mov	r2, r4
    e1ee:	493d      	ldr	r1, [pc, #244]	; (e2e4 <z_impl_k_yield+0x194>)
    e1f0:	4837      	ldr	r0, [pc, #220]	; (e2d0 <z_impl_k_yield+0x180>)
    e1f2:	f001 fb44 	bl	f87e <printk>
    e1f6:	f240 2176 	movw	r1, #630	; 0x276
    e1fa:	4620      	mov	r0, r4
    e1fc:	f001 fbc5 	bl	f98a <assert_post_action>
    e200:	e029      	b.n	e256 <z_impl_k_yield+0x106>
	node->prev = successor->prev;
    e202:	6863      	ldr	r3, [r4, #4]
    e204:	606b      	str	r3, [r5, #4]
	node->next = successor;
    e206:	602c      	str	r4, [r5, #0]
	successor->prev->next = node;
    e208:	6863      	ldr	r3, [r4, #4]
    e20a:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    e20c:	6065      	str	r5, [r4, #4]
    e20e:	e009      	b.n	e224 <z_impl_k_yield+0xd4>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    e210:	2400      	movs	r4, #0
    e212:	e025      	b.n	e260 <z_impl_k_yield+0x110>
	node->next = list;
    e214:	4b29      	ldr	r3, [pc, #164]	; (e2bc <z_impl_k_yield+0x16c>)
    e216:	f103 0228 	add.w	r2, r3, #40	; 0x28
    e21a:	602a      	str	r2, [r5, #0]
	node->prev = list->tail;
    e21c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    e21e:	606a      	str	r2, [r5, #4]
	list->tail->next = node;
    e220:	6015      	str	r5, [r2, #0]
	list->tail = node;
    e222:	62dd      	str	r5, [r3, #44]	; 0x2c
				_priq_run_remove(&_kernel.ready_q.runq,
						 _current);
				_priq_run_add(&_kernel.ready_q.runq,
					      _current);
			}
			update_cache(1);
    e224:	2001      	movs	r0, #1
    e226:	f7ff fa0d 	bl	d644 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
    e22a:	4826      	ldr	r0, [pc, #152]	; (e2c4 <z_impl_k_yield+0x174>)
    e22c:	f000 fb16 	bl	e85c <z_spin_unlock_valid>
    e230:	b340      	cbz	r0, e284 <z_impl_k_yield+0x134>
	__asm__ volatile(
    e232:	f386 8811 	msr	BASEPRI, r6
    e236:	f3bf 8f6f 	isb	sy
		LOCKED(&sched_spinlock) {
    e23a:	2401      	movs	r4, #1
    e23c:	2c00      	cmp	r4, #0
    e23e:	d130      	bne.n	e2a2 <z_impl_k_yield+0x152>
				_priq_run_remove(&_kernel.ready_q.runq,
    e240:	4c1e      	ldr	r4, [pc, #120]	; (e2bc <z_impl_k_yield+0x16c>)
    e242:	68a1      	ldr	r1, [r4, #8]
    e244:	f104 0028 	add.w	r0, r4, #40	; 0x28
    e248:	f7ff f96c 	bl	d524 <z_priq_dumb_remove>
				_priq_run_add(&_kernel.ready_q.runq,
    e24c:	68a5      	ldr	r5, [r4, #8]
	return thread == _idle_thread;
    e24e:	4b1c      	ldr	r3, [pc, #112]	; (e2c0 <z_impl_k_yield+0x170>)
    e250:	681b      	ldr	r3, [r3, #0]
	__ASSERT_NO_MSG(!is_idle(thread));
    e252:	429d      	cmp	r5, r3
    e254:	d0c7      	beq.n	e1e6 <z_impl_k_yield+0x96>
	return list->head == list;
    e256:	4b19      	ldr	r3, [pc, #100]	; (e2bc <z_impl_k_yield+0x16c>)
    e258:	f853 4f28 	ldr.w	r4, [r3, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    e25c:	429c      	cmp	r4, r3
    e25e:	d0d7      	beq.n	e210 <z_impl_k_yield+0xc0>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    e260:	2c00      	cmp	r4, #0
    e262:	d0d7      	beq.n	e214 <z_impl_k_yield+0xc4>
		if (z_is_t1_higher_prio_than_t2(thread, t)) {
    e264:	4621      	mov	r1, r4
    e266:	4628      	mov	r0, r5
    e268:	f002 fbee 	bl	10a48 <z_is_t1_higher_prio_than_t2>
    e26c:	2800      	cmp	r0, #0
    e26e:	d1c8      	bne.n	e202 <z_impl_k_yield+0xb2>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    e270:	2c00      	cmp	r4, #0
    e272:	d0cf      	beq.n	e214 <z_impl_k_yield+0xc4>
	return (node == list->tail) ? NULL : node->next;
    e274:	4b11      	ldr	r3, [pc, #68]	; (e2bc <z_impl_k_yield+0x16c>)
    e276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    e278:	429c      	cmp	r4, r3
    e27a:	d0cb      	beq.n	e214 <z_impl_k_yield+0xc4>
    e27c:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    e27e:	2c00      	cmp	r4, #0
    e280:	d1ee      	bne.n	e260 <z_impl_k_yield+0x110>
    e282:	e7c7      	b.n	e214 <z_impl_k_yield+0xc4>
    e284:	4c14      	ldr	r4, [pc, #80]	; (e2d8 <z_impl_k_yield+0x188>)
    e286:	2361      	movs	r3, #97	; 0x61
    e288:	4622      	mov	r2, r4
    e28a:	4917      	ldr	r1, [pc, #92]	; (e2e8 <z_impl_k_yield+0x198>)
    e28c:	4810      	ldr	r0, [pc, #64]	; (e2d0 <z_impl_k_yield+0x180>)
    e28e:	f001 faf6 	bl	f87e <printk>
    e292:	4816      	ldr	r0, [pc, #88]	; (e2ec <z_impl_k_yield+0x19c>)
    e294:	f001 faf3 	bl	f87e <printk>
    e298:	2161      	movs	r1, #97	; 0x61
    e29a:	4620      	mov	r0, r4
    e29c:	f001 fb75 	bl	f98a <assert_post_action>
    e2a0:	e7c7      	b.n	e232 <z_impl_k_yield+0xe2>
	__asm__ volatile(
    e2a2:	f04f 0320 	mov.w	r3, #32
    e2a6:	f3ef 8011 	mrs	r0, BASEPRI
    e2aa:	f383 8811 	msr	BASEPRI, r3
    e2ae:	f3bf 8f6f 	isb	sy
    e2b2:	f7fa feef 	bl	9094 <__swap>
		}
	}
	z_swap_unlocked();
}
    e2b6:	bd70      	pop	{r4, r5, r6, pc}
    e2b8:	e000ed00 	.word	0xe000ed00
    e2bc:	200026f4 	.word	0x200026f4
    e2c0:	000131f8 	.word	0x000131f8
    e2c4:	20002728 	.word	0x20002728
    e2c8:	000133b8 	.word	0x000133b8
    e2cc:	0001330c 	.word	0x0001330c
    e2d0:	00010f8c 	.word	0x00010f8c
    e2d4:	000111e0 	.word	0x000111e0
    e2d8:	00012778 	.word	0x00012778
    e2dc:	00012790 	.word	0x00012790
    e2e0:	000127a8 	.word	0x000127a8
    e2e4:	00013450 	.word	0x00013450
    e2e8:	000127c0 	.word	0x000127c0
    e2ec:	000127d8 	.word	0x000127d8

0000e2f0 <z_impl_k_sleep>:
#ifdef CONFIG_USERSPACE
Z_SYSCALL_HANDLER0_SIMPLE_VOID(k_yield);
#endif

s32_t z_impl_k_sleep(s32_t duration)
{
    e2f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    e2f2:	b083      	sub	sp, #12
    e2f4:	4604      	mov	r4, r0
    e2f6:	f3ef 8305 	mrs	r3, IPSR
    e2fa:	2b0d      	cmp	r3, #13
    e2fc:	d808      	bhi.n	e310 <z_impl_k_sleep+0x20>
    e2fe:	2b00      	cmp	r3, #0
    e300:	d05b      	beq.n	e3ba <z_impl_k_sleep+0xca>
    e302:	4b68      	ldr	r3, [pc, #416]	; (e4a4 <z_impl_k_sleep+0x1b4>)
    e304:	685b      	ldr	r3, [r3, #4]
    e306:	f413 6f00 	tst.w	r3, #2048	; 0x800
    e30a:	d058      	beq.n	e3be <z_impl_k_sleep+0xce>
    e30c:	2300      	movs	r3, #0
    e30e:	e000      	b.n	e312 <z_impl_k_sleep+0x22>
    e310:	2301      	movs	r3, #1
#ifdef CONFIG_MULTITHREADING
	u32_t expected_wakeup_time;
	s32_t ticks;

	__ASSERT(!z_is_in_isr(), "");
    e312:	2b00      	cmp	r3, #0
    e314:	d155      	bne.n	e3c2 <z_impl_k_sleep+0xd2>
	__ASSERT(duration != K_FOREVER, "");
    e316:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
    e31a:	d063      	beq.n	e3e4 <z_impl_k_sleep+0xf4>

	K_DEBUG("thread %p for %d ns\n", _current, duration);

	/* wait of 0 ms is treated as a 'yield' */
	if (duration == 0) {
    e31c:	2c00      	cmp	r4, #0
    e31e:	d072      	beq.n	e406 <z_impl_k_sleep+0x116>
    e320:	17e3      	asrs	r3, r4, #31
    e322:	03d9      	lsls	r1, r3, #15
    e324:	ea41 4154 	orr.w	r1, r1, r4, lsr #17
    e328:	03e0      	lsls	r0, r4, #15
    e32a:	4c5f      	ldr	r4, [pc, #380]	; (e4a8 <z_impl_k_sleep+0x1b8>)
    e32c:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
    e330:	2300      	movs	r3, #0
    e332:	1900      	adds	r0, r0, r4
    e334:	f04f 0400 	mov.w	r4, #0
    e338:	eb44 0101 	adc.w	r1, r4, r1
    e33c:	f7f1 fee0 	bl	100 <__aeabi_ldivmod>
		k_yield();
		return 0;
	}

	ticks = _TICK_ALIGN + z_ms_to_ticks(duration);
    e340:	1c46      	adds	r6, r0, #1
	expected_wakeup_time = ticks + z_tick_get_32();
    e342:	f002 fc18 	bl	10b76 <z_tick_get_32>
    e346:	1984      	adds	r4, r0, r6

	/* Spinlock purely for local interrupt locking to prevent us
	 * from being interrupted while _current is in an intermediate
	 * state.  Should unify this implementation with pend().
	 */
	struct k_spinlock local_lock = {};
    e348:	2300      	movs	r3, #0
    e34a:	9301      	str	r3, [sp, #4]
    e34c:	f04f 0320 	mov.w	r3, #32
    e350:	f3ef 8711 	mrs	r7, BASEPRI
    e354:	f383 8811 	msr	BASEPRI, r3
    e358:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
    e35c:	a801      	add	r0, sp, #4
    e35e:	f000 fa6d 	bl	e83c <z_spin_lock_valid>
    e362:	2800      	cmp	r0, #0
    e364:	d053      	beq.n	e40e <z_impl_k_sleep+0x11e>
	z_spin_lock_set_owner(l);
    e366:	a801      	add	r0, sp, #4
    e368:	f000 fa88 	bl	e87c <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&local_lock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
    e36c:	4d4f      	ldr	r5, [pc, #316]	; (e4ac <z_impl_k_sleep+0x1bc>)
    e36e:	68a8      	ldr	r0, [r5, #8]
    e370:	4b4f      	ldr	r3, [pc, #316]	; (e4b0 <z_impl_k_sleep+0x1c0>)
    e372:	6018      	str	r0, [r3, #0]
#endif
	z_remove_thread_from_ready_q(_current);
    e374:	f7ff fc2a 	bl	dbcc <z_remove_thread_from_ready_q>
	z_add_thread_timeout(_current, ticks);
    e378:	68a8      	ldr	r0, [r5, #8]
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
    e37a:	4632      	mov	r2, r6
    e37c:	494d      	ldr	r1, [pc, #308]	; (e4b4 <z_impl_k_sleep+0x1c4>)
    e37e:	3018      	adds	r0, #24
    e380:	f000 fbfc 	bl	eb7c <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    e384:	68aa      	ldr	r2, [r5, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
    e386:	7b53      	ldrb	r3, [r2, #13]
    e388:	f043 0310 	orr.w	r3, r3, #16
    e38c:	7353      	strb	r3, [r2, #13]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
    e38e:	a801      	add	r0, sp, #4
    e390:	f000 fa64 	bl	e85c <z_spin_unlock_valid>
    e394:	2800      	cmp	r0, #0
    e396:	d049      	beq.n	e42c <z_impl_k_sleep+0x13c>
    e398:	4638      	mov	r0, r7
    e39a:	f7fa fe7b 	bl	9094 <__swap>

	(void)z_swap(&local_lock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
    e39e:	4b43      	ldr	r3, [pc, #268]	; (e4ac <z_impl_k_sleep+0x1bc>)
    e3a0:	689b      	ldr	r3, [r3, #8]
	return (thread->base.thread_state & state) != 0U;
    e3a2:	7b5b      	ldrb	r3, [r3, #13]
    e3a4:	f013 0f10 	tst.w	r3, #16
    e3a8:	d14f      	bne.n	e44a <z_impl_k_sleep+0x15a>

	ticks = expected_wakeup_time - z_tick_get_32();
    e3aa:	f002 fbe4 	bl	10b76 <z_tick_get_32>
    e3ae:	1a20      	subs	r0, r4, r0
	if (ticks > 0) {
    e3b0:	2800      	cmp	r0, #0
    e3b2:	dc5b      	bgt.n	e46c <z_impl_k_sleep+0x17c>
		return __ticks_to_ms(ticks);
	}
#endif

	return 0;
    e3b4:	2000      	movs	r0, #0
}
    e3b6:	b003      	add	sp, #12
    e3b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e3ba:	2300      	movs	r3, #0
    e3bc:	e7a9      	b.n	e312 <z_impl_k_sleep+0x22>
    e3be:	2301      	movs	r3, #1
    e3c0:	e7a7      	b.n	e312 <z_impl_k_sleep+0x22>
	__ASSERT(!z_is_in_isr(), "");
    e3c2:	4d3d      	ldr	r5, [pc, #244]	; (e4b8 <z_impl_k_sleep+0x1c8>)
    e3c4:	f240 3399 	movw	r3, #921	; 0x399
    e3c8:	462a      	mov	r2, r5
    e3ca:	493c      	ldr	r1, [pc, #240]	; (e4bc <z_impl_k_sleep+0x1cc>)
    e3cc:	483c      	ldr	r0, [pc, #240]	; (e4c0 <z_impl_k_sleep+0x1d0>)
    e3ce:	f001 fa56 	bl	f87e <printk>
    e3d2:	483c      	ldr	r0, [pc, #240]	; (e4c4 <z_impl_k_sleep+0x1d4>)
    e3d4:	f001 fa53 	bl	f87e <printk>
    e3d8:	f240 3199 	movw	r1, #921	; 0x399
    e3dc:	4628      	mov	r0, r5
    e3de:	f001 fad4 	bl	f98a <assert_post_action>
    e3e2:	e798      	b.n	e316 <z_impl_k_sleep+0x26>
	__ASSERT(duration != K_FOREVER, "");
    e3e4:	4d34      	ldr	r5, [pc, #208]	; (e4b8 <z_impl_k_sleep+0x1c8>)
    e3e6:	f240 339a 	movw	r3, #922	; 0x39a
    e3ea:	462a      	mov	r2, r5
    e3ec:	4936      	ldr	r1, [pc, #216]	; (e4c8 <z_impl_k_sleep+0x1d8>)
    e3ee:	4834      	ldr	r0, [pc, #208]	; (e4c0 <z_impl_k_sleep+0x1d0>)
    e3f0:	f001 fa45 	bl	f87e <printk>
    e3f4:	4833      	ldr	r0, [pc, #204]	; (e4c4 <z_impl_k_sleep+0x1d4>)
    e3f6:	f001 fa42 	bl	f87e <printk>
    e3fa:	f240 319a 	movw	r1, #922	; 0x39a
    e3fe:	4628      	mov	r0, r5
    e400:	f001 fac3 	bl	f98a <assert_post_action>
    e404:	e78a      	b.n	e31c <z_impl_k_sleep+0x2c>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield)
    e406:	f7ff fea3 	bl	e150 <z_impl_k_yield>
		return 0;
    e40a:	4620      	mov	r0, r4
    e40c:	e7d3      	b.n	e3b6 <z_impl_k_sleep+0xc6>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
    e40e:	4d2f      	ldr	r5, [pc, #188]	; (e4cc <z_impl_k_sleep+0x1dc>)
    e410:	234e      	movs	r3, #78	; 0x4e
    e412:	462a      	mov	r2, r5
    e414:	492e      	ldr	r1, [pc, #184]	; (e4d0 <z_impl_k_sleep+0x1e0>)
    e416:	482a      	ldr	r0, [pc, #168]	; (e4c0 <z_impl_k_sleep+0x1d0>)
    e418:	f001 fa31 	bl	f87e <printk>
    e41c:	482d      	ldr	r0, [pc, #180]	; (e4d4 <z_impl_k_sleep+0x1e4>)
    e41e:	f001 fa2e 	bl	f87e <printk>
    e422:	214e      	movs	r1, #78	; 0x4e
    e424:	4628      	mov	r0, r5
    e426:	f001 fab0 	bl	f98a <assert_post_action>
    e42a:	e79c      	b.n	e366 <z_impl_k_sleep+0x76>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
    e42c:	4d27      	ldr	r5, [pc, #156]	; (e4cc <z_impl_k_sleep+0x1dc>)
    e42e:	2378      	movs	r3, #120	; 0x78
    e430:	462a      	mov	r2, r5
    e432:	4929      	ldr	r1, [pc, #164]	; (e4d8 <z_impl_k_sleep+0x1e8>)
    e434:	4822      	ldr	r0, [pc, #136]	; (e4c0 <z_impl_k_sleep+0x1d0>)
    e436:	f001 fa22 	bl	f87e <printk>
    e43a:	4828      	ldr	r0, [pc, #160]	; (e4dc <z_impl_k_sleep+0x1ec>)
    e43c:	f001 fa1f 	bl	f87e <printk>
    e440:	2178      	movs	r1, #120	; 0x78
    e442:	4628      	mov	r0, r5
    e444:	f001 faa1 	bl	f98a <assert_post_action>
    e448:	e7a6      	b.n	e398 <z_impl_k_sleep+0xa8>
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
    e44a:	4d1b      	ldr	r5, [pc, #108]	; (e4b8 <z_impl_k_sleep+0x1c8>)
    e44c:	f240 33b7 	movw	r3, #951	; 0x3b7
    e450:	462a      	mov	r2, r5
    e452:	4923      	ldr	r1, [pc, #140]	; (e4e0 <z_impl_k_sleep+0x1f0>)
    e454:	481a      	ldr	r0, [pc, #104]	; (e4c0 <z_impl_k_sleep+0x1d0>)
    e456:	f001 fa12 	bl	f87e <printk>
    e45a:	481a      	ldr	r0, [pc, #104]	; (e4c4 <z_impl_k_sleep+0x1d4>)
    e45c:	f001 fa0f 	bl	f87e <printk>
    e460:	f240 31b7 	movw	r1, #951	; 0x3b7
    e464:	4628      	mov	r0, r5
    e466:	f001 fa90 	bl	f98a <assert_post_action>
    e46a:	e79e      	b.n	e3aa <z_impl_k_sleep+0xba>
{
#ifdef CONFIG_SYS_CLOCK_EXISTS

#ifdef _NEED_PRECISE_TICK_MS_CONVERSION
	/* use 64-bit math to keep precision */
	return (u64_t)ticks * MSEC_PER_SEC / (u64_t)CONFIG_SYS_CLOCK_TICKS_PER_SEC;
    e46c:	4604      	mov	r4, r0
    e46e:	17c5      	asrs	r5, r0, #31
    e470:	016a      	lsls	r2, r5, #5
    e472:	0143      	lsls	r3, r0, #5
    e474:	ea42 61d0 	orr.w	r1, r2, r0, lsr #27
    e478:	1a18      	subs	r0, r3, r0
    e47a:	eb61 0105 	sbc.w	r1, r1, r5
    e47e:	008b      	lsls	r3, r1, #2
    e480:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
    e484:	0082      	lsls	r2, r0, #2
    e486:	4619      	mov	r1, r3
    e488:	1910      	adds	r0, r2, r4
    e48a:	eb45 0101 	adc.w	r1, r5, r1
    e48e:	00cb      	lsls	r3, r1, #3
    e490:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
    e494:	00c2      	lsls	r2, r0, #3
    e496:	4610      	mov	r0, r2
    e498:	4619      	mov	r1, r3
    e49a:	2264      	movs	r2, #100	; 0x64
    e49c:	2300      	movs	r3, #0
    e49e:	f7f1 fe7f 	bl	1a0 <__aeabi_uldivmod>
		return __ticks_to_ms(ticks);
    e4a2:	e788      	b.n	e3b6 <z_impl_k_sleep+0xc6>
    e4a4:	e000ed00 	.word	0xe000ed00
    e4a8:	0004ffff 	.word	0x0004ffff
    e4ac:	200026f4 	.word	0x200026f4
    e4b0:	20002724 	.word	0x20002724
    e4b4:	0000d92d 	.word	0x0000d92d
    e4b8:	000133b8 	.word	0x000133b8
    e4bc:	0001330c 	.word	0x0001330c
    e4c0:	00010f8c 	.word	0x00010f8c
    e4c4:	000111e0 	.word	0x000111e0
    e4c8:	00013404 	.word	0x00013404
    e4cc:	00012778 	.word	0x00012778
    e4d0:	00012790 	.word	0x00012790
    e4d4:	000127a8 	.word	0x000127a8
    e4d8:	000127c0 	.word	0x000127c0
    e4dc:	000127d8 	.word	0x000127d8
    e4e0:	00013418 	.word	0x00013418

0000e4e4 <z_impl_k_wakeup>:
	return (thread->base.thread_state & _THREAD_PENDING) != 0U;
    e4e4:	7b43      	ldrb	r3, [r0, #13]
}
#endif

void z_impl_k_wakeup(k_tid_t thread)
{
	if (z_is_thread_pending(thread)) {
    e4e6:	f013 0f02 	tst.w	r3, #2
    e4ea:	d000      	beq.n	e4ee <z_impl_k_wakeup+0xa>
    e4ec:	4770      	bx	lr
{
    e4ee:	b510      	push	{r4, lr}
    e4f0:	4604      	mov	r4, r0
	return z_abort_timeout(&thread->base.timeout);
    e4f2:	3018      	adds	r0, #24
    e4f4:	f000 fbf0 	bl	ecd8 <z_abort_timeout>
		return;
	}

	if (z_abort_thread_timeout(thread) < 0) {
    e4f8:	2800      	cmp	r0, #0
    e4fa:	db20      	blt.n	e53e <z_impl_k_wakeup+0x5a>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    e4fc:	7b63      	ldrb	r3, [r4, #13]
    e4fe:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    e502:	7363      	strb	r3, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    e504:	f013 0f0f 	tst.w	r3, #15
    e508:	d105      	bne.n	e516 <z_impl_k_wakeup+0x32>
	return node->next != NULL;
    e50a:	69a3      	ldr	r3, [r4, #24]
    e50c:	b10b      	cbz	r3, e512 <z_impl_k_wakeup+0x2e>
    e50e:	2300      	movs	r3, #0
    e510:	e002      	b.n	e518 <z_impl_k_wakeup+0x34>
    e512:	2301      	movs	r3, #1
    e514:	e000      	b.n	e518 <z_impl_k_wakeup+0x34>
    e516:	2300      	movs	r3, #0
	if (z_is_thread_ready(thread)) {
    e518:	b95b      	cbnz	r3, e532 <z_impl_k_wakeup+0x4e>
    e51a:	f3ef 8305 	mrs	r3, IPSR
    e51e:	2b0d      	cmp	r3, #13
    e520:	d80b      	bhi.n	e53a <z_impl_k_wakeup+0x56>
    e522:	b16b      	cbz	r3, e540 <z_impl_k_wakeup+0x5c>
    e524:	4b0e      	ldr	r3, [pc, #56]	; (e560 <z_impl_k_wakeup+0x7c>)
    e526:	685b      	ldr	r3, [r3, #4]
    e528:	f413 6f00 	tst.w	r3, #2048	; 0x800
    e52c:	d00a      	beq.n	e544 <z_impl_k_wakeup+0x60>
    e52e:	2300      	movs	r3, #0
    e530:	e004      	b.n	e53c <z_impl_k_wakeup+0x58>
		z_add_thread_to_ready_q(thread);
    e532:	4620      	mov	r0, r4
    e534:	f7ff f966 	bl	d804 <z_add_thread_to_ready_q>
    e538:	e7ef      	b.n	e51a <z_impl_k_wakeup+0x36>
    e53a:	2301      	movs	r3, #1
	}

	z_mark_thread_as_not_suspended(thread);
	z_ready_thread(thread);

	if (!z_is_in_isr()) {
    e53c:	b123      	cbz	r3, e548 <z_impl_k_wakeup+0x64>

	if (IS_ENABLED(CONFIG_SMP) &&
	    !IS_ENABLED(CONFIG_SCHED_IPI_SUPPORTED)) {
		z_sched_ipi();
	}
}
    e53e:	bd10      	pop	{r4, pc}
    e540:	2300      	movs	r3, #0
    e542:	e7fb      	b.n	e53c <z_impl_k_wakeup+0x58>
    e544:	2301      	movs	r3, #1
    e546:	e7f9      	b.n	e53c <z_impl_k_wakeup+0x58>
    e548:	f04f 0320 	mov.w	r3, #32
    e54c:	f3ef 8011 	mrs	r0, BASEPRI
    e550:	f383 8811 	msr	BASEPRI, r3
    e554:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(z_arch_irq_lock());
    e558:	f7fe ff30 	bl	d3bc <z_reschedule_irqlock>
    e55c:	e7ef      	b.n	e53e <z_impl_k_wakeup+0x5a>
    e55e:	bf00      	nop
    e560:	e000ed00 	.word	0xe000ed00

0000e564 <z_impl_k_current_get>:
#endif

k_tid_t z_impl_k_current_get(void)
{
	return _current;
}
    e564:	4b01      	ldr	r3, [pc, #4]	; (e56c <z_impl_k_current_get+0x8>)
    e566:	6898      	ldr	r0, [r3, #8]
    e568:	4770      	bx	lr
    e56a:	bf00      	nop
    e56c:	200026f4 	.word	0x200026f4

0000e570 <z_impl_k_sem_init>:

#endif /* CONFIG_OBJECT_TRACING */

void z_impl_k_sem_init(struct k_sem *sem, unsigned int initial_count,
		      unsigned int limit)
{
    e570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e572:	4604      	mov	r4, r0
    e574:	460e      	mov	r6, r1
	__ASSERT(limit != 0U, "limit cannot be zero");
    e576:	4615      	mov	r5, r2
    e578:	b132      	cbz	r2, e588 <z_impl_k_sem_init+0x18>
	__ASSERT(initial_count <= limit, "count cannot be greater than limit");
    e57a:	42b5      	cmp	r5, r6
    e57c:	d313      	bcc.n	e5a6 <z_impl_k_sem_init+0x36>

	sys_trace_void(SYS_TRACE_ID_SEMA_INIT);
	sem->count = initial_count;
    e57e:	60a6      	str	r6, [r4, #8]
	sem->limit = limit;
    e580:	60e5      	str	r5, [r4, #12]
	list->head = (sys_dnode_t *)list;
    e582:	6024      	str	r4, [r4, #0]
	list->tail = (sys_dnode_t *)list;
    e584:	6064      	str	r4, [r4, #4]

	SYS_TRACING_OBJ_INIT(k_sem, sem);

	z_object_init(sem);
	sys_trace_end_call(SYS_TRACE_ID_SEMA_INIT);
}
    e586:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	__ASSERT(limit != 0U, "limit cannot be zero");
    e588:	4f0e      	ldr	r7, [pc, #56]	; (e5c4 <z_impl_k_sem_init+0x54>)
    e58a:	2346      	movs	r3, #70	; 0x46
    e58c:	463a      	mov	r2, r7
    e58e:	490e      	ldr	r1, [pc, #56]	; (e5c8 <z_impl_k_sem_init+0x58>)
    e590:	480e      	ldr	r0, [pc, #56]	; (e5cc <z_impl_k_sem_init+0x5c>)
    e592:	f001 f974 	bl	f87e <printk>
    e596:	480e      	ldr	r0, [pc, #56]	; (e5d0 <z_impl_k_sem_init+0x60>)
    e598:	f001 f971 	bl	f87e <printk>
    e59c:	2146      	movs	r1, #70	; 0x46
    e59e:	4638      	mov	r0, r7
    e5a0:	f001 f9f3 	bl	f98a <assert_post_action>
    e5a4:	e7e9      	b.n	e57a <z_impl_k_sem_init+0xa>
	__ASSERT(initial_count <= limit, "count cannot be greater than limit");
    e5a6:	4f07      	ldr	r7, [pc, #28]	; (e5c4 <z_impl_k_sem_init+0x54>)
    e5a8:	2347      	movs	r3, #71	; 0x47
    e5aa:	463a      	mov	r2, r7
    e5ac:	4909      	ldr	r1, [pc, #36]	; (e5d4 <z_impl_k_sem_init+0x64>)
    e5ae:	4807      	ldr	r0, [pc, #28]	; (e5cc <z_impl_k_sem_init+0x5c>)
    e5b0:	f001 f965 	bl	f87e <printk>
    e5b4:	4808      	ldr	r0, [pc, #32]	; (e5d8 <z_impl_k_sem_init+0x68>)
    e5b6:	f001 f962 	bl	f87e <printk>
    e5ba:	2147      	movs	r1, #71	; 0x47
    e5bc:	4638      	mov	r0, r7
    e5be:	f001 f9e4 	bl	f98a <assert_post_action>
    e5c2:	e7dc      	b.n	e57e <z_impl_k_sem_init+0xe>
    e5c4:	00013464 	.word	0x00013464
    e5c8:	00013474 	.word	0x00013474
    e5cc:	00010f8c 	.word	0x00010f8c
    e5d0:	00013480 	.word	0x00013480
    e5d4:	00013498 	.word	0x00013498
    e5d8:	000134b0 	.word	0x000134b0

0000e5dc <z_impl_k_sem_give>:
		handle_poll_events(sem);
	}
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    e5dc:	b570      	push	{r4, r5, r6, lr}
    e5de:	4606      	mov	r6, r0
    e5e0:	f04f 0320 	mov.w	r3, #32
    e5e4:	f3ef 8511 	mrs	r5, BASEPRI
    e5e8:	f383 8811 	msr	BASEPRI, r3
    e5ec:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
    e5f0:	480f      	ldr	r0, [pc, #60]	; (e630 <z_impl_k_sem_give+0x54>)
    e5f2:	f000 f923 	bl	e83c <z_spin_lock_valid>
    e5f6:	b158      	cbz	r0, e610 <z_impl_k_sem_give+0x34>
	z_spin_lock_set_owner(l);
    e5f8:	4c0d      	ldr	r4, [pc, #52]	; (e630 <z_impl_k_sem_give+0x54>)
    e5fa:	4620      	mov	r0, r4
    e5fc:	f000 f93e 	bl	e87c <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);

	sys_trace_void(SYS_TRACE_ID_SEMA_GIVE);
	do_sem_give(sem);
    e600:	4630      	mov	r0, r6
    e602:	f002 fa51 	bl	10aa8 <do_sem_give>
	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
	z_reschedule(&lock, key);
    e606:	4629      	mov	r1, r5
    e608:	4620      	mov	r0, r4
    e60a:	f7fe fe8b 	bl	d324 <z_reschedule>
}
    e60e:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
    e610:	4c08      	ldr	r4, [pc, #32]	; (e634 <z_impl_k_sem_give+0x58>)
    e612:	234e      	movs	r3, #78	; 0x4e
    e614:	4622      	mov	r2, r4
    e616:	4908      	ldr	r1, [pc, #32]	; (e638 <z_impl_k_sem_give+0x5c>)
    e618:	4808      	ldr	r0, [pc, #32]	; (e63c <z_impl_k_sem_give+0x60>)
    e61a:	f001 f930 	bl	f87e <printk>
    e61e:	4808      	ldr	r0, [pc, #32]	; (e640 <z_impl_k_sem_give+0x64>)
    e620:	f001 f92d 	bl	f87e <printk>
    e624:	214e      	movs	r1, #78	; 0x4e
    e626:	4620      	mov	r0, r4
    e628:	f001 f9af 	bl	f98a <assert_post_action>
    e62c:	e7e4      	b.n	e5f8 <z_impl_k_sem_give+0x1c>
    e62e:	bf00      	nop
    e630:	20002734 	.word	0x20002734
    e634:	00012778 	.word	0x00012778
    e638:	00012790 	.word	0x00012790
    e63c:	00010f8c 	.word	0x00010f8c
    e640:	000127a8 	.word	0x000127a8

0000e644 <z_impl_k_sem_take>:
#ifdef CONFIG_USERSPACE
Z_SYSCALL_HANDLER1_SIMPLE_VOID(k_sem_give, K_OBJ_SEM, struct k_sem *);
#endif

int z_impl_k_sem_take(struct k_sem *sem, s32_t timeout)
{
    e644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e646:	4604      	mov	r4, r0
    e648:	460e      	mov	r6, r1
    e64a:	f3ef 8305 	mrs	r3, IPSR
    e64e:	2b0d      	cmp	r3, #13
    e650:	d807      	bhi.n	e662 <z_impl_k_sem_take+0x1e>
    e652:	b33b      	cbz	r3, e6a4 <z_impl_k_sem_take+0x60>
    e654:	4b3d      	ldr	r3, [pc, #244]	; (e74c <z_impl_k_sem_take+0x108>)
    e656:	685b      	ldr	r3, [r3, #4]
    e658:	f413 6f00 	tst.w	r3, #2048	; 0x800
    e65c:	d024      	beq.n	e6a8 <z_impl_k_sem_take+0x64>
    e65e:	2300      	movs	r3, #0
    e660:	e000      	b.n	e664 <z_impl_k_sem_take+0x20>
    e662:	2301      	movs	r3, #1
	__ASSERT(((z_is_in_isr() == false) || (timeout == K_NO_WAIT)), "");
    e664:	b103      	cbz	r3, e668 <z_impl_k_sem_take+0x24>
    e666:	bb0e      	cbnz	r6, e6ac <z_impl_k_sem_take+0x68>
    e668:	f04f 0320 	mov.w	r3, #32
    e66c:	f3ef 8511 	mrs	r5, BASEPRI
    e670:	f383 8811 	msr	BASEPRI, r3
    e674:	f3bf 8f6f 	isb	sy
    e678:	4835      	ldr	r0, [pc, #212]	; (e750 <z_impl_k_sem_take+0x10c>)
    e67a:	f000 f8df 	bl	e83c <z_spin_lock_valid>
    e67e:	b320      	cbz	r0, e6ca <z_impl_k_sem_take+0x86>
	z_spin_lock_set_owner(l);
    e680:	4833      	ldr	r0, [pc, #204]	; (e750 <z_impl_k_sem_take+0x10c>)
    e682:	f000 f8fb 	bl	e87c <z_spin_lock_set_owner>

	sys_trace_void(SYS_TRACE_ID_SEMA_TAKE);
	k_spinlock_key_t key = k_spin_lock(&lock);

	if (likely(sem->count > 0U)) {
    e686:	68a3      	ldr	r3, [r4, #8]
    e688:	2b00      	cmp	r3, #0
    e68a:	d03c      	beq.n	e706 <z_impl_k_sem_take+0xc2>
		sem->count--;
    e68c:	3b01      	subs	r3, #1
    e68e:	60a3      	str	r3, [r4, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
    e690:	482f      	ldr	r0, [pc, #188]	; (e750 <z_impl_k_sem_take+0x10c>)
    e692:	f000 f8e3 	bl	e85c <z_spin_unlock_valid>
    e696:	b338      	cbz	r0, e6e8 <z_impl_k_sem_take+0xa4>
	__asm__ volatile(
    e698:	f385 8811 	msr	BASEPRI, r5
    e69c:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
		return 0;
    e6a0:	2000      	movs	r0, #0

	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);

	int ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
	return ret;
}
    e6a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e6a4:	2300      	movs	r3, #0
    e6a6:	e7dd      	b.n	e664 <z_impl_k_sem_take+0x20>
    e6a8:	2301      	movs	r3, #1
    e6aa:	e7db      	b.n	e664 <z_impl_k_sem_take+0x20>
	__ASSERT(((z_is_in_isr() == false) || (timeout == K_NO_WAIT)), "");
    e6ac:	4d29      	ldr	r5, [pc, #164]	; (e754 <z_impl_k_sem_take+0x110>)
    e6ae:	238c      	movs	r3, #140	; 0x8c
    e6b0:	462a      	mov	r2, r5
    e6b2:	4929      	ldr	r1, [pc, #164]	; (e758 <z_impl_k_sem_take+0x114>)
    e6b4:	4829      	ldr	r0, [pc, #164]	; (e75c <z_impl_k_sem_take+0x118>)
    e6b6:	f001 f8e2 	bl	f87e <printk>
    e6ba:	4829      	ldr	r0, [pc, #164]	; (e760 <z_impl_k_sem_take+0x11c>)
    e6bc:	f001 f8df 	bl	f87e <printk>
    e6c0:	218c      	movs	r1, #140	; 0x8c
    e6c2:	4628      	mov	r0, r5
    e6c4:	f001 f961 	bl	f98a <assert_post_action>
    e6c8:	e7ce      	b.n	e668 <z_impl_k_sem_take+0x24>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
    e6ca:	4f26      	ldr	r7, [pc, #152]	; (e764 <z_impl_k_sem_take+0x120>)
    e6cc:	234e      	movs	r3, #78	; 0x4e
    e6ce:	463a      	mov	r2, r7
    e6d0:	4925      	ldr	r1, [pc, #148]	; (e768 <z_impl_k_sem_take+0x124>)
    e6d2:	4822      	ldr	r0, [pc, #136]	; (e75c <z_impl_k_sem_take+0x118>)
    e6d4:	f001 f8d3 	bl	f87e <printk>
    e6d8:	4824      	ldr	r0, [pc, #144]	; (e76c <z_impl_k_sem_take+0x128>)
    e6da:	f001 f8d0 	bl	f87e <printk>
    e6de:	214e      	movs	r1, #78	; 0x4e
    e6e0:	4638      	mov	r0, r7
    e6e2:	f001 f952 	bl	f98a <assert_post_action>
    e6e6:	e7cb      	b.n	e680 <z_impl_k_sem_take+0x3c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
    e6e8:	4c1e      	ldr	r4, [pc, #120]	; (e764 <z_impl_k_sem_take+0x120>)
    e6ea:	2361      	movs	r3, #97	; 0x61
    e6ec:	4622      	mov	r2, r4
    e6ee:	4920      	ldr	r1, [pc, #128]	; (e770 <z_impl_k_sem_take+0x12c>)
    e6f0:	481a      	ldr	r0, [pc, #104]	; (e75c <z_impl_k_sem_take+0x118>)
    e6f2:	f001 f8c4 	bl	f87e <printk>
    e6f6:	481f      	ldr	r0, [pc, #124]	; (e774 <z_impl_k_sem_take+0x130>)
    e6f8:	f001 f8c1 	bl	f87e <printk>
    e6fc:	2161      	movs	r1, #97	; 0x61
    e6fe:	4620      	mov	r0, r4
    e700:	f001 f943 	bl	f98a <assert_post_action>
    e704:	e7c8      	b.n	e698 <z_impl_k_sem_take+0x54>
	if (timeout == K_NO_WAIT) {
    e706:	b136      	cbz	r6, e716 <z_impl_k_sem_take+0xd2>
	int ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    e708:	4633      	mov	r3, r6
    e70a:	4622      	mov	r2, r4
    e70c:	4629      	mov	r1, r5
    e70e:	4810      	ldr	r0, [pc, #64]	; (e750 <z_impl_k_sem_take+0x10c>)
    e710:	f7ff fb8a 	bl	de28 <z_pend_curr>
	return ret;
    e714:	e7c5      	b.n	e6a2 <z_impl_k_sem_take+0x5e>
    e716:	480e      	ldr	r0, [pc, #56]	; (e750 <z_impl_k_sem_take+0x10c>)
    e718:	f000 f8a0 	bl	e85c <z_spin_unlock_valid>
    e71c:	b130      	cbz	r0, e72c <z_impl_k_sem_take+0xe8>
    e71e:	f385 8811 	msr	BASEPRI, r5
    e722:	f3bf 8f6f 	isb	sy
		return -EBUSY;
    e726:	f06f 000f 	mvn.w	r0, #15
    e72a:	e7ba      	b.n	e6a2 <z_impl_k_sem_take+0x5e>
    e72c:	4c0d      	ldr	r4, [pc, #52]	; (e764 <z_impl_k_sem_take+0x120>)
    e72e:	2361      	movs	r3, #97	; 0x61
    e730:	4622      	mov	r2, r4
    e732:	490f      	ldr	r1, [pc, #60]	; (e770 <z_impl_k_sem_take+0x12c>)
    e734:	4809      	ldr	r0, [pc, #36]	; (e75c <z_impl_k_sem_take+0x118>)
    e736:	f001 f8a2 	bl	f87e <printk>
    e73a:	480e      	ldr	r0, [pc, #56]	; (e774 <z_impl_k_sem_take+0x130>)
    e73c:	f001 f89f 	bl	f87e <printk>
    e740:	2161      	movs	r1, #97	; 0x61
    e742:	4620      	mov	r0, r4
    e744:	f001 f921 	bl	f98a <assert_post_action>
    e748:	e7e9      	b.n	e71e <z_impl_k_sem_take+0xda>
    e74a:	bf00      	nop
    e74c:	e000ed00 	.word	0xe000ed00
    e750:	20002734 	.word	0x20002734
    e754:	00013464 	.word	0x00013464
    e758:	000134d8 	.word	0x000134d8
    e75c:	00010f8c 	.word	0x00010f8c
    e760:	000111e0 	.word	0x000111e0
    e764:	00012778 	.word	0x00012778
    e768:	00012790 	.word	0x00012790
    e76c:	000127a8 	.word	0x000127a8
    e770:	000127c0 	.word	0x000127c0
    e774:	000127d8 	.word	0x000127d8

0000e778 <k_sys_work_q_init>:
K_THREAD_STACK_DEFINE(sys_work_q_stack, CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(struct device *dev)
{
    e778:	b510      	push	{r4, lr}
	ARG_UNUSED(dev);

	k_work_q_start(&k_sys_work_q,
    e77a:	4c08      	ldr	r4, [pc, #32]	; (e79c <k_sys_work_q_init+0x24>)
    e77c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    e780:	f44f 6280 	mov.w	r2, #1024	; 0x400
    e784:	4906      	ldr	r1, [pc, #24]	; (e7a0 <k_sys_work_q_init+0x28>)
    e786:	4620      	mov	r0, r4
    e788:	f000 f98c 	bl	eaa4 <k_work_q_start>
K_SYSCALL_DECLARE2_VOID(K_SYSCALL_K_THREAD_NAME_SET, k_thread_name_set, k_tid_t, thread_id, const char *, value)
    e78c:	4905      	ldr	r1, [pc, #20]	; (e7a4 <k_sys_work_q_init+0x2c>)
    e78e:	f104 0014 	add.w	r0, r4, #20
    e792:	f002 f9ac 	bl	10aee <z_impl_k_thread_name_set>
		       K_THREAD_STACK_SIZEOF(sys_work_q_stack),
		       CONFIG_SYSTEM_WORKQUEUE_PRIORITY);
	k_thread_name_set(&k_sys_work_q.thread, "sysworkq");

	return 0;
}
    e796:	2000      	movs	r0, #0
    e798:	bd10      	pop	{r4, pc}
    e79a:	bf00      	nop
    e79c:	20002738 	.word	0x20002738
    e7a0:	20005820 	.word	0x20005820
    e7a4:	00013500 	.word	0x00013500

0000e7a8 <k_is_in_isr>:
    e7a8:	f3ef 8305 	mrs	r3, IPSR
    e7ac:	2b0d      	cmp	r3, #13
    e7ae:	d807      	bhi.n	e7c0 <k_is_in_isr+0x18>
    e7b0:	b143      	cbz	r3, e7c4 <k_is_in_isr+0x1c>
    e7b2:	4b06      	ldr	r3, [pc, #24]	; (e7cc <k_is_in_isr+0x24>)
    e7b4:	685b      	ldr	r3, [r3, #4]
    e7b6:	f413 6f00 	tst.w	r3, #2048	; 0x800
    e7ba:	d005      	beq.n	e7c8 <k_is_in_isr+0x20>
    e7bc:	2000      	movs	r0, #0
    e7be:	4770      	bx	lr
    e7c0:	2001      	movs	r0, #1
    e7c2:	4770      	bx	lr
    e7c4:	2000      	movs	r0, #0
    e7c6:	4770      	bx	lr
    e7c8:	2001      	movs	r0, #1
}

bool k_is_in_isr(void)
{
	return z_is_in_isr();
}
    e7ca:	4770      	bx	lr
    e7cc:	e000ed00 	.word	0xe000ed00

0000e7d0 <z_is_thread_essential>:
 *
 * Returns true if current thread is essential, false if it is not.
 */
bool z_is_thread_essential(void)
{
	return (_current->base.user_options & K_ESSENTIAL) == K_ESSENTIAL;
    e7d0:	4b02      	ldr	r3, [pc, #8]	; (e7dc <z_is_thread_essential+0xc>)
    e7d2:	689b      	ldr	r3, [r3, #8]
    e7d4:	7b18      	ldrb	r0, [r3, #12]
}
    e7d6:	f000 0001 	and.w	r0, r0, #1
    e7da:	4770      	bx	lr
    e7dc:	200026f4 	.word	0x200026f4

0000e7e0 <z_impl_k_busy_wait>:

#ifdef CONFIG_SYS_CLOCK_EXISTS
void z_impl_k_busy_wait(u32_t usec_to_wait)
{
    e7e0:	b538      	push	{r3, r4, r5, lr}
    e7e2:	4601      	mov	r1, r0
#if !defined(CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT)
	/* use 64-bit math to prevent overflow when multiplying */
	u32_t cycles_to_wait = (u32_t)(
		(u64_t)usec_to_wait *
		(u64_t)sys_clock_hw_cycles_per_sec() /
    e7e4:	4a07      	ldr	r2, [pc, #28]	; (e804 <z_impl_k_busy_wait+0x24>)
    e7e6:	2300      	movs	r3, #0
    e7e8:	03c0      	lsls	r0, r0, #15
    e7ea:	0c49      	lsrs	r1, r1, #17
    e7ec:	f7f1 fcd8 	bl	1a0 <__aeabi_uldivmod>
	u32_t cycles_to_wait = (u32_t)(
    e7f0:	4605      	mov	r5, r0
		(u64_t)USEC_PER_SEC
	);
	u32_t start_cycles = k_cycle_get_32();
    e7f2:	f7fa fbd5 	bl	8fa0 <z_timer_cycle_get_32>
    e7f6:	4604      	mov	r4, r0

	for (;;) {
		u32_t current_cycles = k_cycle_get_32();
    e7f8:	f7fa fbd2 	bl	8fa0 <z_timer_cycle_get_32>

		/* this handles the rollover on an unsigned 32-bit value */
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
    e7fc:	1b00      	subs	r0, r0, r4
    e7fe:	42a8      	cmp	r0, r5
    e800:	d3fa      	bcc.n	e7f8 <z_impl_k_busy_wait+0x18>
		}
	}
#else
	z_arch_busy_wait(usec_to_wait);
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
}
    e802:	bd38      	pop	{r3, r4, r5, pc}
    e804:	000f4240 	.word	0x000f4240

0000e808 <z_setup_new_thread>:
void z_setup_new_thread(struct k_thread *new_thread,
		       k_thread_stack_t *stack, size_t stack_size,
		       k_thread_entry_t entry,
		       void *p1, void *p2, void *p3,
		       int prio, u32_t options, const char *name)
{
    e808:	b530      	push	{r4, r5, lr}
    e80a:	b087      	sub	sp, #28
    e80c:	4605      	mov	r5, r0
	stack_size = STACK_ROUND_DOWN(stack_size
			- sizeof(*new_thread->userspace_local_data));
#endif
#endif

	z_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    e80e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    e810:	9404      	str	r4, [sp, #16]
    e812:	9c0d      	ldr	r4, [sp, #52]	; 0x34
    e814:	9403      	str	r4, [sp, #12]
    e816:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    e818:	9402      	str	r4, [sp, #8]
    e81a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    e81c:	9401      	str	r4, [sp, #4]
    e81e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    e820:	9400      	str	r4, [sp, #0]
    e822:	f7fa fea7 	bl	9574 <z_new_thread>
#ifdef CONFIG_SCHED_CPU_MASK
	new_thread->base.cpu_mask = -1;
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
    e826:	4b04      	ldr	r3, [pc, #16]	; (e838 <z_setup_new_thread+0x30>)
    e828:	689b      	ldr	r3, [r3, #8]
    e82a:	b11b      	cbz	r3, e834 <z_setup_new_thread+0x2c>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
    e82c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    e82e:	662b      	str	r3, [r5, #96]	; 0x60
	sys_trace_thread_create(new_thread);
}
    e830:	b007      	add	sp, #28
    e832:	bd30      	pop	{r4, r5, pc}
		new_thread->resource_pool = NULL;
    e834:	662b      	str	r3, [r5, #96]	; 0x60
		return;
    e836:	e7fb      	b.n	e830 <z_setup_new_thread+0x28>
    e838:	200026f4 	.word	0x200026f4

0000e83c <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu) {
    e83c:	6803      	ldr	r3, [r0, #0]
    e83e:	b13b      	cbz	r3, e850 <z_spin_lock_valid+0x14>
		if ((l->thread_cpu & 3) == _current_cpu->id) {
    e840:	f003 0303 	and.w	r3, r3, #3
    e844:	4a04      	ldr	r2, [pc, #16]	; (e858 <z_spin_lock_valid+0x1c>)
    e846:	7d12      	ldrb	r2, [r2, #20]
    e848:	4293      	cmp	r3, r2
    e84a:	d003      	beq.n	e854 <z_spin_lock_valid+0x18>
			return false;
		}
	}
	return true;
    e84c:	2001      	movs	r0, #1
    e84e:	4770      	bx	lr
    e850:	2001      	movs	r0, #1
    e852:	4770      	bx	lr
			return false;
    e854:	2000      	movs	r0, #0
}
    e856:	4770      	bx	lr
    e858:	200026f4 	.word	0x200026f4

0000e85c <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (u32_t)_current)) {
    e85c:	6801      	ldr	r1, [r0, #0]
    e85e:	4a06      	ldr	r2, [pc, #24]	; (e878 <z_spin_unlock_valid+0x1c>)
    e860:	7d13      	ldrb	r3, [r2, #20]
    e862:	6892      	ldr	r2, [r2, #8]
    e864:	4313      	orrs	r3, r2
    e866:	4299      	cmp	r1, r3
    e868:	d103      	bne.n	e872 <z_spin_unlock_valid+0x16>
		return false;
	}
	l->thread_cpu = 0;
    e86a:	2300      	movs	r3, #0
    e86c:	6003      	str	r3, [r0, #0]
	return true;
    e86e:	2001      	movs	r0, #1
    e870:	4770      	bx	lr
		return false;
    e872:	2000      	movs	r0, #0
}
    e874:	4770      	bx	lr
    e876:	bf00      	nop
    e878:	200026f4 	.word	0x200026f4

0000e87c <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (u32_t)_current;
    e87c:	4a02      	ldr	r2, [pc, #8]	; (e888 <z_spin_lock_set_owner+0xc>)
    e87e:	7d13      	ldrb	r3, [r2, #20]
    e880:	6892      	ldr	r2, [r2, #8]
    e882:	4313      	orrs	r3, r2
    e884:	6003      	str	r3, [r0, #0]
}
    e886:	4770      	bx	lr
    e888:	200026f4 	.word	0x200026f4

0000e88c <z_impl_k_thread_start>:
{
    e88c:	b570      	push	{r4, r5, r6, lr}
    e88e:	4604      	mov	r4, r0
	__asm__ volatile(
    e890:	f04f 0320 	mov.w	r3, #32
    e894:	f3ef 8511 	mrs	r5, BASEPRI
    e898:	f383 8811 	msr	BASEPRI, r3
    e89c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
    e8a0:	4824      	ldr	r0, [pc, #144]	; (e934 <z_impl_k_thread_start+0xa8>)
    e8a2:	f7ff ffcb 	bl	e83c <z_spin_lock_valid>
    e8a6:	b180      	cbz	r0, e8ca <z_impl_k_thread_start+0x3e>
	z_spin_lock_set_owner(l);
    e8a8:	4822      	ldr	r0, [pc, #136]	; (e934 <z_impl_k_thread_start+0xa8>)
    e8aa:	f7ff ffe7 	bl	e87c <z_spin_lock_set_owner>
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    e8ae:	7b63      	ldrb	r3, [r4, #13]
	if (z_has_thread_started(thread)) {
    e8b0:	f013 0f04 	tst.w	r3, #4
    e8b4:	d018      	beq.n	e8e8 <z_impl_k_thread_start+0x5c>
	thread->base.thread_state &= ~_THREAD_PRESTART;
    e8b6:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
    e8ba:	7363      	strb	r3, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    e8bc:	f013 0f1b 	tst.w	r3, #27
    e8c0:	d12c      	bne.n	e91c <z_impl_k_thread_start+0x90>
	return node->next != NULL;
    e8c2:	69a3      	ldr	r3, [r4, #24]
    e8c4:	b343      	cbz	r3, e918 <z_impl_k_thread_start+0x8c>
    e8c6:	2300      	movs	r3, #0
    e8c8:	e029      	b.n	e91e <z_impl_k_thread_start+0x92>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
    e8ca:	4e1b      	ldr	r6, [pc, #108]	; (e938 <z_impl_k_thread_start+0xac>)
    e8cc:	234e      	movs	r3, #78	; 0x4e
    e8ce:	4632      	mov	r2, r6
    e8d0:	491a      	ldr	r1, [pc, #104]	; (e93c <z_impl_k_thread_start+0xb0>)
    e8d2:	481b      	ldr	r0, [pc, #108]	; (e940 <z_impl_k_thread_start+0xb4>)
    e8d4:	f000 ffd3 	bl	f87e <printk>
    e8d8:	481a      	ldr	r0, [pc, #104]	; (e944 <z_impl_k_thread_start+0xb8>)
    e8da:	f000 ffd0 	bl	f87e <printk>
    e8de:	214e      	movs	r1, #78	; 0x4e
    e8e0:	4630      	mov	r0, r6
    e8e2:	f001 f852 	bl	f98a <assert_post_action>
    e8e6:	e7df      	b.n	e8a8 <z_impl_k_thread_start+0x1c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
    e8e8:	4812      	ldr	r0, [pc, #72]	; (e934 <z_impl_k_thread_start+0xa8>)
    e8ea:	f7ff ffb7 	bl	e85c <z_spin_unlock_valid>
    e8ee:	b120      	cbz	r0, e8fa <z_impl_k_thread_start+0x6e>
	__asm__ volatile(
    e8f0:	f385 8811 	msr	BASEPRI, r5
    e8f4:	f3bf 8f6f 	isb	sy
		return;
    e8f8:	e016      	b.n	e928 <z_impl_k_thread_start+0x9c>
    e8fa:	4c0f      	ldr	r4, [pc, #60]	; (e938 <z_impl_k_thread_start+0xac>)
    e8fc:	2361      	movs	r3, #97	; 0x61
    e8fe:	4622      	mov	r2, r4
    e900:	4911      	ldr	r1, [pc, #68]	; (e948 <z_impl_k_thread_start+0xbc>)
    e902:	480f      	ldr	r0, [pc, #60]	; (e940 <z_impl_k_thread_start+0xb4>)
    e904:	f000 ffbb 	bl	f87e <printk>
    e908:	4810      	ldr	r0, [pc, #64]	; (e94c <z_impl_k_thread_start+0xc0>)
    e90a:	f000 ffb8 	bl	f87e <printk>
    e90e:	2161      	movs	r1, #97	; 0x61
    e910:	4620      	mov	r0, r4
    e912:	f001 f83a 	bl	f98a <assert_post_action>
    e916:	e7eb      	b.n	e8f0 <z_impl_k_thread_start+0x64>
    e918:	2301      	movs	r3, #1
    e91a:	e000      	b.n	e91e <z_impl_k_thread_start+0x92>
    e91c:	2300      	movs	r3, #0
	if (z_is_thread_ready(thread)) {
    e91e:	b923      	cbnz	r3, e92a <z_impl_k_thread_start+0x9e>
	z_reschedule(&lock, key);
    e920:	4629      	mov	r1, r5
    e922:	4804      	ldr	r0, [pc, #16]	; (e934 <z_impl_k_thread_start+0xa8>)
    e924:	f7fe fcfe 	bl	d324 <z_reschedule>
}
    e928:	bd70      	pop	{r4, r5, r6, pc}
		z_add_thread_to_ready_q(thread);
    e92a:	4620      	mov	r0, r4
    e92c:	f7fe ff6a 	bl	d804 <z_add_thread_to_ready_q>
    e930:	e7f6      	b.n	e920 <z_impl_k_thread_start+0x94>
    e932:	bf00      	nop
    e934:	200027b8 	.word	0x200027b8
    e938:	00012778 	.word	0x00012778
    e93c:	00012790 	.word	0x00012790
    e940:	00010f8c 	.word	0x00010f8c
    e944:	000127a8 	.word	0x000127a8
    e948:	000127c0 	.word	0x000127c0
    e94c:	000127d8 	.word	0x000127d8

0000e950 <schedule_new_thread>:
{
    e950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e952:	4604      	mov	r4, r0
	if (delay == 0) {
    e954:	b911      	cbnz	r1, e95c <schedule_new_thread+0xc>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_START, k_thread_start, k_tid_t, thread)
    e956:	f7ff ff99 	bl	e88c <z_impl_k_thread_start>
}
    e95a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e95c:	460b      	mov	r3, r1
	return (s32_t)ceiling_fraction(
    e95e:	17cf      	asrs	r7, r1, #31
    e960:	03f9      	lsls	r1, r7, #15
    e962:	ea41 4153 	orr.w	r1, r1, r3, lsr #17
    e966:	03d8      	lsls	r0, r3, #15
    e968:	4d08      	ldr	r5, [pc, #32]	; (e98c <schedule_new_thread+0x3c>)
    e96a:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
    e96e:	2300      	movs	r3, #0
    e970:	1940      	adds	r0, r0, r5
    e972:	f04f 0500 	mov.w	r5, #0
    e976:	eb45 0101 	adc.w	r1, r5, r1
    e97a:	f7f1 fbc1 	bl	100 <__aeabi_ldivmod>
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
    e97e:	1c42      	adds	r2, r0, #1
    e980:	4903      	ldr	r1, [pc, #12]	; (e990 <schedule_new_thread+0x40>)
    e982:	f104 0018 	add.w	r0, r4, #24
    e986:	f000 f8f9 	bl	eb7c <z_add_timeout>
    e98a:	e7e6      	b.n	e95a <schedule_new_thread+0xa>
    e98c:	0004ffff 	.word	0x0004ffff
    e990:	0000d92d 	.word	0x0000d92d

0000e994 <z_impl_k_thread_create>:
{
    e994:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e998:	b086      	sub	sp, #24
    e99a:	4604      	mov	r4, r0
    e99c:	460e      	mov	r6, r1
    e99e:	4617      	mov	r7, r2
    e9a0:	4698      	mov	r8, r3
    e9a2:	f3ef 8305 	mrs	r3, IPSR
    e9a6:	2b0d      	cmp	r3, #13
    e9a8:	d807      	bhi.n	e9ba <z_impl_k_thread_create+0x26>
    e9aa:	b313      	cbz	r3, e9f2 <z_impl_k_thread_create+0x5e>
    e9ac:	4b1e      	ldr	r3, [pc, #120]	; (ea28 <z_impl_k_thread_create+0x94>)
    e9ae:	685b      	ldr	r3, [r3, #4]
    e9b0:	f413 6f00 	tst.w	r3, #2048	; 0x800
    e9b4:	d01f      	beq.n	e9f6 <z_impl_k_thread_create+0x62>
    e9b6:	2300      	movs	r3, #0
    e9b8:	e000      	b.n	e9bc <z_impl_k_thread_create+0x28>
    e9ba:	2301      	movs	r3, #1
	__ASSERT(!z_is_in_isr(), "Threads may not be created in ISRs");
    e9bc:	b9eb      	cbnz	r3, e9fa <z_impl_k_thread_create+0x66>
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    e9be:	2300      	movs	r3, #0
    e9c0:	9305      	str	r3, [sp, #20]
    e9c2:	9b10      	ldr	r3, [sp, #64]	; 0x40
    e9c4:	9304      	str	r3, [sp, #16]
    e9c6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    e9c8:	9303      	str	r3, [sp, #12]
    e9ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    e9cc:	9302      	str	r3, [sp, #8]
    e9ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    e9d0:	9301      	str	r3, [sp, #4]
    e9d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    e9d4:	9300      	str	r3, [sp, #0]
    e9d6:	4643      	mov	r3, r8
    e9d8:	463a      	mov	r2, r7
    e9da:	4631      	mov	r1, r6
    e9dc:	4620      	mov	r0, r4
    e9de:	f7ff ff13 	bl	e808 <z_setup_new_thread>
	if (delay != K_FOREVER) {
    e9e2:	9b11      	ldr	r3, [sp, #68]	; 0x44
    e9e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    e9e8:	d118      	bne.n	ea1c <z_impl_k_thread_create+0x88>
}
    e9ea:	4620      	mov	r0, r4
    e9ec:	b006      	add	sp, #24
    e9ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e9f2:	2300      	movs	r3, #0
    e9f4:	e7e2      	b.n	e9bc <z_impl_k_thread_create+0x28>
    e9f6:	2301      	movs	r3, #1
    e9f8:	e7e0      	b.n	e9bc <z_impl_k_thread_create+0x28>
	__ASSERT(!z_is_in_isr(), "Threads may not be created in ISRs");
    e9fa:	4d0c      	ldr	r5, [pc, #48]	; (ea2c <z_impl_k_thread_create+0x98>)
    e9fc:	f44f 73d9 	mov.w	r3, #434	; 0x1b2
    ea00:	462a      	mov	r2, r5
    ea02:	490b      	ldr	r1, [pc, #44]	; (ea30 <z_impl_k_thread_create+0x9c>)
    ea04:	480b      	ldr	r0, [pc, #44]	; (ea34 <z_impl_k_thread_create+0xa0>)
    ea06:	f000 ff3a 	bl	f87e <printk>
    ea0a:	480b      	ldr	r0, [pc, #44]	; (ea38 <z_impl_k_thread_create+0xa4>)
    ea0c:	f000 ff37 	bl	f87e <printk>
    ea10:	f44f 71d9 	mov.w	r1, #434	; 0x1b2
    ea14:	4628      	mov	r0, r5
    ea16:	f000 ffb8 	bl	f98a <assert_post_action>
    ea1a:	e7d0      	b.n	e9be <z_impl_k_thread_create+0x2a>
		schedule_new_thread(new_thread, delay);
    ea1c:	4619      	mov	r1, r3
    ea1e:	4620      	mov	r0, r4
    ea20:	f7ff ff96 	bl	e950 <schedule_new_thread>
    ea24:	e7e1      	b.n	e9ea <z_impl_k_thread_create+0x56>
    ea26:	bf00      	nop
    ea28:	e000ed00 	.word	0xe000ed00
    ea2c:	0001350c 	.word	0x0001350c
    ea30:	0001330c 	.word	0x0001330c
    ea34:	00010f8c 	.word	0x00010f8c
    ea38:	00013520 	.word	0x00013520

0000ea3c <z_init_static_threads>:
{
    ea3c:	b510      	push	{r4, lr}
    ea3e:	b086      	sub	sp, #24
	_FOREACH_STATIC_THREAD(thread_data) {
    ea40:	4c16      	ldr	r4, [pc, #88]	; (ea9c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x3c>)
    ea42:	4b17      	ldr	r3, [pc, #92]	; (eaa0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x40>)
    ea44:	429c      	cmp	r4, r3
    ea46:	d215      	bcs.n	ea74 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x14>
		z_setup_new_thread(
    ea48:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    ea4a:	9305      	str	r3, [sp, #20]
    ea4c:	6a23      	ldr	r3, [r4, #32]
    ea4e:	9304      	str	r3, [sp, #16]
    ea50:	69e3      	ldr	r3, [r4, #28]
    ea52:	9303      	str	r3, [sp, #12]
    ea54:	69a3      	ldr	r3, [r4, #24]
    ea56:	9302      	str	r3, [sp, #8]
    ea58:	6963      	ldr	r3, [r4, #20]
    ea5a:	9301      	str	r3, [sp, #4]
    ea5c:	6923      	ldr	r3, [r4, #16]
    ea5e:	9300      	str	r3, [sp, #0]
    ea60:	68e3      	ldr	r3, [r4, #12]
    ea62:	68a2      	ldr	r2, [r4, #8]
    ea64:	6861      	ldr	r1, [r4, #4]
    ea66:	6820      	ldr	r0, [r4, #0]
    ea68:	f7ff fece 	bl	e808 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    ea6c:	6823      	ldr	r3, [r4, #0]
    ea6e:	64dc      	str	r4, [r3, #76]	; 0x4c
	_FOREACH_STATIC_THREAD(thread_data) {
    ea70:	3430      	adds	r4, #48	; 0x30
    ea72:	e7e6      	b.n	ea42 <z_init_static_threads+0x6>
	k_sched_lock();
    ea74:	f7fe fcc0 	bl	d3f8 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    ea78:	4c08      	ldr	r4, [pc, #32]	; (ea9c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x3c>)
    ea7a:	e003      	b.n	ea84 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x24>
			schedule_new_thread(thread_data->init_thread,
    ea7c:	6820      	ldr	r0, [r4, #0]
    ea7e:	f7ff ff67 	bl	e950 <schedule_new_thread>
	_FOREACH_STATIC_THREAD(thread_data) {
    ea82:	3430      	adds	r4, #48	; 0x30
    ea84:	4b06      	ldr	r3, [pc, #24]	; (eaa0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x40>)
    ea86:	429c      	cmp	r4, r3
    ea88:	d204      	bcs.n	ea94 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x34>
		if (thread_data->init_delay != K_FOREVER) {
    ea8a:	6a61      	ldr	r1, [r4, #36]	; 0x24
    ea8c:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
    ea90:	d0f7      	beq.n	ea82 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x22>
    ea92:	e7f3      	b.n	ea7c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1c>
	k_sched_unlock();
    ea94:	f7fe fe16 	bl	d6c4 <k_sched_unlock>
}
    ea98:	b006      	add	sp, #24
    ea9a:	bd10      	pop	{r4, pc}
    ea9c:	2000729c 	.word	0x2000729c
    eaa0:	200073bc 	.word	0x200073bc

0000eaa4 <k_work_q_start>:

extern void z_work_q_main(void *work_q_ptr, void *p2, void *p3);

void k_work_q_start(struct k_work_q *work_q, k_thread_stack_t *stack,
		    size_t stack_size, int prio)
{
    eaa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    eaa8:	b086      	sub	sp, #24
    eaaa:	4605      	mov	r5, r0
    eaac:	460e      	mov	r6, r1
    eaae:	4617      	mov	r7, r2
    eab0:	4698      	mov	r8, r3
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_QUEUE_INIT, k_queue_init, struct k_queue *, queue)
    eab2:	f001 ffb9 	bl	10a28 <z_impl_k_queue_init>
	k_queue_init(&work_q->queue);
	(void)k_thread_create(&work_q->thread, stack, stack_size, z_work_q_main,
    eab6:	f105 0414 	add.w	r4, r5, #20
K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay)
    eaba:	2300      	movs	r3, #0
    eabc:	9305      	str	r3, [sp, #20]
    eabe:	9304      	str	r3, [sp, #16]
    eac0:	f8cd 800c 	str.w	r8, [sp, #12]
    eac4:	9302      	str	r3, [sp, #8]
    eac6:	9301      	str	r3, [sp, #4]
    eac8:	9500      	str	r5, [sp, #0]
    eaca:	4b06      	ldr	r3, [pc, #24]	; (eae4 <k_work_q_start+0x40>)
    eacc:	463a      	mov	r2, r7
    eace:	4631      	mov	r1, r6
    ead0:	4620      	mov	r0, r4
    ead2:	f7ff ff5f 	bl	e994 <z_impl_k_thread_create>
K_SYSCALL_DECLARE2_VOID(K_SYSCALL_K_THREAD_NAME_SET, k_thread_name_set, k_tid_t, thread_id, const char *, value)
    ead6:	4904      	ldr	r1, [pc, #16]	; (eae8 <k_work_q_start+0x44>)
    ead8:	4620      	mov	r0, r4
    eada:	f002 f808 	bl	10aee <z_impl_k_thread_name_set>
			work_q, NULL, NULL, prio, 0, 0);

	k_thread_name_set(&work_q->thread, WORKQUEUE_THREAD_NAME);
}
    eade:	b006      	add	sp, #24
    eae0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    eae4:	0000f72d 	.word	0x0000f72d
    eae8:	00013548 	.word	0x00013548

0000eaec <first>:
	return list->head == list;
    eaec:	4b03      	ldr	r3, [pc, #12]	; (eafc <first+0x10>)
    eaee:	6818      	ldr	r0, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    eaf0:	4298      	cmp	r0, r3
    eaf2:	d000      	beq.n	eaf6 <first+0xa>
static struct _timeout *first(void)
{
	sys_dnode_t *t = sys_dlist_peek_head(&timeout_list);

	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
}
    eaf4:	4770      	bx	lr
    eaf6:	2000      	movs	r0, #0
	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
    eaf8:	e7fc      	b.n	eaf4 <first+0x8>
    eafa:	bf00      	nop
    eafc:	200071c8 	.word	0x200071c8

0000eb00 <next>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    eb00:	b130      	cbz	r0, eb10 <next+0x10>
	return (node == list->tail) ? NULL : node->next;
    eb02:	4a04      	ldr	r2, [pc, #16]	; (eb14 <next+0x14>)
    eb04:	6852      	ldr	r2, [r2, #4]
    eb06:	4290      	cmp	r0, r2
    eb08:	d001      	beq.n	eb0e <next+0xe>
    eb0a:	6800      	ldr	r0, [r0, #0]
    eb0c:	4770      	bx	lr
    eb0e:	2000      	movs	r0, #0
static struct _timeout *next(struct _timeout *t)
{
	sys_dnode_t *n = sys_dlist_peek_next(&timeout_list, &t->node);

	return n == NULL ? NULL : CONTAINER_OF(n, struct _timeout, node);
}
    eb10:	4770      	bx	lr
    eb12:	bf00      	nop
    eb14:	200071c8 	.word	0x200071c8

0000eb18 <elapsed>:

	sys_dlist_remove(&t->node);
}

static s32_t elapsed(void)
{
    eb18:	b508      	push	{r3, lr}
	return announce_remaining == 0 ? z_clock_elapsed() : 0;
    eb1a:	4b04      	ldr	r3, [pc, #16]	; (eb2c <elapsed+0x14>)
    eb1c:	681b      	ldr	r3, [r3, #0]
    eb1e:	b10b      	cbz	r3, eb24 <elapsed+0xc>
    eb20:	2000      	movs	r0, #0
}
    eb22:	bd08      	pop	{r3, pc}
	return announce_remaining == 0 ? z_clock_elapsed() : 0;
    eb24:	f7fa f9e4 	bl	8ef0 <z_clock_elapsed>
    eb28:	e7fb      	b.n	eb22 <elapsed+0xa>
    eb2a:	bf00      	nop
    eb2c:	200027bc 	.word	0x200027bc

0000eb30 <next_timeout>:

static s32_t next_timeout(void)
{
    eb30:	b538      	push	{r3, r4, r5, lr}
	int maxw = can_wait_forever ? K_FOREVER : INT_MAX;
    eb32:	4b10      	ldr	r3, [pc, #64]	; (eb74 <next_timeout+0x44>)
    eb34:	781b      	ldrb	r3, [r3, #0]
    eb36:	b1a3      	cbz	r3, eb62 <next_timeout+0x32>
    eb38:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
	struct _timeout *to = first();
    eb3c:	f7ff ffd6 	bl	eaec <first>
	s32_t ret = to == NULL ? maxw : MAX(0, to->dticks - elapsed());
    eb40:	4605      	mov	r5, r0
    eb42:	b130      	cbz	r0, eb52 <next_timeout+0x22>
    eb44:	6884      	ldr	r4, [r0, #8]
    eb46:	f7ff ffe7 	bl	eb18 <elapsed>
    eb4a:	1a20      	subs	r0, r4, r0
    eb4c:	2800      	cmp	r0, #0
    eb4e:	da0b      	bge.n	eb68 <next_timeout+0x38>
    eb50:	2400      	movs	r4, #0

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    eb52:	4b09      	ldr	r3, [pc, #36]	; (eb78 <next_timeout+0x48>)
    eb54:	691b      	ldr	r3, [r3, #16]
    eb56:	b113      	cbz	r3, eb5e <next_timeout+0x2e>
    eb58:	42a3      	cmp	r3, r4
    eb5a:	da00      	bge.n	eb5e <next_timeout+0x2e>
		ret = _current_cpu->slice_ticks;
    eb5c:	461c      	mov	r4, r3
	}
#endif
	return ret;
}
    eb5e:	4620      	mov	r0, r4
    eb60:	bd38      	pop	{r3, r4, r5, pc}
	int maxw = can_wait_forever ? K_FOREVER : INT_MAX;
    eb62:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
    eb66:	e7e9      	b.n	eb3c <next_timeout+0xc>
	s32_t ret = to == NULL ? maxw : MAX(0, to->dticks - elapsed());
    eb68:	68ac      	ldr	r4, [r5, #8]
    eb6a:	f7ff ffd5 	bl	eb18 <elapsed>
    eb6e:	1a24      	subs	r4, r4, r0
    eb70:	e7ef      	b.n	eb52 <next_timeout+0x22>
    eb72:	bf00      	nop
    eb74:	200027da 	.word	0x200027da
    eb78:	200026f4 	.word	0x200026f4

0000eb7c <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn, s32_t ticks)
{
    eb7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    eb80:	4605      	mov	r5, r0
    eb82:	460c      	mov	r4, r1
    eb84:	4617      	mov	r7, r2
	return node->next != NULL;
    eb86:	6803      	ldr	r3, [r0, #0]
	__ASSERT(!sys_dnode_is_linked(&to->node), "");
    eb88:	b16b      	cbz	r3, eba6 <z_add_timeout+0x2a>
    eb8a:	4e47      	ldr	r6, [pc, #284]	; (eca8 <z_add_timeout+0x12c>)
    eb8c:	234d      	movs	r3, #77	; 0x4d
    eb8e:	4632      	mov	r2, r6
    eb90:	4946      	ldr	r1, [pc, #280]	; (ecac <z_add_timeout+0x130>)
    eb92:	4847      	ldr	r0, [pc, #284]	; (ecb0 <z_add_timeout+0x134>)
    eb94:	f000 fe73 	bl	f87e <printk>
    eb98:	4846      	ldr	r0, [pc, #280]	; (ecb4 <z_add_timeout+0x138>)
    eb9a:	f000 fe70 	bl	f87e <printk>
    eb9e:	214d      	movs	r1, #77	; 0x4d
    eba0:	4630      	mov	r0, r6
    eba2:	f000 fef2 	bl	f98a <assert_post_action>
	to->fn = fn;
    eba6:	60ec      	str	r4, [r5, #12]
	ticks = MAX(1, ticks);
    eba8:	2f01      	cmp	r7, #1
    ebaa:	bfb8      	it	lt
    ebac:	2701      	movlt	r7, #1

	LOCKED(&timeout_lock) {
    ebae:	2400      	movs	r4, #0
	__asm__ volatile(
    ebb0:	f04f 0320 	mov.w	r3, #32
    ebb4:	f3ef 8611 	mrs	r6, BASEPRI
    ebb8:	f383 8811 	msr	BASEPRI, r3
    ebbc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
    ebc0:	483d      	ldr	r0, [pc, #244]	; (ecb8 <z_add_timeout+0x13c>)
    ebc2:	f7ff fe3b 	bl	e83c <z_spin_lock_valid>
    ebc6:	b118      	cbz	r0, ebd0 <z_add_timeout+0x54>
	z_spin_lock_set_owner(l);
    ebc8:	483b      	ldr	r0, [pc, #236]	; (ecb8 <z_add_timeout+0x13c>)
    ebca:	f7ff fe57 	bl	e87c <z_spin_lock_set_owner>
	return k;
    ebce:	e043      	b.n	ec58 <z_add_timeout+0xdc>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
    ebd0:	f8df 80f8 	ldr.w	r8, [pc, #248]	; eccc <z_add_timeout+0x150>
    ebd4:	234e      	movs	r3, #78	; 0x4e
    ebd6:	4642      	mov	r2, r8
    ebd8:	4938      	ldr	r1, [pc, #224]	; (ecbc <z_add_timeout+0x140>)
    ebda:	4835      	ldr	r0, [pc, #212]	; (ecb0 <z_add_timeout+0x134>)
    ebdc:	f000 fe4f 	bl	f87e <printk>
    ebe0:	4837      	ldr	r0, [pc, #220]	; (ecc0 <z_add_timeout+0x144>)
    ebe2:	f000 fe4c 	bl	f87e <printk>
    ebe6:	214e      	movs	r1, #78	; 0x4e
    ebe8:	4640      	mov	r0, r8
    ebea:	f000 fece 	bl	f98a <assert_post_action>
    ebee:	e7eb      	b.n	ebc8 <z_add_timeout+0x4c>

		to->dticks = ticks + elapsed();
		for (t = first(); t != NULL; t = next(t)) {
			__ASSERT(t->dticks >= 0, "");

			if (t->dticks > to->dticks) {
    ebf0:	68a1      	ldr	r1, [r4, #8]
    ebf2:	68ab      	ldr	r3, [r5, #8]
    ebf4:	4299      	cmp	r1, r3
    ebf6:	dc19      	bgt.n	ec2c <z_add_timeout+0xb0>
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
    ebf8:	1a5b      	subs	r3, r3, r1
    ebfa:	60ab      	str	r3, [r5, #8]
		for (t = first(); t != NULL; t = next(t)) {
    ebfc:	4620      	mov	r0, r4
    ebfe:	f7ff ff7f 	bl	eb00 <next>
    ec02:	4604      	mov	r4, r0
    ec04:	b1d4      	cbz	r4, ec3c <z_add_timeout+0xc0>
			__ASSERT(t->dticks >= 0, "");
    ec06:	68a3      	ldr	r3, [r4, #8]
    ec08:	2b00      	cmp	r3, #0
    ec0a:	daf1      	bge.n	ebf0 <z_add_timeout+0x74>
    ec0c:	f8df 8098 	ldr.w	r8, [pc, #152]	; eca8 <z_add_timeout+0x12c>
    ec10:	2356      	movs	r3, #86	; 0x56
    ec12:	4642      	mov	r2, r8
    ec14:	492b      	ldr	r1, [pc, #172]	; (ecc4 <z_add_timeout+0x148>)
    ec16:	4826      	ldr	r0, [pc, #152]	; (ecb0 <z_add_timeout+0x134>)
    ec18:	f000 fe31 	bl	f87e <printk>
    ec1c:	4825      	ldr	r0, [pc, #148]	; (ecb4 <z_add_timeout+0x138>)
    ec1e:	f000 fe2e 	bl	f87e <printk>
    ec22:	2156      	movs	r1, #86	; 0x56
    ec24:	4640      	mov	r0, r8
    ec26:	f000 feb0 	bl	f98a <assert_post_action>
    ec2a:	e7e1      	b.n	ebf0 <z_add_timeout+0x74>
				t->dticks -= to->dticks;
    ec2c:	1acb      	subs	r3, r1, r3
    ec2e:	60a3      	str	r3, [r4, #8]
	node->prev = successor->prev;
    ec30:	6863      	ldr	r3, [r4, #4]
    ec32:	606b      	str	r3, [r5, #4]
	node->next = successor;
    ec34:	602c      	str	r4, [r5, #0]
	successor->prev->next = node;
    ec36:	6863      	ldr	r3, [r4, #4]
    ec38:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    ec3a:	6065      	str	r5, [r4, #4]
		}

		if (t == NULL) {
    ec3c:	b1ac      	cbz	r4, ec6a <z_add_timeout+0xee>
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    ec3e:	f7ff ff55 	bl	eaec <first>
    ec42:	4285      	cmp	r5, r0
    ec44:	d018      	beq.n	ec78 <z_add_timeout+0xfc>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
    ec46:	481c      	ldr	r0, [pc, #112]	; (ecb8 <z_add_timeout+0x13c>)
    ec48:	f7ff fe08 	bl	e85c <z_spin_unlock_valid>
    ec4c:	b1d0      	cbz	r0, ec84 <z_add_timeout+0x108>
	__asm__ volatile(
    ec4e:	f386 8811 	msr	BASEPRI, r6
    ec52:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    ec56:	2401      	movs	r4, #1
    ec58:	bb1c      	cbnz	r4, eca2 <z_add_timeout+0x126>
		to->dticks = ticks + elapsed();
    ec5a:	f7ff ff5d 	bl	eb18 <elapsed>
    ec5e:	4438      	add	r0, r7
    ec60:	60a8      	str	r0, [r5, #8]
		for (t = first(); t != NULL; t = next(t)) {
    ec62:	f7ff ff43 	bl	eaec <first>
    ec66:	4604      	mov	r4, r0
    ec68:	e7cc      	b.n	ec04 <z_add_timeout+0x88>
	node->next = list;
    ec6a:	4b17      	ldr	r3, [pc, #92]	; (ecc8 <z_add_timeout+0x14c>)
    ec6c:	602b      	str	r3, [r5, #0]
	node->prev = list->tail;
    ec6e:	685a      	ldr	r2, [r3, #4]
    ec70:	606a      	str	r2, [r5, #4]
	list->tail->next = node;
    ec72:	6015      	str	r5, [r2, #0]
	list->tail = node;
    ec74:	605d      	str	r5, [r3, #4]
    ec76:	e7e2      	b.n	ec3e <z_add_timeout+0xc2>
			z_clock_set_timeout(next_timeout(), false);
    ec78:	f7ff ff5a 	bl	eb30 <next_timeout>
    ec7c:	2100      	movs	r1, #0
    ec7e:	f7fa f8b9 	bl	8df4 <z_clock_set_timeout>
    ec82:	e7e0      	b.n	ec46 <z_add_timeout+0xca>
    ec84:	4c11      	ldr	r4, [pc, #68]	; (eccc <z_add_timeout+0x150>)
    ec86:	2361      	movs	r3, #97	; 0x61
    ec88:	4622      	mov	r2, r4
    ec8a:	4911      	ldr	r1, [pc, #68]	; (ecd0 <z_add_timeout+0x154>)
    ec8c:	4808      	ldr	r0, [pc, #32]	; (ecb0 <z_add_timeout+0x134>)
    ec8e:	f000 fdf6 	bl	f87e <printk>
    ec92:	4810      	ldr	r0, [pc, #64]	; (ecd4 <z_add_timeout+0x158>)
    ec94:	f000 fdf3 	bl	f87e <printk>
    ec98:	2161      	movs	r1, #97	; 0x61
    ec9a:	4620      	mov	r0, r4
    ec9c:	f000 fe75 	bl	f98a <assert_post_action>
    eca0:	e7d5      	b.n	ec4e <z_add_timeout+0xd2>
		}
	}
}
    eca2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    eca6:	bf00      	nop
    eca8:	00013554 	.word	0x00013554
    ecac:	00013568 	.word	0x00013568
    ecb0:	00010f8c 	.word	0x00010f8c
    ecb4:	000111e0 	.word	0x000111e0
    ecb8:	200027c0 	.word	0x200027c0
    ecbc:	00012790 	.word	0x00012790
    ecc0:	000127a8 	.word	0x000127a8
    ecc4:	00013588 	.word	0x00013588
    ecc8:	200071c8 	.word	0x200071c8
    eccc:	00012778 	.word	0x00012778
    ecd0:	000127c0 	.word	0x000127c0
    ecd4:	000127d8 	.word	0x000127d8

0000ecd8 <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
    ecd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ecdc:	4605      	mov	r5, r0
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
    ecde:	2400      	movs	r4, #0
	__asm__ volatile(
    ece0:	f04f 0320 	mov.w	r3, #32
    ece4:	f3ef 8711 	mrs	r7, BASEPRI
    ece8:	f383 8811 	msr	BASEPRI, r3
    ecec:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
    ecf0:	481e      	ldr	r0, [pc, #120]	; (ed6c <z_abort_timeout+0x94>)
    ecf2:	f7ff fda3 	bl	e83c <z_spin_lock_valid>
    ecf6:	b128      	cbz	r0, ed04 <z_abort_timeout+0x2c>
	z_spin_lock_set_owner(l);
    ecf8:	481c      	ldr	r0, [pc, #112]	; (ed6c <z_abort_timeout+0x94>)
    ecfa:	f7ff fdbf 	bl	e87c <z_spin_lock_set_owner>
	int ret = -EINVAL;
    ecfe:	f06f 0815 	mvn.w	r8, #21
    ed02:	e01b      	b.n	ed3c <z_abort_timeout+0x64>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
    ed04:	4e1a      	ldr	r6, [pc, #104]	; (ed70 <z_abort_timeout+0x98>)
    ed06:	234e      	movs	r3, #78	; 0x4e
    ed08:	4632      	mov	r2, r6
    ed0a:	491a      	ldr	r1, [pc, #104]	; (ed74 <z_abort_timeout+0x9c>)
    ed0c:	481a      	ldr	r0, [pc, #104]	; (ed78 <z_abort_timeout+0xa0>)
    ed0e:	f000 fdb6 	bl	f87e <printk>
    ed12:	481a      	ldr	r0, [pc, #104]	; (ed7c <z_abort_timeout+0xa4>)
    ed14:	f000 fdb3 	bl	f87e <printk>
    ed18:	214e      	movs	r1, #78	; 0x4e
    ed1a:	4630      	mov	r0, r6
    ed1c:	f000 fe35 	bl	f98a <assert_post_action>
    ed20:	e7ea      	b.n	ecf8 <z_abort_timeout+0x20>
		if (sys_dnode_is_linked(&to->node)) {
			remove_timeout(to);
    ed22:	4628      	mov	r0, r5
    ed24:	f001 ff15 	bl	10b52 <remove_timeout>
			ret = 0;
    ed28:	46b0      	mov	r8, r6
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
    ed2a:	4810      	ldr	r0, [pc, #64]	; (ed6c <z_abort_timeout+0x94>)
    ed2c:	f7ff fd96 	bl	e85c <z_spin_unlock_valid>
    ed30:	b150      	cbz	r0, ed48 <z_abort_timeout+0x70>
	__asm__ volatile(
    ed32:	f387 8811 	msr	BASEPRI, r7
    ed36:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    ed3a:	2401      	movs	r4, #1
    ed3c:	4626      	mov	r6, r4
    ed3e:	b994      	cbnz	r4, ed66 <z_abort_timeout+0x8e>
	return node->next != NULL;
    ed40:	682b      	ldr	r3, [r5, #0]
		if (sys_dnode_is_linked(&to->node)) {
    ed42:	2b00      	cmp	r3, #0
    ed44:	d1ed      	bne.n	ed22 <z_abort_timeout+0x4a>
    ed46:	e7f0      	b.n	ed2a <z_abort_timeout+0x52>
    ed48:	4c09      	ldr	r4, [pc, #36]	; (ed70 <z_abort_timeout+0x98>)
    ed4a:	2361      	movs	r3, #97	; 0x61
    ed4c:	4622      	mov	r2, r4
    ed4e:	490c      	ldr	r1, [pc, #48]	; (ed80 <z_abort_timeout+0xa8>)
    ed50:	4809      	ldr	r0, [pc, #36]	; (ed78 <z_abort_timeout+0xa0>)
    ed52:	f000 fd94 	bl	f87e <printk>
    ed56:	480b      	ldr	r0, [pc, #44]	; (ed84 <z_abort_timeout+0xac>)
    ed58:	f000 fd91 	bl	f87e <printk>
    ed5c:	2161      	movs	r1, #97	; 0x61
    ed5e:	4620      	mov	r0, r4
    ed60:	f000 fe13 	bl	f98a <assert_post_action>
    ed64:	e7e5      	b.n	ed32 <z_abort_timeout+0x5a>
		}
	}

	return ret;
}
    ed66:	4640      	mov	r0, r8
    ed68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ed6c:	200027c0 	.word	0x200027c0
    ed70:	00012778 	.word	0x00012778
    ed74:	00012790 	.word	0x00012790
    ed78:	00010f8c 	.word	0x00010f8c
    ed7c:	000127a8 	.word	0x000127a8
    ed80:	000127c0 	.word	0x000127c0
    ed84:	000127d8 	.word	0x000127d8

0000ed88 <z_get_next_timeout_expiry>:

	return ticks - elapsed();
}

s32_t z_get_next_timeout_expiry(void)
{
    ed88:	b570      	push	{r4, r5, r6, lr}
	s32_t ret = K_FOREVER;

	LOCKED(&timeout_lock) {
    ed8a:	2400      	movs	r4, #0
	__asm__ volatile(
    ed8c:	f04f 0320 	mov.w	r3, #32
    ed90:	f3ef 8511 	mrs	r5, BASEPRI
    ed94:	f383 8811 	msr	BASEPRI, r3
    ed98:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
    ed9c:	481b      	ldr	r0, [pc, #108]	; (ee0c <z_get_next_timeout_expiry+0x84>)
    ed9e:	f7ff fd4d 	bl	e83c <z_spin_lock_valid>
    eda2:	b128      	cbz	r0, edb0 <z_get_next_timeout_expiry+0x28>
	z_spin_lock_set_owner(l);
    eda4:	4819      	ldr	r0, [pc, #100]	; (ee0c <z_get_next_timeout_expiry+0x84>)
    eda6:	f7ff fd69 	bl	e87c <z_spin_lock_set_owner>
	s32_t ret = K_FOREVER;
    edaa:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    edae:	e021      	b.n	edf4 <z_get_next_timeout_expiry+0x6c>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
    edb0:	4e17      	ldr	r6, [pc, #92]	; (ee10 <z_get_next_timeout_expiry+0x88>)
    edb2:	234e      	movs	r3, #78	; 0x4e
    edb4:	4632      	mov	r2, r6
    edb6:	4917      	ldr	r1, [pc, #92]	; (ee14 <z_get_next_timeout_expiry+0x8c>)
    edb8:	4817      	ldr	r0, [pc, #92]	; (ee18 <z_get_next_timeout_expiry+0x90>)
    edba:	f000 fd60 	bl	f87e <printk>
    edbe:	4817      	ldr	r0, [pc, #92]	; (ee1c <z_get_next_timeout_expiry+0x94>)
    edc0:	f000 fd5d 	bl	f87e <printk>
    edc4:	214e      	movs	r1, #78	; 0x4e
    edc6:	4630      	mov	r0, r6
    edc8:	f000 fddf 	bl	f98a <assert_post_action>
    edcc:	e7ea      	b.n	eda4 <z_get_next_timeout_expiry+0x1c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
    edce:	4c10      	ldr	r4, [pc, #64]	; (ee10 <z_get_next_timeout_expiry+0x88>)
    edd0:	2361      	movs	r3, #97	; 0x61
    edd2:	4622      	mov	r2, r4
    edd4:	4912      	ldr	r1, [pc, #72]	; (ee20 <z_get_next_timeout_expiry+0x98>)
    edd6:	4810      	ldr	r0, [pc, #64]	; (ee18 <z_get_next_timeout_expiry+0x90>)
    edd8:	f000 fd51 	bl	f87e <printk>
    eddc:	4811      	ldr	r0, [pc, #68]	; (ee24 <z_get_next_timeout_expiry+0x9c>)
    edde:	f000 fd4e 	bl	f87e <printk>
    ede2:	2161      	movs	r1, #97	; 0x61
    ede4:	4620      	mov	r0, r4
    ede6:	f000 fdd0 	bl	f98a <assert_post_action>
	__asm__ volatile(
    edea:	f385 8811 	msr	BASEPRI, r5
    edee:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    edf2:	2401      	movs	r4, #1
    edf4:	b944      	cbnz	r4, ee08 <z_get_next_timeout_expiry+0x80>
		ret = next_timeout();
    edf6:	f7ff fe9b 	bl	eb30 <next_timeout>
    edfa:	4606      	mov	r6, r0
    edfc:	4803      	ldr	r0, [pc, #12]	; (ee0c <z_get_next_timeout_expiry+0x84>)
    edfe:	f7ff fd2d 	bl	e85c <z_spin_unlock_valid>
    ee02:	2800      	cmp	r0, #0
    ee04:	d1f1      	bne.n	edea <z_get_next_timeout_expiry+0x62>
    ee06:	e7e2      	b.n	edce <z_get_next_timeout_expiry+0x46>
	}
	return ret;
}
    ee08:	4630      	mov	r0, r6
    ee0a:	bd70      	pop	{r4, r5, r6, pc}
    ee0c:	200027c0 	.word	0x200027c0
    ee10:	00012778 	.word	0x00012778
    ee14:	00012790 	.word	0x00012790
    ee18:	00010f8c 	.word	0x00010f8c
    ee1c:	000127a8 	.word	0x000127a8
    ee20:	000127c0 	.word	0x000127c0
    ee24:	000127d8 	.word	0x000127d8

0000ee28 <z_set_timeout_expiry>:

void z_set_timeout_expiry(s32_t ticks, bool idle)
{
    ee28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ee2c:	4607      	mov	r7, r0
    ee2e:	4688      	mov	r8, r1
	LOCKED(&timeout_lock) {
    ee30:	2400      	movs	r4, #0
	__asm__ volatile(
    ee32:	f04f 0320 	mov.w	r3, #32
    ee36:	f3ef 8611 	mrs	r6, BASEPRI
    ee3a:	f383 8811 	msr	BASEPRI, r3
    ee3e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
    ee42:	4823      	ldr	r0, [pc, #140]	; (eed0 <z_set_timeout_expiry+0xa8>)
    ee44:	f7ff fcfa 	bl	e83c <z_spin_lock_valid>
    ee48:	b118      	cbz	r0, ee52 <z_set_timeout_expiry+0x2a>
	z_spin_lock_set_owner(l);
    ee4a:	4821      	ldr	r0, [pc, #132]	; (eed0 <z_set_timeout_expiry+0xa8>)
    ee4c:	f7ff fd16 	bl	e87c <z_spin_lock_set_owner>
	return k;
    ee50:	e01d      	b.n	ee8e <z_set_timeout_expiry+0x66>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
    ee52:	4d20      	ldr	r5, [pc, #128]	; (eed4 <z_set_timeout_expiry+0xac>)
    ee54:	234e      	movs	r3, #78	; 0x4e
    ee56:	462a      	mov	r2, r5
    ee58:	491f      	ldr	r1, [pc, #124]	; (eed8 <z_set_timeout_expiry+0xb0>)
    ee5a:	4820      	ldr	r0, [pc, #128]	; (eedc <z_set_timeout_expiry+0xb4>)
    ee5c:	f000 fd0f 	bl	f87e <printk>
    ee60:	481f      	ldr	r0, [pc, #124]	; (eee0 <z_set_timeout_expiry+0xb8>)
    ee62:	f000 fd0c 	bl	f87e <printk>
    ee66:	214e      	movs	r1, #78	; 0x4e
    ee68:	4628      	mov	r0, r5
    ee6a:	f000 fd8e 	bl	f98a <assert_post_action>
    ee6e:	e7ec      	b.n	ee4a <z_set_timeout_expiry+0x22>
		int next = next_timeout();
		bool sooner = (next == K_FOREVER) || (ticks < next);
    ee70:	2501      	movs	r5, #1
		 * what we have.  Also don't try to set a timeout when
		 * one is about to expire: drivers have internal logic
		 * that will bump the timeout to the "next" tick if
		 * it's not considered to be settable as directed.
		 */
		if (sooner && !imminent) {
    ee72:	f015 0f01 	tst.w	r5, #1
    ee76:	d001      	beq.n	ee7c <z_set_timeout_expiry+0x54>
    ee78:	2801      	cmp	r0, #1
    ee7a:	dc13      	bgt.n	eea4 <z_set_timeout_expiry+0x7c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
    ee7c:	4814      	ldr	r0, [pc, #80]	; (eed0 <z_set_timeout_expiry+0xa8>)
    ee7e:	f7ff fced 	bl	e85c <z_spin_unlock_valid>
    ee82:	b1a0      	cbz	r0, eeae <z_set_timeout_expiry+0x86>
	__asm__ volatile(
    ee84:	f386 8811 	msr	BASEPRI, r6
    ee88:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    ee8c:	2401      	movs	r4, #1
    ee8e:	4625      	mov	r5, r4
    ee90:	b9e4      	cbnz	r4, eecc <z_set_timeout_expiry+0xa4>
		int next = next_timeout();
    ee92:	f7ff fe4d 	bl	eb30 <next_timeout>
		bool sooner = (next == K_FOREVER) || (ticks < next);
    ee96:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    ee9a:	d0e9      	beq.n	ee70 <z_set_timeout_expiry+0x48>
    ee9c:	42b8      	cmp	r0, r7
    ee9e:	dde8      	ble.n	ee72 <z_set_timeout_expiry+0x4a>
    eea0:	2501      	movs	r5, #1
    eea2:	e7e6      	b.n	ee72 <z_set_timeout_expiry+0x4a>
			z_clock_set_timeout(ticks, idle);
    eea4:	4641      	mov	r1, r8
    eea6:	4638      	mov	r0, r7
    eea8:	f7f9 ffa4 	bl	8df4 <z_clock_set_timeout>
    eeac:	e7e6      	b.n	ee7c <z_set_timeout_expiry+0x54>
    eeae:	4c09      	ldr	r4, [pc, #36]	; (eed4 <z_set_timeout_expiry+0xac>)
    eeb0:	2361      	movs	r3, #97	; 0x61
    eeb2:	4622      	mov	r2, r4
    eeb4:	490b      	ldr	r1, [pc, #44]	; (eee4 <z_set_timeout_expiry+0xbc>)
    eeb6:	4809      	ldr	r0, [pc, #36]	; (eedc <z_set_timeout_expiry+0xb4>)
    eeb8:	f000 fce1 	bl	f87e <printk>
    eebc:	480a      	ldr	r0, [pc, #40]	; (eee8 <z_set_timeout_expiry+0xc0>)
    eebe:	f000 fcde 	bl	f87e <printk>
    eec2:	2161      	movs	r1, #97	; 0x61
    eec4:	4620      	mov	r0, r4
    eec6:	f000 fd60 	bl	f98a <assert_post_action>
    eeca:	e7db      	b.n	ee84 <z_set_timeout_expiry+0x5c>
		}
	}
}
    eecc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    eed0:	200027c0 	.word	0x200027c0
    eed4:	00012778 	.word	0x00012778
    eed8:	00012790 	.word	0x00012790
    eedc:	00010f8c 	.word	0x00010f8c
    eee0:	000127a8 	.word	0x000127a8
    eee4:	000127c0 	.word	0x000127c0
    eee8:	000127d8 	.word	0x000127d8

0000eeec <z_clock_announce>:

void z_clock_announce(s32_t ticks)
{
    eeec:	e92d 4878 	stmdb	sp!, {r3, r4, r5, r6, fp, lr}
    eef0:	4605      	mov	r5, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    eef2:	f7fe fe33 	bl	db5c <z_time_slice>
	__asm__ volatile(
    eef6:	f04f 0320 	mov.w	r3, #32
    eefa:	f3ef 8411 	mrs	r4, BASEPRI
    eefe:	f383 8811 	msr	BASEPRI, r3
    ef02:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
    ef06:	484f      	ldr	r0, [pc, #316]	; (f044 <z_clock_announce+0x158>)
    ef08:	f7ff fc98 	bl	e83c <z_spin_lock_valid>
    ef0c:	b128      	cbz	r0, ef1a <z_clock_announce+0x2e>
	z_spin_lock_set_owner(l);
    ef0e:	484d      	ldr	r0, [pc, #308]	; (f044 <z_clock_announce+0x158>)
    ef10:	f7ff fcb4 	bl	e87c <z_spin_lock_set_owner>
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
    ef14:	4b4c      	ldr	r3, [pc, #304]	; (f048 <z_clock_announce+0x15c>)
    ef16:	601d      	str	r5, [r3, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
    ef18:	e02e      	b.n	ef78 <z_clock_announce+0x8c>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
    ef1a:	4e4c      	ldr	r6, [pc, #304]	; (f04c <z_clock_announce+0x160>)
    ef1c:	234e      	movs	r3, #78	; 0x4e
    ef1e:	4632      	mov	r2, r6
    ef20:	494b      	ldr	r1, [pc, #300]	; (f050 <z_clock_announce+0x164>)
    ef22:	484c      	ldr	r0, [pc, #304]	; (f054 <z_clock_announce+0x168>)
    ef24:	f000 fcab 	bl	f87e <printk>
    ef28:	484b      	ldr	r0, [pc, #300]	; (f058 <z_clock_announce+0x16c>)
    ef2a:	f000 fca8 	bl	f87e <printk>
    ef2e:	214e      	movs	r1, #78	; 0x4e
    ef30:	4630      	mov	r0, r6
    ef32:	f000 fd2a 	bl	f98a <assert_post_action>
    ef36:	e7ea      	b.n	ef0e <z_clock_announce+0x22>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
    ef38:	4e44      	ldr	r6, [pc, #272]	; (f04c <z_clock_announce+0x160>)
    ef3a:	2361      	movs	r3, #97	; 0x61
    ef3c:	4632      	mov	r2, r6
    ef3e:	4947      	ldr	r1, [pc, #284]	; (f05c <z_clock_announce+0x170>)
    ef40:	4844      	ldr	r0, [pc, #272]	; (f054 <z_clock_announce+0x168>)
    ef42:	f000 fc9c 	bl	f87e <printk>
    ef46:	4846      	ldr	r0, [pc, #280]	; (f060 <z_clock_announce+0x174>)
    ef48:	f000 fc99 	bl	f87e <printk>
    ef4c:	2161      	movs	r1, #97	; 0x61
    ef4e:	4630      	mov	r0, r6
    ef50:	f000 fd1b 	bl	f98a <assert_post_action>
    ef54:	e030      	b.n	efb8 <z_clock_announce+0xcc>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
    ef56:	4d3d      	ldr	r5, [pc, #244]	; (f04c <z_clock_announce+0x160>)
    ef58:	234e      	movs	r3, #78	; 0x4e
    ef5a:	462a      	mov	r2, r5
    ef5c:	493c      	ldr	r1, [pc, #240]	; (f050 <z_clock_announce+0x164>)
    ef5e:	483d      	ldr	r0, [pc, #244]	; (f054 <z_clock_announce+0x168>)
    ef60:	f000 fc8d 	bl	f87e <printk>
    ef64:	483c      	ldr	r0, [pc, #240]	; (f058 <z_clock_announce+0x16c>)
    ef66:	f000 fc8a 	bl	f87e <printk>
    ef6a:	214e      	movs	r1, #78	; 0x4e
    ef6c:	4628      	mov	r0, r5
    ef6e:	f000 fd0c 	bl	f98a <assert_post_action>
	z_spin_lock_set_owner(l);
    ef72:	4834      	ldr	r0, [pc, #208]	; (f044 <z_clock_announce+0x158>)
    ef74:	f7ff fc82 	bl	e87c <z_spin_lock_set_owner>
    ef78:	f7ff fdb8 	bl	eaec <first>
    ef7c:	4605      	mov	r5, r0
    ef7e:	2800      	cmp	r0, #0
    ef80:	d02f      	beq.n	efe2 <z_clock_announce+0xf6>
    ef82:	6880      	ldr	r0, [r0, #8]
    ef84:	4b30      	ldr	r3, [pc, #192]	; (f048 <z_clock_announce+0x15c>)
    ef86:	6819      	ldr	r1, [r3, #0]
    ef88:	4288      	cmp	r0, r1
    ef8a:	dc2a      	bgt.n	efe2 <z_clock_announce+0xf6>
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
    ef8c:	4e35      	ldr	r6, [pc, #212]	; (f064 <z_clock_announce+0x178>)
    ef8e:	e9d6 2300 	ldrd	r2, r3, [r6]
    ef92:	eb12 0b00 	adds.w	fp, r2, r0
    ef96:	eb43 7ce0 	adc.w	ip, r3, r0, asr #31
    ef9a:	e9c6 bc00 	strd	fp, ip, [r6]
		announce_remaining -= dt;
    ef9e:	1a09      	subs	r1, r1, r0
    efa0:	4b29      	ldr	r3, [pc, #164]	; (f048 <z_clock_announce+0x15c>)
    efa2:	6019      	str	r1, [r3, #0]
		t->dticks = 0;
    efa4:	2300      	movs	r3, #0
    efa6:	60ab      	str	r3, [r5, #8]
		remove_timeout(t);
    efa8:	4628      	mov	r0, r5
    efaa:	f001 fdd2 	bl	10b52 <remove_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
    efae:	4825      	ldr	r0, [pc, #148]	; (f044 <z_clock_announce+0x158>)
    efb0:	f7ff fc54 	bl	e85c <z_spin_unlock_valid>
    efb4:	2800      	cmp	r0, #0
    efb6:	d0bf      	beq.n	ef38 <z_clock_announce+0x4c>
	__asm__ volatile(
    efb8:	f384 8811 	msr	BASEPRI, r4
    efbc:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&timeout_lock, key);
		t->fn(t);
    efc0:	68eb      	ldr	r3, [r5, #12]
    efc2:	4628      	mov	r0, r5
    efc4:	4798      	blx	r3
	__asm__ volatile(
    efc6:	f04f 0320 	mov.w	r3, #32
    efca:	f3ef 8411 	mrs	r4, BASEPRI
    efce:	f383 8811 	msr	BASEPRI, r3
    efd2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
    efd6:	481b      	ldr	r0, [pc, #108]	; (f044 <z_clock_announce+0x158>)
    efd8:	f7ff fc30 	bl	e83c <z_spin_lock_valid>
    efdc:	2800      	cmp	r0, #0
    efde:	d1c8      	bne.n	ef72 <z_clock_announce+0x86>
    efe0:	e7b9      	b.n	ef56 <z_clock_announce+0x6a>
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
    efe2:	b125      	cbz	r5, efee <z_clock_announce+0x102>
		first()->dticks -= announce_remaining;
    efe4:	68ab      	ldr	r3, [r5, #8]
    efe6:	4a18      	ldr	r2, [pc, #96]	; (f048 <z_clock_announce+0x15c>)
    efe8:	6812      	ldr	r2, [r2, #0]
    efea:	1a9b      	subs	r3, r3, r2
    efec:	60ab      	str	r3, [r5, #8]
	}

	curr_tick += announce_remaining;
    efee:	481d      	ldr	r0, [pc, #116]	; (f064 <z_clock_announce+0x178>)
    eff0:	4915      	ldr	r1, [pc, #84]	; (f048 <z_clock_announce+0x15c>)
    eff2:	680d      	ldr	r5, [r1, #0]
    eff4:	e9d0 2300 	ldrd	r2, r3, [r0]
    eff8:	eb12 0b05 	adds.w	fp, r2, r5
    effc:	eb43 7ce5 	adc.w	ip, r3, r5, asr #31
    f000:	e9c0 bc00 	strd	fp, ip, [r0]
	announce_remaining = 0;
    f004:	2500      	movs	r5, #0
    f006:	600d      	str	r5, [r1, #0]

	z_clock_set_timeout(next_timeout(), false);
    f008:	f7ff fd92 	bl	eb30 <next_timeout>
    f00c:	4629      	mov	r1, r5
    f00e:	f7f9 fef1 	bl	8df4 <z_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
    f012:	480c      	ldr	r0, [pc, #48]	; (f044 <z_clock_announce+0x158>)
    f014:	f7ff fc22 	bl	e85c <z_spin_unlock_valid>
    f018:	b128      	cbz	r0, f026 <z_clock_announce+0x13a>
	__asm__ volatile(
    f01a:	f384 8811 	msr	BASEPRI, r4
    f01e:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    f022:	e8bd 8878 	ldmia.w	sp!, {r3, r4, r5, r6, fp, pc}
    f026:	4d09      	ldr	r5, [pc, #36]	; (f04c <z_clock_announce+0x160>)
    f028:	2361      	movs	r3, #97	; 0x61
    f02a:	462a      	mov	r2, r5
    f02c:	490b      	ldr	r1, [pc, #44]	; (f05c <z_clock_announce+0x170>)
    f02e:	4809      	ldr	r0, [pc, #36]	; (f054 <z_clock_announce+0x168>)
    f030:	f000 fc25 	bl	f87e <printk>
    f034:	480a      	ldr	r0, [pc, #40]	; (f060 <z_clock_announce+0x174>)
    f036:	f000 fc22 	bl	f87e <printk>
    f03a:	2161      	movs	r1, #97	; 0x61
    f03c:	4628      	mov	r0, r5
    f03e:	f000 fca4 	bl	f98a <assert_post_action>
    f042:	e7ea      	b.n	f01a <z_clock_announce+0x12e>
    f044:	200027c0 	.word	0x200027c0
    f048:	200027bc 	.word	0x200027bc
    f04c:	00012778 	.word	0x00012778
    f050:	00012790 	.word	0x00012790
    f054:	00010f8c 	.word	0x00010f8c
    f058:	000127a8 	.word	0x000127a8
    f05c:	000127c0 	.word	0x000127c0
    f060:	000127d8 	.word	0x000127d8
    f064:	20000000 	.word	0x20000000

0000f068 <z_tick_get>:
{
	can_wait_forever = 1;
}

s64_t z_tick_get(void)
{
    f068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	u64_t t = 0U;

	LOCKED(&timeout_lock) {
    f06a:	2600      	movs	r6, #0
	__asm__ volatile(
    f06c:	f04f 0320 	mov.w	r3, #32
    f070:	f3ef 8711 	mrs	r7, BASEPRI
    f074:	f383 8811 	msr	BASEPRI, r3
    f078:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
    f07c:	481e      	ldr	r0, [pc, #120]	; (f0f8 <z_tick_get+0x90>)
    f07e:	f7ff fbdd 	bl	e83c <z_spin_lock_valid>
    f082:	b128      	cbz	r0, f090 <z_tick_get+0x28>
	z_spin_lock_set_owner(l);
    f084:	481c      	ldr	r0, [pc, #112]	; (f0f8 <z_tick_get+0x90>)
    f086:	f7ff fbf9 	bl	e87c <z_spin_lock_set_owner>
	u64_t t = 0U;
    f08a:	2400      	movs	r4, #0
    f08c:	2500      	movs	r5, #0
    f08e:	e021      	b.n	f0d4 <z_tick_get+0x6c>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
    f090:	4c1a      	ldr	r4, [pc, #104]	; (f0fc <z_tick_get+0x94>)
    f092:	234e      	movs	r3, #78	; 0x4e
    f094:	4622      	mov	r2, r4
    f096:	491a      	ldr	r1, [pc, #104]	; (f100 <z_tick_get+0x98>)
    f098:	481a      	ldr	r0, [pc, #104]	; (f104 <z_tick_get+0x9c>)
    f09a:	f000 fbf0 	bl	f87e <printk>
    f09e:	481a      	ldr	r0, [pc, #104]	; (f108 <z_tick_get+0xa0>)
    f0a0:	f000 fbed 	bl	f87e <printk>
    f0a4:	214e      	movs	r1, #78	; 0x4e
    f0a6:	4620      	mov	r0, r4
    f0a8:	f000 fc6f 	bl	f98a <assert_post_action>
    f0ac:	e7ea      	b.n	f084 <z_tick_get+0x1c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
    f0ae:	4e13      	ldr	r6, [pc, #76]	; (f0fc <z_tick_get+0x94>)
    f0b0:	2361      	movs	r3, #97	; 0x61
    f0b2:	4632      	mov	r2, r6
    f0b4:	4915      	ldr	r1, [pc, #84]	; (f10c <z_tick_get+0xa4>)
    f0b6:	4813      	ldr	r0, [pc, #76]	; (f104 <z_tick_get+0x9c>)
    f0b8:	f000 fbe1 	bl	f87e <printk>
    f0bc:	4814      	ldr	r0, [pc, #80]	; (f110 <z_tick_get+0xa8>)
    f0be:	f000 fbde 	bl	f87e <printk>
    f0c2:	2161      	movs	r1, #97	; 0x61
    f0c4:	4630      	mov	r0, r6
    f0c6:	f000 fc60 	bl	f98a <assert_post_action>
	__asm__ volatile(
    f0ca:	f387 8811 	msr	BASEPRI, r7
    f0ce:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    f0d2:	2601      	movs	r6, #1
    f0d4:	b96e      	cbnz	r6, f0f2 <z_tick_get+0x8a>
		t = curr_tick + z_clock_elapsed();
    f0d6:	f7f9 ff0b 	bl	8ef0 <z_clock_elapsed>
    f0da:	4b0e      	ldr	r3, [pc, #56]	; (f114 <z_tick_get+0xac>)
    f0dc:	e9d3 2300 	ldrd	r2, r3, [r3]
    f0e0:	1814      	adds	r4, r2, r0
    f0e2:	f143 0500 	adc.w	r5, r3, #0
    f0e6:	4804      	ldr	r0, [pc, #16]	; (f0f8 <z_tick_get+0x90>)
    f0e8:	f7ff fbb8 	bl	e85c <z_spin_unlock_valid>
    f0ec:	2800      	cmp	r0, #0
    f0ee:	d1ec      	bne.n	f0ca <z_tick_get+0x62>
    f0f0:	e7dd      	b.n	f0ae <z_tick_get+0x46>
	}
	return t;
}
    f0f2:	4620      	mov	r0, r4
    f0f4:	4629      	mov	r1, r5
    f0f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f0f8:	200027c0 	.word	0x200027c0
    f0fc:	00012778 	.word	0x00012778
    f100:	00012790 	.word	0x00012790
    f104:	00010f8c 	.word	0x00010f8c
    f108:	000127a8 	.word	0x000127a8
    f10c:	000127c0 	.word	0x000127c0
    f110:	000127d8 	.word	0x000127d8
    f114:	20000000 	.word	0x20000000

0000f118 <z_timer_expiration_handler>:
 * @param t  Timeout used by the timer.
 *
 * @return N/A
 */
void z_timer_expiration_handler(struct _timeout *t)
{
    f118:	b510      	push	{r4, lr}
    f11a:	4604      	mov	r4, r0

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (timer->period > 0) {
    f11c:	6a02      	ldr	r2, [r0, #32]
    f11e:	2a00      	cmp	r2, #0
    f120:	dc17      	bgt.n	f152 <z_timer_expiration_handler+0x3a>
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
    f122:	6a63      	ldr	r3, [r4, #36]	; 0x24
    f124:	3301      	adds	r3, #1
    f126:	6263      	str	r3, [r4, #36]	; 0x24

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
    f128:	69a3      	ldr	r3, [r4, #24]
    f12a:	b10b      	cbz	r3, f130 <z_timer_expiration_handler+0x18>
		timer->expiry_fn(timer);
    f12c:	4620      	mov	r0, r4
    f12e:	4798      	blx	r3
	sys_dlist_init(&w->waitq);
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (void *)sys_dlist_peek_head(&w->waitq);
    f130:	f104 0310 	add.w	r3, r4, #16
	return list->head == list;
    f134:	6924      	ldr	r4, [r4, #16]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    f136:	42a3      	cmp	r3, r4
    f138:	d015      	beq.n	f166 <z_timer_expiration_handler+0x4e>
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
    f13a:	b1a4      	cbz	r4, f166 <z_timer_expiration_handler+0x4e>
	 * place a thread can be taken off this pend queue, and b) the
	 * only place a thread can be put on the pend queue is at
	 * thread level, which of course cannot interrupt the current
	 * context.
	 */
	z_unpend_thread_no_timeout(thread);
    f13c:	4620      	mov	r0, r4
    f13e:	f7fe f899 	bl	d274 <z_unpend_thread_no_timeout>
	u8_t state = thread->base.thread_state;
    f142:	7b63      	ldrb	r3, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    f144:	f013 0f1f 	tst.w	r3, #31
    f148:	d109      	bne.n	f15e <z_timer_expiration_handler+0x46>
	return node->next != NULL;
    f14a:	69a3      	ldr	r3, [r4, #24]
    f14c:	b12b      	cbz	r3, f15a <z_timer_expiration_handler+0x42>
    f14e:	2300      	movs	r3, #0
    f150:	e006      	b.n	f160 <z_timer_expiration_handler+0x48>
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    f152:	4907      	ldr	r1, [pc, #28]	; (f170 <z_timer_expiration_handler+0x58>)
    f154:	f7ff fd12 	bl	eb7c <z_add_timeout>
    f158:	e7e3      	b.n	f122 <z_timer_expiration_handler+0xa>
    f15a:	2301      	movs	r3, #1
    f15c:	e000      	b.n	f160 <z_timer_expiration_handler+0x48>
    f15e:	2300      	movs	r3, #0
	if (z_is_thread_ready(thread)) {
    f160:	b913      	cbnz	r3, f168 <z_timer_expiration_handler+0x50>
    f162:	2300      	movs	r3, #0
    f164:	66a3      	str	r3, [r4, #104]	; 0x68

	z_ready_thread(thread);

	z_set_thread_return_value(thread, 0);
}
    f166:	bd10      	pop	{r4, pc}
		z_add_thread_to_ready_q(thread);
    f168:	4620      	mov	r0, r4
    f16a:	f7fe fb4b 	bl	d804 <z_add_thread_to_ready_q>
    f16e:	e7f8      	b.n	f162 <z_timer_expiration_handler+0x4a>
    f170:	0000f119 	.word	0x0000f119

0000f174 <z_impl_k_timer_start>:
	z_object_init(timer);
}


void z_impl_k_timer_start(struct k_timer *timer, s32_t duration, s32_t period)
{
    f174:	b5f0      	push	{r4, r5, r6, r7, lr}
    f176:	b083      	sub	sp, #12
    f178:	4604      	mov	r4, r0
    f17a:	4615      	mov	r5, r2
	__ASSERT(duration >= 0 && period >= 0 &&
    f17c:	1e0e      	subs	r6, r1, #0
    f17e:	db03      	blt.n	f188 <z_impl_k_timer_start+0x14>
    f180:	2a00      	cmp	r2, #0
    f182:	db01      	blt.n	f188 <z_impl_k_timer_start+0x14>
    f184:	b976      	cbnz	r6, f1a4 <z_impl_k_timer_start+0x30>
    f186:	b96a      	cbnz	r2, f1a4 <z_impl_k_timer_start+0x30>
    f188:	4f1c      	ldr	r7, [pc, #112]	; (f1fc <z_impl_k_timer_start+0x88>)
    f18a:	2373      	movs	r3, #115	; 0x73
    f18c:	463a      	mov	r2, r7
    f18e:	491c      	ldr	r1, [pc, #112]	; (f200 <z_impl_k_timer_start+0x8c>)
    f190:	481c      	ldr	r0, [pc, #112]	; (f204 <z_impl_k_timer_start+0x90>)
    f192:	f000 fb74 	bl	f87e <printk>
    f196:	481c      	ldr	r0, [pc, #112]	; (f208 <z_impl_k_timer_start+0x94>)
    f198:	f000 fb71 	bl	f87e <printk>
    f19c:	2173      	movs	r1, #115	; 0x73
    f19e:	4638      	mov	r0, r7
    f1a0:	f000 fbf3 	bl	f98a <assert_post_action>
    f1a4:	17eb      	asrs	r3, r5, #31
    f1a6:	03d9      	lsls	r1, r3, #15
    f1a8:	ea41 4155 	orr.w	r1, r1, r5, lsr #17
    f1ac:	03e8      	lsls	r0, r5, #15
    f1ae:	4d17      	ldr	r5, [pc, #92]	; (f20c <z_impl_k_timer_start+0x98>)
    f1b0:	2700      	movs	r7, #0
    f1b2:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
    f1b6:	2300      	movs	r3, #0
    f1b8:	1940      	adds	r0, r0, r5
    f1ba:	eb47 0101 	adc.w	r1, r7, r1
    f1be:	f7f0 ff9f 	bl	100 <__aeabi_ldivmod>
		 (duration != 0 || period != 0), "invalid parameters\n");

	volatile s32_t period_in_ticks, duration_in_ticks;

	period_in_ticks = z_ms_to_ticks(period);
    f1c2:	9001      	str	r0, [sp, #4]
    f1c4:	17f3      	asrs	r3, r6, #31
    f1c6:	03d9      	lsls	r1, r3, #15
    f1c8:	ea41 4156 	orr.w	r1, r1, r6, lsr #17
    f1cc:	03f0      	lsls	r0, r6, #15
    f1ce:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
    f1d2:	2300      	movs	r3, #0
    f1d4:	1940      	adds	r0, r0, r5
    f1d6:	eb47 0101 	adc.w	r1, r7, r1
    f1da:	f7f0 ff91 	bl	100 <__aeabi_ldivmod>
	duration_in_ticks = z_ms_to_ticks(duration);
    f1de:	9000      	str	r0, [sp, #0]

	(void)z_abort_timeout(&timer->timeout);
    f1e0:	4620      	mov	r0, r4
    f1e2:	f7ff fd79 	bl	ecd8 <z_abort_timeout>
	timer->period = period_in_ticks;
    f1e6:	9b01      	ldr	r3, [sp, #4]
    f1e8:	6223      	str	r3, [r4, #32]
	timer->status = 0U;
    f1ea:	6267      	str	r7, [r4, #36]	; 0x24
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    f1ec:	9a00      	ldr	r2, [sp, #0]
    f1ee:	4908      	ldr	r1, [pc, #32]	; (f210 <z_impl_k_timer_start+0x9c>)
    f1f0:	4620      	mov	r0, r4
    f1f2:	f7ff fcc3 	bl	eb7c <z_add_timeout>
		     duration_in_ticks);
}
    f1f6:	b003      	add	sp, #12
    f1f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f1fa:	bf00      	nop
    f1fc:	00013598 	.word	0x00013598
    f200:	000135ac 	.word	0x000135ac
    f204:	00010f8c 	.word	0x00010f8c
    f208:	000135ec 	.word	0x000135ec
    f20c:	0004ffff 	.word	0x0004ffff
    f210:	0000f119 	.word	0x0000f119

0000f214 <z_impl_k_timer_status_sync>:
#ifdef CONFIG_USERSPACE
Z_SYSCALL_HANDLER1_SIMPLE(k_timer_status_get, K_OBJ_TIMER, struct k_timer *);
#endif

u32_t z_impl_k_timer_status_sync(struct k_timer *timer)
{
    f214:	b570      	push	{r4, r5, r6, lr}
    f216:	4605      	mov	r5, r0
    f218:	f3ef 8305 	mrs	r3, IPSR
    f21c:	2b0d      	cmp	r3, #13
    f21e:	d808      	bhi.n	f232 <z_impl_k_timer_status_sync+0x1e>
    f220:	2b00      	cmp	r3, #0
    f222:	d047      	beq.n	f2b4 <z_impl_k_timer_status_sync+0xa0>
    f224:	4b43      	ldr	r3, [pc, #268]	; (f334 <z_impl_k_timer_status_sync+0x120>)
    f226:	685b      	ldr	r3, [r3, #4]
    f228:	f413 6f00 	tst.w	r3, #2048	; 0x800
    f22c:	d044      	beq.n	f2b8 <z_impl_k_timer_status_sync+0xa4>
    f22e:	2300      	movs	r3, #0
    f230:	e000      	b.n	f234 <z_impl_k_timer_status_sync+0x20>
    f232:	2301      	movs	r3, #1
	__ASSERT(!z_is_in_isr(), "");
    f234:	2b00      	cmp	r3, #0
    f236:	d141      	bne.n	f2bc <z_impl_k_timer_status_sync+0xa8>
	__asm__ volatile(
    f238:	f04f 0320 	mov.w	r3, #32
    f23c:	f3ef 8411 	mrs	r4, BASEPRI
    f240:	f383 8811 	msr	BASEPRI, r3
    f244:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
    f248:	483b      	ldr	r0, [pc, #236]	; (f338 <z_impl_k_timer_status_sync+0x124>)
    f24a:	f7ff faf7 	bl	e83c <z_spin_lock_valid>
    f24e:	2800      	cmp	r0, #0
    f250:	d043      	beq.n	f2da <z_impl_k_timer_status_sync+0xc6>
	z_spin_lock_set_owner(l);
    f252:	4839      	ldr	r0, [pc, #228]	; (f338 <z_impl_k_timer_status_sync+0x124>)
    f254:	f7ff fb12 	bl	e87c <z_spin_lock_set_owner>
	return k;
    f258:	4623      	mov	r3, r4

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t result = timer->status;
    f25a:	6a6e      	ldr	r6, [r5, #36]	; 0x24

	if (result == 0U) {
    f25c:	b9e6      	cbnz	r6, f298 <z_impl_k_timer_status_sync+0x84>
    f25e:	682a      	ldr	r2, [r5, #0]
		if (!z_is_inactive_timeout(&timer->timeout)) {
    f260:	b1d2      	cbz	r2, f298 <z_impl_k_timer_status_sync+0x84>
			/* wait for timer to expire or stop */
			(void)z_pend_curr(&lock, key, &timer->wait_q, K_FOREVER);
    f262:	4e35      	ldr	r6, [pc, #212]	; (f338 <z_impl_k_timer_status_sync+0x124>)
    f264:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    f268:	f105 0210 	add.w	r2, r5, #16
    f26c:	4621      	mov	r1, r4
    f26e:	4630      	mov	r0, r6
    f270:	f7fe fdda 	bl	de28 <z_pend_curr>
    f274:	f04f 0320 	mov.w	r3, #32
    f278:	f3ef 8411 	mrs	r4, BASEPRI
    f27c:	f383 8811 	msr	BASEPRI, r3
    f280:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
    f284:	4630      	mov	r0, r6
    f286:	f7ff fad9 	bl	e83c <z_spin_lock_valid>
    f28a:	2800      	cmp	r0, #0
    f28c:	d034      	beq.n	f2f8 <z_impl_k_timer_status_sync+0xe4>
	z_spin_lock_set_owner(l);
    f28e:	482a      	ldr	r0, [pc, #168]	; (f338 <z_impl_k_timer_status_sync+0x124>)
    f290:	f7ff faf4 	bl	e87c <z_spin_lock_set_owner>
	return k;
    f294:	4623      	mov	r3, r4

			/* get updated timer status */
			key = k_spin_lock(&lock);
			result = timer->status;
    f296:	6a6e      	ldr	r6, [r5, #36]	; 0x24
		}
	} else {
		/* timer has already expired at least once */
	}

	timer->status = 0U;
    f298:	2200      	movs	r2, #0
    f29a:	626a      	str	r2, [r5, #36]	; 0x24
	k_spin_unlock(&lock, key);
    f29c:	461c      	mov	r4, r3
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
    f29e:	4826      	ldr	r0, [pc, #152]	; (f338 <z_impl_k_timer_status_sync+0x124>)
    f2a0:	f7ff fadc 	bl	e85c <z_spin_unlock_valid>
    f2a4:	2800      	cmp	r0, #0
    f2a6:	d036      	beq.n	f316 <z_impl_k_timer_status_sync+0x102>
	__asm__ volatile(
    f2a8:	f384 8811 	msr	BASEPRI, r4
    f2ac:	f3bf 8f6f 	isb	sy

	return result;
}
    f2b0:	4630      	mov	r0, r6
    f2b2:	bd70      	pop	{r4, r5, r6, pc}
    f2b4:	2300      	movs	r3, #0
    f2b6:	e7bd      	b.n	f234 <z_impl_k_timer_status_sync+0x20>
    f2b8:	2301      	movs	r3, #1
    f2ba:	e7bb      	b.n	f234 <z_impl_k_timer_status_sync+0x20>
	__ASSERT(!z_is_in_isr(), "");
    f2bc:	4c1f      	ldr	r4, [pc, #124]	; (f33c <z_impl_k_timer_status_sync+0x128>)
    f2be:	23ba      	movs	r3, #186	; 0xba
    f2c0:	4622      	mov	r2, r4
    f2c2:	491f      	ldr	r1, [pc, #124]	; (f340 <z_impl_k_timer_status_sync+0x12c>)
    f2c4:	481f      	ldr	r0, [pc, #124]	; (f344 <z_impl_k_timer_status_sync+0x130>)
    f2c6:	f000 fada 	bl	f87e <printk>
    f2ca:	481f      	ldr	r0, [pc, #124]	; (f348 <z_impl_k_timer_status_sync+0x134>)
    f2cc:	f000 fad7 	bl	f87e <printk>
    f2d0:	21ba      	movs	r1, #186	; 0xba
    f2d2:	4620      	mov	r0, r4
    f2d4:	f000 fb59 	bl	f98a <assert_post_action>
    f2d8:	e7ae      	b.n	f238 <z_impl_k_timer_status_sync+0x24>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
    f2da:	4e1c      	ldr	r6, [pc, #112]	; (f34c <z_impl_k_timer_status_sync+0x138>)
    f2dc:	234e      	movs	r3, #78	; 0x4e
    f2de:	4632      	mov	r2, r6
    f2e0:	491b      	ldr	r1, [pc, #108]	; (f350 <z_impl_k_timer_status_sync+0x13c>)
    f2e2:	4818      	ldr	r0, [pc, #96]	; (f344 <z_impl_k_timer_status_sync+0x130>)
    f2e4:	f000 facb 	bl	f87e <printk>
    f2e8:	481a      	ldr	r0, [pc, #104]	; (f354 <z_impl_k_timer_status_sync+0x140>)
    f2ea:	f000 fac8 	bl	f87e <printk>
    f2ee:	214e      	movs	r1, #78	; 0x4e
    f2f0:	4630      	mov	r0, r6
    f2f2:	f000 fb4a 	bl	f98a <assert_post_action>
    f2f6:	e7ac      	b.n	f252 <z_impl_k_timer_status_sync+0x3e>
    f2f8:	4e14      	ldr	r6, [pc, #80]	; (f34c <z_impl_k_timer_status_sync+0x138>)
    f2fa:	234e      	movs	r3, #78	; 0x4e
    f2fc:	4632      	mov	r2, r6
    f2fe:	4914      	ldr	r1, [pc, #80]	; (f350 <z_impl_k_timer_status_sync+0x13c>)
    f300:	4810      	ldr	r0, [pc, #64]	; (f344 <z_impl_k_timer_status_sync+0x130>)
    f302:	f000 fabc 	bl	f87e <printk>
    f306:	4813      	ldr	r0, [pc, #76]	; (f354 <z_impl_k_timer_status_sync+0x140>)
    f308:	f000 fab9 	bl	f87e <printk>
    f30c:	214e      	movs	r1, #78	; 0x4e
    f30e:	4630      	mov	r0, r6
    f310:	f000 fb3b 	bl	f98a <assert_post_action>
    f314:	e7bb      	b.n	f28e <z_impl_k_timer_status_sync+0x7a>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
    f316:	4d0d      	ldr	r5, [pc, #52]	; (f34c <z_impl_k_timer_status_sync+0x138>)
    f318:	2361      	movs	r3, #97	; 0x61
    f31a:	462a      	mov	r2, r5
    f31c:	490e      	ldr	r1, [pc, #56]	; (f358 <z_impl_k_timer_status_sync+0x144>)
    f31e:	4809      	ldr	r0, [pc, #36]	; (f344 <z_impl_k_timer_status_sync+0x130>)
    f320:	f000 faad 	bl	f87e <printk>
    f324:	480d      	ldr	r0, [pc, #52]	; (f35c <z_impl_k_timer_status_sync+0x148>)
    f326:	f000 faaa 	bl	f87e <printk>
    f32a:	2161      	movs	r1, #97	; 0x61
    f32c:	4628      	mov	r0, r5
    f32e:	f000 fb2c 	bl	f98a <assert_post_action>
    f332:	e7b9      	b.n	f2a8 <z_impl_k_timer_status_sync+0x94>
    f334:	e000ed00 	.word	0xe000ed00
    f338:	200027c4 	.word	0x200027c4
    f33c:	00013598 	.word	0x00013598
    f340:	0001330c 	.word	0x0001330c
    f344:	00010f8c 	.word	0x00010f8c
    f348:	000111e0 	.word	0x000111e0
    f34c:	00012778 	.word	0x00012778
    f350:	00012790 	.word	0x00012790
    f354:	000127a8 	.word	0x000127a8
    f358:	000127c0 	.word	0x000127c0
    f35c:	000127d8 	.word	0x000127d8

0000f360 <block_ptr>:
	return (u8_t *)p->buf + lsz * block;
    f360:	6800      	ldr	r0, [r0, #0]
}
    f362:	fb01 0002 	mla	r0, r1, r2, r0
    f366:	4770      	bx	lr

0000f368 <block_num>:
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
    f368:	6800      	ldr	r0, [r0, #0]
    f36a:	1a08      	subs	r0, r1, r0
}
    f36c:	fb90 f0f2 	sdiv	r0, r0, r2
    f370:	4770      	bx	lr

0000f372 <get_bit_ptr>:
{
    f372:	b410      	push	{r4}
	u32_t *bitarray = level <= p->max_inline_level ?
    f374:	f990 400b 	ldrsb.w	r4, [r0, #11]
		&p->levels[level].bits : p->levels[level].bits_p;
    f378:	428c      	cmp	r4, r1
    f37a:	db0f      	blt.n	f39c <get_bit_ptr+0x2a>
    f37c:	68c4      	ldr	r4, [r0, #12]
    f37e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    f382:	0088      	lsls	r0, r1, #2
    f384:	1821      	adds	r1, r4, r0
	*word = &bitarray[bn / 32];
    f386:	4610      	mov	r0, r2
    f388:	2a00      	cmp	r2, #0
    f38a:	db0d      	blt.n	f3a8 <get_bit_ptr+0x36>
    f38c:	1140      	asrs	r0, r0, #5
    f38e:	eb01 0180 	add.w	r1, r1, r0, lsl #2
    f392:	6019      	str	r1, [r3, #0]
}
    f394:	f002 001f 	and.w	r0, r2, #31
    f398:	bc10      	pop	{r4}
    f39a:	4770      	bx	lr
		&p->levels[level].bits : p->levels[level].bits_p;
    f39c:	68c4      	ldr	r4, [r0, #12]
    f39e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    f3a2:	0088      	lsls	r0, r1, #2
    f3a4:	5821      	ldr	r1, [r4, r0]
    f3a6:	e7ee      	b.n	f386 <get_bit_ptr+0x14>
	*word = &bitarray[bn / 32];
    f3a8:	f102 001f 	add.w	r0, r2, #31
    f3ac:	e7ee      	b.n	f38c <get_bit_ptr+0x1a>

0000f3ae <set_free_bit>:
{
    f3ae:	b500      	push	{lr}
    f3b0:	b083      	sub	sp, #12
	int bit = get_bit_ptr(p, level, bn, &word);
    f3b2:	ab01      	add	r3, sp, #4
    f3b4:	f7ff ffdd 	bl	f372 <get_bit_ptr>
	*word |= (1<<bit);
    f3b8:	9a01      	ldr	r2, [sp, #4]
    f3ba:	2301      	movs	r3, #1
    f3bc:	fa03 f000 	lsl.w	r0, r3, r0
    f3c0:	6813      	ldr	r3, [r2, #0]
    f3c2:	4303      	orrs	r3, r0
    f3c4:	6013      	str	r3, [r2, #0]
}
    f3c6:	b003      	add	sp, #12
    f3c8:	f85d fb04 	ldr.w	pc, [sp], #4

0000f3cc <clear_free_bit>:
{
    f3cc:	b500      	push	{lr}
    f3ce:	b083      	sub	sp, #12
	int bit = get_bit_ptr(p, level, bn, &word);
    f3d0:	ab01      	add	r3, sp, #4
    f3d2:	f7ff ffce 	bl	f372 <get_bit_ptr>
	*word &= ~(1<<bit);
    f3d6:	9a01      	ldr	r2, [sp, #4]
    f3d8:	2301      	movs	r3, #1
    f3da:	fa03 f000 	lsl.w	r0, r3, r0
    f3de:	6813      	ldr	r3, [r2, #0]
    f3e0:	ea23 0300 	bic.w	r3, r3, r0
    f3e4:	6013      	str	r3, [r2, #0]
}
    f3e6:	b003      	add	sp, #12
    f3e8:	f85d fb04 	ldr.w	pc, [sp], #4

0000f3ec <partner_bits>:
{
    f3ec:	b500      	push	{lr}
    f3ee:	b083      	sub	sp, #12
	int bit = get_bit_ptr(p, level, bn, &word);
    f3f0:	ab01      	add	r3, sp, #4
    f3f2:	f7ff ffbe 	bl	f372 <get_bit_ptr>
	return (*word >> (4*(bit / 4))) & 0xf;
    f3f6:	9b01      	ldr	r3, [sp, #4]
    f3f8:	681a      	ldr	r2, [r3, #0]
    f3fa:	4603      	mov	r3, r0
    f3fc:	2800      	cmp	r0, #0
    f3fe:	db08      	blt.n	f412 <partner_bits+0x26>
    f400:	f023 0303 	bic.w	r3, r3, #3
    f404:	fa22 f303 	lsr.w	r3, r2, r3
}
    f408:	f003 000f 	and.w	r0, r3, #15
    f40c:	b003      	add	sp, #12
    f40e:	f85d fb04 	ldr.w	pc, [sp], #4
	return (*word >> (4*(bit / 4))) & 0xf;
    f412:	1cc3      	adds	r3, r0, #3
    f414:	e7f4      	b.n	f400 <partner_bits+0x14>

0000f416 <buf_size>:
	return p->n_max * p->max_sz;
    f416:	8903      	ldrh	r3, [r0, #8]
    f418:	6840      	ldr	r0, [r0, #4]
}
    f41a:	fb00 f003 	mul.w	r0, r0, r3
    f41e:	4770      	bx	lr

0000f420 <block_fits>:
{
    f420:	b510      	push	{r4, lr}
	return ((u8_t *)block + bsz - 1 - (u8_t *)p->buf) < buf_size(p);
    f422:	3a01      	subs	r2, #1
    f424:	4411      	add	r1, r2
    f426:	6804      	ldr	r4, [r0, #0]
    f428:	1b0c      	subs	r4, r1, r4
    f42a:	f7ff fff4 	bl	f416 <buf_size>
}
    f42e:	4284      	cmp	r4, r0
    f430:	bf2c      	ite	cs
    f432:	2000      	movcs	r0, #0
    f434:	2001      	movcc	r0, #1
    f436:	bd10      	pop	{r4, pc}

0000f438 <block_alloc>:
{
    f438:	b570      	push	{r4, r5, r6, lr}
	block = sys_dlist_get(&p->levels[l].free_list);
    f43a:	68c3      	ldr	r3, [r0, #12]
    f43c:	eb01 0541 	add.w	r5, r1, r1, lsl #1
    f440:	00ac      	lsls	r4, r5, #2
    f442:	4423      	add	r3, r4
    f444:	1d1d      	adds	r5, r3, #4
	return list->head == list;
    f446:	685c      	ldr	r4, [r3, #4]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
    f448:	42a5      	cmp	r5, r4
    f44a:	d014      	beq.n	f476 <block_alloc+0x3e>
	node->prev->next = node->next;
    f44c:	6865      	ldr	r5, [r4, #4]
    f44e:	6823      	ldr	r3, [r4, #0]
    f450:	602b      	str	r3, [r5, #0]
	node->next->prev = node->prev;
    f452:	6865      	ldr	r5, [r4, #4]
    f454:	605d      	str	r5, [r3, #4]
	node->next = NULL;
    f456:	2300      	movs	r3, #0
    f458:	6023      	str	r3, [r4, #0]
	node->prev = NULL;
    f45a:	6063      	str	r3, [r4, #4]
	if (block != NULL) {
    f45c:	b14c      	cbz	r4, f472 <block_alloc+0x3a>
    f45e:	460d      	mov	r5, r1
    f460:	4606      	mov	r6, r0
		clear_free_bit(p, l, block_num(p, block, lsz));
    f462:	4621      	mov	r1, r4
    f464:	f7ff ff80 	bl	f368 <block_num>
    f468:	4602      	mov	r2, r0
    f46a:	4629      	mov	r1, r5
    f46c:	4630      	mov	r0, r6
    f46e:	f7ff ffad 	bl	f3cc <clear_free_bit>
}
    f472:	4620      	mov	r0, r4
    f474:	bd70      	pop	{r4, r5, r6, pc}
	sys_dnode_t *node = NULL;
    f476:	2400      	movs	r4, #0
	return block;
    f478:	e7fb      	b.n	f472 <block_alloc+0x3a>

0000f47a <block_break>:
 * block_free() but without the need to check adjacent bits or
 * recombine, and returns the remaining smaller block.
 */
static void *block_break(struct sys_mem_pool_base *p, void *block, int l,
				size_t *lsizes)
{
    f47a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f47e:	b085      	sub	sp, #20
    f480:	9001      	str	r0, [sp, #4]
    f482:	4689      	mov	r9, r1
    f484:	4692      	mov	sl, r2
    f486:	469b      	mov	fp, r3
	int i, bn;

	bn = block_num(p, block, lsizes[l]);
    f488:	9202      	str	r2, [sp, #8]
    f48a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    f48e:	f7ff ff6b 	bl	f368 <block_num>
    f492:	9003      	str	r0, [sp, #12]

	for (i = 1; i < 4; i++) {
    f494:	2401      	movs	r4, #1
    f496:	e000      	b.n	f49a <block_break+0x20>
    f498:	3401      	adds	r4, #1
    f49a:	2c03      	cmp	r4, #3
    f49c:	dc24      	bgt.n	f4e8 <block_break+0x6e>
		int lbn = 4*bn + i;
		int lsz = lsizes[l + 1];
    f49e:	9b02      	ldr	r3, [sp, #8]
    f4a0:	1c5d      	adds	r5, r3, #1
    f4a2:	f85b 7025 	ldr.w	r7, [fp, r5, lsl #2]
		void *block2 = (lsz * i) + (char *)block;
    f4a6:	fb07 f804 	mul.w	r8, r7, r4
    f4aa:	eb09 0608 	add.w	r6, r9, r8

		set_free_bit(p, l + 1, lbn);
    f4ae:	9b03      	ldr	r3, [sp, #12]
    f4b0:	eb04 0283 	add.w	r2, r4, r3, lsl #2
    f4b4:	f10a 0101 	add.w	r1, sl, #1
    f4b8:	9801      	ldr	r0, [sp, #4]
    f4ba:	f7ff ff78 	bl	f3ae <set_free_bit>
		if (block_fits(p, block2, lsz)) {
    f4be:	463a      	mov	r2, r7
    f4c0:	4631      	mov	r1, r6
    f4c2:	9f01      	ldr	r7, [sp, #4]
    f4c4:	4638      	mov	r0, r7
    f4c6:	f7ff ffab 	bl	f420 <block_fits>
    f4ca:	2800      	cmp	r0, #0
    f4cc:	d0e4      	beq.n	f498 <block_break+0x1e>
			sys_dlist_append(&p->levels[l + 1].free_list, block2);
    f4ce:	68fb      	ldr	r3, [r7, #12]
    f4d0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    f4d4:	00aa      	lsls	r2, r5, #2
    f4d6:	4413      	add	r3, r2
    f4d8:	1d1a      	adds	r2, r3, #4
	node->next = list;
    f4da:	f849 2008 	str.w	r2, [r9, r8]
	node->prev = list->tail;
    f4de:	689a      	ldr	r2, [r3, #8]
    f4e0:	6072      	str	r2, [r6, #4]
	list->tail->next = node;
    f4e2:	6016      	str	r6, [r2, #0]
	list->tail = node;
    f4e4:	609e      	str	r6, [r3, #8]
    f4e6:	e7d7      	b.n	f498 <block_break+0x1e>
		}
	}

	return block;
}
    f4e8:	4648      	mov	r0, r9
    f4ea:	b005      	add	sp, #20
    f4ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000f4f0 <block_free>:
{
    f4f0:	b530      	push	{r4, r5, lr}
    f4f2:	b083      	sub	sp, #12
    f4f4:	4604      	mov	r4, r0
	if (p->flags & SYS_MEM_POOL_KERNEL) {
    f4f6:	7c00      	ldrb	r0, [r0, #16]
    f4f8:	f010 0f01 	tst.w	r0, #1
    f4fc:	d008      	beq.n	f510 <block_free+0x20>
	__asm__ volatile(
    f4fe:	f04f 0520 	mov.w	r5, #32
    f502:	f3ef 8011 	mrs	r0, BASEPRI
    f506:	f385 8811 	msr	BASEPRI, r5
    f50a:	f3bf 8f6f 	isb	sy
	return key;
    f50e:	e000      	b.n	f512 <block_free+0x22>
		return 0;
    f510:	2000      	movs	r0, #0
	key = bfree_recombine(p, level, lsizes, bn, key);
    f512:	9000      	str	r0, [sp, #0]
    f514:	4620      	mov	r0, r4
    f516:	f7f1 fc17 	bl	d48 <bfree_recombine>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
    f51a:	7c23      	ldrb	r3, [r4, #16]
    f51c:	f013 0f01 	tst.w	r3, #1
    f520:	d003      	beq.n	f52a <block_free+0x3a>
	__asm__ volatile(
    f522:	f380 8811 	msr	BASEPRI, r0
    f526:	f3bf 8f6f 	isb	sy
}
    f52a:	b003      	add	sp, #12
    f52c:	bd30      	pop	{r4, r5, pc}

0000f52e <z_sys_mem_pool_base_init>:
{
    f52e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f530:	4604      	mov	r4, r0
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
    f532:	f8b0 c008 	ldrh.w	ip, [r0, #8]
    f536:	6843      	ldr	r3, [r0, #4]
    f538:	fb03 fc0c 	mul.w	ip, r3, ip
	u32_t *bits = (u32_t *)((u8_t *)p->buf + buflen);
    f53c:	6807      	ldr	r7, [r0, #0]
    f53e:	4467      	add	r7, ip
	p->max_inline_level = -1;
    f540:	22ff      	movs	r2, #255	; 0xff
    f542:	72c2      	strb	r2, [r0, #11]
	for (i = 0; i < p->n_levels; i++) {
    f544:	2000      	movs	r0, #0
    f546:	e00b      	b.n	f560 <z_sys_mem_pool_base_init+0x32>
			p->levels[i].bits_p = bits;
    f548:	68e2      	ldr	r2, [r4, #12]
    f54a:	5157      	str	r7, [r2, r5]
			bits += (nblocks + 31)/32;
    f54c:	311f      	adds	r1, #31
    f54e:	d418      	bmi.n	f582 <z_sys_mem_pool_base_init+0x54>
    f550:	1149      	asrs	r1, r1, #5
    f552:	eb07 0781 	add.w	r7, r7, r1, lsl #2
		sz = _ALIGN4(sz / 4);
    f556:	089b      	lsrs	r3, r3, #2
    f558:	3303      	adds	r3, #3
    f55a:	f023 0303 	bic.w	r3, r3, #3
	for (i = 0; i < p->n_levels; i++) {
    f55e:	3001      	adds	r0, #1
    f560:	7aa2      	ldrb	r2, [r4, #10]
    f562:	4282      	cmp	r2, r0
    f564:	dd0f      	ble.n	f586 <z_sys_mem_pool_base_init+0x58>
		int nblocks = buflen / sz;
    f566:	fbbc f1f3 	udiv	r1, ip, r3
		sys_dlist_init(&p->levels[i].free_list);
    f56a:	68e2      	ldr	r2, [r4, #12]
    f56c:	eb00 0640 	add.w	r6, r0, r0, lsl #1
    f570:	00b5      	lsls	r5, r6, #2
    f572:	442a      	add	r2, r5
    f574:	1d16      	adds	r6, r2, #4
	list->head = (sys_dnode_t *)list;
    f576:	6056      	str	r6, [r2, #4]
	list->tail = (sys_dnode_t *)list;
    f578:	6096      	str	r6, [r2, #8]
		if (nblocks < 32) {
    f57a:	291f      	cmp	r1, #31
    f57c:	dce4      	bgt.n	f548 <z_sys_mem_pool_base_init+0x1a>
			p->max_inline_level = i;
    f57e:	72e0      	strb	r0, [r4, #11]
    f580:	e7e9      	b.n	f556 <z_sys_mem_pool_base_init+0x28>
			bits += (nblocks + 31)/32;
    f582:	311f      	adds	r1, #31
    f584:	e7e4      	b.n	f550 <z_sys_mem_pool_base_init+0x22>
	for (i = 0; i < p->n_max; i++) {
    f586:	2500      	movs	r5, #0
    f588:	e011      	b.n	f5ae <z_sys_mem_pool_base_init+0x80>
		void *block = block_ptr(p, p->max_sz, i);
    f58a:	462a      	mov	r2, r5
    f58c:	6861      	ldr	r1, [r4, #4]
    f58e:	4620      	mov	r0, r4
    f590:	f7ff fee6 	bl	f360 <block_ptr>
		sys_dlist_append(&p->levels[0].free_list, block);
    f594:	68e3      	ldr	r3, [r4, #12]
    f596:	1d1a      	adds	r2, r3, #4
	node->next = list;
    f598:	6002      	str	r2, [r0, #0]
	node->prev = list->tail;
    f59a:	689a      	ldr	r2, [r3, #8]
    f59c:	6042      	str	r2, [r0, #4]
	list->tail->next = node;
    f59e:	6010      	str	r0, [r2, #0]
	list->tail = node;
    f5a0:	6098      	str	r0, [r3, #8]
		set_free_bit(p, 0, i);
    f5a2:	462a      	mov	r2, r5
    f5a4:	2100      	movs	r1, #0
    f5a6:	4620      	mov	r0, r4
    f5a8:	f7ff ff01 	bl	f3ae <set_free_bit>
	for (i = 0; i < p->n_max; i++) {
    f5ac:	3501      	adds	r5, #1
    f5ae:	8923      	ldrh	r3, [r4, #8]
    f5b0:	42ab      	cmp	r3, r5
    f5b2:	dcea      	bgt.n	f58a <z_sys_mem_pool_base_init+0x5c>
}
    f5b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000f5b6 <z_sys_mem_pool_block_alloc>:

int z_sys_mem_pool_block_alloc(struct sys_mem_pool_base *p, size_t size,
			      u32_t *level_p, u32_t *block_p, void **data_p)
{
    f5b6:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f5ba:	af00      	add	r7, sp, #0
	int i, from_l, alloc_l = -1;
	unsigned int key;
	void *data = NULL;
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
    f5bc:	7a84      	ldrb	r4, [r0, #10]
    f5be:	00a4      	lsls	r4, r4, #2
    f5c0:	3407      	adds	r4, #7
    f5c2:	f404 64ff 	and.w	r4, r4, #2040	; 0x7f8
    f5c6:	ebad 0d04 	sub.w	sp, sp, r4
    f5ca:	466e      	mov	r6, sp
	 * want to allocate and the smallest one with a free entry
	 * from which we can split an allocation if needed.  Along the
	 * way, we populate an array of sizes for each level so we
	 * don't need to waste RAM storing it.
	 */
	lsizes[0] = _ALIGN4(p->max_sz);
    f5cc:	6844      	ldr	r4, [r0, #4]
    f5ce:	3403      	adds	r4, #3
    f5d0:	f024 0403 	bic.w	r4, r4, #3
    f5d4:	6034      	str	r4, [r6, #0]
	int i, from_l, alloc_l = -1;
    f5d6:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
	for (i = 0; i < p->n_levels; i++) {
    f5da:	2400      	movs	r4, #0
    f5dc:	e005      	b.n	f5ea <z_sys_mem_pool_block_alloc+0x34>
		if (i > 0) {
			lsizes[i] = _ALIGN4(lsizes[i-1] / 4);
		}

		if (lsizes[i] < size) {
    f5de:	f856 5024 	ldr.w	r5, [r6, r4, lsl #2]
    f5e2:	428d      	cmp	r5, r1
    f5e4:	d312      	bcc.n	f60c <z_sys_mem_pool_block_alloc+0x56>
			break;
		}

		alloc_l = i;
    f5e6:	46a1      	mov	r9, r4
	for (i = 0; i < p->n_levels; i++) {
    f5e8:	3401      	adds	r4, #1
    f5ea:	7a85      	ldrb	r5, [r0, #10]
    f5ec:	42ac      	cmp	r4, r5
    f5ee:	da0d      	bge.n	f60c <z_sys_mem_pool_block_alloc+0x56>
		if (i > 0) {
    f5f0:	2c00      	cmp	r4, #0
    f5f2:	ddf4      	ble.n	f5de <z_sys_mem_pool_block_alloc+0x28>
			lsizes[i] = _ALIGN4(lsizes[i-1] / 4);
    f5f4:	1e65      	subs	r5, r4, #1
    f5f6:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
    f5fa:	ea4f 0c95 	mov.w	ip, r5, lsr #2
    f5fe:	f10c 0c03 	add.w	ip, ip, #3
    f602:	f02c 0503 	bic.w	r5, ip, #3
    f606:	f846 5024 	str.w	r5, [r6, r4, lsl #2]
    f60a:	e7e8      	b.n	f5de <z_sys_mem_pool_block_alloc+0x28>
	}

	if (alloc_l < 0) {
    f60c:	f1b9 0f00 	cmp.w	r9, #0
    f610:	db1c      	blt.n	f64c <z_sys_mem_pool_block_alloc+0x96>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
    f612:	7c01      	ldrb	r1, [r0, #16]
    f614:	f011 0f01 	tst.w	r1, #1
    f618:	d01e      	beq.n	f658 <z_sys_mem_pool_block_alloc+0xa2>
	__asm__ volatile(
    f61a:	f04f 0120 	mov.w	r1, #32
    f61e:	f3ef 8811 	mrs	r8, BASEPRI
    f622:	f381 8811 	msr	BASEPRI, r1
    f626:	f3bf 8f6f 	isb	sy
	return key;
    f62a:	469a      	mov	sl, r3
    f62c:	4693      	mov	fp, r2
    f62e:	4605      	mov	r5, r0
	 * atomically, otherwise we open up a situation where we can
	 * "steal" the top level block of the whole heap, causing a
	 * spurious -ENOMEM.
	 */
	key = pool_irq_lock(p);
	for (i = alloc_l; i >= 0; i--) {
    f630:	464c      	mov	r4, r9
	void *data = NULL;
    f632:	2100      	movs	r1, #0
	for (i = alloc_l; i >= 0; i--) {
    f634:	2c00      	cmp	r4, #0
    f636:	db32      	blt.n	f69e <z_sys_mem_pool_block_alloc+0xe8>
		data = block_alloc(p, i, lsizes[i]);
    f638:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
    f63c:	4621      	mov	r1, r4
    f63e:	4628      	mov	r0, r5
    f640:	f7ff fefa 	bl	f438 <block_alloc>
		/* Found one.  Iteratively break it down to the size
		 * we need.  Note that we relax the lock to allow a
		 * pending interrupt to fire so we don't hurt latency
		 * by locking the full loop.
		 */
		if (data != NULL) {
    f644:	4601      	mov	r1, r0
    f646:	b968      	cbnz	r0, f664 <z_sys_mem_pool_block_alloc+0xae>
	for (i = alloc_l; i >= 0; i--) {
    f648:	3c01      	subs	r4, #1
    f64a:	e7f3      	b.n	f634 <z_sys_mem_pool_block_alloc+0x7e>
		*data_p = NULL;
    f64c:	2300      	movs	r3, #0
    f64e:	6aba      	ldr	r2, [r7, #40]	; 0x28
    f650:	6013      	str	r3, [r2, #0]
		return -ENOMEM;
    f652:	f06f 000b 	mvn.w	r0, #11
    f656:	e037      	b.n	f6c8 <z_sys_mem_pool_block_alloc+0x112>
		return 0;
    f658:	f04f 0800 	mov.w	r8, #0
    f65c:	e7e5      	b.n	f62a <z_sys_mem_pool_block_alloc+0x74>
    f65e:	f04f 0800 	mov.w	r8, #0
			for (from_l = i; from_l < alloc_l; from_l++) {
    f662:	3401      	adds	r4, #1
    f664:	45a1      	cmp	r9, r4
    f666:	dd1a      	ble.n	f69e <z_sys_mem_pool_block_alloc+0xe8>
				data = block_break(p, data, from_l, lsizes);
    f668:	4633      	mov	r3, r6
    f66a:	4622      	mov	r2, r4
    f66c:	4628      	mov	r0, r5
    f66e:	f7ff ff04 	bl	f47a <block_break>
    f672:	4601      	mov	r1, r0
	if (p->flags & SYS_MEM_POOL_KERNEL) {
    f674:	7c2b      	ldrb	r3, [r5, #16]
    f676:	f013 0f01 	tst.w	r3, #1
    f67a:	d003      	beq.n	f684 <z_sys_mem_pool_block_alloc+0xce>
	__asm__ volatile(
    f67c:	f388 8811 	msr	BASEPRI, r8
    f680:	f3bf 8f6f 	isb	sy
	if (p->flags & SYS_MEM_POOL_KERNEL) {
    f684:	7c2b      	ldrb	r3, [r5, #16]
    f686:	f013 0f01 	tst.w	r3, #1
    f68a:	d0e8      	beq.n	f65e <z_sys_mem_pool_block_alloc+0xa8>
	__asm__ volatile(
    f68c:	f04f 0320 	mov.w	r3, #32
    f690:	f3ef 8811 	mrs	r8, BASEPRI
    f694:	f383 8811 	msr	BASEPRI, r3
    f698:	f3bf 8f6f 	isb	sy
	return key;
    f69c:	e7e1      	b.n	f662 <z_sys_mem_pool_block_alloc+0xac>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
    f69e:	7c2b      	ldrb	r3, [r5, #16]
    f6a0:	f013 0f01 	tst.w	r3, #1
    f6a4:	d003      	beq.n	f6ae <z_sys_mem_pool_block_alloc+0xf8>
	__asm__ volatile(
    f6a6:	f388 8811 	msr	BASEPRI, r8
    f6aa:	f3bf 8f6f 	isb	sy
			break;
		}
	}
	pool_irq_unlock(p, key);

	*data_p = data;
    f6ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
    f6b0:	6019      	str	r1, [r3, #0]

	if (data == NULL) {
    f6b2:	b161      	cbz	r1, f6ce <z_sys_mem_pool_block_alloc+0x118>
		return -ENOMEM;
	}

	*level_p = alloc_l;
    f6b4:	f8cb 9000 	str.w	r9, [fp]
	*block_p = block_num(p, data, lsizes[alloc_l]);
    f6b8:	f856 2029 	ldr.w	r2, [r6, r9, lsl #2]
    f6bc:	4628      	mov	r0, r5
    f6be:	f7ff fe53 	bl	f368 <block_num>
    f6c2:	f8ca 0000 	str.w	r0, [sl]

	return 0;
    f6c6:	2000      	movs	r0, #0
}
    f6c8:	46bd      	mov	sp, r7
    f6ca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -ENOMEM;
    f6ce:	f06f 000b 	mvn.w	r0, #11
    f6d2:	e7f9      	b.n	f6c8 <z_sys_mem_pool_block_alloc+0x112>

0000f6d4 <z_sys_mem_pool_block_free>:

void z_sys_mem_pool_block_free(struct sys_mem_pool_base *p, u32_t level,
			      u32_t block)
{
    f6d4:	b5b0      	push	{r4, r5, r7, lr}
    f6d6:	af00      	add	r7, sp, #0
    f6d8:	4613      	mov	r3, r2
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
    f6da:	7a84      	ldrb	r4, [r0, #10]
    f6dc:	00a4      	lsls	r4, r4, #2
    f6de:	3407      	adds	r4, #7
    f6e0:	f404 64ff 	and.w	r4, r4, #2040	; 0x7f8
    f6e4:	ebad 0d04 	sub.w	sp, sp, r4
    f6e8:	466a      	mov	r2, sp
	 * to avoid having to store it in precious RAM bytes.
	 * Overhead here is somewhat higher because block_free()
	 * doesn't inherently need to traverse all the larger
	 * sublevels.
	 */
	lsizes[0] = _ALIGN4(p->max_sz);
    f6ea:	6844      	ldr	r4, [r0, #4]
    f6ec:	3403      	adds	r4, #3
    f6ee:	f024 0403 	bic.w	r4, r4, #3
    f6f2:	6014      	str	r4, [r2, #0]
	for (i = 1; i <= level; i++) {
    f6f4:	2501      	movs	r5, #1
    f6f6:	428d      	cmp	r5, r1
    f6f8:	d80a      	bhi.n	f710 <z_sys_mem_pool_block_free+0x3c>
		lsizes[i] = _ALIGN4(lsizes[i-1] / 4);
    f6fa:	1e6c      	subs	r4, r5, #1
    f6fc:	f852 4024 	ldr.w	r4, [r2, r4, lsl #2]
    f700:	08a4      	lsrs	r4, r4, #2
    f702:	3403      	adds	r4, #3
    f704:	f024 0403 	bic.w	r4, r4, #3
    f708:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
	for (i = 1; i <= level; i++) {
    f70c:	3501      	adds	r5, #1
    f70e:	e7f2      	b.n	f6f6 <z_sys_mem_pool_block_free+0x22>
	}

	block_free(p, level, lsizes, block);
    f710:	f7ff feee 	bl	f4f0 <block_free>
}
    f714:	46bd      	mov	sp, r7
    f716:	bdb0      	pop	{r4, r5, r7, pc}

0000f718 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    f718:	b508      	push	{r3, lr}
    f71a:	4604      	mov	r4, r0
    f71c:	4608      	mov	r0, r1
    f71e:	4611      	mov	r1, r2
	entry(p1, p2, p3);
    f720:	461a      	mov	r2, r3
    f722:	47a0      	blx	r4
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t)
    f724:	f7fe ff1e 	bl	e564 <z_impl_k_current_get>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_ABORT, k_thread_abort, k_tid_t, thread)
    f728:	f7f9 fffa 	bl	9720 <z_impl_k_thread_abort>

0000f72c <z_work_q_main>:

#include <kernel.h>
#define WORKQUEUE_THREAD_NAME	"workqueue"

void z_work_q_main(void *work_q_ptr, void *p2, void *p3)
{
    f72c:	b538      	push	{r3, r4, r5, lr}
    f72e:	4604      	mov	r4, r0
	struct k_work_q *work_q = work_q_ptr;
    f730:	e001      	b.n	f736 <z_work_q_main+0xa>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield)
    f732:	f7fe fd0d 	bl	e150 <z_impl_k_yield>
K_SYSCALL_DECLARE2(K_SYSCALL_K_QUEUE_GET, k_queue_get, void *, struct k_queue *, queue, s32_t, timeout)
    f736:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    f73a:	4620      	mov	r0, r4
    f73c:	f7fd fc78 	bl	d030 <z_impl_k_queue_get>
	while (true) {
		struct k_work *work;
		k_work_handler_t handler;

		work = k_queue_get(&work_q->queue, K_FOREVER);
		if (work == NULL) {
    f740:	4603      	mov	r3, r0
    f742:	2800      	cmp	r0, #0
    f744:	d0f7      	beq.n	f736 <z_work_q_main+0xa>
			continue;
		}

		handler = work->handler;
    f746:	6845      	ldr	r5, [r0, #4]

		/* Reset pending state so it can be resubmitted by handler */
		if (atomic_test_and_clear_bit(work->flags,
    f748:	f100 0208 	add.w	r2, r0, #8
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    f74c:	f3bf 8f5b 	dmb	ish
    f750:	e852 1f00 	ldrex	r1, [r2]
    f754:	f021 0001 	bic.w	r0, r1, #1
    f758:	e842 0c00 	strex	ip, r0, [r2]
    f75c:	f1bc 0f00 	cmp.w	ip, #0
    f760:	d1f6      	bne.n	f750 <z_work_q_main+0x24>
    f762:	f3bf 8f5b 	dmb	ish
    f766:	f011 0f01 	tst.w	r1, #1
    f76a:	d0e2      	beq.n	f732 <z_work_q_main+0x6>
					      K_WORK_STATE_PENDING)) {
			handler(work);
    f76c:	4618      	mov	r0, r3
    f76e:	47a8      	blx	r5
    f770:	e7df      	b.n	f732 <z_work_q_main+0x6>

0000f772 <z_arch_printk_char_out>:
}
    f772:	2000      	movs	r0, #0
    f774:	4770      	bx	lr

0000f776 <print_err>:
{
    f776:	b538      	push	{r3, r4, r5, lr}
    f778:	4604      	mov	r4, r0
    f77a:	460d      	mov	r5, r1
	out('E', ctx);
    f77c:	2045      	movs	r0, #69	; 0x45
    f77e:	47a0      	blx	r4
	out('R', ctx);
    f780:	4629      	mov	r1, r5
    f782:	2052      	movs	r0, #82	; 0x52
    f784:	47a0      	blx	r4
	out('R', ctx);
    f786:	4629      	mov	r1, r5
    f788:	2052      	movs	r0, #82	; 0x52
    f78a:	47a0      	blx	r4
}
    f78c:	bd38      	pop	{r3, r4, r5, pc}

0000f78e <_printk_hex_ulong>:
{
    f78e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f792:	b083      	sub	sp, #12
    f794:	4682      	mov	sl, r0
    f796:	9100      	str	r1, [sp, #0]
    f798:	4691      	mov	r9, r2
    f79a:	461d      	mov	r5, r3
    f79c:	f89d b030 	ldrb.w	fp, [sp, #48]	; 0x30
	int digits = 0;
    f7a0:	2600      	movs	r6, #0
	int remaining = 16; /* 16 digits max */
    f7a2:	f04f 0810 	mov.w	r8, #16
	int found_largest_digit = 0;
    f7a6:	4637      	mov	r7, r6
	int size = sizeof(num) * 2;
    f7a8:	4641      	mov	r1, r8
	for (; size != 0; size--) {
    f7aa:	e008      	b.n	f7be <_printk_hex_ulong+0x30>
			nibble += nibble > 9 ? 87 : 48;
    f7ac:	2809      	cmp	r0, #9
    f7ae:	d92b      	bls.n	f808 <_printk_hex_ulong+0x7a>
    f7b0:	2357      	movs	r3, #87	; 0x57
			out((int)nibble, ctx);
    f7b2:	9900      	ldr	r1, [sp, #0]
    f7b4:	4418      	add	r0, r3
    f7b6:	47d0      	blx	sl
			digits++;
    f7b8:	3601      	adds	r6, #1
			found_largest_digit = 1;
    f7ba:	2701      	movs	r7, #1
		if (remaining-- <= min_width) {
    f7bc:	4621      	mov	r1, r4
	for (; size != 0; size--) {
    f7be:	b3a1      	cbz	r1, f82a <_printk_hex_ulong+0x9c>
		char nibble = (num >> ((size - 1) << 2) & 0xf);
    f7c0:	1e4c      	subs	r4, r1, #1
    f7c2:	00a0      	lsls	r0, r4, #2
    f7c4:	f1c0 0220 	rsb	r2, r0, #32
    f7c8:	f1a0 0320 	sub.w	r3, r0, #32
    f7cc:	fa29 f000 	lsr.w	r0, r9, r0
    f7d0:	fa05 f202 	lsl.w	r2, r5, r2
    f7d4:	4310      	orrs	r0, r2
    f7d6:	fa25 f303 	lsr.w	r3, r5, r3
    f7da:	4318      	orrs	r0, r3
		if (nibble != 0 || found_largest_digit != 0 || size == 1) {
    f7dc:	f010 000f 	ands.w	r0, r0, #15
    f7e0:	d1e4      	bne.n	f7ac <_printk_hex_ulong+0x1e>
    f7e2:	2f00      	cmp	r7, #0
    f7e4:	d1e2      	bne.n	f7ac <_printk_hex_ulong+0x1e>
    f7e6:	2901      	cmp	r1, #1
    f7e8:	d0e0      	beq.n	f7ac <_printk_hex_ulong+0x1e>
		if (remaining-- <= min_width) {
    f7ea:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
    f7ee:	9301      	str	r3, [sp, #4]
    f7f0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    f7f2:	4598      	cmp	r8, r3
    f7f4:	dc16      	bgt.n	f824 <_printk_hex_ulong+0x96>
			if (padding == PAD_ZERO_BEFORE) {
    f7f6:	f1bb 0f01 	cmp.w	fp, #1
    f7fa:	d007      	beq.n	f80c <_printk_hex_ulong+0x7e>
			} else if (padding == PAD_SPACE_BEFORE) {
    f7fc:	f1bb 0f02 	cmp.w	fp, #2
    f800:	d00a      	beq.n	f818 <_printk_hex_ulong+0x8a>
		if (remaining-- <= min_width) {
    f802:	f8dd 8004 	ldr.w	r8, [sp, #4]
    f806:	e7d9      	b.n	f7bc <_printk_hex_ulong+0x2e>
			nibble += nibble > 9 ? 87 : 48;
    f808:	2330      	movs	r3, #48	; 0x30
    f80a:	e7d2      	b.n	f7b2 <_printk_hex_ulong+0x24>
				out('0', ctx);
    f80c:	9900      	ldr	r1, [sp, #0]
    f80e:	2030      	movs	r0, #48	; 0x30
    f810:	47d0      	blx	sl
		if (remaining-- <= min_width) {
    f812:	f8dd 8004 	ldr.w	r8, [sp, #4]
    f816:	e7d1      	b.n	f7bc <_printk_hex_ulong+0x2e>
				out(' ', ctx);
    f818:	9900      	ldr	r1, [sp, #0]
    f81a:	2020      	movs	r0, #32
    f81c:	47d0      	blx	sl
		if (remaining-- <= min_width) {
    f81e:	f8dd 8004 	ldr.w	r8, [sp, #4]
    f822:	e7cb      	b.n	f7bc <_printk_hex_ulong+0x2e>
    f824:	f8dd 8004 	ldr.w	r8, [sp, #4]
    f828:	e7c8      	b.n	f7bc <_printk_hex_ulong+0x2e>
	if (padding == PAD_SPACE_AFTER) {
    f82a:	f1bb 0f03 	cmp.w	fp, #3
    f82e:	d002      	beq.n	f836 <_printk_hex_ulong+0xa8>
}
    f830:	b003      	add	sp, #12
    f832:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		remaining = min_width * 2 - digits;
    f836:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    f838:	ebc6 0643 	rsb	r6, r6, r3, lsl #1
		while (remaining-- > 0) {
    f83c:	e003      	b.n	f846 <_printk_hex_ulong+0xb8>
			out(' ', ctx);
    f83e:	9900      	ldr	r1, [sp, #0]
    f840:	2020      	movs	r0, #32
    f842:	47d0      	blx	sl
		while (remaining-- > 0) {
    f844:	4626      	mov	r6, r4
    f846:	1e74      	subs	r4, r6, #1
    f848:	2e00      	cmp	r6, #0
    f84a:	dcf8      	bgt.n	f83e <_printk_hex_ulong+0xb0>
    f84c:	e7f0      	b.n	f830 <_printk_hex_ulong+0xa2>

0000f84e <str_out>:
{
    f84e:	b410      	push	{r4}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
    f850:	680c      	ldr	r4, [r1, #0]
    f852:	b154      	cbz	r4, f86a <str_out+0x1c>
    f854:	688a      	ldr	r2, [r1, #8]
    f856:	684b      	ldr	r3, [r1, #4]
    f858:	429a      	cmp	r2, r3
    f85a:	da06      	bge.n	f86a <str_out+0x1c>
	if (ctx->count == ctx->max - 1) {
    f85c:	3b01      	subs	r3, #1
    f85e:	429a      	cmp	r2, r3
    f860:	d008      	beq.n	f874 <str_out+0x26>
		ctx->str[ctx->count++] = c;
    f862:	1c53      	adds	r3, r2, #1
    f864:	608b      	str	r3, [r1, #8]
    f866:	54a0      	strb	r0, [r4, r2]
    f868:	e002      	b.n	f870 <str_out+0x22>
		ctx->count++;
    f86a:	688b      	ldr	r3, [r1, #8]
    f86c:	3301      	adds	r3, #1
    f86e:	608b      	str	r3, [r1, #8]
}
    f870:	bc10      	pop	{r4}
    f872:	4770      	bx	lr
		ctx->str[ctx->count++] = '\0';
    f874:	1c53      	adds	r3, r2, #1
    f876:	608b      	str	r3, [r1, #8]
    f878:	2300      	movs	r3, #0
    f87a:	54a3      	strb	r3, [r4, r2]
    f87c:	e7f8      	b.n	f870 <str_out+0x22>

0000f87e <printk>:
{
    f87e:	b40f      	push	{r0, r1, r2, r3}
    f880:	b500      	push	{lr}
    f882:	b083      	sub	sp, #12
    f884:	a904      	add	r1, sp, #16
    f886:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
    f88a:	9101      	str	r1, [sp, #4]
		log_printk(fmt, ap);
    f88c:	f7f5 fb0a 	bl	4ea4 <log_printk>
}
    f890:	b003      	add	sp, #12
    f892:	f85d eb04 	ldr.w	lr, [sp], #4
    f896:	b004      	add	sp, #16
    f898:	4770      	bx	lr

0000f89a <ring_buf_put_claim>:
{
    f89a:	b470      	push	{r4, r5, r6}
	space = z_ring_buf_custom_space_get(buf->size, buf->head,
    f89c:	6906      	ldr	r6, [r0, #16]
    f89e:	6803      	ldr	r3, [r0, #0]
    f8a0:	6885      	ldr	r5, [r0, #8]
 *  @return Ring buffer free space (in 32-bit words or bytes).
 */
static inline int z_ring_buf_custom_space_get(u32_t size, u32_t head,
					      u32_t tail)
{
	if (tail < head) {
    f8a2:	42ab      	cmp	r3, r5
    f8a4:	d816      	bhi.n	f8d4 <ring_buf_put_claim+0x3a>
		return head - tail - 1;
	}

	/* buf->tail > buf->head */
	return (size - tail) + head - 1;
    f8a6:	1b74      	subs	r4, r6, r5
    f8a8:	441c      	add	r4, r3
    f8aa:	1e63      	subs	r3, r4, #1
	size = MIN(size, space);
    f8ac:	4293      	cmp	r3, r2
    f8ae:	bf28      	it	cs
    f8b0:	4613      	movcs	r3, r2
	trail_size = buf->size - buf->misc.byte_mode.tmp_tail;
    f8b2:	1b72      	subs	r2, r6, r5
	allocated = MIN(trail_size, size);
    f8b4:	429a      	cmp	r2, r3
    f8b6:	bf28      	it	cs
    f8b8:	461a      	movcs	r2, r3
	*data = &buf->buf.buf8[buf->misc.byte_mode.tmp_tail];
    f8ba:	6943      	ldr	r3, [r0, #20]
    f8bc:	441d      	add	r5, r3
    f8be:	600d      	str	r5, [r1, #0]
		wrap(buf->misc.byte_mode.tmp_tail + allocated, buf->size);
    f8c0:	6883      	ldr	r3, [r0, #8]
    f8c2:	4413      	add	r3, r2
    f8c4:	6901      	ldr	r1, [r0, #16]
	return val >= max ? (val - max) : val;
    f8c6:	428b      	cmp	r3, r1
    f8c8:	d300      	bcc.n	f8cc <ring_buf_put_claim+0x32>
    f8ca:	1a5b      	subs	r3, r3, r1
	buf->misc.byte_mode.tmp_tail =
    f8cc:	6083      	str	r3, [r0, #8]
}
    f8ce:	4610      	mov	r0, r2
    f8d0:	bc70      	pop	{r4, r5, r6}
    f8d2:	4770      	bx	lr
		return head - tail - 1;
    f8d4:	1b5c      	subs	r4, r3, r5
    f8d6:	1e63      	subs	r3, r4, #1
    f8d8:	e7e8      	b.n	f8ac <ring_buf_put_claim+0x12>

0000f8da <ring_buf_put_finish>:
{
    f8da:	b430      	push	{r4, r5}
 *
 * @return Ring buffer free space (in 32-bit words or bytes).
 */
static inline int ring_buf_space_get(struct ring_buf *buf)
{
	return z_ring_buf_custom_space_get(buf->size, buf->head, buf->tail);
    f8dc:	6904      	ldr	r4, [r0, #16]
    f8de:	6803      	ldr	r3, [r0, #0]
    f8e0:	6842      	ldr	r2, [r0, #4]
	if (tail < head) {
    f8e2:	4293      	cmp	r3, r2
    f8e4:	d80d      	bhi.n	f902 <ring_buf_put_finish+0x28>
	return (size - tail) + head - 1;
    f8e6:	1aa5      	subs	r5, r4, r2
    f8e8:	442b      	add	r3, r5
    f8ea:	3b01      	subs	r3, #1
	if (size > ring_buf_space_get(buf)) {
    f8ec:	428b      	cmp	r3, r1
    f8ee:	d30b      	bcc.n	f908 <ring_buf_put_finish+0x2e>
	buf->tail = wrap(buf->tail + size, buf->size);
    f8f0:	4411      	add	r1, r2
	return val >= max ? (val - max) : val;
    f8f2:	42a1      	cmp	r1, r4
    f8f4:	d300      	bcc.n	f8f8 <ring_buf_put_finish+0x1e>
    f8f6:	1b09      	subs	r1, r1, r4
	buf->tail = wrap(buf->tail + size, buf->size);
    f8f8:	6041      	str	r1, [r0, #4]
	buf->misc.byte_mode.tmp_tail = buf->tail;
    f8fa:	6081      	str	r1, [r0, #8]
	return 0;
    f8fc:	2000      	movs	r0, #0
}
    f8fe:	bc30      	pop	{r4, r5}
    f900:	4770      	bx	lr
		return head - tail - 1;
    f902:	1a9b      	subs	r3, r3, r2
    f904:	3b01      	subs	r3, #1
    f906:	e7f1      	b.n	f8ec <ring_buf_put_finish+0x12>
		return -EINVAL;
    f908:	f06f 0015 	mvn.w	r0, #21
    f90c:	e7f7      	b.n	f8fe <ring_buf_put_finish+0x24>

0000f90e <ring_buf_get_claim>:
{
    f90e:	b470      	push	{r4, r5, r6}
	space = (buf->size - 1) -
    f910:	6905      	ldr	r5, [r0, #16]
		z_ring_buf_custom_space_get(buf->size,
    f912:	68c6      	ldr	r6, [r0, #12]
    f914:	6844      	ldr	r4, [r0, #4]
	if (tail < head) {
    f916:	42a6      	cmp	r6, r4
    f918:	d818      	bhi.n	f94c <ring_buf_get_claim+0x3e>
	return (size - tail) + head - 1;
    f91a:	1b2c      	subs	r4, r5, r4
    f91c:	4434      	add	r4, r6
    f91e:	3c01      	subs	r4, #1
	space = (buf->size - 1) -
    f920:	1b2c      	subs	r4, r5, r4
    f922:	1e63      	subs	r3, r4, #1
	trail_size = buf->size - buf->misc.byte_mode.tmp_head;
    f924:	1bad      	subs	r5, r5, r6
	granted_size = MIN(size, space);
    f926:	4293      	cmp	r3, r2
    f928:	bf28      	it	cs
    f92a:	4613      	movcs	r3, r2
	granted_size = MIN(trail_size, granted_size);
    f92c:	42ab      	cmp	r3, r5
    f92e:	bf28      	it	cs
    f930:	462b      	movcs	r3, r5
	*data = &buf->buf.buf8[buf->misc.byte_mode.tmp_head];
    f932:	6942      	ldr	r2, [r0, #20]
    f934:	4416      	add	r6, r2
    f936:	600e      	str	r6, [r1, #0]
		wrap(buf->misc.byte_mode.tmp_head + granted_size, buf->size);
    f938:	68c2      	ldr	r2, [r0, #12]
    f93a:	441a      	add	r2, r3
    f93c:	6901      	ldr	r1, [r0, #16]
	return val >= max ? (val - max) : val;
    f93e:	428a      	cmp	r2, r1
    f940:	d300      	bcc.n	f944 <ring_buf_get_claim+0x36>
    f942:	1a52      	subs	r2, r2, r1
	buf->misc.byte_mode.tmp_head =
    f944:	60c2      	str	r2, [r0, #12]
}
    f946:	4618      	mov	r0, r3
    f948:	bc70      	pop	{r4, r5, r6}
    f94a:	4770      	bx	lr
		return head - tail - 1;
    f94c:	1b34      	subs	r4, r6, r4
    f94e:	3c01      	subs	r4, #1
    f950:	e7e6      	b.n	f920 <ring_buf_get_claim+0x12>

0000f952 <ring_buf_get_finish>:
{
    f952:	b410      	push	{r4}
	u32_t allocated = (buf->size - 1) - ring_buf_space_get(buf);
    f954:	6904      	ldr	r4, [r0, #16]
	return z_ring_buf_custom_space_get(buf->size, buf->head, buf->tail);
    f956:	6802      	ldr	r2, [r0, #0]
    f958:	6843      	ldr	r3, [r0, #4]
	if (tail < head) {
    f95a:	429a      	cmp	r2, r3
    f95c:	d80f      	bhi.n	f97e <ring_buf_get_finish+0x2c>
	return (size - tail) + head - 1;
    f95e:	1ae3      	subs	r3, r4, r3
    f960:	4413      	add	r3, r2
    f962:	3b01      	subs	r3, #1
    f964:	1ae3      	subs	r3, r4, r3
    f966:	3b01      	subs	r3, #1
	if (size > allocated) {
    f968:	428b      	cmp	r3, r1
    f96a:	d30b      	bcc.n	f984 <ring_buf_get_finish+0x32>
	buf->head = wrap(buf->head + size, buf->size);
    f96c:	4411      	add	r1, r2
	return val >= max ? (val - max) : val;
    f96e:	428c      	cmp	r4, r1
    f970:	d800      	bhi.n	f974 <ring_buf_get_finish+0x22>
    f972:	1b09      	subs	r1, r1, r4
	buf->head = wrap(buf->head + size, buf->size);
    f974:	6001      	str	r1, [r0, #0]
	buf->misc.byte_mode.tmp_head = buf->head;
    f976:	60c1      	str	r1, [r0, #12]
	return 0;
    f978:	2000      	movs	r0, #0
}
    f97a:	bc10      	pop	{r4}
    f97c:	4770      	bx	lr
		return head - tail - 1;
    f97e:	1ad3      	subs	r3, r2, r3
    f980:	3b01      	subs	r3, #1
    f982:	e7ef      	b.n	f964 <ring_buf_get_finish+0x12>
		return -EINVAL;
    f984:	f06f 0015 	mvn.w	r0, #21
    f988:	e7f7      	b.n	f97a <ring_buf_get_finish+0x28>

0000f98a <assert_post_action>:
__weak void assert_post_action(const char *file, unsigned int line)
{
  ARG_UNUSED(file);
  ARG_UNUSED(line);

  k_panic();
    f98a:	4040      	eors	r0, r0
    f98c:	f380 8811 	msr	BASEPRI, r0
    f990:	f04f 0005 	mov.w	r0, #5
    f994:	df02      	svc	2

0000f996 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_STAT, 1);
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM(CONFIG_BUILD_OUTPUT_BIN, 1);

GEN_ABS_SYM_END
    f996:	4770      	bx	lr

0000f998 <errata_36>:
}
    f998:	2001      	movs	r0, #1
    f99a:	4770      	bx	lr

0000f99c <errata_66>:
}
    f99c:	2001      	movs	r0, #1
    f99e:	4770      	bx	lr

0000f9a0 <errata_136>:
        }
    }

    /* Apply by default for unknown devices until errata is confirmed fixed. */
    return true;
}
    f9a0:	2001      	movs	r0, #1
    f9a2:	4770      	bx	lr

0000f9a4 <nrfx_isr>:
 */

#include <nrfx.h>

void nrfx_isr(void *irq_handler)
{
    f9a4:	b508      	push	{r3, lr}
	((nrfx_irq_handler_t)irq_handler)();
    f9a6:	4780      	blx	r0
}
    f9a8:	bd08      	pop	{r3, pc}

0000f9aa <ev_started_handler>:
}
    f9aa:	4770      	bx	lr

0000f9ac <usbd_dma_scheduler_algorithm>:
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
    f9ac:	fa90 f0a0 	rbit	r0, r0
}
    f9b0:	fab0 f080 	clz	r0, r0
    f9b4:	4770      	bx	lr

0000f9b6 <_GetAvailWriteSpace>:
  RdOff = pRing->RdOff;
    f9b6:	6903      	ldr	r3, [r0, #16]
  WrOff = pRing->WrOff;
    f9b8:	68c2      	ldr	r2, [r0, #12]
  if (RdOff <= WrOff) {
    f9ba:	4293      	cmp	r3, r2
    f9bc:	d804      	bhi.n	f9c8 <_GetAvailWriteSpace+0x12>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
    f9be:	6880      	ldr	r0, [r0, #8]
    f9c0:	1a80      	subs	r0, r0, r2
    f9c2:	4403      	add	r3, r0
    f9c4:	1e58      	subs	r0, r3, #1
    f9c6:	4770      	bx	lr
    r = RdOff - WrOff - 1u;
    f9c8:	1a9b      	subs	r3, r3, r2
    f9ca:	1e58      	subs	r0, r3, #1
}
    f9cc:	4770      	bx	lr

0000f9ce <_WriteNoCheck>:
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
    f9ce:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    f9d2:	4605      	mov	r5, r0
    f9d4:	4688      	mov	r8, r1
    f9d6:	4616      	mov	r6, r2
  WrOff = pRing->WrOff;
    f9d8:	68c4      	ldr	r4, [r0, #12]
  Rem = pRing->SizeOfBuffer - WrOff;
    f9da:	f8d0 9008 	ldr.w	r9, [r0, #8]
    f9de:	eba9 0704 	sub.w	r7, r9, r4
  if (Rem > NumBytes) {
    f9e2:	4297      	cmp	r7, r2
    f9e4:	d907      	bls.n	f9f6 <_WriteNoCheck+0x28>
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
    f9e6:	6840      	ldr	r0, [r0, #4]
    f9e8:	4420      	add	r0, r4
    f9ea:	f000 fda1 	bl	10530 <memcpy>
    pRing->WrOff = WrOff + NumBytes;
    f9ee:	4434      	add	r4, r6
    f9f0:	60ec      	str	r4, [r5, #12]
}
    f9f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytesAtOnce);
    f9f6:	6840      	ldr	r0, [r0, #4]
    f9f8:	463a      	mov	r2, r7
    f9fa:	4420      	add	r0, r4
    f9fc:	f000 fd98 	bl	10530 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
    fa00:	eba4 0409 	sub.w	r4, r4, r9
    fa04:	4434      	add	r4, r6
    SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
    fa06:	4622      	mov	r2, r4
    fa08:	eb08 0107 	add.w	r1, r8, r7
    fa0c:	6868      	ldr	r0, [r5, #4]
    fa0e:	f000 fd8f 	bl	10530 <memcpy>
    pRing->WrOff = NumBytesAtOnce;
    fa12:	60ec      	str	r4, [r5, #12]
}
    fa14:	e7ed      	b.n	f9f2 <_WriteNoCheck+0x24>

0000fa16 <_WriteBlocking>:
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
    fa16:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    fa1a:	4606      	mov	r6, r0
    fa1c:	4688      	mov	r8, r1
    fa1e:	4617      	mov	r7, r2
  WrOff = pRing->WrOff;
    fa20:	68c5      	ldr	r5, [r0, #12]
  NumBytesWritten = 0u;
    fa22:	f04f 0900 	mov.w	r9, #0
    fa26:	e01a      	b.n	fa5e <_WriteBlocking+0x48>
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
    fa28:	68b2      	ldr	r2, [r6, #8]
    fa2a:	1b64      	subs	r4, r4, r5
    fa2c:	4414      	add	r4, r2
    fa2e:	1e62      	subs	r2, r4, #1
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
    fa30:	68b3      	ldr	r3, [r6, #8]
    fa32:	1b5c      	subs	r4, r3, r5
    fa34:	4294      	cmp	r4, r2
    fa36:	bf28      	it	cs
    fa38:	4614      	movcs	r4, r2
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
    fa3a:	42bc      	cmp	r4, r7
    fa3c:	bf28      	it	cs
    fa3e:	463c      	movcs	r4, r7
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pBuffer, NumBytesToWrite);
    fa40:	6870      	ldr	r0, [r6, #4]
    fa42:	4622      	mov	r2, r4
    fa44:	4641      	mov	r1, r8
    fa46:	4428      	add	r0, r5
    fa48:	f000 fd72 	bl	10530 <memcpy>
    NumBytesWritten += NumBytesToWrite;
    fa4c:	44a1      	add	r9, r4
    pBuffer         += NumBytesToWrite;
    fa4e:	44a0      	add	r8, r4
    NumBytes        -= NumBytesToWrite;
    fa50:	1b3f      	subs	r7, r7, r4
    WrOff           += NumBytesToWrite;
    fa52:	4425      	add	r5, r4
    if (WrOff == pRing->SizeOfBuffer) {
    fa54:	68b3      	ldr	r3, [r6, #8]
    fa56:	42ab      	cmp	r3, r5
    fa58:	d007      	beq.n	fa6a <_WriteBlocking+0x54>
    pRing->WrOff = WrOff;
    fa5a:	60f5      	str	r5, [r6, #12]
  } while (NumBytes);
    fa5c:	b13f      	cbz	r7, fa6e <_WriteBlocking+0x58>
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
    fa5e:	6934      	ldr	r4, [r6, #16]
    if (RdOff > WrOff) {
    fa60:	42a5      	cmp	r5, r4
    fa62:	d2e1      	bcs.n	fa28 <_WriteBlocking+0x12>
      NumBytesToWrite = RdOff - WrOff - 1u;
    fa64:	1b64      	subs	r4, r4, r5
    fa66:	1e62      	subs	r2, r4, #1
    fa68:	e7e2      	b.n	fa30 <_WriteBlocking+0x1a>
      WrOff = 0u;
    fa6a:	2500      	movs	r5, #0
    fa6c:	e7f5      	b.n	fa5a <_WriteBlocking+0x44>
}
    fa6e:	4648      	mov	r0, r9
    fa70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0000fa74 <SEGGER_RTT_Init>:
*  Function description
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
    fa74:	b508      	push	{r3, lr}
  _DoInit();
    fa76:	f7f4 ffcf 	bl	4a18 <_DoInit>
}
    fa7a:	bd08      	pop	{r3, pc}

0000fa7c <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(struct device *unused)
{
    fa7c:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
    fa7e:	f7ff fff9 	bl	fa74 <SEGGER_RTT_Init>

	return 0;
}
    fa82:	2000      	movs	r0, #0
    fa84:	bd08      	pop	{r3, pc}

0000fa86 <log_list_init>:

#include "log_list.h"

void log_list_init(struct log_list_t *list)
{
	list->tail = NULL;
    fa86:	2300      	movs	r3, #0
    fa88:	6043      	str	r3, [r0, #4]
	list->head = NULL;
    fa8a:	6003      	str	r3, [r0, #0]
}
    fa8c:	4770      	bx	lr

0000fa8e <log_list_add_tail>:

void log_list_add_tail(struct log_list_t *list, struct log_msg *msg)
{
	if (list->head == NULL) {
    fa8e:	6803      	ldr	r3, [r0, #0]
    fa90:	b12b      	cbz	r3, fa9e <log_list_add_tail+0x10>
		list->head = msg;
	} else {
		list->tail->next = msg;
    fa92:	6843      	ldr	r3, [r0, #4]
    fa94:	6019      	str	r1, [r3, #0]
	}

	list->tail = msg;
    fa96:	6041      	str	r1, [r0, #4]
	msg->next = NULL;
    fa98:	2300      	movs	r3, #0
    fa9a:	600b      	str	r3, [r1, #0]
}
    fa9c:	4770      	bx	lr
		list->head = msg;
    fa9e:	6001      	str	r1, [r0, #0]
    faa0:	e7f9      	b.n	fa96 <log_list_add_tail+0x8>

0000faa2 <log_list_head_peek>:

struct log_msg *log_list_head_peek(struct log_list_t *list)
{
	return list->head;
}
    faa2:	6800      	ldr	r0, [r0, #0]
    faa4:	4770      	bx	lr

0000faa6 <log_list_head_get>:

struct log_msg *log_list_head_get(struct log_list_t *list)
{
	struct log_msg *msg = list->head;
    faa6:	6803      	ldr	r3, [r0, #0]

	if (list->head != NULL) {
    faa8:	b10b      	cbz	r3, faae <log_list_head_get+0x8>
		list->head = list->head->next;
    faaa:	681a      	ldr	r2, [r3, #0]
    faac:	6002      	str	r2, [r0, #0]
	}

	return msg;
}
    faae:	4618      	mov	r0, r3
    fab0:	4770      	bx	lr

0000fab2 <dummy_timestamp>:
}
    fab2:	2000      	movs	r0, #0
    fab4:	4770      	bx	lr

0000fab6 <msg_filter_check>:
}
    fab6:	2001      	movs	r0, #1
    fab8:	4770      	bx	lr

0000faba <timestamp_get>:
{
    faba:	b508      	push	{r3, lr}
		return k_cycle_get_32();
    fabc:	f7f9 fa70 	bl	8fa0 <z_timer_cycle_get_32>
}
    fac0:	bd08      	pop	{r3, pc}

0000fac2 <cont_arg_get>:
	if (arg_idx < LOG_MSG_NARGS_HEAD_CHUNK) {
    fac2:	2901      	cmp	r1, #1
    fac4:	d906      	bls.n	fad4 <cont_arg_get+0x12>
	cont = msg->payload.ext.next;
    fac6:	6943      	ldr	r3, [r0, #20]
	arg_idx -= LOG_MSG_NARGS_HEAD_CHUNK;
    fac8:	3902      	subs	r1, #2
	while (arg_idx >= ARGS_CONT_MSG) {
    faca:	2906      	cmp	r1, #6
    facc:	d907      	bls.n	fade <cont_arg_get+0x1c>
		arg_idx -= ARGS_CONT_MSG;
    face:	3907      	subs	r1, #7
		cont = cont->next;
    fad0:	681b      	ldr	r3, [r3, #0]
    fad2:	e7fa      	b.n	faca <cont_arg_get+0x8>
		return msg->payload.ext.data.args[arg_idx];
    fad4:	3104      	adds	r1, #4
    fad6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    fada:	6888      	ldr	r0, [r1, #8]
    fadc:	4770      	bx	lr
	return cont->payload.args[arg_idx];
    fade:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    fae2:	6848      	ldr	r0, [r1, #4]
}
    fae4:	4770      	bx	lr

0000fae6 <log_msg_hexdump_data_op>:
static void log_msg_hexdump_data_op(struct log_msg *msg,
				    u8_t *data,
				    size_t *length,
				    size_t offset,
				    bool put_op)
{
    fae6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    faea:	461c      	mov	r4, r3
    faec:	f89d 9020 	ldrb.w	r9, [sp, #32]
	u32_t available_len = msg->hdr.params.hexdump.length;
    faf0:	8903      	ldrh	r3, [r0, #8]
    faf2:	089b      	lsrs	r3, r3, #2
	u8_t *head_data;
	u32_t chunk_len;
	u32_t req_len;
	u32_t cpy_len;

	if (offset >= available_len) {
    faf4:	42a3      	cmp	r3, r4
    faf6:	d91f      	bls.n	fb38 <log_msg_hexdump_data_op+0x52>
    faf8:	4688      	mov	r8, r1
		*length = 0;
		return;
	}

	if ((offset + *length) > available_len) {
    fafa:	6811      	ldr	r1, [r2, #0]
    fafc:	4421      	add	r1, r4
    fafe:	4299      	cmp	r1, r3
    fb00:	d901      	bls.n	fb06 <log_msg_hexdump_data_op+0x20>
		*length = available_len - offset;
    fb02:	1b19      	subs	r1, r3, r4
    fb04:	6011      	str	r1, [r2, #0]
	}

	req_len = *length;
    fb06:	6816      	ldr	r6, [r2, #0]

	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
    fb08:	2b0c      	cmp	r3, #12
    fb0a:	d919      	bls.n	fb40 <log_msg_hexdump_data_op+0x5a>
		chunk_len = LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
		head_data = msg->payload.ext.data.bytes;
    fb0c:	f100 0c18 	add.w	ip, r0, #24
		cont = msg->payload.ext.next;
    fb10:	6947      	ldr	r7, [r0, #20]
		chunk_len = LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
    fb12:	2308      	movs	r3, #8
		head_data = msg->payload.single.bytes;
		chunk_len = available_len;

	}

	if (offset < chunk_len) {
    fb14:	42a3      	cmp	r3, r4
    fb16:	d91e      	bls.n	fb56 <log_msg_hexdump_data_op+0x70>
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
    fb18:	42b3      	cmp	r3, r6
    fb1a:	bf28      	it	cs
    fb1c:	4633      	movcs	r3, r6
    fb1e:	461d      	mov	r5, r3

		if (put_op) {
    fb20:	f1b9 0f00 	cmp.w	r9, #0
    fb24:	d010      	beq.n	fb48 <log_msg_hexdump_data_op+0x62>
			(void)memcpy(&head_data[offset], data, cpy_len);
    fb26:	461a      	mov	r2, r3
    fb28:	4641      	mov	r1, r8
    fb2a:	eb0c 0004 	add.w	r0, ip, r4
    fb2e:	f000 fcff 	bl	10530 <memcpy>
		} else {
			(void)memcpy(data, &head_data[offset], cpy_len);
		}

		req_len -= cpy_len;
    fb32:	1b76      	subs	r6, r6, r5
		data += cpy_len;
    fb34:	44a8      	add	r8, r5
    fb36:	e021      	b.n	fb7c <log_msg_hexdump_data_op+0x96>
		*length = 0;
    fb38:	2300      	movs	r3, #0
    fb3a:	6013      	str	r3, [r2, #0]
		offset = 0;
		cont = cont->next;
		req_len -= cpy_len;
		data += cpy_len;
	}
}
    fb3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		head_data = msg->payload.single.bytes;
    fb40:	f100 0c14 	add.w	ip, r0, #20
	struct log_msg_cont *cont = NULL;
    fb44:	2700      	movs	r7, #0
    fb46:	e7e5      	b.n	fb14 <log_msg_hexdump_data_op+0x2e>
			(void)memcpy(data, &head_data[offset], cpy_len);
    fb48:	461a      	mov	r2, r3
    fb4a:	eb0c 0104 	add.w	r1, ip, r4
    fb4e:	4640      	mov	r0, r8
    fb50:	f000 fcee 	bl	10530 <memcpy>
    fb54:	e7ed      	b.n	fb32 <log_msg_hexdump_data_op+0x4c>
		offset -= chunk_len;
    fb56:	1ae4      	subs	r4, r4, r3
		if (cont == NULL) {
    fb58:	b127      	cbz	r7, fb64 <log_msg_hexdump_data_op+0x7e>
		while (offset >= chunk_len) {
    fb5a:	2c1b      	cmp	r4, #27
    fb5c:	d90e      	bls.n	fb7c <log_msg_hexdump_data_op+0x96>
			cont = cont->next;
    fb5e:	683f      	ldr	r7, [r7, #0]
			offset -= chunk_len;
    fb60:	3c1c      	subs	r4, #28
    fb62:	e7fa      	b.n	fb5a <log_msg_hexdump_data_op+0x74>
			cont = msg->payload.ext.next;
    fb64:	6947      	ldr	r7, [r0, #20]
    fb66:	e7f8      	b.n	fb5a <log_msg_hexdump_data_op+0x74>
			(void)memcpy(data, &cont->payload.bytes[offset],
    fb68:	1939      	adds	r1, r7, r4
    fb6a:	462a      	mov	r2, r5
    fb6c:	3104      	adds	r1, #4
    fb6e:	4640      	mov	r0, r8
    fb70:	f000 fcde 	bl	10530 <memcpy>
		cont = cont->next;
    fb74:	683f      	ldr	r7, [r7, #0]
		req_len -= cpy_len;
    fb76:	1b76      	subs	r6, r6, r5
		data += cpy_len;
    fb78:	44a8      	add	r8, r5
		offset = 0;
    fb7a:	2400      	movs	r4, #0
	while (req_len > 0) {
    fb7c:	2e00      	cmp	r6, #0
    fb7e:	d0dd      	beq.n	fb3c <log_msg_hexdump_data_op+0x56>
		chunk_len = HEXDUMP_BYTES_CONT_MSG - offset;
    fb80:	f1c4 051c 	rsb	r5, r4, #28
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
    fb84:	42b5      	cmp	r5, r6
    fb86:	bf28      	it	cs
    fb88:	4635      	movcs	r5, r6
		if (put_op) {
    fb8a:	f1b9 0f00 	cmp.w	r9, #0
    fb8e:	d0eb      	beq.n	fb68 <log_msg_hexdump_data_op+0x82>
			(void)memcpy(&cont->payload.bytes[offset],
    fb90:	1938      	adds	r0, r7, r4
    fb92:	462a      	mov	r2, r5
    fb94:	4641      	mov	r1, r8
    fb96:	3004      	adds	r0, #4
    fb98:	f000 fcca 	bl	10530 <memcpy>
    fb9c:	e7ea      	b.n	fb74 <log_msg_hexdump_data_op+0x8e>

0000fb9e <log_msg_get>:
	atomic_inc(&msg->hdr.ref_cnt);
    fb9e:	3004      	adds	r0, #4
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    fba0:	f3bf 8f5b 	dmb	ish
    fba4:	e850 3f00 	ldrex	r3, [r0]
    fba8:	3301      	adds	r3, #1
    fbaa:	e840 3200 	strex	r2, r3, [r0]
    fbae:	2a00      	cmp	r2, #0
    fbb0:	d1f8      	bne.n	fba4 <log_msg_get+0x6>
    fbb2:	f3bf 8f5b 	dmb	ish
}
    fbb6:	4770      	bx	lr

0000fbb8 <log_msg_nargs_get>:
	return msg->hdr.params.std.nargs;
    fbb8:	7a40      	ldrb	r0, [r0, #9]
}
    fbba:	0900      	lsrs	r0, r0, #4
    fbbc:	4770      	bx	lr

0000fbbe <log_msg_arg_get>:
{
    fbbe:	b508      	push	{r3, lr}
	if (arg_idx >= msg->hdr.params.std.nargs) {
    fbc0:	7a43      	ldrb	r3, [r0, #9]
    fbc2:	091b      	lsrs	r3, r3, #4
    fbc4:	428b      	cmp	r3, r1
    fbc6:	d909      	bls.n	fbdc <log_msg_arg_get+0x1e>
	if (msg->hdr.params.std.nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
    fbc8:	2b03      	cmp	r3, #3
    fbca:	d804      	bhi.n	fbd6 <log_msg_arg_get+0x18>
		arg = msg->payload.single.args[arg_idx];
    fbcc:	3104      	adds	r1, #4
    fbce:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    fbd2:	6840      	ldr	r0, [r0, #4]
    fbd4:	e003      	b.n	fbde <log_msg_arg_get+0x20>
		arg = cont_arg_get(msg, arg_idx);
    fbd6:	f7ff ff74 	bl	fac2 <cont_arg_get>
    fbda:	e000      	b.n	fbde <log_msg_arg_get+0x20>
		return 0;
    fbdc:	2000      	movs	r0, #0
}
    fbde:	bd08      	pop	{r3, pc}

0000fbe0 <log_msg_put>:
{
    fbe0:	b508      	push	{r3, lr}
	atomic_dec(&msg->hdr.ref_cnt);
    fbe2:	1d03      	adds	r3, r0, #4
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    fbe4:	f3bf 8f5b 	dmb	ish
    fbe8:	e853 2f00 	ldrex	r2, [r3]
    fbec:	3a01      	subs	r2, #1
    fbee:	e843 2100 	strex	r1, r2, [r3]
    fbf2:	2900      	cmp	r1, #0
    fbf4:	d1f8      	bne.n	fbe8 <log_msg_put+0x8>
    fbf6:	f3bf 8f5b 	dmb	ish
	if (msg->hdr.ref_cnt == 0) {
    fbfa:	6843      	ldr	r3, [r0, #4]
    fbfc:	b103      	cbz	r3, fc00 <log_msg_put+0x20>
}
    fbfe:	bd08      	pop	{r3, pc}
		msg_free(msg);
    fc00:	f7f5 fc54 	bl	54ac <msg_free>
}
    fc04:	e7fb      	b.n	fbfe <log_msg_put+0x1e>

0000fc06 <log_msg_str_get>:
}
    fc06:	6900      	ldr	r0, [r0, #16]
    fc08:	4770      	bx	lr

0000fc0a <log_msg_hexdump_data_get>:

void log_msg_hexdump_data_get(struct log_msg *msg,
			      u8_t *data,
			      size_t *length,
			      size_t offset)
{
    fc0a:	b510      	push	{r4, lr}
    fc0c:	b082      	sub	sp, #8
	log_msg_hexdump_data_op(msg, data, length, offset, false);
    fc0e:	2400      	movs	r4, #0
    fc10:	9400      	str	r4, [sp, #0]
    fc12:	f7ff ff68 	bl	fae6 <log_msg_hexdump_data_op>
}
    fc16:	b002      	add	sp, #8
    fc18:	bd10      	pop	{r4, pc}

0000fc1a <buffer_write>:
{
    fc1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    fc1c:	4607      	mov	r7, r0
    fc1e:	460d      	mov	r5, r1
    fc20:	4614      	mov	r4, r2
    fc22:	461e      	mov	r6, r3
		processed = outf(buf, len, ctx);
    fc24:	4632      	mov	r2, r6
    fc26:	4621      	mov	r1, r4
    fc28:	4628      	mov	r0, r5
    fc2a:	47b8      	blx	r7
		buf += processed;
    fc2c:	4405      	add	r5, r0
	} while (len != 0);
    fc2e:	1a24      	subs	r4, r4, r0
    fc30:	d1f8      	bne.n	fc24 <buffer_write+0xa>
}
    fc32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000fc34 <color_prefix>:
{
    fc34:	b508      	push	{r3, lr}
	color_print(log_output, color, true, level);
    fc36:	4613      	mov	r3, r2
    fc38:	2201      	movs	r2, #1
    fc3a:	f7f5 fd39 	bl	56b0 <color_print>
}
    fc3e:	bd08      	pop	{r3, pc}

0000fc40 <color_postfix>:
{
    fc40:	b508      	push	{r3, lr}
	color_print(log_output, color, false, level);
    fc42:	4613      	mov	r3, r2
    fc44:	2200      	movs	r2, #0
    fc46:	f7f5 fd33 	bl	56b0 <color_print>
}
    fc4a:	bd08      	pop	{r3, pc}

0000fc4c <postfix_print>:
{
    fc4c:	b538      	push	{r3, r4, r5, lr}
    fc4e:	4605      	mov	r5, r0
    fc50:	460c      	mov	r4, r1
	color_postfix(log_output, (flags & LOG_OUTPUT_FLAG_COLORS),
    fc52:	f001 0101 	and.w	r1, r1, #1
    fc56:	f7ff fff3 	bl	fc40 <color_postfix>
	newline_print(log_output, flags);
    fc5a:	4621      	mov	r1, r4
    fc5c:	4628      	mov	r0, r5
    fc5e:	f7f5 fd3d 	bl	56dc <newline_print>
}
    fc62:	bd38      	pop	{r3, r4, r5, pc}

0000fc64 <prefix_print>:
{
    fc64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    fc68:	b083      	sub	sp, #12
    fc6a:	4604      	mov	r4, r0
    fc6c:	4690      	mov	r8, r2
    fc6e:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
    fc72:	f001 0901 	and.w	r9, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    fc76:	f3c1 07c0 	ubfx	r7, r1, #3, #1
	if (stamp) {
    fc7a:	f011 0602 	ands.w	r6, r1, #2
    fc7e:	d113      	bne.n	fca8 <prefix_print+0x44>
		color_prefix(log_output, colors_on, level);
    fc80:	462a      	mov	r2, r5
    fc82:	4649      	mov	r1, r9
    fc84:	4620      	mov	r0, r4
    fc86:	f7ff ffd5 	bl	fc34 <color_prefix>
		length += ids_print(log_output, level_on, func_on,
    fc8a:	9501      	str	r5, [sp, #4]
    fc8c:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    fc90:	9300      	str	r3, [sp, #0]
    fc92:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    fc96:	4642      	mov	r2, r8
    fc98:	4639      	mov	r1, r7
    fc9a:	4620      	mov	r0, r4
    fc9c:	f7f5 fd7c 	bl	5798 <ids_print>
}
    fca0:	4430      	add	r0, r6
    fca2:	b003      	add	sp, #12
    fca4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		length += timestamp_print(log_output, flags, timestamp);
    fca8:	461a      	mov	r2, r3
    fcaa:	f7f5 fcbb 	bl	5624 <timestamp_print>
    fcae:	4606      	mov	r6, r0
    fcb0:	e7e6      	b.n	fc80 <prefix_print+0x1c>

0000fcb2 <std_print>:
{
    fcb2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    fcb6:	b08e      	sub	sp, #56	; 0x38
    fcb8:	af0e      	add	r7, sp, #56	; 0x38
    fcba:	4606      	mov	r6, r0
    fcbc:	4689      	mov	r9, r1
	const char *str = log_msg_str_get(msg);
    fcbe:	f7ff ffa2 	bl	fc06 <log_msg_str_get>
    fcc2:	4682      	mov	sl, r0
	u32_t nargs = log_msg_nargs_get(msg);
    fcc4:	4630      	mov	r0, r6
    fcc6:	f7ff ff77 	bl	fbb8 <log_msg_nargs_get>
    fcca:	4680      	mov	r8, r0
	u32_t *args = alloca(sizeof(u32_t)*nargs);
    fccc:	0083      	lsls	r3, r0, #2
    fcce:	3307      	adds	r3, #7
    fcd0:	f023 0307 	bic.w	r3, r3, #7
    fcd4:	ebad 0d03 	sub.w	sp, sp, r3
    fcd8:	ad0e      	add	r5, sp, #56	; 0x38
	for (i = 0; i < nargs; i++) {
    fcda:	2400      	movs	r4, #0
    fcdc:	4544      	cmp	r4, r8
    fcde:	d207      	bcs.n	fcf0 <std_print+0x3e>
		args[i] = log_msg_arg_get(msg, i);
    fce0:	4621      	mov	r1, r4
    fce2:	4630      	mov	r0, r6
    fce4:	f7ff ff6b 	bl	fbbe <log_msg_arg_get>
    fce8:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
	for (i = 0; i < nargs; i++) {
    fcec:	3401      	adds	r4, #1
    fcee:	e7f5      	b.n	fcdc <std_print+0x2a>
	switch (log_msg_nargs_get(msg)) {
    fcf0:	4630      	mov	r0, r6
    fcf2:	f7ff ff61 	bl	fbb8 <log_msg_nargs_get>
    fcf6:	280f      	cmp	r0, #15
    fcf8:	d815      	bhi.n	fd26 <std_print+0x74>
    fcfa:	e8df f010 	tbh	[pc, r0, lsl #1]
    fcfe:	0010      	.short	0x0010
    fd00:	001d0017 	.word	0x001d0017
    fd04:	002d0024 	.word	0x002d0024
    fd08:	00450038 	.word	0x00450038
    fd0c:	00650054 	.word	0x00650054
    fd10:	008d0078 	.word	0x008d0078
    fd14:	00bd00a4 	.word	0x00bd00a4
    fd18:	00f500d8 	.word	0x00f500d8
    fd1c:	0114      	.short	0x0114
		print_formatted(log_output, str);
    fd1e:	4651      	mov	r1, sl
    fd20:	4648      	mov	r0, r9
    fd22:	f7f5 fc6b 	bl	55fc <print_formatted>
}
    fd26:	46bd      	mov	sp, r7
    fd28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(log_output, str, args[0]);
    fd2c:	682a      	ldr	r2, [r5, #0]
    fd2e:	4651      	mov	r1, sl
    fd30:	4648      	mov	r0, r9
    fd32:	f7f5 fc63 	bl	55fc <print_formatted>
		break;
    fd36:	e7f6      	b.n	fd26 <std_print+0x74>
		print_formatted(log_output, str, args[0], args[1]);
    fd38:	686b      	ldr	r3, [r5, #4]
    fd3a:	682a      	ldr	r2, [r5, #0]
    fd3c:	4651      	mov	r1, sl
    fd3e:	4648      	mov	r0, r9
    fd40:	f7f5 fc5c 	bl	55fc <print_formatted>
		break;
    fd44:	e7ef      	b.n	fd26 <std_print+0x74>
		print_formatted(log_output, str, args[0], args[1], args[2]);
    fd46:	686b      	ldr	r3, [r5, #4]
    fd48:	682a      	ldr	r2, [r5, #0]
    fd4a:	68a9      	ldr	r1, [r5, #8]
    fd4c:	9100      	str	r1, [sp, #0]
    fd4e:	4651      	mov	r1, sl
    fd50:	4648      	mov	r0, r9
    fd52:	f7f5 fc53 	bl	55fc <print_formatted>
		break;
    fd56:	e7e6      	b.n	fd26 <std_print+0x74>
		print_formatted(log_output, str, args[0], args[1], args[2],
    fd58:	686b      	ldr	r3, [r5, #4]
    fd5a:	682a      	ldr	r2, [r5, #0]
    fd5c:	68e9      	ldr	r1, [r5, #12]
    fd5e:	9101      	str	r1, [sp, #4]
    fd60:	68a9      	ldr	r1, [r5, #8]
    fd62:	9100      	str	r1, [sp, #0]
    fd64:	4651      	mov	r1, sl
    fd66:	4648      	mov	r0, r9
    fd68:	f7f5 fc48 	bl	55fc <print_formatted>
		break;
    fd6c:	e7db      	b.n	fd26 <std_print+0x74>
		print_formatted(log_output, str, args[0], args[1], args[2],
    fd6e:	686b      	ldr	r3, [r5, #4]
    fd70:	682a      	ldr	r2, [r5, #0]
    fd72:	6929      	ldr	r1, [r5, #16]
    fd74:	9102      	str	r1, [sp, #8]
    fd76:	68e9      	ldr	r1, [r5, #12]
    fd78:	9101      	str	r1, [sp, #4]
    fd7a:	68a9      	ldr	r1, [r5, #8]
    fd7c:	9100      	str	r1, [sp, #0]
    fd7e:	4651      	mov	r1, sl
    fd80:	4648      	mov	r0, r9
    fd82:	f7f5 fc3b 	bl	55fc <print_formatted>
		break;
    fd86:	e7ce      	b.n	fd26 <std_print+0x74>
		print_formatted(log_output, str, args[0], args[1], args[2],
    fd88:	686b      	ldr	r3, [r5, #4]
    fd8a:	682a      	ldr	r2, [r5, #0]
    fd8c:	6969      	ldr	r1, [r5, #20]
    fd8e:	9103      	str	r1, [sp, #12]
    fd90:	6929      	ldr	r1, [r5, #16]
    fd92:	9102      	str	r1, [sp, #8]
    fd94:	68e9      	ldr	r1, [r5, #12]
    fd96:	9101      	str	r1, [sp, #4]
    fd98:	68a9      	ldr	r1, [r5, #8]
    fd9a:	9100      	str	r1, [sp, #0]
    fd9c:	4651      	mov	r1, sl
    fd9e:	4648      	mov	r0, r9
    fda0:	f7f5 fc2c 	bl	55fc <print_formatted>
		break;
    fda4:	e7bf      	b.n	fd26 <std_print+0x74>
		print_formatted(log_output, str, args[0], args[1], args[2],
    fda6:	686b      	ldr	r3, [r5, #4]
    fda8:	682a      	ldr	r2, [r5, #0]
    fdaa:	69a9      	ldr	r1, [r5, #24]
    fdac:	9104      	str	r1, [sp, #16]
    fdae:	6969      	ldr	r1, [r5, #20]
    fdb0:	9103      	str	r1, [sp, #12]
    fdb2:	6929      	ldr	r1, [r5, #16]
    fdb4:	9102      	str	r1, [sp, #8]
    fdb6:	68e9      	ldr	r1, [r5, #12]
    fdb8:	9101      	str	r1, [sp, #4]
    fdba:	68a9      	ldr	r1, [r5, #8]
    fdbc:	9100      	str	r1, [sp, #0]
    fdbe:	4651      	mov	r1, sl
    fdc0:	4648      	mov	r0, r9
    fdc2:	f7f5 fc1b 	bl	55fc <print_formatted>
		break;
    fdc6:	e7ae      	b.n	fd26 <std_print+0x74>
		print_formatted(log_output, str, args[0], args[1], args[2],
    fdc8:	686b      	ldr	r3, [r5, #4]
    fdca:	682a      	ldr	r2, [r5, #0]
    fdcc:	69e9      	ldr	r1, [r5, #28]
    fdce:	9105      	str	r1, [sp, #20]
    fdd0:	69a9      	ldr	r1, [r5, #24]
    fdd2:	9104      	str	r1, [sp, #16]
    fdd4:	6969      	ldr	r1, [r5, #20]
    fdd6:	9103      	str	r1, [sp, #12]
    fdd8:	6929      	ldr	r1, [r5, #16]
    fdda:	9102      	str	r1, [sp, #8]
    fddc:	68e9      	ldr	r1, [r5, #12]
    fdde:	9101      	str	r1, [sp, #4]
    fde0:	68a9      	ldr	r1, [r5, #8]
    fde2:	9100      	str	r1, [sp, #0]
    fde4:	4651      	mov	r1, sl
    fde6:	4648      	mov	r0, r9
    fde8:	f7f5 fc08 	bl	55fc <print_formatted>
		break;
    fdec:	e79b      	b.n	fd26 <std_print+0x74>
		print_formatted(log_output, str, args[0], args[1], args[2],
    fdee:	686b      	ldr	r3, [r5, #4]
    fdf0:	682a      	ldr	r2, [r5, #0]
    fdf2:	6a29      	ldr	r1, [r5, #32]
    fdf4:	9106      	str	r1, [sp, #24]
    fdf6:	69e9      	ldr	r1, [r5, #28]
    fdf8:	9105      	str	r1, [sp, #20]
    fdfa:	69a9      	ldr	r1, [r5, #24]
    fdfc:	9104      	str	r1, [sp, #16]
    fdfe:	6969      	ldr	r1, [r5, #20]
    fe00:	9103      	str	r1, [sp, #12]
    fe02:	6929      	ldr	r1, [r5, #16]
    fe04:	9102      	str	r1, [sp, #8]
    fe06:	68e9      	ldr	r1, [r5, #12]
    fe08:	9101      	str	r1, [sp, #4]
    fe0a:	68a9      	ldr	r1, [r5, #8]
    fe0c:	9100      	str	r1, [sp, #0]
    fe0e:	4651      	mov	r1, sl
    fe10:	4648      	mov	r0, r9
    fe12:	f7f5 fbf3 	bl	55fc <print_formatted>
		break;
    fe16:	e786      	b.n	fd26 <std_print+0x74>
		print_formatted(log_output, str, args[0], args[1], args[2],
    fe18:	686b      	ldr	r3, [r5, #4]
    fe1a:	682a      	ldr	r2, [r5, #0]
    fe1c:	6a69      	ldr	r1, [r5, #36]	; 0x24
    fe1e:	9107      	str	r1, [sp, #28]
    fe20:	6a29      	ldr	r1, [r5, #32]
    fe22:	9106      	str	r1, [sp, #24]
    fe24:	69e9      	ldr	r1, [r5, #28]
    fe26:	9105      	str	r1, [sp, #20]
    fe28:	69a9      	ldr	r1, [r5, #24]
    fe2a:	9104      	str	r1, [sp, #16]
    fe2c:	6969      	ldr	r1, [r5, #20]
    fe2e:	9103      	str	r1, [sp, #12]
    fe30:	6929      	ldr	r1, [r5, #16]
    fe32:	9102      	str	r1, [sp, #8]
    fe34:	68e9      	ldr	r1, [r5, #12]
    fe36:	9101      	str	r1, [sp, #4]
    fe38:	68a9      	ldr	r1, [r5, #8]
    fe3a:	9100      	str	r1, [sp, #0]
    fe3c:	4651      	mov	r1, sl
    fe3e:	4648      	mov	r0, r9
    fe40:	f7f5 fbdc 	bl	55fc <print_formatted>
		break;
    fe44:	e76f      	b.n	fd26 <std_print+0x74>
		print_formatted(log_output, str, args[0], args[1], args[2],
    fe46:	686b      	ldr	r3, [r5, #4]
    fe48:	682a      	ldr	r2, [r5, #0]
    fe4a:	6aa9      	ldr	r1, [r5, #40]	; 0x28
    fe4c:	9108      	str	r1, [sp, #32]
    fe4e:	6a69      	ldr	r1, [r5, #36]	; 0x24
    fe50:	9107      	str	r1, [sp, #28]
    fe52:	6a29      	ldr	r1, [r5, #32]
    fe54:	9106      	str	r1, [sp, #24]
    fe56:	69e9      	ldr	r1, [r5, #28]
    fe58:	9105      	str	r1, [sp, #20]
    fe5a:	69a9      	ldr	r1, [r5, #24]
    fe5c:	9104      	str	r1, [sp, #16]
    fe5e:	6969      	ldr	r1, [r5, #20]
    fe60:	9103      	str	r1, [sp, #12]
    fe62:	6929      	ldr	r1, [r5, #16]
    fe64:	9102      	str	r1, [sp, #8]
    fe66:	68e9      	ldr	r1, [r5, #12]
    fe68:	9101      	str	r1, [sp, #4]
    fe6a:	68a9      	ldr	r1, [r5, #8]
    fe6c:	9100      	str	r1, [sp, #0]
    fe6e:	4651      	mov	r1, sl
    fe70:	4648      	mov	r0, r9
    fe72:	f7f5 fbc3 	bl	55fc <print_formatted>
		break;
    fe76:	e756      	b.n	fd26 <std_print+0x74>
		print_formatted(log_output, str, args[0], args[1], args[2],
    fe78:	686b      	ldr	r3, [r5, #4]
    fe7a:	682a      	ldr	r2, [r5, #0]
    fe7c:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
    fe7e:	9109      	str	r1, [sp, #36]	; 0x24
    fe80:	6aa9      	ldr	r1, [r5, #40]	; 0x28
    fe82:	9108      	str	r1, [sp, #32]
    fe84:	6a69      	ldr	r1, [r5, #36]	; 0x24
    fe86:	9107      	str	r1, [sp, #28]
    fe88:	6a29      	ldr	r1, [r5, #32]
    fe8a:	9106      	str	r1, [sp, #24]
    fe8c:	69e9      	ldr	r1, [r5, #28]
    fe8e:	9105      	str	r1, [sp, #20]
    fe90:	69a9      	ldr	r1, [r5, #24]
    fe92:	9104      	str	r1, [sp, #16]
    fe94:	6969      	ldr	r1, [r5, #20]
    fe96:	9103      	str	r1, [sp, #12]
    fe98:	6929      	ldr	r1, [r5, #16]
    fe9a:	9102      	str	r1, [sp, #8]
    fe9c:	68e9      	ldr	r1, [r5, #12]
    fe9e:	9101      	str	r1, [sp, #4]
    fea0:	68a9      	ldr	r1, [r5, #8]
    fea2:	9100      	str	r1, [sp, #0]
    fea4:	4651      	mov	r1, sl
    fea6:	4648      	mov	r0, r9
    fea8:	f7f5 fba8 	bl	55fc <print_formatted>
		break;
    feac:	e73b      	b.n	fd26 <std_print+0x74>
		print_formatted(log_output, str, args[0], args[1], args[2],
    feae:	686b      	ldr	r3, [r5, #4]
    feb0:	682a      	ldr	r2, [r5, #0]
    feb2:	6b29      	ldr	r1, [r5, #48]	; 0x30
    feb4:	910a      	str	r1, [sp, #40]	; 0x28
    feb6:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
    feb8:	9109      	str	r1, [sp, #36]	; 0x24
    feba:	6aa9      	ldr	r1, [r5, #40]	; 0x28
    febc:	9108      	str	r1, [sp, #32]
    febe:	6a69      	ldr	r1, [r5, #36]	; 0x24
    fec0:	9107      	str	r1, [sp, #28]
    fec2:	6a29      	ldr	r1, [r5, #32]
    fec4:	9106      	str	r1, [sp, #24]
    fec6:	69e9      	ldr	r1, [r5, #28]
    fec8:	9105      	str	r1, [sp, #20]
    feca:	69a9      	ldr	r1, [r5, #24]
    fecc:	9104      	str	r1, [sp, #16]
    fece:	6969      	ldr	r1, [r5, #20]
    fed0:	9103      	str	r1, [sp, #12]
    fed2:	6929      	ldr	r1, [r5, #16]
    fed4:	9102      	str	r1, [sp, #8]
    fed6:	68e9      	ldr	r1, [r5, #12]
    fed8:	9101      	str	r1, [sp, #4]
    feda:	68a9      	ldr	r1, [r5, #8]
    fedc:	9100      	str	r1, [sp, #0]
    fede:	4651      	mov	r1, sl
    fee0:	4648      	mov	r0, r9
    fee2:	f7f5 fb8b 	bl	55fc <print_formatted>
		break;
    fee6:	e71e      	b.n	fd26 <std_print+0x74>
		print_formatted(log_output, str, args[0], args[1], args[2],
    fee8:	686b      	ldr	r3, [r5, #4]
    feea:	682a      	ldr	r2, [r5, #0]
    feec:	6b69      	ldr	r1, [r5, #52]	; 0x34
    feee:	910b      	str	r1, [sp, #44]	; 0x2c
    fef0:	6b29      	ldr	r1, [r5, #48]	; 0x30
    fef2:	910a      	str	r1, [sp, #40]	; 0x28
    fef4:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
    fef6:	9109      	str	r1, [sp, #36]	; 0x24
    fef8:	6aa9      	ldr	r1, [r5, #40]	; 0x28
    fefa:	9108      	str	r1, [sp, #32]
    fefc:	6a69      	ldr	r1, [r5, #36]	; 0x24
    fefe:	9107      	str	r1, [sp, #28]
    ff00:	6a29      	ldr	r1, [r5, #32]
    ff02:	9106      	str	r1, [sp, #24]
    ff04:	69e9      	ldr	r1, [r5, #28]
    ff06:	9105      	str	r1, [sp, #20]
    ff08:	69a9      	ldr	r1, [r5, #24]
    ff0a:	9104      	str	r1, [sp, #16]
    ff0c:	6969      	ldr	r1, [r5, #20]
    ff0e:	9103      	str	r1, [sp, #12]
    ff10:	6929      	ldr	r1, [r5, #16]
    ff12:	9102      	str	r1, [sp, #8]
    ff14:	68e9      	ldr	r1, [r5, #12]
    ff16:	9101      	str	r1, [sp, #4]
    ff18:	68a9      	ldr	r1, [r5, #8]
    ff1a:	9100      	str	r1, [sp, #0]
    ff1c:	4651      	mov	r1, sl
    ff1e:	4648      	mov	r0, r9
    ff20:	f7f5 fb6c 	bl	55fc <print_formatted>
		break;
    ff24:	e6ff      	b.n	fd26 <std_print+0x74>
		print_formatted(log_output, str, args[0], args[1], args[2],
    ff26:	686b      	ldr	r3, [r5, #4]
    ff28:	682a      	ldr	r2, [r5, #0]
    ff2a:	6ba9      	ldr	r1, [r5, #56]	; 0x38
    ff2c:	910c      	str	r1, [sp, #48]	; 0x30
    ff2e:	6b69      	ldr	r1, [r5, #52]	; 0x34
    ff30:	910b      	str	r1, [sp, #44]	; 0x2c
    ff32:	6b29      	ldr	r1, [r5, #48]	; 0x30
    ff34:	910a      	str	r1, [sp, #40]	; 0x28
    ff36:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
    ff38:	9109      	str	r1, [sp, #36]	; 0x24
    ff3a:	6aa9      	ldr	r1, [r5, #40]	; 0x28
    ff3c:	9108      	str	r1, [sp, #32]
    ff3e:	6a69      	ldr	r1, [r5, #36]	; 0x24
    ff40:	9107      	str	r1, [sp, #28]
    ff42:	6a29      	ldr	r1, [r5, #32]
    ff44:	9106      	str	r1, [sp, #24]
    ff46:	69e9      	ldr	r1, [r5, #28]
    ff48:	9105      	str	r1, [sp, #20]
    ff4a:	69a9      	ldr	r1, [r5, #24]
    ff4c:	9104      	str	r1, [sp, #16]
    ff4e:	6969      	ldr	r1, [r5, #20]
    ff50:	9103      	str	r1, [sp, #12]
    ff52:	6929      	ldr	r1, [r5, #16]
    ff54:	9102      	str	r1, [sp, #8]
    ff56:	68e9      	ldr	r1, [r5, #12]
    ff58:	9101      	str	r1, [sp, #4]
    ff5a:	68a9      	ldr	r1, [r5, #8]
    ff5c:	9100      	str	r1, [sp, #0]
    ff5e:	4651      	mov	r1, sl
    ff60:	4648      	mov	r0, r9
    ff62:	f7f5 fb4b 	bl	55fc <print_formatted>
}
    ff66:	e6de      	b.n	fd26 <std_print+0x74>

0000ff68 <log_output_flush>:
{
    ff68:	b510      	push	{r4, lr}
    ff6a:	4604      	mov	r4, r0
		     log_output->control_block->offset,
    ff6c:	6842      	ldr	r2, [r0, #4]
	buffer_write(log_output->func, log_output->buf,
    ff6e:	6853      	ldr	r3, [r2, #4]
    ff70:	6812      	ldr	r2, [r2, #0]
    ff72:	6881      	ldr	r1, [r0, #8]
    ff74:	6800      	ldr	r0, [r0, #0]
    ff76:	f7ff fe50 	bl	fc1a <buffer_write>
	log_output->control_block->offset = 0;
    ff7a:	6863      	ldr	r3, [r4, #4]
    ff7c:	2200      	movs	r2, #0
    ff7e:	601a      	str	r2, [r3, #0]
}
    ff80:	bd10      	pop	{r4, pc}

0000ff82 <log_output_msg_process>:
{
    ff82:	b5f0      	push	{r4, r5, r6, r7, lr}
    ff84:	b085      	sub	sp, #20
    ff86:	4606      	mov	r6, r0
    ff88:	460d      	mov	r5, r1
    ff8a:	4617      	mov	r7, r2
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    ff8c:	7a0a      	ldrb	r2, [r1, #8]
	return msg->hdr.timestamp;
    ff8e:	68cb      	ldr	r3, [r1, #12]
	return msg->hdr.ids.level;
    ff90:	7a89      	ldrb	r1, [r1, #10]
	return msg->hdr.ids.domain_id;
    ff92:	f3c1 0cc2 	ubfx	ip, r1, #3, #3
	return msg->hdr.ids.source_id;
    ff96:	8968      	ldrh	r0, [r5, #10]
			0 : prefix_print(log_output, flags, std_msg, timestamp,
    ff98:	f011 0407 	ands.w	r4, r1, #7
    ff9c:	d10f      	bne.n	ffbe <log_output_msg_process+0x3c>
    ff9e:	2200      	movs	r2, #0
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    ffa0:	7a2b      	ldrb	r3, [r5, #8]
	if (log_msg_is_std(msg)) {
    ffa2:	f013 0f01 	tst.w	r3, #1
    ffa6:	d019      	beq.n	ffdc <log_output_msg_process+0x5a>
	} else if (raw_string) {
    ffa8:	b9ec      	cbnz	r4, ffe6 <log_output_msg_process+0x64>
		raw_string_print(msg, log_output);
    ffaa:	4631      	mov	r1, r6
    ffac:	4628      	mov	r0, r5
    ffae:	f7f5 fc75 	bl	589c <raw_string_print>
	if (!raw_string) {
    ffb2:	b9f4      	cbnz	r4, fff2 <log_output_msg_process+0x70>
	log_output_flush(log_output);
    ffb4:	4630      	mov	r0, r6
    ffb6:	f7ff ffd7 	bl	ff68 <log_output_flush>
}
    ffba:	b005      	add	sp, #20
    ffbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ffbe:	f082 0201 	eor.w	r2, r2, #1
    ffc2:	f002 0201 	and.w	r2, r2, #1
    ffc6:	0980      	lsrs	r0, r0, #6
			0 : prefix_print(log_output, flags, std_msg, timestamp,
    ffc8:	9002      	str	r0, [sp, #8]
    ffca:	f8cd c004 	str.w	ip, [sp, #4]
    ffce:	9400      	str	r4, [sp, #0]
    ffd0:	4639      	mov	r1, r7
    ffd2:	4630      	mov	r0, r6
    ffd4:	f7ff fe46 	bl	fc64 <prefix_print>
    ffd8:	4602      	mov	r2, r0
    ffda:	e7e1      	b.n	ffa0 <log_output_msg_process+0x1e>
		std_print(msg, log_output);
    ffdc:	4631      	mov	r1, r6
    ffde:	4628      	mov	r0, r5
    ffe0:	f7ff fe67 	bl	fcb2 <std_print>
    ffe4:	e7e5      	b.n	ffb2 <log_output_msg_process+0x30>
		hexdump_print(msg, log_output, prefix_offset, flags);
    ffe6:	463b      	mov	r3, r7
    ffe8:	4631      	mov	r1, r6
    ffea:	4628      	mov	r0, r5
    ffec:	f7f5 fc02 	bl	57f4 <hexdump_print>
    fff0:	e7df      	b.n	ffb2 <log_output_msg_process+0x30>
		postfix_print(log_output, flags, level);
    fff2:	4622      	mov	r2, r4
    fff4:	4639      	mov	r1, r7
    fff6:	4630      	mov	r0, r6
    fff8:	f7ff fe28 	bl	fc4c <postfix_print>
    fffc:	e7da      	b.n	ffb4 <log_output_msg_process+0x32>

0000fffe <usb_vbus_set>:
}
    fffe:	2000      	movs	r0, #0
   10000:	4770      	bx	lr

00010002 <usb_handle_std_interface_req>:
	u8_t *data = *data_buf;
   10002:	6812      	ldr	r2, [r2, #0]
	switch (setup->bRequest) {
   10004:	7843      	ldrb	r3, [r0, #1]
   10006:	2b0a      	cmp	r3, #10
   10008:	d00a      	beq.n	10020 <usb_handle_std_interface_req+0x1e>
   1000a:	2b0b      	cmp	r3, #11
   1000c:	d00d      	beq.n	1002a <usb_handle_std_interface_req+0x28>
   1000e:	b10b      	cbz	r3, 10014 <usb_handle_std_interface_req+0x12>
		return false;
   10010:	2000      	movs	r0, #0
}
   10012:	4770      	bx	lr
		data[0] = 0U;
   10014:	7013      	strb	r3, [r2, #0]
		data[1] = 0U;
   10016:	7053      	strb	r3, [r2, #1]
		*len = 2;
   10018:	2302      	movs	r3, #2
   1001a:	600b      	str	r3, [r1, #0]
	return true;
   1001c:	2001      	movs	r0, #1
		break;
   1001e:	4770      	bx	lr
		data[0] = 0U;
   10020:	2300      	movs	r3, #0
   10022:	7013      	strb	r3, [r2, #0]
		*len = 1;
   10024:	2001      	movs	r0, #1
   10026:	6008      	str	r0, [r1, #0]
		break;
   10028:	4770      	bx	lr
{
   1002a:	b510      	push	{r4, lr}
   1002c:	460c      	mov	r4, r1
		usb_set_interface(sys_le16_to_cpu(setup->wIndex),
   1002e:	7881      	ldrb	r1, [r0, #2]
   10030:	7900      	ldrb	r0, [r0, #4]
   10032:	f7f5 fe7b 	bl	5d2c <usb_set_interface>
		*len = 0;
   10036:	2300      	movs	r3, #0
   10038:	6023      	str	r3, [r4, #0]
	return true;
   1003a:	2001      	movs	r0, #1
}
   1003c:	bd10      	pop	{r4, pc}

0001003e <usb_write>:
{
   1003e:	b508      	push	{r3, lr}
	return usb_dc_ep_write(ep, data, data_len, bytes_ret);
   10040:	f7f8 fc0e 	bl	8860 <usb_dc_ep_write>
}
   10044:	bd08      	pop	{r3, pc}

00010046 <usb_read>:
{
   10046:	b508      	push	{r3, lr}
	return usb_dc_ep_read(ep, data, max_data_len, ret_bytes);
   10048:	f000 f9b1 	bl	103ae <usb_dc_ep_read>
}
   1004c:	bd08      	pop	{r3, pc}

0001004e <usb_validate_ep_cfg_data>:
{
   1004e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   10052:	b083      	sub	sp, #12
   10054:	4605      	mov	r5, r0
   10056:	4689      	mov	r9, r1
   10058:	4690      	mov	r8, r2
	for (int i = 0; i < cfg_data->num_endpoints; i++) {
   1005a:	2700      	movs	r7, #0
   1005c:	e048      	b.n	100f0 <usb_validate_ep_cfg_data+0xa2>
				if ((*requested_ep & (1 << (idx + 16)))) {
   1005e:	f8d8 2000 	ldr.w	r2, [r8]
   10062:	f104 0110 	add.w	r1, r4, #16
   10066:	2301      	movs	r3, #1
   10068:	408b      	lsls	r3, r1
   1006a:	421a      	tst	r2, r3
   1006c:	d108      	bne.n	10080 <usb_validate_ep_cfg_data+0x32>
				ep_cfg.ep_addr = (USB_EP_DIR_IN | idx);
   1006e:	f064 037f 	orn	r3, r4, #127	; 0x7f
   10072:	f88d 3000 	strb.w	r3, [sp]
			if (!usb_dc_ep_check_cap(&ep_cfg)) {
   10076:	4668      	mov	r0, sp
   10078:	f7f8 fabe 	bl	85f8 <usb_dc_ep_check_cap>
   1007c:	4603      	mov	r3, r0
   1007e:	b1c0      	cbz	r0, 100b2 <usb_validate_ep_cfg_data+0x64>
		for (u8_t idx = 1; idx < 16; idx++) {
   10080:	3401      	adds	r4, #1
   10082:	b2e4      	uxtb	r4, r4
   10084:	2c0f      	cmp	r4, #15
   10086:	d832      	bhi.n	100ee <usb_validate_ep_cfg_data+0xa0>
			ep_cfg.ep_type = ep_descr->bmAttributes;
   10088:	78eb      	ldrb	r3, [r5, #3]
   1008a:	f88d 3004 	strb.w	r3, [sp, #4]
			ep_cfg.ep_mps = ep_descr->wMaxPacketSize;
   1008e:	88ab      	ldrh	r3, [r5, #4]
   10090:	f8ad 3002 	strh.w	r3, [sp, #2]
			ep_cfg.ep_addr = ep_descr->bEndpointAddress;
   10094:	78ab      	ldrb	r3, [r5, #2]
   10096:	f88d 3000 	strb.w	r3, [sp]
			if (ep_cfg.ep_addr & USB_EP_DIR_IN) {
   1009a:	f013 0f80 	tst.w	r3, #128	; 0x80
   1009e:	d1de      	bne.n	1005e <usb_validate_ep_cfg_data+0x10>
				if ((*requested_ep & (1 << (idx)))) {
   100a0:	f8d8 2000 	ldr.w	r2, [r8]
   100a4:	2301      	movs	r3, #1
   100a6:	40a3      	lsls	r3, r4
   100a8:	421a      	tst	r2, r3
   100aa:	d1e9      	bne.n	10080 <usb_validate_ep_cfg_data+0x32>
				ep_cfg.ep_addr = idx;
   100ac:	f88d 4000 	strb.w	r4, [sp]
   100b0:	e7e1      	b.n	10076 <usb_validate_ep_cfg_data+0x28>
				ep_descr->bEndpointAddress = ep_cfg.ep_addr;
   100b2:	f89d 2000 	ldrb.w	r2, [sp]
   100b6:	70aa      	strb	r2, [r5, #2]
				ep_data[i].ep_addr = ep_cfg.ep_addr;
   100b8:	7132      	strb	r2, [r6, #4]
				if (ep_cfg.ep_addr & USB_EP_DIR_IN) {
   100ba:	f012 0f80 	tst.w	r2, #128	; 0x80
   100be:	d10b      	bne.n	100d8 <usb_validate_ep_cfg_data+0x8a>
					*requested_ep |= (1 << idx);
   100c0:	2201      	movs	r2, #1
   100c2:	fa02 f404 	lsl.w	r4, r2, r4
   100c6:	f8d8 2000 	ldr.w	r2, [r8]
   100ca:	4322      	orrs	r2, r4
   100cc:	f8c8 2000 	str.w	r2, [r8]
}
   100d0:	4618      	mov	r0, r3
   100d2:	b003      	add	sp, #12
   100d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					*requested_ep |= (1 << (idx + 16));
   100d8:	f104 0110 	add.w	r1, r4, #16
   100dc:	2201      	movs	r2, #1
   100de:	fa02 f101 	lsl.w	r1, r2, r1
   100e2:	f8d8 2000 	ldr.w	r2, [r8]
   100e6:	430a      	orrs	r2, r1
   100e8:	f8c8 2000 	str.w	r2, [r8]
   100ec:	e7f0      	b.n	100d0 <usb_validate_ep_cfg_data+0x82>
	for (int i = 0; i < cfg_data->num_endpoints; i++) {
   100ee:	3701      	adds	r7, #1
   100f0:	f899 3024 	ldrb.w	r3, [r9, #36]	; 0x24
   100f4:	429f      	cmp	r7, r3
   100f6:	da09      	bge.n	1010c <usb_validate_ep_cfg_data+0xbe>
		struct usb_ep_cfg_data *ep_data = cfg_data->endpoint;
   100f8:	f8d9 6028 	ldr.w	r6, [r9, #40]	; 0x28
		if (ep_descr->bEndpointAddress != ep_data[i].ep_addr) {
   100fc:	78aa      	ldrb	r2, [r5, #2]
   100fe:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
   10102:	7933      	ldrb	r3, [r6, #4]
   10104:	429a      	cmp	r2, r3
   10106:	d1f2      	bne.n	100ee <usb_validate_ep_cfg_data+0xa0>
		for (u8_t idx = 1; idx < 16; idx++) {
   10108:	2401      	movs	r4, #1
   1010a:	e7bb      	b.n	10084 <usb_validate_ep_cfg_data+0x36>
	return -1;
   1010c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   10110:	e7de      	b.n	100d0 <usb_validate_ep_cfg_data+0x82>

00010112 <usb_update_sn_string_descriptor>:
}
   10112:	2000      	movs	r0, #0
   10114:	4770      	bx	lr

00010116 <usb_get_dev_data_by_cfg>:
	return list->head;
   10116:	6800      	ldr	r0, [r0, #0]
struct usb_dev_data *usb_get_dev_data_by_cfg(sys_slist_t *list,
					     struct usb_cfg_data *cfg)
{
	struct usb_dev_data *dev_data;

	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
   10118:	b110      	cbz	r0, 10120 <usb_get_dev_data_by_cfg+0xa>
   1011a:	3804      	subs	r0, #4
   1011c:	e000      	b.n	10120 <usb_get_dev_data_by_cfg+0xa>
   1011e:	3804      	subs	r0, #4
   10120:	b148      	cbz	r0, 10136 <usb_get_dev_data_by_cfg+0x20>
		struct device *dev = dev_data->dev;
   10122:	6803      	ldr	r3, [r0, #0]
		const struct usb_cfg_data *cfg_cur = dev->config->config_info;
   10124:	681b      	ldr	r3, [r3, #0]
   10126:	689b      	ldr	r3, [r3, #8]

		if (cfg_cur == cfg) {
   10128:	428b      	cmp	r3, r1
   1012a:	d004      	beq.n	10136 <usb_get_dev_data_by_cfg+0x20>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1012c:	1d03      	adds	r3, r0, #4
   1012e:	d003      	beq.n	10138 <usb_get_dev_data_by_cfg+0x22>
	return node->next;
   10130:	6840      	ldr	r0, [r0, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
   10132:	2800      	cmp	r0, #0
   10134:	d1f3      	bne.n	1011e <usb_get_dev_data_by_cfg+0x8>
	}

	LOG_DBG("Device data not found for cfg %p", cfg);

	return NULL;
}
   10136:	4770      	bx	lr
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
   10138:	4618      	mov	r0, r3
   1013a:	e7f1      	b.n	10120 <usb_get_dev_data_by_cfg+0xa>

0001013c <usb_get_dev_data_by_iface>:
	return list->head;
   1013c:	6800      	ldr	r0, [r0, #0]
struct usb_dev_data *usb_get_dev_data_by_iface(sys_slist_t *list,
					       u8_t iface_num)
{
	struct usb_dev_data *dev_data;

	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
   1013e:	b110      	cbz	r0, 10146 <usb_get_dev_data_by_iface+0xa>
   10140:	3804      	subs	r0, #4
   10142:	e000      	b.n	10146 <usb_get_dev_data_by_iface+0xa>
   10144:	3804      	subs	r0, #4
   10146:	b158      	cbz	r0, 10160 <usb_get_dev_data_by_iface+0x24>
		struct device *dev = dev_data->dev;
   10148:	6803      	ldr	r3, [r0, #0]
		const struct usb_cfg_data *cfg = dev->config->config_info;
   1014a:	681b      	ldr	r3, [r3, #0]
   1014c:	689b      	ldr	r3, [r3, #8]
		const struct usb_if_descriptor *if_desc =
   1014e:	685b      	ldr	r3, [r3, #4]
						cfg->interface_descriptor;

		if (if_desc->bInterfaceNumber == iface_num) {
   10150:	789b      	ldrb	r3, [r3, #2]
   10152:	428b      	cmp	r3, r1
   10154:	d004      	beq.n	10160 <usb_get_dev_data_by_iface+0x24>
Z_GENLIST_PEEK_NEXT(slist, snode)
   10156:	1d03      	adds	r3, r0, #4
   10158:	d003      	beq.n	10162 <usb_get_dev_data_by_iface+0x26>
	return node->next;
   1015a:	6840      	ldr	r0, [r0, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
   1015c:	2800      	cmp	r0, #0
   1015e:	d1f1      	bne.n	10144 <usb_get_dev_data_by_iface+0x8>
	}

	LOG_DBG("Device data not found for iface number %u", iface_num);

	return NULL;
}
   10160:	4770      	bx	lr
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
   10162:	4618      	mov	r0, r3
   10164:	e7ef      	b.n	10146 <usb_get_dev_data_by_iface+0xa>

00010166 <usb_get_dev_data_by_ep>:
	return list->head;
   10166:	6800      	ldr	r0, [r0, #0]

struct usb_dev_data *usb_get_dev_data_by_ep(sys_slist_t *list, u8_t ep)
{
	struct usb_dev_data *dev_data;

	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
   10168:	b100      	cbz	r0, 1016c <usb_get_dev_data_by_ep+0x6>
   1016a:	3804      	subs	r0, #4
   1016c:	b1e0      	cbz	r0, 101a8 <usb_get_dev_data_by_ep+0x42>
{
   1016e:	b430      	push	{r4, r5}
   10170:	e005      	b.n	1017e <usb_get_dev_data_by_ep+0x18>
Z_GENLIST_PEEK_NEXT(slist, snode)
   10172:	1d03      	adds	r3, r0, #4
   10174:	d014      	beq.n	101a0 <usb_get_dev_data_by_ep+0x3a>
	return node->next;
   10176:	6840      	ldr	r0, [r0, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
   10178:	b1a0      	cbz	r0, 101a4 <usb_get_dev_data_by_ep+0x3e>
   1017a:	3804      	subs	r0, #4
   1017c:	b190      	cbz	r0, 101a4 <usb_get_dev_data_by_ep+0x3e>
		struct device *dev = dev_data->dev;
   1017e:	6803      	ldr	r3, [r0, #0]
		const struct usb_cfg_data *cfg = dev->config->config_info;
   10180:	681b      	ldr	r3, [r3, #0]
   10182:	689c      	ldr	r4, [r3, #8]
		const struct usb_ep_cfg_data *ep_data = cfg->endpoint;
   10184:	6aa5      	ldr	r5, [r4, #40]	; 0x28

		for (u8_t i = 0; i < cfg->num_endpoints; i++) {
   10186:	2300      	movs	r3, #0
   10188:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
   1018c:	429a      	cmp	r2, r3
   1018e:	d9f0      	bls.n	10172 <usb_get_dev_data_by_ep+0xc>
			if (ep_data[i].ep_addr == ep) {
   10190:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
   10194:	7912      	ldrb	r2, [r2, #4]
   10196:	428a      	cmp	r2, r1
   10198:	d004      	beq.n	101a4 <usb_get_dev_data_by_ep+0x3e>
		for (u8_t i = 0; i < cfg->num_endpoints; i++) {
   1019a:	3301      	adds	r3, #1
   1019c:	b2db      	uxtb	r3, r3
   1019e:	e7f3      	b.n	10188 <usb_get_dev_data_by_ep+0x22>
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
   101a0:	4618      	mov	r0, r3
   101a2:	e7eb      	b.n	1017c <usb_get_dev_data_by_ep+0x16>
	}

	LOG_DBG("Device data not found for ep %u", ep);

	return NULL;
}
   101a4:	bc30      	pop	{r4, r5}
   101a6:	4770      	bx	lr
   101a8:	4770      	bx	lr

000101aa <cdc_acm_do_cb>:
	if (status != USB_DC_SOF) {
   101aa:	290a      	cmp	r1, #10
   101ac:	d000      	beq.n	101b0 <cdc_acm_do_cb+0x6>
		dev_data->usb_status = status;
   101ae:	7001      	strb	r1, [r0, #0]
	switch (status) {
   101b0:	2903      	cmp	r1, #3
   101b2:	d000      	beq.n	101b6 <cdc_acm_do_cb+0xc>
}
   101b4:	4770      	bx	lr
		dev_data->tx_ready = true;
   101b6:	2301      	movs	r3, #1
   101b8:	7603      	strb	r3, [r0, #24]
}
   101ba:	e7fb      	b.n	101b4 <cdc_acm_do_cb+0xa>

000101bc <cdc_interface_config>:
	desc->if0.bInterfaceNumber = bInterfaceNumber;
   101bc:	7081      	strb	r1, [r0, #2]
	desc->if0_union.bControlInterface = bInterfaceNumber;
   101be:	7681      	strb	r1, [r0, #26]
	desc->if1.bInterfaceNumber = bInterfaceNumber + 1;
   101c0:	3101      	adds	r1, #1
   101c2:	b2c9      	uxtb	r1, r1
   101c4:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
	desc->if0_union.bSubordinateInterface0 = bInterfaceNumber + 1;
   101c8:	76c1      	strb	r1, [r0, #27]
}
   101ca:	4770      	bx	lr

000101cc <cdc_acm_baudrate_set>:
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
   101cc:	6883      	ldr	r3, [r0, #8]
	dev_data->line_coding.dwDTERate = sys_cpu_to_le32(baudrate);
   101ce:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
}
   101d2:	4770      	bx	lr

000101d4 <cdc_acm_irq_callback_work_handler>:
{
   101d4:	b508      	push	{r3, lr}
	dev_data->cb(dev_data->cb_data);
   101d6:	f850 3c08 	ldr.w	r3, [r0, #-8]
   101da:	f850 0c04 	ldr.w	r0, [r0, #-4]
   101de:	4798      	blx	r3
}
   101e0:	bd08      	pop	{r3, pc}

000101e2 <cdc_acm_irq_tx_disable>:
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
   101e2:	6883      	ldr	r3, [r0, #8]
	dev_data->tx_irq_ena = false;
   101e4:	2200      	movs	r2, #0
   101e6:	769a      	strb	r2, [r3, #26]
}
   101e8:	4770      	bx	lr

000101ea <cdc_acm_irq_tx_ready>:
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
   101ea:	6883      	ldr	r3, [r0, #8]
	if (dev_data->tx_ready) {
   101ec:	7e1b      	ldrb	r3, [r3, #24]
   101ee:	b90b      	cbnz	r3, 101f4 <cdc_acm_irq_tx_ready+0xa>
	return 0;
   101f0:	2000      	movs	r0, #0
   101f2:	4770      	bx	lr
		return 1;
   101f4:	2001      	movs	r0, #1
}
   101f6:	4770      	bx	lr

000101f8 <cdc_acm_irq_rx_disable>:
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
   101f8:	6883      	ldr	r3, [r0, #8]
	dev_data->rx_irq_ena = false;
   101fa:	2200      	movs	r2, #0
   101fc:	76da      	strb	r2, [r3, #27]
}
   101fe:	4770      	bx	lr

00010200 <cdc_acm_irq_rx_ready>:
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
   10200:	6883      	ldr	r3, [r0, #8]
	if (dev_data->rx_ready) {
   10202:	7e5b      	ldrb	r3, [r3, #25]
   10204:	b90b      	cbnz	r3, 1020a <cdc_acm_irq_rx_ready+0xa>
	return 0;
   10206:	2000      	movs	r0, #0
   10208:	4770      	bx	lr
		return 1;
   1020a:	2001      	movs	r0, #1
}
   1020c:	4770      	bx	lr

0001020e <cdc_acm_irq_is_pending>:
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
   1020e:	6883      	ldr	r3, [r0, #8]
	if (dev_data->tx_ready && dev_data->tx_irq_ena) {
   10210:	7e1a      	ldrb	r2, [r3, #24]
   10212:	b10a      	cbz	r2, 10218 <cdc_acm_irq_is_pending+0xa>
   10214:	7e9a      	ldrb	r2, [r3, #26]
   10216:	b92a      	cbnz	r2, 10224 <cdc_acm_irq_is_pending+0x16>
	} else if (dev_data->rx_ready && dev_data->rx_irq_ena) {
   10218:	7e5a      	ldrb	r2, [r3, #25]
   1021a:	b12a      	cbz	r2, 10228 <cdc_acm_irq_is_pending+0x1a>
   1021c:	7edb      	ldrb	r3, [r3, #27]
   1021e:	b92b      	cbnz	r3, 1022c <cdc_acm_irq_is_pending+0x1e>
		return 0;
   10220:	2000      	movs	r0, #0
   10222:	4770      	bx	lr
		return 1;
   10224:	2001      	movs	r0, #1
   10226:	4770      	bx	lr
		return 0;
   10228:	2000      	movs	r0, #0
   1022a:	4770      	bx	lr
		return 1;
   1022c:	2001      	movs	r0, #1
}
   1022e:	4770      	bx	lr

00010230 <cdc_acm_irq_update>:
}
   10230:	2001      	movs	r0, #1
   10232:	4770      	bx	lr

00010234 <cdc_acm_irq_callback_set>:
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
   10234:	6883      	ldr	r3, [r0, #8]
	dev_data->cb = cb;
   10236:	6059      	str	r1, [r3, #4]
	dev_data->cb_data = cb_data;
   10238:	609a      	str	r2, [r3, #8]
}
   1023a:	4770      	bx	lr

0001023c <cdc_acm_line_ctrl_get>:
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
   1023c:	6883      	ldr	r3, [r0, #8]
	switch (ctrl) {
   1023e:	2902      	cmp	r1, #2
   10240:	d00b      	beq.n	1025a <cdc_acm_line_ctrl_get+0x1e>
   10242:	2904      	cmp	r1, #4
   10244:	d010      	beq.n	10268 <cdc_acm_line_ctrl_get+0x2c>
   10246:	2901      	cmp	r1, #1
   10248:	d002      	beq.n	10250 <cdc_acm_line_ctrl_get+0x14>
	return -ENOTSUP;
   1024a:	f06f 0022 	mvn.w	r0, #34	; 0x22
}
   1024e:	4770      	bx	lr
		*val = sys_le32_to_cpu(dev_data->line_coding.dwDTERate);
   10250:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   10254:	6013      	str	r3, [r2, #0]
		return 0;
   10256:	2000      	movs	r0, #0
   10258:	4770      	bx	lr
		*val = (dev_data->line_state &
   1025a:	f893 30af 	ldrb.w	r3, [r3, #175]	; 0xaf
			SET_CONTROL_LINE_STATE_RTS) ? 1 : 0;
   1025e:	f3c3 0340 	ubfx	r3, r3, #1, #1
		*val = (dev_data->line_state &
   10262:	6013      	str	r3, [r2, #0]
		return 0;
   10264:	2000      	movs	r0, #0
   10266:	4770      	bx	lr
		*val = (dev_data->line_state &
   10268:	f893 30af 	ldrb.w	r3, [r3, #175]	; 0xaf
			SET_CONTROL_LINE_STATE_DTR) ? 1 : 0;
   1026c:	f003 0301 	and.w	r3, r3, #1
		*val = (dev_data->line_state &
   10270:	6013      	str	r3, [r2, #0]
		return 0;
   10272:	2000      	movs	r0, #0
   10274:	4770      	bx	lr

00010276 <cdc_acm_poll_in>:
}
   10276:	f06f 0022 	mvn.w	r0, #34	; 0x22
   1027a:	4770      	bx	lr

0001027c <cdc_acm_fifo_fill>:
{
   1027c:	b510      	push	{r4, lr}
   1027e:	b082      	sub	sp, #8
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
   10280:	6883      	ldr	r3, [r0, #8]
	struct usb_cfg_data *cfg = (void *)dev->config->config_info;
   10282:	6800      	ldr	r0, [r0, #0]
   10284:	6884      	ldr	r4, [r0, #8]
	u32_t wrote = 0U;
   10286:	2000      	movs	r0, #0
   10288:	9001      	str	r0, [sp, #4]
	if (dev_data->usb_status != USB_DC_CONFIGURED) {
   1028a:	7818      	ldrb	r0, [r3, #0]
   1028c:	2803      	cmp	r0, #3
   1028e:	d003      	beq.n	10298 <cdc_acm_fifo_fill+0x1c>
		return 0;
   10290:	2300      	movs	r3, #0
}
   10292:	4618      	mov	r0, r3
   10294:	b002      	add	sp, #8
   10296:	bd10      	pop	{r4, pc}
	dev_data->tx_ready = false;
   10298:	2000      	movs	r0, #0
   1029a:	7618      	strb	r0, [r3, #24]
	err = usb_write(cfg->endpoint[ACM_IN_EP_IDX].ep_addr,
   1029c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   1029e:	ab01      	add	r3, sp, #4
   102a0:	7d00      	ldrb	r0, [r0, #20]
   102a2:	f7ff fecc 	bl	1003e <usb_write>
	if (err != 0) {
   102a6:	4603      	mov	r3, r0
   102a8:	2800      	cmp	r0, #0
   102aa:	d1f2      	bne.n	10292 <cdc_acm_fifo_fill+0x16>
	return wrote;
   102ac:	9b01      	ldr	r3, [sp, #4]
   102ae:	e7f0      	b.n	10292 <cdc_acm_fifo_fill+0x16>

000102b0 <cdc_acm_line_ctrl_set>:
{
   102b0:	b508      	push	{r3, lr}
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
   102b2:	6883      	ldr	r3, [r0, #8]
	switch (ctrl) {
   102b4:	2908      	cmp	r1, #8
   102b6:	d00b      	beq.n	102d0 <cdc_acm_line_ctrl_set+0x20>
   102b8:	2910      	cmp	r1, #16
   102ba:	d019      	beq.n	102f0 <cdc_acm_line_ctrl_set+0x40>
   102bc:	2901      	cmp	r1, #1
   102be:	d002      	beq.n	102c6 <cdc_acm_line_ctrl_set+0x16>
		return -ENODEV;
   102c0:	f06f 0012 	mvn.w	r0, #18
}
   102c4:	bd08      	pop	{r3, pc}
		cdc_acm_baudrate_set(dev, val);
   102c6:	4611      	mov	r1, r2
   102c8:	f7ff ff80 	bl	101cc <cdc_acm_baudrate_set>
		return 0;
   102cc:	2000      	movs	r0, #0
   102ce:	e7f9      	b.n	102c4 <cdc_acm_line_ctrl_set+0x14>
		dev_data->serial_state &= ~SERIAL_STATE_RX_CARRIER;
   102d0:	f893 10b0 	ldrb.w	r1, [r3, #176]	; 0xb0
   102d4:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
   102d8:	f883 10b0 	strb.w	r1, [r3, #176]	; 0xb0
		if (val) {
   102dc:	b11a      	cbz	r2, 102e6 <cdc_acm_line_ctrl_set+0x36>
			dev_data->serial_state |= SERIAL_STATE_RX_CARRIER;
   102de:	f041 0101 	orr.w	r1, r1, #1
   102e2:	f883 10b0 	strb.w	r1, [r3, #176]	; 0xb0
		cdc_acm_send_notification(dev, SERIAL_STATE_RX_CARRIER);
   102e6:	2101      	movs	r1, #1
   102e8:	f7f6 fad6 	bl	6898 <cdc_acm_send_notification>
		return 0;
   102ec:	2000      	movs	r0, #0
   102ee:	e7e9      	b.n	102c4 <cdc_acm_line_ctrl_set+0x14>
		dev_data->serial_state &= ~SERIAL_STATE_TX_CARRIER;
   102f0:	f893 10b0 	ldrb.w	r1, [r3, #176]	; 0xb0
   102f4:	f001 01fd 	and.w	r1, r1, #253	; 0xfd
   102f8:	f883 10b0 	strb.w	r1, [r3, #176]	; 0xb0
		if (val) {
   102fc:	b11a      	cbz	r2, 10306 <cdc_acm_line_ctrl_set+0x56>
			dev_data->serial_state |= SERIAL_STATE_TX_CARRIER;
   102fe:	f041 0102 	orr.w	r1, r1, #2
   10302:	f883 10b0 	strb.w	r1, [r3, #176]	; 0xb0
		cdc_acm_send_notification(dev, dev_data->serial_state);
   10306:	f893 10b0 	ldrb.w	r1, [r3, #176]	; 0xb0
   1030a:	f7f6 fac5 	bl	6898 <cdc_acm_send_notification>
		return 0;
   1030e:	2000      	movs	r0, #0
   10310:	e7d8      	b.n	102c4 <cdc_acm_line_ctrl_set+0x14>

00010312 <cdc_acm_fifo_read>:
{
   10312:	b510      	push	{r4, lr}
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
   10314:	6884      	ldr	r4, [r0, #8]
	len = ring_buf_get(dev_data->rx_ringbuf, rx_data, size);
   10316:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
   1031a:	f7f1 f82f 	bl	137c <ring_buf_get>
	if (ring_buf_is_empty(dev_data->rx_ringbuf)) {
   1031e:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
	return (buf->head == buf->tail);
   10322:	681a      	ldr	r2, [r3, #0]
   10324:	685b      	ldr	r3, [r3, #4]
   10326:	429a      	cmp	r2, r3
   10328:	d000      	beq.n	1032c <cdc_acm_fifo_read+0x1a>
}
   1032a:	bd10      	pop	{r4, pc}
		dev_data->rx_ready = false;
   1032c:	2300      	movs	r3, #0
   1032e:	7663      	strb	r3, [r4, #25]
   10330:	e7fb      	b.n	1032a <cdc_acm_fifo_read+0x18>

00010332 <wait>:
{
   10332:	b508      	push	{r3, lr}
	if (k_is_in_isr()) {
   10334:	f7fe fa38 	bl	e7a8 <k_is_in_isr>
   10338:	b100      	cbz	r0, 1033c <wait+0xa>
}
   1033a:	bd08      	pop	{r3, pc}
K_SYSCALL_DECLARE1(K_SYSCALL_K_SLEEP, k_sleep, s32_t, s32_t, duration)
   1033c:	2002      	movs	r0, #2
   1033e:	f7fd ffd7 	bl	e2f0 <z_impl_k_sleep>
   10342:	e7fa      	b.n	1033a <wait+0x8>

00010344 <clock_control_init>:

static int clock_control_init(struct device *dev)
{
   10344:	b508      	push	{r3, lr}
	 * for 16 MHz clock. The vector is also shared for other power related
	 * features. Hence, design a better way to init IRQISR when adding
	 * power peripheral driver and/or new SoC series.
	 * NOTE: Currently the operations here are idempotent.
	 */
	IRQ_CONNECT(DT_NORDIC_NRF_CLOCK_0_IRQ_0,
   10346:	2200      	movs	r2, #0
   10348:	2101      	movs	r1, #1
   1034a:	4610      	mov	r0, r2
   1034c:	f7f9 f8de 	bl	950c <z_irq_priority_set>
		    DT_NORDIC_NRF_CLOCK_0_IRQ_0_PRIORITY,
		    nrf_power_clock_isr, 0, 0);

	irq_enable(DT_NORDIC_NRF_CLOCK_0_IRQ_0);
   10350:	2000      	movs	r0, #0
   10352:	f7f9 f8a9 	bl	94a8 <z_arch_irq_enable>

	return 0;
}
   10356:	2000      	movs	r0, #0
   10358:	bd08      	pop	{r3, pc}

0001035a <nrf5_power_usb_power_int_enable>:
		    &_k32src_clock_control_api);

#if defined(CONFIG_USB) && defined(CONFIG_SOC_NRF52840)

void nrf5_power_usb_power_int_enable(bool enable)
{
   1035a:	b508      	push	{r3, lr}

	mask = NRF_POWER_INT_USBDETECTED_MASK |
	       NRF_POWER_INT_USBREMOVED_MASK |
	       NRF_POWER_INT_USBPWRRDY_MASK;

	if (enable) {
   1035c:	b930      	cbnz	r0, 1036c <nrf5_power_usb_power_int_enable+0x12>
    NRF_POWER->INTENCLR = int_mask;
   1035e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   10362:	f44f 7260 	mov.w	r2, #896	; 0x380
   10366:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
		nrf_power_int_enable(mask);
		irq_enable(DT_NORDIC_NRF_CLOCK_0_IRQ_0);
	} else {
		nrf_power_int_disable(mask);
	}
}
   1036a:	bd08      	pop	{r3, pc}
    NRF_POWER->INTENSET = int_mask;
   1036c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   10370:	f44f 7260 	mov.w	r2, #896	; 0x380
   10374:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		irq_enable(DT_NORDIC_NRF_CLOCK_0_IRQ_0);
   10378:	2000      	movs	r0, #0
   1037a:	f7f9 f895 	bl	94a8 <z_arch_irq_enable>
   1037e:	e7f4      	b.n	1036a <nrf5_power_usb_power_int_enable+0x10>

00010380 <in_endpoint_ctx>:
{
   10380:	b508      	push	{r3, lr}
	return endpoint_ctx(NRF_USBD_EPIN(ep));
   10382:	f040 0080 	orr.w	r0, r0, #128	; 0x80
   10386:	f7f6 fdcf 	bl	6f28 <endpoint_ctx>
}
   1038a:	bd08      	pop	{r3, pc}

0001038c <out_endpoint_ctx>:
{
   1038c:	b508      	push	{r3, lr}
	return endpoint_ctx(NRF_USBD_EPOUT(ep));
   1038e:	f7f6 fdcb 	bl	6f28 <endpoint_ctx>
}
   10392:	bd08      	pop	{r3, pc}

00010394 <ep_ctx_reset>:
	ep_ctx->buf.data = ep_ctx->buf.block.data;
   10394:	6903      	ldr	r3, [r0, #16]
   10396:	6183      	str	r3, [r0, #24]
	ep_ctx->buf.curr = ep_ctx->buf.data;
   10398:	61c3      	str	r3, [r0, #28]
	ep_ctx->buf.len  = 0U;
   1039a:	2300      	movs	r3, #0
   1039c:	60c3      	str	r3, [r0, #12]
	ep_ctx->read_complete = true;
   1039e:	2201      	movs	r2, #1
   103a0:	f880 2020 	strb.w	r2, [r0, #32]
	ep_ctx->read_pending = false;
   103a4:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
	ep_ctx->write_in_progress = false;
   103a8:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
}
   103ac:	4770      	bx	lr

000103ae <usb_dc_ep_read>:
{
   103ae:	b570      	push	{r4, r5, r6, lr}
   103b0:	4605      	mov	r5, r0
   103b2:	460c      	mov	r4, r1
   103b4:	4616      	mov	r6, r2
	ret = usb_dc_ep_read_wait(ep, data, max_data_len, read_bytes);
   103b6:	f7f8 fae1 	bl	897c <usb_dc_ep_read_wait>
	if (ret) {
   103ba:	4603      	mov	r3, r0
   103bc:	b920      	cbnz	r0, 103c8 <usb_dc_ep_read+0x1a>
	if (!data && !max_data_len) {
   103be:	b12c      	cbz	r4, 103cc <usb_dc_ep_read+0x1e>
	ret = usb_dc_ep_read_continue(ep);
   103c0:	4628      	mov	r0, r5
   103c2:	f7f8 fb2f 	bl	8a24 <usb_dc_ep_read_continue>
   103c6:	4603      	mov	r3, r0
}
   103c8:	4618      	mov	r0, r3
   103ca:	bd70      	pop	{r4, r5, r6, pc}
	if (!data && !max_data_len) {
   103cc:	2e00      	cmp	r6, #0
   103ce:	d1f7      	bne.n	103c0 <usb_dc_ep_read+0x12>
   103d0:	e7fa      	b.n	103c8 <usb_dc_ep_read+0x1a>

000103d2 <z_clock_idle_exit>:
{
}

void __weak z_clock_idle_exit(void)
{
}
   103d2:	4770      	bx	lr

000103d4 <counter_sub>:
	return (a - b) & COUNTER_MAX;
   103d4:	1a40      	subs	r0, r0, r1
}
   103d6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   103da:	4770      	bx	lr

000103dc <MemoryFaultIsRecoverable>:
}
   103dc:	2000      	movs	r0, #0
   103de:	4770      	bx	lr

000103e0 <FaultHandle>:
{
   103e0:	b508      	push	{r3, lr}
	switch (fault) {
   103e2:	1ecb      	subs	r3, r1, #3
   103e4:	2b09      	cmp	r3, #9
   103e6:	d818      	bhi.n	1041a <FaultHandle+0x3a>
   103e8:	e8df f003 	tbb	[pc, r3]
   103ec:	100c0805 	.word	0x100c0805
   103f0:	17171717 	.word	0x17171717
   103f4:	1317      	.short	0x1317
		reason = HardFault(esf);
   103f6:	f7f8 fffb 	bl	93f0 <HardFault>
}
   103fa:	bd08      	pop	{r3, pc}
		reason = MpuFault(esf, 0);
   103fc:	2100      	movs	r1, #0
   103fe:	f7f8 ff79 	bl	92f4 <MpuFault>
		break;
   10402:	e7fa      	b.n	103fa <FaultHandle+0x1a>
		reason = BusFault(esf, 0);
   10404:	2100      	movs	r1, #0
   10406:	f7f8 fe9d 	bl	9144 <BusFault>
		break;
   1040a:	e7f6      	b.n	103fa <FaultHandle+0x1a>
		reason = UsageFault(esf);
   1040c:	f7f8 ff04 	bl	9218 <UsageFault>
		break;
   10410:	e7f3      	b.n	103fa <FaultHandle+0x1a>
		DebugMonitor(esf);
   10412:	f7f8 ff55 	bl	92c0 <DebugMonitor>
	u32_t reason = _NANO_ERR_HW_EXCEPTION;
   10416:	2000      	movs	r0, #0
   10418:	e7ef      	b.n	103fa <FaultHandle+0x1a>
		ReservedException(esf, fault);
   1041a:	f7f8 ff59 	bl	92d0 <ReservedException>
	u32_t reason = _NANO_ERR_HW_EXCEPTION;
   1041e:	2000      	movs	r0, #0
   10420:	e7eb      	b.n	103fa <FaultHandle+0x1a>

00010422 <z_irq_spurious>:
 * See __reserved().
 *
 * @return N/A
 */
void z_irq_spurious(void *unused)
{
   10422:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);
	__reserved();
   10424:	f7f9 f908 	bl	9638 <__bus_fault>
}
   10428:	bd08      	pop	{r3, pc}

0001042a <z_do_kernel_oops>:

void z_do_kernel_oops(const NANO_ESF *esf)
{
   1042a:	b508      	push	{r3, lr}
	z_NanoFatalErrorHandler(esf->r0, esf);
   1042c:	4601      	mov	r1, r0
   1042e:	6800      	ldr	r0, [r0, #0]
   10430:	f7f9 f916 	bl	9660 <z_NanoFatalErrorHandler>
}
   10434:	bd08      	pop	{r3, pc}

00010436 <lock_interrupts>:
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
   10436:	2320      	movs	r3, #32
   10438:	f383 8811 	msr	BASEPRI, r3
}
   1043c:	4770      	bx	lr

0001043e <__nmi>:
 *
 * @return N/A
 */

void __nmi(void)
{
   1043e:	b508      	push	{r3, lr}
	handler();
   10440:	f7f9 f9d4 	bl	97ec <z_SysNmiOnReset>
	z_ExcExit();
   10444:	f7f8 fdfe 	bl	9044 <_IntExit>
}
   10448:	bd08      	pop	{r3, pc}

0001044a <z_arch_configure_dynamic_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arch_configure_dynamic_mpu_regions(struct k_thread *thread)
{
   1044a:	b508      	push	{r3, lr}

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(
   1044c:	2100      	movs	r1, #0
   1044e:	4668      	mov	r0, sp
   10450:	f7f9 fb32 	bl	9ab8 <arm_core_mpu_configure_dynamic_mpu_regions>
		(const struct k_mem_partition **)dynamic_regions,
		region_num);
}
   10454:	bd08      	pop	{r3, pc}

00010456 <mpu_partition_is_valid>:
		((part->size & (part->size - 1)) == 0U)
   10456:	6843      	ldr	r3, [r0, #4]
   10458:	1e5a      	subs	r2, r3, #1
		&&
   1045a:	4213      	tst	r3, r2
   1045c:	d106      	bne.n	1046c <mpu_partition_is_valid+0x16>
		&&
   1045e:	2b1f      	cmp	r3, #31
   10460:	d906      	bls.n	10470 <mpu_partition_is_valid+0x1a>
		((part->start & (part->size - 1)) == 0U);
   10462:	6803      	ldr	r3, [r0, #0]
		&&
   10464:	421a      	tst	r2, r3
   10466:	d005      	beq.n	10474 <mpu_partition_is_valid+0x1e>
   10468:	2000      	movs	r0, #0
   1046a:	4770      	bx	lr
   1046c:	2000      	movs	r0, #0
   1046e:	4770      	bx	lr
   10470:	2000      	movs	r0, #0
   10472:	4770      	bx	lr
   10474:	2001      	movs	r0, #1
}
   10476:	4770      	bx	lr

00010478 <mpu_configure_region>:
{
   10478:	b500      	push	{lr}
   1047a:	b085      	sub	sp, #20
	region_conf.base = new_region->start;
   1047c:	680b      	ldr	r3, [r1, #0]
   1047e:	9301      	str	r3, [sp, #4]
	get_region_attr_from_k_mem_partition_info(&region_conf.attr,
   10480:	684b      	ldr	r3, [r1, #4]
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   10482:	688a      	ldr	r2, [r1, #8]
	if (size <= 32U) {
   10484:	2b20      	cmp	r3, #32
   10486:	d912      	bls.n	104ae <mpu_configure_region+0x36>
	if (size > (1UL << 31)) {
   10488:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   1048c:	d811      	bhi.n	104b2 <mpu_configure_region+0x3a>
	return ((32 - __builtin_clz(size - 1) - 2 + 1) << MPU_RASR_SIZE_Pos) &
   1048e:	3b01      	subs	r3, #1
   10490:	fab3 f383 	clz	r3, r3
   10494:	f1c3 031f 	rsb	r3, r3, #31
   10498:	005b      	lsls	r3, r3, #1
   1049a:	f003 033e 	and.w	r3, r3, #62	; 0x3e
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   1049e:	4313      	orrs	r3, r2
   104a0:	9303      	str	r3, [sp, #12]
	return region_allocate_and_init(index,
   104a2:	a901      	add	r1, sp, #4
   104a4:	f7f9 f9f8 	bl	9898 <region_allocate_and_init>
}
   104a8:	b005      	add	sp, #20
   104aa:	f85d fb04 	ldr.w	pc, [sp], #4
		return REGION_32B;
   104ae:	2308      	movs	r3, #8
   104b0:	e7f5      	b.n	1049e <mpu_configure_region+0x26>
		return REGION_4G;
   104b2:	233e      	movs	r3, #62	; 0x3e
   104b4:	e7f3      	b.n	1049e <mpu_configure_region+0x26>

000104b6 <strcpy>:

char *strcpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
   104b6:	4602      	mov	r2, r0
   104b8:	780b      	ldrb	r3, [r1, #0]
   104ba:	b11b      	cbz	r3, 104c4 <strcpy+0xe>
		*d = *s;
   104bc:	f802 3b01 	strb.w	r3, [r2], #1
		d++;
		s++;
   104c0:	3101      	adds	r1, #1
   104c2:	e7f9      	b.n	104b8 <strcpy+0x2>
	}

	*d = '\0';
   104c4:	7013      	strb	r3, [r2, #0]

	return dest;
}
   104c6:	4770      	bx	lr

000104c8 <strchr>:
 * @return pointer to 1st instance of found byte, or NULL if not found
 */

char *strchr(const char *s, int c)
{
	char tmp = (char) c;
   104c8:	b2c9      	uxtb	r1, r1

	while ((*s != tmp) && (*s != '\0'))
   104ca:	7803      	ldrb	r3, [r0, #0]
   104cc:	428b      	cmp	r3, r1
   104ce:	d002      	beq.n	104d6 <strchr+0xe>
   104d0:	b10b      	cbz	r3, 104d6 <strchr+0xe>
		s++;
   104d2:	3001      	adds	r0, #1
   104d4:	e7f9      	b.n	104ca <strchr+0x2>

	return (*s == tmp) ? (char *) s : NULL;
   104d6:	428b      	cmp	r3, r1
   104d8:	d100      	bne.n	104dc <strchr+0x14>
}
   104da:	4770      	bx	lr
	return (*s == tmp) ? (char *) s : NULL;
   104dc:	2000      	movs	r0, #0
   104de:	e7fc      	b.n	104da <strchr+0x12>

000104e0 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   104e0:	4603      	mov	r3, r0
	size_t n = 0;
   104e2:	2000      	movs	r0, #0

	while (*s != '\0') {
   104e4:	781a      	ldrb	r2, [r3, #0]
   104e6:	b112      	cbz	r2, 104ee <strlen+0xe>
		s++;
   104e8:	3301      	adds	r3, #1
		n++;
   104ea:	3001      	adds	r0, #1
   104ec:	e7fa      	b.n	104e4 <strlen+0x4>
	}

	return n;
}
   104ee:	4770      	bx	lr

000104f0 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
   104f0:	7803      	ldrb	r3, [r0, #0]
   104f2:	780a      	ldrb	r2, [r1, #0]
   104f4:	4293      	cmp	r3, r2
   104f6:	d103      	bne.n	10500 <strcmp+0x10>
   104f8:	b113      	cbz	r3, 10500 <strcmp+0x10>
		s1++;
   104fa:	3001      	adds	r0, #1
		s2++;
   104fc:	3101      	adds	r1, #1
   104fe:	e7f7      	b.n	104f0 <strcmp>
	}

	return *s1 - *s2;
}
   10500:	1a98      	subs	r0, r3, r2
   10502:	4770      	bx	lr

00010504 <memmove>:
void *memmove(void *d, const void *s, size_t n)
{
	char *dest = d;
	const char *src  = s;

	if ((size_t) (dest - src) < n) {
   10504:	1a43      	subs	r3, r0, r1
   10506:	4293      	cmp	r3, r2
   10508:	d30b      	bcc.n	10522 <memmove+0x1e>
	char *dest = d;
   1050a:	4603      	mov	r3, r0
			n--;
			dest[n] = src[n];
		}
	} else {
		/* It is safe to perform a forward-copy */
		while (n > 0) {
   1050c:	b17a      	cbz	r2, 1052e <memmove+0x2a>
{
   1050e:	b410      	push	{r4}
			*dest = *src;
   10510:	f811 4b01 	ldrb.w	r4, [r1], #1
   10514:	f803 4b01 	strb.w	r4, [r3], #1
			dest++;
			src++;
			n--;
   10518:	3a01      	subs	r2, #1
		while (n > 0) {
   1051a:	2a00      	cmp	r2, #0
   1051c:	d1f8      	bne.n	10510 <memmove+0xc>
		}
	}

	return d;
}
   1051e:	bc10      	pop	{r4}
   10520:	4770      	bx	lr
		while (n > 0) {
   10522:	b11a      	cbz	r2, 1052c <memmove+0x28>
			n--;
   10524:	3a01      	subs	r2, #1
			dest[n] = src[n];
   10526:	5c8b      	ldrb	r3, [r1, r2]
   10528:	5483      	strb	r3, [r0, r2]
   1052a:	e7fa      	b.n	10522 <memmove+0x1e>
   1052c:	4770      	bx	lr
   1052e:	4770      	bx	lr

00010530 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
   10530:	b410      	push	{r4}
	/* attempt word-sized copying only if buffers have identical alignment */

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;

	if ((((unsigned int)d ^ (unsigned int)s_byte) & 0x3) == 0U) {
   10532:	ea80 0301 	eor.w	r3, r0, r1
   10536:	f013 0f03 	tst.w	r3, #3
   1053a:	d007      	beq.n	1054c <memcpy+0x1c>
	unsigned char *d_byte = (unsigned char *)d;
   1053c:	4603      	mov	r3, r0
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
   1053e:	b1c2      	cbz	r2, 10572 <memcpy+0x42>
		*(d_byte++) = *(s_byte++);
   10540:	f811 4b01 	ldrb.w	r4, [r1], #1
   10544:	f803 4b01 	strb.w	r4, [r3], #1
		n--;
   10548:	3a01      	subs	r2, #1
   1054a:	e7f8      	b.n	1053e <memcpy+0xe>
	unsigned char *d_byte = (unsigned char *)d;
   1054c:	4603      	mov	r3, r0
		while (((unsigned int)d_byte) & 0x3) {
   1054e:	f013 0f03 	tst.w	r3, #3
   10552:	d00b      	beq.n	1056c <memcpy+0x3c>
			if (n == 0) {
   10554:	b16a      	cbz	r2, 10572 <memcpy+0x42>
			*(d_byte++) = *(s_byte++);
   10556:	f811 4b01 	ldrb.w	r4, [r1], #1
   1055a:	f803 4b01 	strb.w	r4, [r3], #1
			n--;
   1055e:	3a01      	subs	r2, #1
   10560:	e7f5      	b.n	1054e <memcpy+0x1e>
			*(d_word++) = *(s_word++);
   10562:	f851 4b04 	ldr.w	r4, [r1], #4
   10566:	f843 4b04 	str.w	r4, [r3], #4
			n -= sizeof(unsigned int);
   1056a:	3a04      	subs	r2, #4
		while (n >= sizeof(unsigned int)) {
   1056c:	2a03      	cmp	r2, #3
   1056e:	d8f8      	bhi.n	10562 <memcpy+0x32>
   10570:	e7e5      	b.n	1053e <memcpy+0xe>
	}

	return d;
}
   10572:	bc10      	pop	{r4}
   10574:	4770      	bx	lr

00010576 <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
   10576:	b410      	push	{r4}
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
   10578:	b2cc      	uxtb	r4, r1
	unsigned char *d_byte = (unsigned char *)buf;
   1057a:	4603      	mov	r3, r0

	while (((unsigned int)d_byte) & 0x3) {
   1057c:	f013 0f03 	tst.w	r3, #3
   10580:	d004      	beq.n	1058c <memset+0x16>
		if (n == 0) {
   10582:	b1a2      	cbz	r2, 105ae <memset+0x38>
			return buf;
		}
		*(d_byte++) = c_byte;
   10584:	f803 4b01 	strb.w	r4, [r3], #1
		n--;
   10588:	3a01      	subs	r2, #1
   1058a:	e7f7      	b.n	1057c <memset+0x6>
	};

	/* do word-sized initialization as long as possible */

	unsigned int *d_word = (unsigned int *)d_byte;
	unsigned int c_word = (unsigned int)(unsigned char)c;
   1058c:	b2c9      	uxtb	r1, r1

	c_word |= c_word << 8;
   1058e:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
	c_word |= c_word << 16;
   10592:	ea41 4101 	orr.w	r1, r1, r1, lsl #16

	while (n >= sizeof(unsigned int)) {
   10596:	e002      	b.n	1059e <memset+0x28>
		*(d_word++) = c_word;
   10598:	f843 1b04 	str.w	r1, [r3], #4
		n -= sizeof(unsigned int);
   1059c:	3a04      	subs	r2, #4
	while (n >= sizeof(unsigned int)) {
   1059e:	2a03      	cmp	r2, #3
   105a0:	d8fa      	bhi.n	10598 <memset+0x22>
   105a2:	e002      	b.n	105aa <memset+0x34>
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
		*(d_byte++) = c_byte;
   105a4:	f803 4b01 	strb.w	r4, [r3], #1
		n--;
   105a8:	3a01      	subs	r2, #1
	while (n > 0) {
   105aa:	2a00      	cmp	r2, #0
   105ac:	d1fa      	bne.n	105a4 <memset+0x2e>
	}

	return buf;
}
   105ae:	bc10      	pop	{r4}
   105b0:	4770      	bx	lr

000105b2 <_uc>:
	for (/**/; *buf; buf++) {
   105b2:	e000      	b.n	105b6 <_uc+0x4>
   105b4:	3001      	adds	r0, #1
   105b6:	7803      	ldrb	r3, [r0, #0]
   105b8:	b13b      	cbz	r3, 105ca <_uc+0x18>
		if (*buf >= 'a' && *buf <= 'z') {
   105ba:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
   105be:	b2d2      	uxtb	r2, r2
   105c0:	2a19      	cmp	r2, #25
   105c2:	d8f7      	bhi.n	105b4 <_uc+0x2>
			*buf += 'A' - 'a';
   105c4:	3b20      	subs	r3, #32
   105c6:	7003      	strb	r3, [r0, #0]
   105c8:	e7f4      	b.n	105b4 <_uc+0x2>
}
   105ca:	4770      	bx	lr

000105cc <_reverse_and_pad>:
{
   105cc:	4603      	mov	r3, r0
	while (end - start < minlen) {
   105ce:	1ac8      	subs	r0, r1, r3
   105d0:	4290      	cmp	r0, r2
   105d2:	da03      	bge.n	105dc <_reverse_and_pad+0x10>
		*end++ = '0';
   105d4:	2030      	movs	r0, #48	; 0x30
   105d6:	f801 0b01 	strb.w	r0, [r1], #1
   105da:	e7f8      	b.n	105ce <_reverse_and_pad+0x2>
	*end = 0;
   105dc:	2200      	movs	r2, #0
   105de:	f801 2901 	strb.w	r2, [r1], #-1
	for (end--; end > start; end--, start++) {
   105e2:	428b      	cmp	r3, r1
   105e4:	d20a      	bcs.n	105fc <_reverse_and_pad+0x30>
{
   105e6:	b410      	push	{r4}
		char tmp = *end;
   105e8:	780a      	ldrb	r2, [r1, #0]
		*end = *start;
   105ea:	781c      	ldrb	r4, [r3, #0]
   105ec:	f801 4901 	strb.w	r4, [r1], #-1
		*start = tmp;
   105f0:	f803 2b01 	strb.w	r2, [r3], #1
	for (end--; end > start; end--, start++) {
   105f4:	428b      	cmp	r3, r1
   105f6:	d3f7      	bcc.n	105e8 <_reverse_and_pad+0x1c>
}
   105f8:	bc10      	pop	{r4}
   105fa:	4770      	bx	lr
   105fc:	4770      	bx	lr

000105fe <_to_x>:
{
   105fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10600:	460d      	mov	r5, r1
   10602:	4601      	mov	r1, r0
   10604:	e007      	b.n	10616 <_to_x+0x18>
		*buf++ = '0' + d + (d > 9 ? ('a' - '0' - 10) : 0);
   10606:	2400      	movs	r4, #0
   10608:	4434      	add	r4, r6
   1060a:	3430      	adds	r4, #48	; 0x30
   1060c:	f801 4b01 	strb.w	r4, [r1], #1
	} while (n);
   10610:	42aa      	cmp	r2, r5
   10612:	d808      	bhi.n	10626 <_to_x+0x28>
		n /= base;
   10614:	463d      	mov	r5, r7
		int d = n % base;
   10616:	fbb5 f7f2 	udiv	r7, r5, r2
   1061a:	fb02 5617 	mls	r6, r2, r7, r5
		*buf++ = '0' + d + (d > 9 ? ('a' - '0' - 10) : 0);
   1061e:	2e09      	cmp	r6, #9
   10620:	ddf1      	ble.n	10606 <_to_x+0x8>
   10622:	2427      	movs	r4, #39	; 0x27
   10624:	e7f0      	b.n	10608 <_to_x+0xa>
	return _reverse_and_pad(buf0, buf, minlen);
   10626:	461a      	mov	r2, r3
   10628:	f7ff ffd0 	bl	105cc <_reverse_and_pad>
}
   1062c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001062e <_to_hex>:
{
   1062e:	b570      	push	{r4, r5, r6, lr}
   10630:	4605      	mov	r5, r0
	if (alt_form) {
   10632:	b132      	cbz	r2, 10642 <_to_hex+0x14>
		*buf++ = '0';
   10634:	4604      	mov	r4, r0
   10636:	2230      	movs	r2, #48	; 0x30
   10638:	f804 2b02 	strb.w	r2, [r4], #2
		*buf++ = 'x';
   1063c:	2278      	movs	r2, #120	; 0x78
   1063e:	7042      	strb	r2, [r0, #1]
   10640:	e000      	b.n	10644 <_to_hex+0x16>
   10642:	4604      	mov	r4, r0
	len = _to_x(buf, value, 16, precision);
   10644:	2210      	movs	r2, #16
   10646:	4620      	mov	r0, r4
   10648:	f7ff ffd9 	bl	105fe <_to_x>
   1064c:	4606      	mov	r6, r0
	if (prefix == 'X') {
   1064e:	9b04      	ldr	r3, [sp, #16]
   10650:	2b58      	cmp	r3, #88	; 0x58
   10652:	d002      	beq.n	1065a <_to_hex+0x2c>
	return len + (buf - buf0);
   10654:	1b60      	subs	r0, r4, r5
}
   10656:	4430      	add	r0, r6
   10658:	bd70      	pop	{r4, r5, r6, pc}
		_uc(buf0);
   1065a:	4628      	mov	r0, r5
   1065c:	f7ff ffa9 	bl	105b2 <_uc>
   10660:	e7f8      	b.n	10654 <_to_hex+0x26>

00010662 <_to_octal>:
{
   10662:	b538      	push	{r3, r4, r5, lr}
	if (alt_form) {
   10664:	b17a      	cbz	r2, 10686 <_to_octal+0x24>
		*buf++ = '0';
   10666:	4605      	mov	r5, r0
   10668:	2230      	movs	r2, #48	; 0x30
   1066a:	f805 2b01 	strb.w	r2, [r5], #1
		if (!value) {
   1066e:	b131      	cbz	r1, 1067e <_to_octal+0x1c>
	return (buf - buf0) + _to_x(buf, value, 8, precision);
   10670:	1a2c      	subs	r4, r5, r0
   10672:	2208      	movs	r2, #8
   10674:	4628      	mov	r0, r5
   10676:	f7ff ffc2 	bl	105fe <_to_x>
   1067a:	4420      	add	r0, r4
}
   1067c:	bd38      	pop	{r3, r4, r5, pc}
			*buf++ = 0;
   1067e:	2300      	movs	r3, #0
   10680:	7043      	strb	r3, [r0, #1]
			return 1;
   10682:	2001      	movs	r0, #1
   10684:	e7fa      	b.n	1067c <_to_octal+0x1a>
   10686:	4605      	mov	r5, r0
   10688:	e7f2      	b.n	10670 <_to_octal+0xe>

0001068a <_to_udec>:
{
   1068a:	b508      	push	{r3, lr}
	return _to_x(buf, value, 10, precision);
   1068c:	4613      	mov	r3, r2
   1068e:	220a      	movs	r2, #10
   10690:	f7ff ffb5 	bl	105fe <_to_x>
}
   10694:	bd08      	pop	{r3, pc}

00010696 <_to_dec>:
{
   10696:	b538      	push	{r3, r4, r5, lr}
   10698:	4605      	mov	r5, r0
	if (value < 0) {
   1069a:	2900      	cmp	r1, #0
   1069c:	db0b      	blt.n	106b6 <_to_dec+0x20>
	} else if (fplus) {
   1069e:	b19a      	cbz	r2, 106c8 <_to_dec+0x32>
		*buf++ = '+';
   106a0:	4604      	mov	r4, r0
   106a2:	232b      	movs	r3, #43	; 0x2b
   106a4:	f804 3b01 	strb.w	r3, [r4], #1
	return (buf + _to_udec(buf, (uint32_t) value, precision)) - start;
   106a8:	9a04      	ldr	r2, [sp, #16]
   106aa:	4620      	mov	r0, r4
   106ac:	f7ff ffed 	bl	1068a <_to_udec>
   106b0:	4420      	add	r0, r4
}
   106b2:	1b40      	subs	r0, r0, r5
   106b4:	bd38      	pop	{r3, r4, r5, pc}
		*buf++ = '-';
   106b6:	4604      	mov	r4, r0
   106b8:	232d      	movs	r3, #45	; 0x2d
   106ba:	f804 3b01 	strb.w	r3, [r4], #1
		if (value != 0x80000000) {
   106be:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   106c2:	d0f1      	beq.n	106a8 <_to_dec+0x12>
			value = -value;
   106c4:	4249      	negs	r1, r1
   106c6:	e7ef      	b.n	106a8 <_to_dec+0x12>
	} else if (fspace) {
   106c8:	b123      	cbz	r3, 106d4 <_to_dec+0x3e>
		*buf++ = ' ';
   106ca:	4604      	mov	r4, r0
   106cc:	2320      	movs	r3, #32
   106ce:	f804 3b01 	strb.w	r3, [r4], #1
   106d2:	e7e9      	b.n	106a8 <_to_dec+0x12>
   106d4:	4604      	mov	r4, r0
   106d6:	e7e7      	b.n	106a8 <_to_dec+0x12>

000106d8 <_rlrshift>:
{
   106d8:	b470      	push	{r4, r5, r6}
	*v = (*v & 1) + (*v >> 1);
   106da:	6806      	ldr	r6, [r0, #0]
   106dc:	6845      	ldr	r5, [r0, #4]
   106de:	2300      	movs	r3, #0
   106e0:	4619      	mov	r1, r3
   106e2:	f006 0301 	and.w	r3, r6, #1
   106e6:	0872      	lsrs	r2, r6, #1
   106e8:	ea42 72c5 	orr.w	r2, r2, r5, lsl #31
   106ec:	086c      	lsrs	r4, r5, #1
   106ee:	189b      	adds	r3, r3, r2
   106f0:	eb44 0101 	adc.w	r1, r4, r1
   106f4:	6003      	str	r3, [r0, #0]
   106f6:	6041      	str	r1, [r0, #4]
}
   106f8:	bc70      	pop	{r4, r5, r6}
   106fa:	4770      	bx	lr

000106fc <_get_digit>:
	if (*digit_count > 0) {
   106fc:	680b      	ldr	r3, [r1, #0]
   106fe:	2b00      	cmp	r3, #0
   10700:	dd16      	ble.n	10730 <_get_digit+0x34>
{
   10702:	b430      	push	{r4, r5}
		*digit_count -= 1;
   10704:	3b01      	subs	r3, #1
   10706:	600b      	str	r3, [r1, #0]
		*fr = *fr * 10U;
   10708:	6801      	ldr	r1, [r0, #0]
   1070a:	6844      	ldr	r4, [r0, #4]
   1070c:	00a5      	lsls	r5, r4, #2
   1070e:	008b      	lsls	r3, r1, #2
   10710:	ea45 7291 	orr.w	r2, r5, r1, lsr #30
   10714:	185b      	adds	r3, r3, r1
   10716:	eb44 0202 	adc.w	r2, r4, r2
   1071a:	18db      	adds	r3, r3, r3
   1071c:	4152      	adcs	r2, r2
		rval = ((*fr >> 60) & 0xF) + '0';
   1071e:	0f11      	lsrs	r1, r2, #28
   10720:	3130      	adds	r1, #48	; 0x30
		*fr &= 0x0FFFFFFFFFFFFFFFull;
   10722:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
   10726:	6003      	str	r3, [r0, #0]
   10728:	6042      	str	r2, [r0, #4]
}
   1072a:	b2c8      	uxtb	r0, r1
   1072c:	bc30      	pop	{r4, r5}
   1072e:	4770      	bx	lr
		rval = '0';
   10730:	2130      	movs	r1, #48	; 0x30
}
   10732:	b2c8      	uxtb	r0, r1
   10734:	4770      	bx	lr

00010736 <_atoi>:
{
   10736:	b410      	push	{r4}
	p = *sptr;
   10738:	6801      	ldr	r1, [r0, #0]
	p--;
   1073a:	3901      	subs	r1, #1
	i = 0;
   1073c:	2300      	movs	r3, #0
	while (isdigit(((int) *p))) {
   1073e:	780c      	ldrb	r4, [r1, #0]
   10740:	f1a4 0230 	sub.w	r2, r4, #48	; 0x30
   10744:	2a09      	cmp	r2, #9
   10746:	d806      	bhi.n	10756 <_atoi+0x20>
		i = 10 * i + *p++ - '0';
   10748:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   1074c:	005a      	lsls	r2, r3, #1
   1074e:	3101      	adds	r1, #1
   10750:	1913      	adds	r3, r2, r4
   10752:	3b30      	subs	r3, #48	; 0x30
   10754:	e7f3      	b.n	1073e <_atoi+0x8>
	*sptr = p;
   10756:	6001      	str	r1, [r0, #0]
}
   10758:	4618      	mov	r0, r3
   1075a:	bc10      	pop	{r4}
   1075c:	4770      	bx	lr

0001075e <_stdout_hook_default>:
}
   1075e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   10762:	4770      	bx	lr

00010764 <sprintf_out>:
	if (p->len > 1) { /* need to reserve a byte for EOS */
   10764:	684b      	ldr	r3, [r1, #4]
   10766:	2b01      	cmp	r3, #1
   10768:	dd07      	ble.n	1077a <sprintf_out+0x16>
		*(p->ptr) = c;
   1076a:	680b      	ldr	r3, [r1, #0]
   1076c:	7018      	strb	r0, [r3, #0]
		p->ptr += 1;
   1076e:	680b      	ldr	r3, [r1, #0]
   10770:	3301      	adds	r3, #1
   10772:	600b      	str	r3, [r1, #0]
		p->len -= 1;
   10774:	684b      	ldr	r3, [r1, #4]
   10776:	3b01      	subs	r3, #1
   10778:	604b      	str	r3, [r1, #4]
}
   1077a:	2000      	movs	r0, #0
   1077c:	4770      	bx	lr

0001077e <gpio_nrfx_write>:
{
   1077e:	b410      	push	{r4}
	return port->config->config_info;
   10780:	6804      	ldr	r4, [r0, #0]
   10782:	68a4      	ldr	r4, [r4, #8]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   10784:	6824      	ldr	r4, [r4, #0]
	return port->driver_data;
   10786:	6880      	ldr	r0, [r0, #8]
	if (access_op == GPIO_ACCESS_BY_PORT) {
   10788:	2901      	cmp	r1, #1
   1078a:	d011      	beq.n	107b0 <gpio_nrfx_write+0x32>
		if ((value > 0) ^ ((BIT(pin) & data->inverted) != 0)) {
   1078c:	3300      	adds	r3, #0
   1078e:	bf18      	it	ne
   10790:	2301      	movne	r3, #1
   10792:	69c1      	ldr	r1, [r0, #28]
   10794:	40d1      	lsrs	r1, r2
   10796:	f001 0101 	and.w	r1, r1, #1
   1079a:	b2c9      	uxtb	r1, r1
   1079c:	428b      	cmp	r3, r1
   1079e:	d00c      	beq.n	107ba <gpio_nrfx_write+0x3c>
			nrf_gpio_port_out_set(reg, BIT(pin));
   107a0:	2301      	movs	r3, #1
   107a2:	fa03 f202 	lsl.w	r2, r3, r2
    p_reg->OUTSET = set_mask;
   107a6:	f8c4 2508 	str.w	r2, [r4, #1288]	; 0x508
}
   107aa:	2000      	movs	r0, #0
   107ac:	bc10      	pop	{r4}
   107ae:	4770      	bx	lr
		nrf_gpio_port_out_write(reg, value ^ data->inverted);
   107b0:	69c2      	ldr	r2, [r0, #28]
   107b2:	4053      	eors	r3, r2
    p_reg->OUT = value;
   107b4:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
   107b8:	e7f7      	b.n	107aa <gpio_nrfx_write+0x2c>
			nrf_gpio_port_out_clear(reg, BIT(pin));
   107ba:	2301      	movs	r3, #1
   107bc:	fa03 f202 	lsl.w	r2, r3, r2
}


__STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
   107c0:	f8c4 250c 	str.w	r2, [r4, #1292]	; 0x50c
   107c4:	e7f1      	b.n	107aa <gpio_nrfx_write+0x2c>

000107c6 <gpio_nrfx_read>:
{
   107c6:	b4f0      	push	{r4, r5, r6, r7}
	return port->config->config_info;
   107c8:	6804      	ldr	r4, [r0, #0]
   107ca:	68a4      	ldr	r4, [r4, #8]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   107cc:	6824      	ldr	r4, [r4, #0]
	return port->driver_data;
   107ce:	6886      	ldr	r6, [r0, #8]
    return p_reg->DIR;
   107d0:	f8d4 7514 	ldr.w	r7, [r4, #1300]	; 0x514
    return p_reg->IN;
   107d4:	f8d4 5510 	ldr.w	r5, [r4, #1296]	; 0x510
    return p_reg->OUT;
   107d8:	f8d4 0504 	ldr.w	r0, [r4, #1284]	; 0x504
	u32_t port_val = (port_in | port_out) ^ data->inverted;
   107dc:	4068      	eors	r0, r5
   107de:	4038      	ands	r0, r7
   107e0:	4068      	eors	r0, r5
   107e2:	69f4      	ldr	r4, [r6, #28]
   107e4:	4060      	eors	r0, r4
	if (access_op == GPIO_ACCESS_BY_PORT) {
   107e6:	2901      	cmp	r1, #1
   107e8:	d006      	beq.n	107f8 <gpio_nrfx_read+0x32>
		*value = (port_val & BIT(pin)) ? 1 : 0;
   107ea:	40d0      	lsrs	r0, r2
   107ec:	f000 0001 	and.w	r0, r0, #1
   107f0:	6018      	str	r0, [r3, #0]
}
   107f2:	2000      	movs	r0, #0
   107f4:	bcf0      	pop	{r4, r5, r6, r7}
   107f6:	4770      	bx	lr
		*value = port_val;
   107f8:	6018      	str	r0, [r3, #0]
   107fa:	e7fa      	b.n	107f2 <gpio_nrfx_read+0x2c>

000107fc <gpio_nrfx_pin_manage_callback>:
{
   107fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10800:	4606      	mov	r6, r0
   10802:	4698      	mov	r8, r3
	return port->driver_data;
   10804:	6885      	ldr	r5, [r0, #8]
	if (access_op == GPIO_ACCESS_BY_PORT) {
   10806:	2901      	cmp	r1, #1
   10808:	d003      	beq.n	10812 <gpio_nrfx_pin_manage_callback+0x16>
		from_pin = pin;
   1080a:	b2d4      	uxtb	r4, r2
		to_pin   = pin;
   1080c:	4627      	mov	r7, r4
	int res = 0;
   1080e:	2300      	movs	r3, #0
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   10810:	e010      	b.n	10834 <gpio_nrfx_pin_manage_callback+0x38>
		to_pin   = 31U;
   10812:	271f      	movs	r7, #31
		from_pin = 0U;
   10814:	2400      	movs	r4, #0
   10816:	e7fa      	b.n	1080e <gpio_nrfx_pin_manage_callback+0x12>
		WRITE_BIT(data->int_en, curr_pin, enable);
   10818:	68eb      	ldr	r3, [r5, #12]
   1081a:	2201      	movs	r2, #1
   1081c:	40a2      	lsls	r2, r4
   1081e:	ea23 0302 	bic.w	r3, r3, r2
   10822:	60eb      	str	r3, [r5, #12]
		res = gpiote_pin_int_cfg(port, curr_pin);
   10824:	4621      	mov	r1, r4
   10826:	4630      	mov	r0, r6
   10828:	f7fa f862 	bl	a8f0 <gpiote_pin_int_cfg>
		if (res != 0) {
   1082c:	4603      	mov	r3, r0
   1082e:	b958      	cbnz	r0, 10848 <gpio_nrfx_pin_manage_callback+0x4c>
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   10830:	3401      	adds	r4, #1
   10832:	b2e4      	uxtb	r4, r4
   10834:	42a7      	cmp	r7, r4
   10836:	d307      	bcc.n	10848 <gpio_nrfx_pin_manage_callback+0x4c>
		WRITE_BIT(data->int_en, curr_pin, enable);
   10838:	f1b8 0f00 	cmp.w	r8, #0
   1083c:	d0ec      	beq.n	10818 <gpio_nrfx_pin_manage_callback+0x1c>
   1083e:	68eb      	ldr	r3, [r5, #12]
   10840:	2201      	movs	r2, #1
   10842:	40a2      	lsls	r2, r4
   10844:	4313      	orrs	r3, r2
   10846:	e7ec      	b.n	10822 <gpio_nrfx_pin_manage_callback+0x26>
}
   10848:	4618      	mov	r0, r3
   1084a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001084e <gpio_nrfx_pin_disable_callback>:
{
   1084e:	b508      	push	{r3, lr}
	return gpio_nrfx_pin_manage_callback(port, access_op, pin, false);
   10850:	2300      	movs	r3, #0
   10852:	f7ff ffd3 	bl	107fc <gpio_nrfx_pin_manage_callback>
}
   10856:	bd08      	pop	{r3, pc}

00010858 <gpio_nrfx_pin_enable_callback>:
{
   10858:	b508      	push	{r3, lr}
	return gpio_nrfx_pin_manage_callback(port, access_op, pin, true);
   1085a:	2301      	movs	r3, #1
   1085c:	f7ff ffce 	bl	107fc <gpio_nrfx_pin_manage_callback>
}
   10860:	bd08      	pop	{r3, pc}

00010862 <twim_0_init>:
			    POST_KERNEL,				       \
			    CONFIG_I2C_INIT_PRIORITY,			       \
			    &i2c_nrfx_twim_driver_api)

#ifdef CONFIG_I2C_0_NRF_TWIM
I2C_NRFX_TWIM_DEVICE(0);
   10862:	b510      	push	{r4, lr}
   10864:	b084      	sub	sp, #16
   10866:	4604      	mov	r4, r0
   10868:	2200      	movs	r2, #0
   1086a:	2101      	movs	r1, #1
   1086c:	2003      	movs	r0, #3
   1086e:	f7f8 fe4d 	bl	950c <z_irq_priority_set>
   10872:	2300      	movs	r3, #0
   10874:	9303      	str	r3, [sp, #12]
   10876:	231b      	movs	r3, #27
   10878:	9300      	str	r3, [sp, #0]
   1087a:	231a      	movs	r3, #26
   1087c:	9301      	str	r3, [sp, #4]
   1087e:	f04f 63c8 	mov.w	r3, #104857600	; 0x6400000
   10882:	9302      	str	r3, [sp, #8]
   10884:	4669      	mov	r1, sp
   10886:	4620      	mov	r0, r4
   10888:	f7fa fa88 	bl	ad9c <init_twim>
   1088c:	b004      	add	sp, #16
   1088e:	bd10      	pop	{r4, pc}

00010890 <uart_nrfx_config_get>:
{
   10890:	460b      	mov	r3, r1
	return dev->driver_data;
   10892:	6882      	ldr	r2, [r0, #8]
	*cfg = get_dev_data(dev)->uart_config;
   10894:	e892 0003 	ldmia.w	r2, {r0, r1}
   10898:	e883 0003 	stmia.w	r3, {r0, r1}
}
   1089c:	2000      	movs	r0, #0
   1089e:	4770      	bx	lr

000108a0 <uart_nrfx_irq_tx_ready_complete>:
{
   108a0:	b508      	push	{r3, lr}
	return event_txdrdy_check();
   108a2:	f7fa fb7f 	bl	afa4 <event_txdrdy_check>
}
   108a6:	bd08      	pop	{r3, pc}

000108a8 <uart_nrfx_irq_update>:
}
   108a8:	2001      	movs	r0, #1
   108aa:	4770      	bx	lr

000108ac <bytewise_bit_swap>:
	u32_t inp = (*(u32_t *)input);
   108ac:	6800      	ldr	r0, [r0, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
   108ae:	fa90 f3a0 	rbit	r3, r0
	return sys_cpu_to_be32((u32_t)__RBIT(inp));
   108b2:	0e1b      	lsrs	r3, r3, #24
   108b4:	fa90 f2a0 	rbit	r2, r0
   108b8:	0a12      	lsrs	r2, r2, #8
   108ba:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
   108be:	4313      	orrs	r3, r2
   108c0:	fa90 f2a0 	rbit	r2, r0
   108c4:	0212      	lsls	r2, r2, #8
   108c6:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
   108ca:	4313      	orrs	r3, r2
   108cc:	fa90 f0a0 	rbit	r0, r0
}
   108d0:	ea43 6000 	orr.w	r0, r3, r0, lsl #24
   108d4:	4770      	bx	lr

000108d6 <NRF_ESB_SYS_TIMER_IRQHandler>:
}
   108d6:	4770      	bx	lr

000108d8 <addr_conv>:
{
   108d8:	b508      	push	{r3, lr}
	return __REV(bytewise_bit_swap(addr));
   108da:	f7ff ffe7 	bl	108ac <bytewise_bit_swap>
}
   108de:	ba00      	rev	r0, r0
   108e0:	bd08      	pop	{r3, pc}

000108e2 <device_busy_set>:
	atomic_set_bit((atomic_t *) __device_busy_start,
				 (busy_dev - __device_init_start));
#else
	ARG_UNUSED(busy_dev);
#endif
}
   108e2:	4770      	bx	lr

000108e4 <device_busy_clear>:
	atomic_clear_bit((atomic_t *) __device_busy_start,
				 (busy_dev - __device_init_start));
#else
	ARG_UNUSED(busy_dev);
#endif
}
   108e4:	4770      	bx	lr

000108e6 <sys_power_save_idle>:

static void sys_power_save_idle(void)
{
   108e6:	b510      	push	{r4, lr}
	s32_t ticks = z_get_next_timeout_expiry();
   108e8:	f7fe fa4e 	bl	ed88 <z_get_next_timeout_expiry>
   108ec:	4604      	mov	r4, r0
	 * periods less than that.  This seems... silly, given that it
	 * saves no power and does not improve latency.  But it's an
	 * API we need to honor...
	 */
#ifdef CONFIG_SYS_CLOCK_EXISTS
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   108ee:	2802      	cmp	r0, #2
   108f0:	dd08      	ble.n	10904 <sys_power_save_idle+0x1e>
   108f2:	2101      	movs	r1, #1
   108f4:	f7fe fa98 	bl	ee28 <z_set_timeout_expiry>
#endif

	set_kernel_idle_time_in_ticks(ticks);
   108f8:	4620      	mov	r0, r4
   108fa:	f7fb fd9f 	bl	c43c <set_kernel_idle_time_in_ticks>
	if (_sys_suspend(ticks) == SYS_POWER_STATE_ACTIVE) {
		sys_pm_idle_exit_notify = 0U;
		k_cpu_idle();
	}
#else
	k_cpu_idle();
   108fe:	f7f8 fe95 	bl	962c <k_cpu_idle>
#endif
}
   10902:	bd10      	pop	{r4, pc}
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   10904:	2001      	movs	r0, #1
   10906:	e7f4      	b.n	108f2 <sys_power_save_idle+0xc>

00010908 <z_sys_power_save_idle_exit>:
#endif

void z_sys_power_save_idle_exit(s32_t ticks)
{
   10908:	b508      	push	{r3, lr}
	if (sys_pm_idle_exit_notify) {
		_sys_resume();
	}
#endif

	z_clock_idle_exit();
   1090a:	f7ff fd62 	bl	103d2 <z_clock_idle_exit>
}
   1090e:	bd08      	pop	{r3, pc}

00010910 <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
   10910:	b508      	push	{r3, lr}
	__asm__ volatile(
   10912:	f04f 0220 	mov.w	r2, #32
   10916:	f3ef 8311 	mrs	r3, BASEPRI
   1091a:	f382 8811 	msr	BASEPRI, r2
   1091e:	f3bf 8f6f 	isb	sy
		k_yield();
	}
#else
	for (;;) {
		(void)irq_lock();
		sys_power_save_idle();
   10922:	f7ff ffe0 	bl	108e6 <sys_power_save_idle>

		IDLE_YIELD_IF_COOP();
   10926:	e7f4      	b.n	10912 <idle+0x2>

00010928 <create_free_list>:
	slab->free_list = NULL;
   10928:	2200      	movs	r2, #0
   1092a:	6142      	str	r2, [r0, #20]
	p = slab->buffer;
   1092c:	6903      	ldr	r3, [r0, #16]
	for (j = 0U; j < slab->num_blocks; j++) {
   1092e:	6881      	ldr	r1, [r0, #8]
   10930:	4291      	cmp	r1, r2
   10932:	d906      	bls.n	10942 <create_free_list+0x1a>
		*(char **)p = slab->free_list;
   10934:	6941      	ldr	r1, [r0, #20]
   10936:	6019      	str	r1, [r3, #0]
		slab->free_list = p;
   10938:	6143      	str	r3, [r0, #20]
		p += slab->block_size;
   1093a:	68c1      	ldr	r1, [r0, #12]
   1093c:	440b      	add	r3, r1
	for (j = 0U; j < slab->num_blocks; j++) {
   1093e:	3201      	adds	r2, #1
   10940:	e7f5      	b.n	1092e <create_free_list+0x6>
}
   10942:	4770      	bx	lr

00010944 <k_mem_pool_init>:
{
   10944:	b508      	push	{r3, lr}
	sys_dlist_init(&w->waitq);
   10946:	f100 0214 	add.w	r2, r0, #20
	list->head = (sys_dnode_t *)list;
   1094a:	6142      	str	r2, [r0, #20]
	list->tail = (sys_dnode_t *)list;
   1094c:	6182      	str	r2, [r0, #24]
	z_sys_mem_pool_base_init(&p->base);
   1094e:	f7fe fdee 	bl	f52e <z_sys_mem_pool_base_init>
}
   10952:	bd08      	pop	{r3, pc}

00010954 <k_mem_pool_free>:
{
   10954:	b508      	push	{r3, lr}
	k_mem_pool_free_id(&block->id);
   10956:	3004      	adds	r0, #4
   10958:	f7fc f866 	bl	ca28 <k_mem_pool_free_id>
}
   1095c:	bd08      	pop	{r3, pc}

0001095e <k_mem_pool_malloc>:
	if (__builtin_add_overflow(size, sizeof(struct k_mem_block_id),
   1095e:	2300      	movs	r3, #0
   10960:	2204      	movs	r2, #4
   10962:	188a      	adds	r2, r1, r2
   10964:	d211      	bcs.n	1098a <k_mem_pool_malloc+0x2c>
   10966:	b993      	cbnz	r3, 1098e <k_mem_pool_malloc+0x30>
{
   10968:	b500      	push	{lr}
   1096a:	b083      	sub	sp, #12
	if (k_mem_pool_alloc(pool, &block, size, K_NO_WAIT) != 0) {
   1096c:	4669      	mov	r1, sp
   1096e:	f7fb ffbf 	bl	c8f0 <k_mem_pool_alloc>
   10972:	b970      	cbnz	r0, 10992 <k_mem_pool_malloc+0x34>
	(void)memcpy(block.data, &block.id, sizeof(struct k_mem_block_id));
   10974:	2204      	movs	r2, #4
   10976:	eb0d 0102 	add.w	r1, sp, r2
   1097a:	9800      	ldr	r0, [sp, #0]
   1097c:	f7ff fdd8 	bl	10530 <memcpy>
	return (char *)block.data + sizeof(struct k_mem_block_id);
   10980:	9800      	ldr	r0, [sp, #0]
   10982:	3004      	adds	r0, #4
}
   10984:	b003      	add	sp, #12
   10986:	f85d fb04 	ldr.w	pc, [sp], #4
	if (__builtin_add_overflow(size, sizeof(struct k_mem_block_id),
   1098a:	2301      	movs	r3, #1
   1098c:	e7eb      	b.n	10966 <k_mem_pool_malloc+0x8>
		return NULL;
   1098e:	2000      	movs	r0, #0
}
   10990:	4770      	bx	lr
		return NULL;
   10992:	2000      	movs	r0, #0
   10994:	e7f6      	b.n	10984 <k_mem_pool_malloc+0x26>

00010996 <k_free>:
	if (ptr != NULL) {
   10996:	b120      	cbz	r0, 109a2 <k_free+0xc>
{
   10998:	b508      	push	{r3, lr}
		k_mem_pool_free_id(ptr);
   1099a:	3804      	subs	r0, #4
   1099c:	f7fc f844 	bl	ca28 <k_mem_pool_free_id>
}
   109a0:	bd08      	pop	{r3, pc}
   109a2:	4770      	bx	lr

000109a4 <new_prio_for_inheritance>:
	int new_prio = z_is_prio_higher(target, limit) ? target : limit;
   109a4:	4288      	cmp	r0, r1
   109a6:	da00      	bge.n	109aa <new_prio_for_inheritance+0x6>
   109a8:	4601      	mov	r1, r0
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
   109aa:	2900      	cmp	r1, #0
   109ac:	db01      	blt.n	109b2 <new_prio_for_inheritance+0xe>
   109ae:	4608      	mov	r0, r1
   109b0:	4770      	bx	lr
   109b2:	2000      	movs	r0, #0
}
   109b4:	4770      	bx	lr

000109b6 <adjust_owner_prio>:
{
   109b6:	b508      	push	{r3, lr}
	if (mutex->owner->base.prio != new_prio) {
   109b8:	6880      	ldr	r0, [r0, #8]
   109ba:	f990 300e 	ldrsb.w	r3, [r0, #14]
   109be:	428b      	cmp	r3, r1
   109c0:	d100      	bne.n	109c4 <adjust_owner_prio+0xe>
}
   109c2:	bd08      	pop	{r3, pc}
		z_thread_priority_set(mutex->owner, new_prio);
   109c4:	f7fd fa5e 	bl	de84 <z_thread_priority_set>
}
   109c8:	e7fb      	b.n	109c2 <adjust_owner_prio+0xc>

000109ca <z_impl_k_mutex_init>:
	mutex->owner = NULL;
   109ca:	2300      	movs	r3, #0
   109cc:	6083      	str	r3, [r0, #8]
	mutex->lock_count = 0U;
   109ce:	60c3      	str	r3, [r0, #12]
	list->head = (sys_dnode_t *)list;
   109d0:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
   109d2:	6040      	str	r0, [r0, #4]
}
   109d4:	4770      	bx	lr

000109d6 <prepare_thread_to_run>:
{
   109d6:	b538      	push	{r3, r4, r5, lr}
   109d8:	4604      	mov	r4, r0
   109da:	460d      	mov	r5, r1
	u8_t state = thread->base.thread_state;
   109dc:	7b43      	ldrb	r3, [r0, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   109de:	f013 0f1f 	tst.w	r3, #31
   109e2:	d105      	bne.n	109f0 <prepare_thread_to_run+0x1a>
	return node->next != NULL;
   109e4:	6983      	ldr	r3, [r0, #24]
   109e6:	b10b      	cbz	r3, 109ec <prepare_thread_to_run+0x16>
   109e8:	2300      	movs	r3, #0
   109ea:	e002      	b.n	109f2 <prepare_thread_to_run+0x1c>
   109ec:	2301      	movs	r3, #1
   109ee:	e000      	b.n	109f2 <prepare_thread_to_run+0x1c>
   109f0:	2300      	movs	r3, #0
	if (z_is_thread_ready(thread)) {
   109f2:	b91b      	cbnz	r3, 109fc <prepare_thread_to_run+0x26>
   109f4:	2300      	movs	r3, #0
   109f6:	66a3      	str	r3, [r4, #104]	; 0x68
   109f8:	6165      	str	r5, [r4, #20]
}
   109fa:	bd38      	pop	{r3, r4, r5, pc}
		z_add_thread_to_ready_q(thread);
   109fc:	4620      	mov	r0, r4
   109fe:	f7fc ff01 	bl	d804 <z_add_thread_to_ready_q>
   10a02:	e7f7      	b.n	109f4 <prepare_thread_to_run+0x1e>

00010a04 <z_queue_node_peek>:
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (u8_t)0)) {
   10a04:	4603      	mov	r3, r0
   10a06:	b168      	cbz	r0, 10a24 <z_queue_node_peek+0x20>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   10a08:	6802      	ldr	r2, [r0, #0]
   10a0a:	f012 0f03 	tst.w	r2, #3
   10a0e:	d009      	beq.n	10a24 <z_queue_node_peek+0x20>
{
   10a10:	b510      	push	{r4, lr}
		ret = anode->data;
   10a12:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   10a14:	b911      	cbnz	r1, 10a1c <z_queue_node_peek+0x18>
		ret = anode->data;
   10a16:	4623      	mov	r3, r4
}
   10a18:	4618      	mov	r0, r3
   10a1a:	bd10      	pop	{r4, pc}
			k_free(anode);
   10a1c:	f7ff ffbb 	bl	10996 <k_free>
		ret = anode->data;
   10a20:	4623      	mov	r3, r4
   10a22:	e7f9      	b.n	10a18 <z_queue_node_peek+0x14>
}
   10a24:	4618      	mov	r0, r3
   10a26:	4770      	bx	lr

00010a28 <z_impl_k_queue_init>:
	list->head = NULL;
   10a28:	2300      	movs	r3, #0
   10a2a:	6003      	str	r3, [r0, #0]
	list->tail = NULL;
   10a2c:	6043      	str	r3, [r0, #4]
	queue->lock = (struct k_spinlock) {};
   10a2e:	6083      	str	r3, [r0, #8]
   10a30:	f100 030c 	add.w	r3, r0, #12
	list->head = (sys_dnode_t *)list;
   10a34:	60c3      	str	r3, [r0, #12]
	list->tail = (sys_dnode_t *)list;
   10a36:	6103      	str	r3, [r0, #16]
}
   10a38:	4770      	bx	lr

00010a3a <k_queue_append>:
{
   10a3a:	b508      	push	{r3, lr}
	(void)queue_insert(queue, sys_sflist_peek_tail(&queue->data_q),
   10a3c:	2300      	movs	r3, #0
   10a3e:	460a      	mov	r2, r1
   10a40:	6841      	ldr	r1, [r0, #4]
   10a42:	f7fc fa5b 	bl	cefc <queue_insert>
}
   10a46:	bd08      	pop	{r3, pc}

00010a48 <z_is_t1_higher_prio_than_t2>:
	if (t1->base.prio < t2->base.prio) {
   10a48:	f990 200e 	ldrsb.w	r2, [r0, #14]
   10a4c:	f991 300e 	ldrsb.w	r3, [r1, #14]
   10a50:	429a      	cmp	r2, r3
   10a52:	db01      	blt.n	10a58 <z_is_t1_higher_prio_than_t2+0x10>
	return false;
   10a54:	2000      	movs	r0, #0
   10a56:	4770      	bx	lr
		return true;
   10a58:	2001      	movs	r0, #1
}
   10a5a:	4770      	bx	lr

00010a5c <z_priq_dumb_best>:
	return list->head == list;
   10a5c:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   10a5e:	4298      	cmp	r0, r3
   10a60:	d001      	beq.n	10a66 <z_priq_dumb_best+0xa>
}
   10a62:	4618      	mov	r0, r3
   10a64:	4770      	bx	lr
	struct k_thread *t = NULL;
   10a66:	2300      	movs	r3, #0
	return t;
   10a68:	e7fb      	b.n	10a62 <z_priq_dumb_best+0x6>

00010a6a <z_unpend_all>:
{
   10a6a:	b538      	push	{r3, r4, r5, lr}
   10a6c:	4605      	mov	r5, r0
	int need_sched = 0;
   10a6e:	2000      	movs	r0, #0
	while ((th = z_waitq_head(wait_q)) != NULL) {
   10a70:	e004      	b.n	10a7c <z_unpend_all+0x12>
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   10a72:	2301      	movs	r3, #1
   10a74:	e000      	b.n	10a78 <z_unpend_all+0xe>
   10a76:	2300      	movs	r3, #0
		need_sched = 1;
   10a78:	2001      	movs	r0, #1
	if (z_is_thread_ready(thread)) {
   10a7a:	b97b      	cbnz	r3, 10a9c <z_unpend_all+0x32>
	return list->head == list;
   10a7c:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   10a7e:	42a5      	cmp	r5, r4
   10a80:	d011      	beq.n	10aa6 <z_unpend_all+0x3c>
	while ((th = z_waitq_head(wait_q)) != NULL) {
   10a82:	b184      	cbz	r4, 10aa6 <z_unpend_all+0x3c>
		z_unpend_thread(th);
   10a84:	4620      	mov	r0, r4
   10a86:	f7fc fd81 	bl	d58c <z_unpend_thread>
	u8_t state = thread->base.thread_state;
   10a8a:	7b63      	ldrb	r3, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   10a8c:	f013 0f1f 	tst.w	r3, #31
   10a90:	d1f1      	bne.n	10a76 <z_unpend_all+0xc>
	return node->next != NULL;
   10a92:	69a3      	ldr	r3, [r4, #24]
   10a94:	2b00      	cmp	r3, #0
   10a96:	d0ec      	beq.n	10a72 <z_unpend_all+0x8>
   10a98:	2300      	movs	r3, #0
   10a9a:	e7ed      	b.n	10a78 <z_unpend_all+0xe>
		z_add_thread_to_ready_q(thread);
   10a9c:	4620      	mov	r0, r4
   10a9e:	f7fc feb1 	bl	d804 <z_add_thread_to_ready_q>
		need_sched = 1;
   10aa2:	2001      	movs	r0, #1
   10aa4:	e7ea      	b.n	10a7c <z_unpend_all+0x12>
}
   10aa6:	bd38      	pop	{r3, r4, r5, pc}

00010aa8 <do_sem_give>:
{
   10aa8:	b538      	push	{r3, r4, r5, lr}
   10aaa:	4605      	mov	r5, r0
	struct k_thread *thread = z_unpend_first_thread(&sem->wait_q);
   10aac:	f7fd faa4 	bl	dff8 <z_unpend_first_thread>
	if (thread != NULL) {
   10ab0:	b198      	cbz	r0, 10ada <do_sem_give+0x32>
   10ab2:	4604      	mov	r4, r0
	u8_t state = thread->base.thread_state;
   10ab4:	7b43      	ldrb	r3, [r0, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   10ab6:	f013 0f1f 	tst.w	r3, #31
   10aba:	d105      	bne.n	10ac8 <do_sem_give+0x20>
   10abc:	6983      	ldr	r3, [r0, #24]
   10abe:	b10b      	cbz	r3, 10ac4 <do_sem_give+0x1c>
   10ac0:	2300      	movs	r3, #0
   10ac2:	e002      	b.n	10aca <do_sem_give+0x22>
   10ac4:	2301      	movs	r3, #1
   10ac6:	e000      	b.n	10aca <do_sem_give+0x22>
   10ac8:	2300      	movs	r3, #0
	if (z_is_thread_ready(thread)) {
   10aca:	b913      	cbnz	r3, 10ad2 <do_sem_give+0x2a>
   10acc:	2300      	movs	r3, #0
   10ace:	66a3      	str	r3, [r4, #104]	; 0x68
}
   10ad0:	bd38      	pop	{r3, r4, r5, pc}
		z_add_thread_to_ready_q(thread);
   10ad2:	4620      	mov	r0, r4
   10ad4:	f7fc fe96 	bl	d804 <z_add_thread_to_ready_q>
   10ad8:	e7f8      	b.n	10acc <do_sem_give+0x24>
	sem->count += (sem->count != sem->limit) ? 1U : 0U;
   10ada:	68ab      	ldr	r3, [r5, #8]
   10adc:	68ea      	ldr	r2, [r5, #12]
   10ade:	4293      	cmp	r3, r2
   10ae0:	d003      	beq.n	10aea <do_sem_give+0x42>
   10ae2:	2201      	movs	r2, #1
   10ae4:	4413      	add	r3, r2
   10ae6:	60ab      	str	r3, [r5, #8]
}
   10ae8:	e7f2      	b.n	10ad0 <do_sem_give+0x28>
	sem->count += (sem->count != sem->limit) ? 1U : 0U;
   10aea:	2200      	movs	r2, #0
   10aec:	e7fa      	b.n	10ae4 <do_sem_give+0x3c>

00010aee <z_impl_k_thread_name_set>:
}
   10aee:	4770      	bx	lr

00010af0 <z_impl_k_thread_name_get>:
}
   10af0:	2000      	movs	r0, #0
   10af2:	4770      	bx	lr

00010af4 <z_thread_single_abort>:
{
   10af4:	b510      	push	{r4, lr}
   10af6:	4604      	mov	r4, r0
	if (thread->fn_abort != NULL) {
   10af8:	6d03      	ldr	r3, [r0, #80]	; 0x50
   10afa:	b103      	cbz	r3, 10afe <z_thread_single_abort+0xa>
		thread->fn_abort();
   10afc:	4798      	blx	r3
	u8_t state = thread->base.thread_state;
   10afe:	7b63      	ldrb	r3, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   10b00:	f013 0f1f 	tst.w	r3, #31
   10b04:	d105      	bne.n	10b12 <z_thread_single_abort+0x1e>
   10b06:	69a2      	ldr	r2, [r4, #24]
   10b08:	b10a      	cbz	r2, 10b0e <z_thread_single_abort+0x1a>
   10b0a:	2200      	movs	r2, #0
   10b0c:	e002      	b.n	10b14 <z_thread_single_abort+0x20>
   10b0e:	2201      	movs	r2, #1
   10b10:	e000      	b.n	10b14 <z_thread_single_abort+0x20>
   10b12:	2200      	movs	r2, #0
	if (z_is_thread_ready(thread)) {
   10b14:	b96a      	cbnz	r2, 10b32 <z_thread_single_abort+0x3e>
		if (z_is_thread_pending(thread)) {
   10b16:	f013 0f02 	tst.w	r3, #2
   10b1a:	d10e      	bne.n	10b3a <z_thread_single_abort+0x46>
   10b1c:	69a3      	ldr	r3, [r4, #24]
		if (z_is_thread_timeout_active(thread)) {
   10b1e:	b11b      	cbz	r3, 10b28 <z_thread_single_abort+0x34>
	return z_abort_timeout(&thread->base.timeout);
   10b20:	f104 0018 	add.w	r0, r4, #24
   10b24:	f7fe f8d8 	bl	ecd8 <z_abort_timeout>
	thread->base.thread_state |= _THREAD_DEAD;
   10b28:	7b63      	ldrb	r3, [r4, #13]
   10b2a:	f043 0308 	orr.w	r3, r3, #8
   10b2e:	7363      	strb	r3, [r4, #13]
}
   10b30:	bd10      	pop	{r4, pc}
		z_remove_thread_from_ready_q(thread);
   10b32:	4620      	mov	r0, r4
   10b34:	f7fd f84a 	bl	dbcc <z_remove_thread_from_ready_q>
   10b38:	e7f6      	b.n	10b28 <z_thread_single_abort+0x34>
			z_unpend_thread_no_timeout(thread);
   10b3a:	4620      	mov	r0, r4
   10b3c:	f7fc fb9a 	bl	d274 <z_unpend_thread_no_timeout>
   10b40:	e7ec      	b.n	10b1c <z_thread_single_abort+0x28>

00010b42 <z_init_thread_base>:
	thread_base->user_options = (u8_t)options;
   10b42:	7303      	strb	r3, [r0, #12]
	thread_base->thread_state = (u8_t)initial_state;
   10b44:	7342      	strb	r2, [r0, #13]
	thread_base->prio = priority;
   10b46:	7381      	strb	r1, [r0, #14]
	thread_base->sched_locked = 0U;
   10b48:	2300      	movs	r3, #0
   10b4a:	73c3      	strb	r3, [r0, #15]
	node->next = NULL;
   10b4c:	6183      	str	r3, [r0, #24]
	node->prev = NULL;
   10b4e:	61c3      	str	r3, [r0, #28]
}
   10b50:	4770      	bx	lr

00010b52 <remove_timeout>:
{
   10b52:	b510      	push	{r4, lr}
   10b54:	4604      	mov	r4, r0
	if (next(t) != NULL) {
   10b56:	f7fd ffd3 	bl	eb00 <next>
   10b5a:	b118      	cbz	r0, 10b64 <remove_timeout+0x12>
		next(t)->dticks += t->dticks;
   10b5c:	68a1      	ldr	r1, [r4, #8]
   10b5e:	6883      	ldr	r3, [r0, #8]
   10b60:	440b      	add	r3, r1
   10b62:	6083      	str	r3, [r0, #8]
	node->prev->next = node->next;
   10b64:	6862      	ldr	r2, [r4, #4]
   10b66:	6823      	ldr	r3, [r4, #0]
   10b68:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   10b6a:	6862      	ldr	r2, [r4, #4]
   10b6c:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   10b6e:	2300      	movs	r3, #0
   10b70:	6023      	str	r3, [r4, #0]
	node->prev = NULL;
   10b72:	6063      	str	r3, [r4, #4]
}
   10b74:	bd10      	pop	{r4, pc}

00010b76 <z_tick_get_32>:

u32_t z_tick_get_32(void)
{
   10b76:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (u32_t)z_tick_get();
   10b78:	f7fe fa76 	bl	f068 <z_tick_get>
#else
	return (u32_t)curr_tick;
#endif
}
   10b7c:	bd08      	pop	{r3, pc}

00010b7e <_OffsetAbsSyms>:
					    sizeof(struct _preempt_float));
#else
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread));
#endif

GEN_ABS_SYM_END
   10b7e:	4770      	bx	lr
